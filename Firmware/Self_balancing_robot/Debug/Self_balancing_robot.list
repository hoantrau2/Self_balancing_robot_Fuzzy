
Self_balancing_robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009774  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b0  08009888  08009888  00019888  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c38  08009c38  00020118  2**0
                  CONTENTS
  4 .ARM          00000000  08009c38  08009c38  00020118  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009c38  08009c38  00020118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c38  08009c38  00019c38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009c3c  08009c3c  00019c3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000118  20000000  08009c40  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000614  20000118  08009d58  00020118  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000072c  08009d58  0002072c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020118  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020141  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013717  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029ce  00000000  00000000  0003389b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001388  00000000  00000000  00036270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f69  00000000  00000000  000375f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019533  00000000  00000000  00038561  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000165ea  00000000  00000000  00051a94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f50b  00000000  00000000  0006807e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005d8c  00000000  00000000  000f758c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009b  00000000  00000000  000fd318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000118 	.word	0x20000118
 800012c:	00000000 	.word	0x00000000
 8000130:	0800986c 	.word	0x0800986c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000011c 	.word	0x2000011c
 800014c:	0800986c 	.word	0x0800986c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2iz>:
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d8:	d30f      	bcc.n	80010fa <__aeabi_f2iz+0x2a>
 80010da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d90d      	bls.n	8001100 <__aeabi_f2iz+0x30>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ec:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010f0:	fa23 f002 	lsr.w	r0, r3, r2
 80010f4:	bf18      	it	ne
 80010f6:	4240      	negne	r0, r0
 80010f8:	4770      	bx	lr
 80010fa:	f04f 0000 	mov.w	r0, #0
 80010fe:	4770      	bx	lr
 8001100:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001104:	d101      	bne.n	800110a <__aeabi_f2iz+0x3a>
 8001106:	0242      	lsls	r2, r0, #9
 8001108:	d105      	bne.n	8001116 <__aeabi_f2iz+0x46>
 800110a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800110e:	bf08      	it	eq
 8001110:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001114:	4770      	bx	lr
 8001116:	f04f 0000 	mov.w	r0, #0
 800111a:	4770      	bx	lr

0800111c <__aeabi_f2uiz>:
 800111c:	0042      	lsls	r2, r0, #1
 800111e:	d20e      	bcs.n	800113e <__aeabi_f2uiz+0x22>
 8001120:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001124:	d30b      	bcc.n	800113e <__aeabi_f2uiz+0x22>
 8001126:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800112a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800112e:	d409      	bmi.n	8001144 <__aeabi_f2uiz+0x28>
 8001130:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001134:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001138:	fa23 f002 	lsr.w	r0, r3, r2
 800113c:	4770      	bx	lr
 800113e:	f04f 0000 	mov.w	r0, #0
 8001142:	4770      	bx	lr
 8001144:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001148:	d101      	bne.n	800114e <__aeabi_f2uiz+0x32>
 800114a:	0242      	lsls	r2, r0, #9
 800114c:	d102      	bne.n	8001154 <__aeabi_f2uiz+0x38>
 800114e:	f04f 30ff 	mov.w	r0, #4294967295
 8001152:	4770      	bx	lr
 8001154:	f04f 0000 	mov.w	r0, #0
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop

0800115c <SBR1_init>:
static const float u_PS_p[] = { 0.2500f };
static const float u_PM_p[] = { 0.3500f };//0.6670
static const float u_PB_p[] = { 0.51900f };


void SBR1_init( void ){
 800115c:	b580      	push	{r7, lr}
 800115e:	b08a      	sub	sp, #40	; 0x28
 8001160:	af0a      	add	r7, sp, #40	; 0x28
    /* Set inputs */
    qFIS_InputSetup( SBR1_inputs, theta, -1.0000f, 1.0000f );
 8001162:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001166:	4a8d      	ldr	r2, [pc, #564]	; (800139c <SBR1_init+0x240>)
 8001168:	2100      	movs	r1, #0
 800116a:	488d      	ldr	r0, [pc, #564]	; (80013a0 <SBR1_init+0x244>)
 800116c:	f001 fcf6 	bl	8002b5c <qFIS_InputSetup>
    qFIS_InputSetup( SBR1_inputs, thetadot, -1.0000f, 1.0000f );
 8001170:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001174:	4a89      	ldr	r2, [pc, #548]	; (800139c <SBR1_init+0x240>)
 8001176:	2101      	movs	r1, #1
 8001178:	4889      	ldr	r0, [pc, #548]	; (80013a0 <SBR1_init+0x244>)
 800117a:	f001 fcef 	bl	8002b5c <qFIS_InputSetup>
    /* Set outputs */
    qFIS_OutputSetup( SBR1_outputs, u, -1.0000f, 1.0000f );
 800117e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001182:	4a86      	ldr	r2, [pc, #536]	; (800139c <SBR1_init+0x240>)
 8001184:	2100      	movs	r1, #0
 8001186:	4887      	ldr	r0, [pc, #540]	; (80013a4 <SBR1_init+0x248>)
 8001188:	f001 fd13 	bl	8002bb2 <qFIS_OutputSetup>
    /* Set membership functions for the inputs */
    qFIS_SetMF( MFin, theta, theta_NB, trapmf, NULL, theta_NB_p, 1.0f );
 800118c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001190:	9302      	str	r3, [sp, #8]
 8001192:	4b85      	ldr	r3, [pc, #532]	; (80013a8 <SBR1_init+0x24c>)
 8001194:	9301      	str	r3, [sp, #4]
 8001196:	2300      	movs	r3, #0
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	2302      	movs	r3, #2
 800119c:	2200      	movs	r2, #0
 800119e:	2100      	movs	r1, #0
 80011a0:	4882      	ldr	r0, [pc, #520]	; (80013ac <SBR1_init+0x250>)
 80011a2:	f001 fdaf 	bl	8002d04 <qFIS_SetMF>
    qFIS_SetMF( MFin, theta, theta_NS, trapmf, NULL, theta_NS_p, 1.0f );
 80011a6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80011aa:	9302      	str	r3, [sp, #8]
 80011ac:	4b80      	ldr	r3, [pc, #512]	; (80013b0 <SBR1_init+0x254>)
 80011ae:	9301      	str	r3, [sp, #4]
 80011b0:	2300      	movs	r3, #0
 80011b2:	9300      	str	r3, [sp, #0]
 80011b4:	2302      	movs	r3, #2
 80011b6:	2201      	movs	r2, #1
 80011b8:	2100      	movs	r1, #0
 80011ba:	487c      	ldr	r0, [pc, #496]	; (80013ac <SBR1_init+0x250>)
 80011bc:	f001 fda2 	bl	8002d04 <qFIS_SetMF>
    qFIS_SetMF( MFin, theta, theta_ZE, trimf, NULL, theta_ZE_p, 1.0f );
 80011c0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80011c4:	9302      	str	r3, [sp, #8]
 80011c6:	4b7b      	ldr	r3, [pc, #492]	; (80013b4 <SBR1_init+0x258>)
 80011c8:	9301      	str	r3, [sp, #4]
 80011ca:	2300      	movs	r3, #0
 80011cc:	9300      	str	r3, [sp, #0]
 80011ce:	2301      	movs	r3, #1
 80011d0:	2202      	movs	r2, #2
 80011d2:	2100      	movs	r1, #0
 80011d4:	4875      	ldr	r0, [pc, #468]	; (80013ac <SBR1_init+0x250>)
 80011d6:	f001 fd95 	bl	8002d04 <qFIS_SetMF>
    qFIS_SetMF( MFin, theta, theta_PS, trapmf, NULL, theta_PS_p, 1.0f );
 80011da:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80011de:	9302      	str	r3, [sp, #8]
 80011e0:	4b75      	ldr	r3, [pc, #468]	; (80013b8 <SBR1_init+0x25c>)
 80011e2:	9301      	str	r3, [sp, #4]
 80011e4:	2300      	movs	r3, #0
 80011e6:	9300      	str	r3, [sp, #0]
 80011e8:	2302      	movs	r3, #2
 80011ea:	2203      	movs	r2, #3
 80011ec:	2100      	movs	r1, #0
 80011ee:	486f      	ldr	r0, [pc, #444]	; (80013ac <SBR1_init+0x250>)
 80011f0:	f001 fd88 	bl	8002d04 <qFIS_SetMF>
    qFIS_SetMF( MFin, theta, theta_PB, trapmf, NULL, theta_PB_p, 1.0f );
 80011f4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80011f8:	9302      	str	r3, [sp, #8]
 80011fa:	4b70      	ldr	r3, [pc, #448]	; (80013bc <SBR1_init+0x260>)
 80011fc:	9301      	str	r3, [sp, #4]
 80011fe:	2300      	movs	r3, #0
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	2302      	movs	r3, #2
 8001204:	2204      	movs	r2, #4
 8001206:	2100      	movs	r1, #0
 8001208:	4868      	ldr	r0, [pc, #416]	; (80013ac <SBR1_init+0x250>)
 800120a:	f001 fd7b 	bl	8002d04 <qFIS_SetMF>
    qFIS_SetMF( MFin, thetadot, thetadot_NB, trimf, NULL, thetadot_NB_p, 1.0f );
 800120e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001212:	9302      	str	r3, [sp, #8]
 8001214:	4b6a      	ldr	r3, [pc, #424]	; (80013c0 <SBR1_init+0x264>)
 8001216:	9301      	str	r3, [sp, #4]
 8001218:	2300      	movs	r3, #0
 800121a:	9300      	str	r3, [sp, #0]
 800121c:	2301      	movs	r3, #1
 800121e:	2205      	movs	r2, #5
 8001220:	2101      	movs	r1, #1
 8001222:	4862      	ldr	r0, [pc, #392]	; (80013ac <SBR1_init+0x250>)
 8001224:	f001 fd6e 	bl	8002d04 <qFIS_SetMF>
    qFIS_SetMF( MFin, thetadot, thetadot_NS, trimf, NULL, thetadot_NS_p, 1.0f );
 8001228:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800122c:	9302      	str	r3, [sp, #8]
 800122e:	4b65      	ldr	r3, [pc, #404]	; (80013c4 <SBR1_init+0x268>)
 8001230:	9301      	str	r3, [sp, #4]
 8001232:	2300      	movs	r3, #0
 8001234:	9300      	str	r3, [sp, #0]
 8001236:	2301      	movs	r3, #1
 8001238:	2206      	movs	r2, #6
 800123a:	2101      	movs	r1, #1
 800123c:	485b      	ldr	r0, [pc, #364]	; (80013ac <SBR1_init+0x250>)
 800123e:	f001 fd61 	bl	8002d04 <qFIS_SetMF>
    qFIS_SetMF( MFin, thetadot, thetadot_ZE, trimf, NULL, thetadot_ZE_p, 1.0f );
 8001242:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001246:	9302      	str	r3, [sp, #8]
 8001248:	4b5f      	ldr	r3, [pc, #380]	; (80013c8 <SBR1_init+0x26c>)
 800124a:	9301      	str	r3, [sp, #4]
 800124c:	2300      	movs	r3, #0
 800124e:	9300      	str	r3, [sp, #0]
 8001250:	2301      	movs	r3, #1
 8001252:	2207      	movs	r2, #7
 8001254:	2101      	movs	r1, #1
 8001256:	4855      	ldr	r0, [pc, #340]	; (80013ac <SBR1_init+0x250>)
 8001258:	f001 fd54 	bl	8002d04 <qFIS_SetMF>
    qFIS_SetMF( MFin, thetadot, thetadot_PS, trimf, NULL, thetadot_PS_p, 1.0f );
 800125c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001260:	9302      	str	r3, [sp, #8]
 8001262:	4b5a      	ldr	r3, [pc, #360]	; (80013cc <SBR1_init+0x270>)
 8001264:	9301      	str	r3, [sp, #4]
 8001266:	2300      	movs	r3, #0
 8001268:	9300      	str	r3, [sp, #0]
 800126a:	2301      	movs	r3, #1
 800126c:	2208      	movs	r2, #8
 800126e:	2101      	movs	r1, #1
 8001270:	484e      	ldr	r0, [pc, #312]	; (80013ac <SBR1_init+0x250>)
 8001272:	f001 fd47 	bl	8002d04 <qFIS_SetMF>
    qFIS_SetMF( MFin, thetadot, thetadot_PB, trimf, NULL, thetadot_PB_p, 1.0f );
 8001276:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800127a:	9302      	str	r3, [sp, #8]
 800127c:	4b54      	ldr	r3, [pc, #336]	; (80013d0 <SBR1_init+0x274>)
 800127e:	9301      	str	r3, [sp, #4]
 8001280:	2300      	movs	r3, #0
 8001282:	9300      	str	r3, [sp, #0]
 8001284:	2301      	movs	r3, #1
 8001286:	2209      	movs	r2, #9
 8001288:	2101      	movs	r1, #1
 800128a:	4848      	ldr	r0, [pc, #288]	; (80013ac <SBR1_init+0x250>)
 800128c:	f001 fd3a 	bl	8002d04 <qFIS_SetMF>
    /* Set membership functions for the outputs */
    qFIS_SetMF( MFout, u, u_NB, constantmf, NULL, u_NB_p, 1.0f );
 8001290:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001294:	9302      	str	r3, [sp, #8]
 8001296:	4b4f      	ldr	r3, [pc, #316]	; (80013d4 <SBR1_init+0x278>)
 8001298:	9301      	str	r3, [sp, #4]
 800129a:	2300      	movs	r3, #0
 800129c:	9300      	str	r3, [sp, #0]
 800129e:	2313      	movs	r3, #19
 80012a0:	2200      	movs	r2, #0
 80012a2:	2100      	movs	r1, #0
 80012a4:	484c      	ldr	r0, [pc, #304]	; (80013d8 <SBR1_init+0x27c>)
 80012a6:	f001 fd2d 	bl	8002d04 <qFIS_SetMF>
    qFIS_SetMF( MFout, u, u_NM, constantmf, NULL, u_NM_p, 1.0f );
 80012aa:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012ae:	9302      	str	r3, [sp, #8]
 80012b0:	4b4a      	ldr	r3, [pc, #296]	; (80013dc <SBR1_init+0x280>)
 80012b2:	9301      	str	r3, [sp, #4]
 80012b4:	2300      	movs	r3, #0
 80012b6:	9300      	str	r3, [sp, #0]
 80012b8:	2313      	movs	r3, #19
 80012ba:	2201      	movs	r2, #1
 80012bc:	2100      	movs	r1, #0
 80012be:	4846      	ldr	r0, [pc, #280]	; (80013d8 <SBR1_init+0x27c>)
 80012c0:	f001 fd20 	bl	8002d04 <qFIS_SetMF>
    qFIS_SetMF( MFout, u, u_NS, constantmf, NULL, u_NS_p, 1.0f );
 80012c4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012c8:	9302      	str	r3, [sp, #8]
 80012ca:	4b45      	ldr	r3, [pc, #276]	; (80013e0 <SBR1_init+0x284>)
 80012cc:	9301      	str	r3, [sp, #4]
 80012ce:	2300      	movs	r3, #0
 80012d0:	9300      	str	r3, [sp, #0]
 80012d2:	2313      	movs	r3, #19
 80012d4:	2202      	movs	r2, #2
 80012d6:	2100      	movs	r1, #0
 80012d8:	483f      	ldr	r0, [pc, #252]	; (80013d8 <SBR1_init+0x27c>)
 80012da:	f001 fd13 	bl	8002d04 <qFIS_SetMF>
    qFIS_SetMF( MFout, u, u_ZE, constantmf, NULL, u_ZE_p, 1.0f );
 80012de:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012e2:	9302      	str	r3, [sp, #8]
 80012e4:	4b3f      	ldr	r3, [pc, #252]	; (80013e4 <SBR1_init+0x288>)
 80012e6:	9301      	str	r3, [sp, #4]
 80012e8:	2300      	movs	r3, #0
 80012ea:	9300      	str	r3, [sp, #0]
 80012ec:	2313      	movs	r3, #19
 80012ee:	2203      	movs	r2, #3
 80012f0:	2100      	movs	r1, #0
 80012f2:	4839      	ldr	r0, [pc, #228]	; (80013d8 <SBR1_init+0x27c>)
 80012f4:	f001 fd06 	bl	8002d04 <qFIS_SetMF>
    qFIS_SetMF( MFout, u, u_PS, constantmf, NULL, u_PS_p, 1.0f );
 80012f8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012fc:	9302      	str	r3, [sp, #8]
 80012fe:	4b3a      	ldr	r3, [pc, #232]	; (80013e8 <SBR1_init+0x28c>)
 8001300:	9301      	str	r3, [sp, #4]
 8001302:	2300      	movs	r3, #0
 8001304:	9300      	str	r3, [sp, #0]
 8001306:	2313      	movs	r3, #19
 8001308:	2204      	movs	r2, #4
 800130a:	2100      	movs	r1, #0
 800130c:	4832      	ldr	r0, [pc, #200]	; (80013d8 <SBR1_init+0x27c>)
 800130e:	f001 fcf9 	bl	8002d04 <qFIS_SetMF>
    qFIS_SetMF( MFout, u, u_PM, constantmf, NULL, u_PM_p, 1.0f );
 8001312:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001316:	9302      	str	r3, [sp, #8]
 8001318:	4b34      	ldr	r3, [pc, #208]	; (80013ec <SBR1_init+0x290>)
 800131a:	9301      	str	r3, [sp, #4]
 800131c:	2300      	movs	r3, #0
 800131e:	9300      	str	r3, [sp, #0]
 8001320:	2313      	movs	r3, #19
 8001322:	2205      	movs	r2, #5
 8001324:	2100      	movs	r1, #0
 8001326:	482c      	ldr	r0, [pc, #176]	; (80013d8 <SBR1_init+0x27c>)
 8001328:	f001 fcec 	bl	8002d04 <qFIS_SetMF>
    qFIS_SetMF( MFout, u, u_PB, constantmf, NULL, u_PB_p, 1.0f );
 800132c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001330:	9302      	str	r3, [sp, #8]
 8001332:	4b2f      	ldr	r3, [pc, #188]	; (80013f0 <SBR1_init+0x294>)
 8001334:	9301      	str	r3, [sp, #4]
 8001336:	2300      	movs	r3, #0
 8001338:	9300      	str	r3, [sp, #0]
 800133a:	2313      	movs	r3, #19
 800133c:	2206      	movs	r2, #6
 800133e:	2100      	movs	r1, #0
 8001340:	4825      	ldr	r0, [pc, #148]	; (80013d8 <SBR1_init+0x27c>)
 8001342:	f001 fcdf 	bl	8002d04 <qFIS_SetMF>

    /* Configure the Inference System */
    qFIS_Setup( &SBR1, Sugeno,
 8001346:	2319      	movs	r3, #25
 8001348:	9308      	str	r3, [sp, #32]
 800134a:	4b2a      	ldr	r3, [pc, #168]	; (80013f4 <SBR1_init+0x298>)
 800134c:	9307      	str	r3, [sp, #28]
 800134e:	4b2a      	ldr	r3, [pc, #168]	; (80013f8 <SBR1_init+0x29c>)
 8001350:	9306      	str	r3, [sp, #24]
 8001352:	238c      	movs	r3, #140	; 0x8c
 8001354:	9305      	str	r3, [sp, #20]
 8001356:	4b20      	ldr	r3, [pc, #128]	; (80013d8 <SBR1_init+0x27c>)
 8001358:	9304      	str	r3, [sp, #16]
 800135a:	23c8      	movs	r3, #200	; 0xc8
 800135c:	9303      	str	r3, [sp, #12]
 800135e:	4b13      	ldr	r3, [pc, #76]	; (80013ac <SBR1_init+0x250>)
 8001360:	9302      	str	r3, [sp, #8]
 8001362:	2334      	movs	r3, #52	; 0x34
 8001364:	9301      	str	r3, [sp, #4]
 8001366:	4b0f      	ldr	r3, [pc, #60]	; (80013a4 <SBR1_init+0x248>)
 8001368:	9300      	str	r3, [sp, #0]
 800136a:	2318      	movs	r3, #24
 800136c:	4a0c      	ldr	r2, [pc, #48]	; (80013a0 <SBR1_init+0x244>)
 800136e:	2101      	movs	r1, #1
 8001370:	4822      	ldr	r0, [pc, #136]	; (80013fc <SBR1_init+0x2a0>)
 8001372:	f001 fb1b 	bl	80029ac <qFIS_Setup>
                SBR1_inputs, sizeof(SBR1_inputs),
                SBR1_outputs, sizeof(SBR1_outputs),
                MFin, sizeof(MFin), MFout, sizeof(MFout),
                rules, rStrength, 25u );
    qFIS_SetParameter( &SBR1, qFIS_AND, qFIS_PROD );
 8001376:	2201      	movs	r2, #1
 8001378:	2102      	movs	r1, #2
 800137a:	4820      	ldr	r0, [pc, #128]	; (80013fc <SBR1_init+0x2a0>)
 800137c:	f001 faa6 	bl	80028cc <qFIS_SetParameter>
    qFIS_SetParameter( &SBR1, qFIS_Implication, qFIS_PROD );
 8001380:	2201      	movs	r2, #1
 8001382:	2100      	movs	r1, #0
 8001384:	481d      	ldr	r0, [pc, #116]	; (80013fc <SBR1_init+0x2a0>)
 8001386:	f001 faa1 	bl	80028cc <qFIS_SetParameter>
    qFIS_SetParameter( &SBR1, qFIS_Aggregation, qFIS_SUM );
 800138a:	2204      	movs	r2, #4
 800138c:	2101      	movs	r1, #1
 800138e:	481b      	ldr	r0, [pc, #108]	; (80013fc <SBR1_init+0x2a0>)
 8001390:	f001 fa9c 	bl	80028cc <qFIS_SetParameter>
}
 8001394:	bf00      	nop
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	bf800000 	.word	0xbf800000
 80013a0:	20000194 	.word	0x20000194
 80013a4:	200001ac 	.word	0x200001ac
 80013a8:	08009a3c 	.word	0x08009a3c
 80013ac:	200001e0 	.word	0x200001e0
 80013b0:	08009a4c 	.word	0x08009a4c
 80013b4:	08009a5c 	.word	0x08009a5c
 80013b8:	08009a68 	.word	0x08009a68
 80013bc:	08009a78 	.word	0x08009a78
 80013c0:	08009a88 	.word	0x08009a88
 80013c4:	08009a94 	.word	0x08009a94
 80013c8:	08009aa0 	.word	0x08009aa0
 80013cc:	08009aac 	.word	0x08009aac
 80013d0:	08009ab8 	.word	0x08009ab8
 80013d4:	08009ac4 	.word	0x08009ac4
 80013d8:	200002a8 	.word	0x200002a8
 80013dc:	08009ac8 	.word	0x08009ac8
 80013e0:	08009acc 	.word	0x08009acc
 80013e4:	08009ad0 	.word	0x08009ad0
 80013e8:	08009ad4 	.word	0x08009ad4
 80013ec:	08009ad8 	.word	0x08009ad8
 80013f0:	08009adc 	.word	0x08009adc
 80013f4:	20000334 	.word	0x20000334
 80013f8:	080098a8 	.word	0x080098a8
 80013fc:	20000134 	.word	0x20000134

08001400 <SBR1_run>:

void SBR1_run( float *inputs, float *outputs ) {
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]
    /* Set the crips inputs */
    qFIS_SetInput( SBR1_inputs, theta, inputs[ theta ] );
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	461a      	mov	r2, r3
 8001410:	2100      	movs	r1, #0
 8001412:	4811      	ldr	r0, [pc, #68]	; (8001458 <SBR1_run+0x58>)
 8001414:	f001 fc3a 	bl	8002c8c <qFIS_SetInput>
    qFIS_SetInput( SBR1_inputs, thetadot, inputs[ thetadot ] );
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	3304      	adds	r3, #4
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	461a      	mov	r2, r3
 8001420:	2101      	movs	r1, #1
 8001422:	480d      	ldr	r0, [pc, #52]	; (8001458 <SBR1_run+0x58>)
 8001424:	f001 fc32 	bl	8002c8c <qFIS_SetInput>

    qFIS_Fuzzify( &SBR1 );
 8001428:	480c      	ldr	r0, [pc, #48]	; (800145c <SBR1_run+0x5c>)
 800142a:	f001 fd4a 	bl	8002ec2 <qFIS_Fuzzify>
    if ( qFIS_Inference( &SBR1 ) > 0 ) {
 800142e:	480b      	ldr	r0, [pc, #44]	; (800145c <SBR1_run+0x5c>)
 8001430:	f002 f976 	bl	8003720 <qFIS_Inference>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	dd02      	ble.n	8001440 <SBR1_run+0x40>
        qFIS_DeFuzzify( &SBR1 );
 800143a:	4808      	ldr	r0, [pc, #32]	; (800145c <SBR1_run+0x5c>)
 800143c:	f002 f82d 	bl	800349a <qFIS_DeFuzzify>
    else {
        /* Error! */
    }

    /* Get the crips outputs */
    outputs[ u ] = qFIS_GetOutput( SBR1_outputs, u );
 8001440:	2100      	movs	r1, #0
 8001442:	4807      	ldr	r0, [pc, #28]	; (8001460 <SBR1_run+0x60>)
 8001444:	f001 fc42 	bl	8002ccc <qFIS_GetOutput>
 8001448:	4602      	mov	r2, r0
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	601a      	str	r2, [r3, #0]
}
 800144e:	bf00      	nop
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20000194 	.word	0x20000194
 800145c:	20000134 	.word	0x20000134
 8001460:	200001ac 	.word	0x200001ac

08001464 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) // timer1 interrupted 10 ms
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM1)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a05      	ldr	r2, [pc, #20]	; (8001488 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d102      	bne.n	800147c <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		u8_flag_10ms = 1;
 8001476:	4b05      	ldr	r3, [pc, #20]	; (800148c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001478:	2201      	movs	r2, #1
 800147a:	701a      	strb	r2, [r3, #0]
	}
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	bc80      	pop	{r7}
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	40012c00 	.word	0x40012c00
 800148c:	20000568 	.word	0x20000568

08001490 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001490:	b5b0      	push	{r4, r5, r7, lr}
 8001492:	b088      	sub	sp, #32
 8001494:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001496:	f003 fc31 	bl	8004cfc <HAL_Init>

  /* USER CODE BEGIN Init */
	 SBR1_init();
 800149a:	f7ff fe5f 	bl	800115c <SBR1_init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800149e:	f000 f8b5 	bl	800160c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014a2:	f000 fa5f 	bl	8001964 <MX_GPIO_Init>
  MX_I2C1_Init();
 80014a6:	f000 f8ed 	bl	8001684 <MX_I2C1_Init>
  MX_TIM1_Init();
 80014aa:	f000 f919 	bl	80016e0 <MX_TIM1_Init>
  MX_TIM3_Init();
 80014ae:	f000 f967 	bl	8001780 <MX_TIM3_Init>
  MX_TIM4_Init();
 80014b2:	f000 f9c9 	bl	8001848 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 80014b6:	f000 fa2b 	bl	8001910 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 80014ba:	4849      	ldr	r0, [pc, #292]	; (80015e0 <main+0x150>)
 80014bc:	f005 fc96 	bl	8006dec <HAL_TIM_Base_Start_IT>
  Init_tim_pwm();
 80014c0:	f000 fb20 	bl	8001b04 <Init_tim_pwm>
//  HAL_UART_Transmit_IT(&huart1,(uint8_t*)data, 20);

  while (MPU6050_Init(&hi2c1) == 1); // if mpu6050 identified, mcu will escape while loop
 80014c4:	bf00      	nop
 80014c6:	4847      	ldr	r0, [pc, #284]	; (80015e4 <main+0x154>)
 80014c8:	f000 fc4e 	bl	8001d68 <MPU6050_Init>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d0f9      	beq.n	80014c6 <main+0x36>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //These parameters in motor.h and SBR1_fis.c need to be tuned belong to your robot
	  if (u8_flag_10ms)
 80014d2:	4b45      	ldr	r3, [pc, #276]	; (80015e8 <main+0x158>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d0fb      	beq.n	80014d2 <main+0x42>
	  {
		  u8_flag_10ms = 0;
 80014da:	4b43      	ldr	r3, [pc, #268]	; (80015e8 <main+0x158>)
 80014dc:	2200      	movs	r2, #0
 80014de:	701a      	strb	r2, [r3, #0]
		  //parameters after Kalman filter
		  MPU6050_Read_All(&hi2c1,&t_MPU6050);
 80014e0:	4942      	ldr	r1, [pc, #264]	; (80015ec <main+0x15c>)
 80014e2:	4840      	ldr	r0, [pc, #256]	; (80015e4 <main+0x154>)
 80014e4:	f000 fc98 	bl	8001e18 <MPU6050_Read_All>
		  Controller (t_MPU6050.KalmanAngleY, t_MPU6050.Gy* RAD_TO_DEG, &t_fuzzy);
 80014e8:	4b40      	ldr	r3, [pc, #256]	; (80015ec <main+0x15c>)
 80014ea:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 80014ee:	4b3f      	ldr	r3, [pc, #252]	; (80015ec <main+0x15c>)
 80014f0:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80014f4:	a338      	add	r3, pc, #224	; (adr r3, 80015d8 <main+0x148>)
 80014f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014fa:	f7fe ffed 	bl	80004d8 <__aeabi_dmul>
 80014fe:	4602      	mov	r2, r0
 8001500:	460b      	mov	r3, r1
 8001502:	493b      	ldr	r1, [pc, #236]	; (80015f0 <main+0x160>)
 8001504:	9100      	str	r1, [sp, #0]
 8001506:	4620      	mov	r0, r4
 8001508:	4629      	mov	r1, r5
 800150a:	f000 fb79 	bl	8001c00 <Controller>
		  int theta = t_MPU6050.KalmanAngleY*1000.0;
 800150e:	4b37      	ldr	r3, [pc, #220]	; (80015ec <main+0x15c>)
 8001510:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001514:	f04f 0200 	mov.w	r2, #0
 8001518:	4b36      	ldr	r3, [pc, #216]	; (80015f4 <main+0x164>)
 800151a:	f7fe ffdd 	bl	80004d8 <__aeabi_dmul>
 800151e:	4602      	mov	r2, r0
 8001520:	460b      	mov	r3, r1
 8001522:	4610      	mov	r0, r2
 8001524:	4619      	mov	r1, r3
 8001526:	f7ff fa87 	bl	8000a38 <__aeabi_d2iz>
 800152a:	4603      	mov	r3, r0
 800152c:	60fb      	str	r3, [r7, #12]
		  int theta_dot = t_MPU6050.Gy* RAD_TO_DEG*1000.0;
 800152e:	4b2f      	ldr	r3, [pc, #188]	; (80015ec <main+0x15c>)
 8001530:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8001534:	a328      	add	r3, pc, #160	; (adr r3, 80015d8 <main+0x148>)
 8001536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800153a:	f7fe ffcd 	bl	80004d8 <__aeabi_dmul>
 800153e:	4602      	mov	r2, r0
 8001540:	460b      	mov	r3, r1
 8001542:	4610      	mov	r0, r2
 8001544:	4619      	mov	r1, r3
 8001546:	f04f 0200 	mov.w	r2, #0
 800154a:	4b2a      	ldr	r3, [pc, #168]	; (80015f4 <main+0x164>)
 800154c:	f7fe ffc4 	bl	80004d8 <__aeabi_dmul>
 8001550:	4602      	mov	r2, r0
 8001552:	460b      	mov	r3, r1
 8001554:	4610      	mov	r0, r2
 8001556:	4619      	mov	r1, r3
 8001558:	f7ff fa6e 	bl	8000a38 <__aeabi_d2iz>
 800155c:	4603      	mov	r3, r0
 800155e:	60bb      	str	r3, [r7, #8]
		  int uk = t_fuzzy.f_out_fuzzy;
 8001560:	4b23      	ldr	r3, [pc, #140]	; (80015f0 <main+0x160>)
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff fdb3 	bl	80010d0 <__aeabi_f2iz>
 800156a:	4603      	mov	r3, r0
 800156c:	607b      	str	r3, [r7, #4]
		  sprintf(data,FRAME,SIGN(theta),ABS(theta),SIGN(theta_dot),ABS(theta_dot),SIGN(uk),ABS(uk));
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	2b00      	cmp	r3, #0
 8001572:	db01      	blt.n	8001578 <main+0xe8>
 8001574:	4c20      	ldr	r4, [pc, #128]	; (80015f8 <main+0x168>)
 8001576:	e000      	b.n	800157a <main+0xea>
 8001578:	4c20      	ldr	r4, [pc, #128]	; (80015fc <main+0x16c>)
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	ea83 75e3 	eor.w	r5, r3, r3, asr #31
 8001580:	eba5 75e3 	sub.w	r5, r5, r3, asr #31
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	2b00      	cmp	r3, #0
 8001588:	db01      	blt.n	800158e <main+0xfe>
 800158a:	4b1b      	ldr	r3, [pc, #108]	; (80015f8 <main+0x168>)
 800158c:	e000      	b.n	8001590 <main+0x100>
 800158e:	4b1b      	ldr	r3, [pc, #108]	; (80015fc <main+0x16c>)
 8001590:	68ba      	ldr	r2, [r7, #8]
 8001592:	2a00      	cmp	r2, #0
 8001594:	bfb8      	it	lt
 8001596:	4252      	neglt	r2, r2
 8001598:	6879      	ldr	r1, [r7, #4]
 800159a:	2900      	cmp	r1, #0
 800159c:	db01      	blt.n	80015a2 <main+0x112>
 800159e:	4916      	ldr	r1, [pc, #88]	; (80015f8 <main+0x168>)
 80015a0:	e000      	b.n	80015a4 <main+0x114>
 80015a2:	4916      	ldr	r1, [pc, #88]	; (80015fc <main+0x16c>)
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	2800      	cmp	r0, #0
 80015a8:	bfb8      	it	lt
 80015aa:	4240      	neglt	r0, r0
 80015ac:	9003      	str	r0, [sp, #12]
 80015ae:	9102      	str	r1, [sp, #8]
 80015b0:	9201      	str	r2, [sp, #4]
 80015b2:	9300      	str	r3, [sp, #0]
 80015b4:	462b      	mov	r3, r5
 80015b6:	4622      	mov	r2, r4
 80015b8:	4911      	ldr	r1, [pc, #68]	; (8001600 <main+0x170>)
 80015ba:	4812      	ldr	r0, [pc, #72]	; (8001604 <main+0x174>)
 80015bc:	f007 f948 	bl	8008850 <siprintf>
		  HAL_UART_Transmit(&huart1,(uint8_t*)data, strlen(data),9);
 80015c0:	4810      	ldr	r0, [pc, #64]	; (8001604 <main+0x174>)
 80015c2:	f7fe fdc5 	bl	8000150 <strlen>
 80015c6:	4603      	mov	r3, r0
 80015c8:	b29a      	uxth	r2, r3
 80015ca:	2309      	movs	r3, #9
 80015cc:	490d      	ldr	r1, [pc, #52]	; (8001604 <main+0x174>)
 80015ce:	480e      	ldr	r0, [pc, #56]	; (8001608 <main+0x178>)
 80015d0:	f006 fb6a 	bl	8007ca8 <HAL_UART_Transmit>
	  if (u8_flag_10ms)
 80015d4:	e77d      	b.n	80014d2 <main+0x42>
 80015d6:	bf00      	nop
 80015d8:	1a63c1f8 	.word	0x1a63c1f8
 80015dc:	404ca5dc 	.word	0x404ca5dc
 80015e0:	200003ec 	.word	0x200003ec
 80015e4:	20000398 	.word	0x20000398
 80015e8:	20000568 	.word	0x20000568
 80015ec:	20000510 	.word	0x20000510
 80015f0:	20000000 	.word	0x20000000
 80015f4:	408f4000 	.word	0x408f4000
 80015f8:	08009888 	.word	0x08009888
 80015fc:	0800988c 	.word	0x0800988c
 8001600:	08009890 	.word	0x08009890
 8001604:	2000056c 	.word	0x2000056c
 8001608:	200004c4 	.word	0x200004c4

0800160c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b090      	sub	sp, #64	; 0x40
 8001610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001612:	f107 0318 	add.w	r3, r7, #24
 8001616:	2228      	movs	r2, #40	; 0x28
 8001618:	2100      	movs	r1, #0
 800161a:	4618      	mov	r0, r3
 800161c:	f007 f938 	bl	8008890 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001620:	1d3b      	adds	r3, r7, #4
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	605a      	str	r2, [r3, #4]
 8001628:	609a      	str	r2, [r3, #8]
 800162a:	60da      	str	r2, [r3, #12]
 800162c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800162e:	2302      	movs	r3, #2
 8001630:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001632:	2301      	movs	r3, #1
 8001634:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001636:	2310      	movs	r3, #16
 8001638:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800163a:	2300      	movs	r3, #0
 800163c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800163e:	f107 0318 	add.w	r3, r7, #24
 8001642:	4618      	mov	r0, r3
 8001644:	f004 ff72 	bl	800652c <HAL_RCC_OscConfig>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800164e:	f000 f9f5 	bl	8001a3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001652:	230f      	movs	r3, #15
 8001654:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001656:	2300      	movs	r3, #0
 8001658:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800165a:	2300      	movs	r3, #0
 800165c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800165e:	2300      	movs	r3, #0
 8001660:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001662:	2300      	movs	r3, #0
 8001664:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001666:	1d3b      	adds	r3, r7, #4
 8001668:	2100      	movs	r1, #0
 800166a:	4618      	mov	r0, r3
 800166c:	f005 f9e0 	bl	8006a30 <HAL_RCC_ClockConfig>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001676:	f000 f9e1 	bl	8001a3c <Error_Handler>
  }
}
 800167a:	bf00      	nop
 800167c:	3740      	adds	r7, #64	; 0x40
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
	...

08001684 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001688:	4b12      	ldr	r3, [pc, #72]	; (80016d4 <MX_I2C1_Init+0x50>)
 800168a:	4a13      	ldr	r2, [pc, #76]	; (80016d8 <MX_I2C1_Init+0x54>)
 800168c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800168e:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <MX_I2C1_Init+0x50>)
 8001690:	4a12      	ldr	r2, [pc, #72]	; (80016dc <MX_I2C1_Init+0x58>)
 8001692:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001694:	4b0f      	ldr	r3, [pc, #60]	; (80016d4 <MX_I2C1_Init+0x50>)
 8001696:	2200      	movs	r2, #0
 8001698:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800169a:	4b0e      	ldr	r3, [pc, #56]	; (80016d4 <MX_I2C1_Init+0x50>)
 800169c:	2200      	movs	r2, #0
 800169e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016a0:	4b0c      	ldr	r3, [pc, #48]	; (80016d4 <MX_I2C1_Init+0x50>)
 80016a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016a8:	4b0a      	ldr	r3, [pc, #40]	; (80016d4 <MX_I2C1_Init+0x50>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80016ae:	4b09      	ldr	r3, [pc, #36]	; (80016d4 <MX_I2C1_Init+0x50>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016b4:	4b07      	ldr	r3, [pc, #28]	; (80016d4 <MX_I2C1_Init+0x50>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016ba:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <MX_I2C1_Init+0x50>)
 80016bc:	2200      	movs	r2, #0
 80016be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016c0:	4804      	ldr	r0, [pc, #16]	; (80016d4 <MX_I2C1_Init+0x50>)
 80016c2:	f003 fed9 	bl	8005478 <HAL_I2C_Init>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016cc:	f000 f9b6 	bl	8001a3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016d0:	bf00      	nop
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	20000398 	.word	0x20000398
 80016d8:	40005400 	.word	0x40005400
 80016dc:	000186a0 	.word	0x000186a0

080016e0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b086      	sub	sp, #24
 80016e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016e6:	f107 0308 	add.w	r3, r7, #8
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	605a      	str	r2, [r3, #4]
 80016f0:	609a      	str	r2, [r3, #8]
 80016f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016f4:	463b      	mov	r3, r7
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016fc:	4b1e      	ldr	r3, [pc, #120]	; (8001778 <MX_TIM1_Init+0x98>)
 80016fe:	4a1f      	ldr	r2, [pc, #124]	; (800177c <MX_TIM1_Init+0x9c>)
 8001700:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 799;
 8001702:	4b1d      	ldr	r3, [pc, #116]	; (8001778 <MX_TIM1_Init+0x98>)
 8001704:	f240 321f 	movw	r2, #799	; 0x31f
 8001708:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800170a:	4b1b      	ldr	r3, [pc, #108]	; (8001778 <MX_TIM1_Init+0x98>)
 800170c:	2200      	movs	r2, #0
 800170e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8001710:	4b19      	ldr	r3, [pc, #100]	; (8001778 <MX_TIM1_Init+0x98>)
 8001712:	2263      	movs	r2, #99	; 0x63
 8001714:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001716:	4b18      	ldr	r3, [pc, #96]	; (8001778 <MX_TIM1_Init+0x98>)
 8001718:	2200      	movs	r2, #0
 800171a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800171c:	4b16      	ldr	r3, [pc, #88]	; (8001778 <MX_TIM1_Init+0x98>)
 800171e:	2200      	movs	r2, #0
 8001720:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001722:	4b15      	ldr	r3, [pc, #84]	; (8001778 <MX_TIM1_Init+0x98>)
 8001724:	2200      	movs	r2, #0
 8001726:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001728:	4813      	ldr	r0, [pc, #76]	; (8001778 <MX_TIM1_Init+0x98>)
 800172a:	f005 fb0f 	bl	8006d4c <HAL_TIM_Base_Init>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001734:	f000 f982 	bl	8001a3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001738:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800173c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800173e:	f107 0308 	add.w	r3, r7, #8
 8001742:	4619      	mov	r1, r3
 8001744:	480c      	ldr	r0, [pc, #48]	; (8001778 <MX_TIM1_Init+0x98>)
 8001746:	f005 fe5f 	bl	8007408 <HAL_TIM_ConfigClockSource>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001750:	f000 f974 	bl	8001a3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001754:	2300      	movs	r3, #0
 8001756:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001758:	2300      	movs	r3, #0
 800175a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800175c:	463b      	mov	r3, r7
 800175e:	4619      	mov	r1, r3
 8001760:	4805      	ldr	r0, [pc, #20]	; (8001778 <MX_TIM1_Init+0x98>)
 8001762:	f006 f9e1 	bl	8007b28 <HAL_TIMEx_MasterConfigSynchronization>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800176c:	f000 f966 	bl	8001a3c <Error_Handler>
  }

  /* USER CODE BEGIN TIM1_Init 2 */
  /* USER CODE END TIM1_Init 2 */
}
 8001770:	bf00      	nop
 8001772:	3718      	adds	r7, #24
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	200003ec 	.word	0x200003ec
 800177c:	40012c00 	.word	0x40012c00

08001780 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b08a      	sub	sp, #40	; 0x28
 8001784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001786:	f107 0320 	add.w	r3, r7, #32
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001790:	1d3b      	adds	r3, r7, #4
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	605a      	str	r2, [r3, #4]
 8001798:	609a      	str	r2, [r3, #8]
 800179a:	60da      	str	r2, [r3, #12]
 800179c:	611a      	str	r2, [r3, #16]
 800179e:	615a      	str	r2, [r3, #20]
 80017a0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017a2:	4b27      	ldr	r3, [pc, #156]	; (8001840 <MX_TIM3_Init+0xc0>)
 80017a4:	4a27      	ldr	r2, [pc, #156]	; (8001844 <MX_TIM3_Init+0xc4>)
 80017a6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 80017a8:	4b25      	ldr	r3, [pc, #148]	; (8001840 <MX_TIM3_Init+0xc0>)
 80017aa:	224f      	movs	r2, #79	; 0x4f
 80017ac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ae:	4b24      	ldr	r3, [pc, #144]	; (8001840 <MX_TIM3_Init+0xc0>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1999;
 80017b4:	4b22      	ldr	r3, [pc, #136]	; (8001840 <MX_TIM3_Init+0xc0>)
 80017b6:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80017ba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017bc:	4b20      	ldr	r3, [pc, #128]	; (8001840 <MX_TIM3_Init+0xc0>)
 80017be:	2200      	movs	r2, #0
 80017c0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017c2:	4b1f      	ldr	r3, [pc, #124]	; (8001840 <MX_TIM3_Init+0xc0>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80017c8:	481d      	ldr	r0, [pc, #116]	; (8001840 <MX_TIM3_Init+0xc0>)
 80017ca:	f005 fb61 	bl	8006e90 <HAL_TIM_PWM_Init>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80017d4:	f000 f932 	bl	8001a3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017d8:	2300      	movs	r3, #0
 80017da:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017dc:	2300      	movs	r3, #0
 80017de:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017e0:	f107 0320 	add.w	r3, r7, #32
 80017e4:	4619      	mov	r1, r3
 80017e6:	4816      	ldr	r0, [pc, #88]	; (8001840 <MX_TIM3_Init+0xc0>)
 80017e8:	f006 f99e 	bl	8007b28 <HAL_TIMEx_MasterConfigSynchronization>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80017f2:	f000 f923 	bl	8001a3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017f6:	2360      	movs	r3, #96	; 0x60
 80017f8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80017fa:	2300      	movs	r3, #0
 80017fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017fe:	2300      	movs	r3, #0
 8001800:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001802:	2300      	movs	r3, #0
 8001804:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001806:	1d3b      	adds	r3, r7, #4
 8001808:	2200      	movs	r2, #0
 800180a:	4619      	mov	r1, r3
 800180c:	480c      	ldr	r0, [pc, #48]	; (8001840 <MX_TIM3_Init+0xc0>)
 800180e:	f005 fd39 	bl	8007284 <HAL_TIM_PWM_ConfigChannel>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001818:	f000 f910 	bl	8001a3c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800181c:	1d3b      	adds	r3, r7, #4
 800181e:	2204      	movs	r2, #4
 8001820:	4619      	mov	r1, r3
 8001822:	4807      	ldr	r0, [pc, #28]	; (8001840 <MX_TIM3_Init+0xc0>)
 8001824:	f005 fd2e 	bl	8007284 <HAL_TIM_PWM_ConfigChannel>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800182e:	f000 f905 	bl	8001a3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001832:	4803      	ldr	r0, [pc, #12]	; (8001840 <MX_TIM3_Init+0xc0>)
 8001834:	f003 f90a 	bl	8004a4c <HAL_TIM_MspPostInit>

}
 8001838:	bf00      	nop
 800183a:	3728      	adds	r7, #40	; 0x28
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	20000434 	.word	0x20000434
 8001844:	40000400 	.word	0x40000400

08001848 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b08a      	sub	sp, #40	; 0x28
 800184c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800184e:	f107 0320 	add.w	r3, r7, #32
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001858:	1d3b      	adds	r3, r7, #4
 800185a:	2200      	movs	r2, #0
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	605a      	str	r2, [r3, #4]
 8001860:	609a      	str	r2, [r3, #8]
 8001862:	60da      	str	r2, [r3, #12]
 8001864:	611a      	str	r2, [r3, #16]
 8001866:	615a      	str	r2, [r3, #20]
 8001868:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800186a:	4b27      	ldr	r3, [pc, #156]	; (8001908 <MX_TIM4_Init+0xc0>)
 800186c:	4a27      	ldr	r2, [pc, #156]	; (800190c <MX_TIM4_Init+0xc4>)
 800186e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 79;
 8001870:	4b25      	ldr	r3, [pc, #148]	; (8001908 <MX_TIM4_Init+0xc0>)
 8001872:	224f      	movs	r2, #79	; 0x4f
 8001874:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001876:	4b24      	ldr	r3, [pc, #144]	; (8001908 <MX_TIM4_Init+0xc0>)
 8001878:	2200      	movs	r2, #0
 800187a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1999;
 800187c:	4b22      	ldr	r3, [pc, #136]	; (8001908 <MX_TIM4_Init+0xc0>)
 800187e:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001882:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001884:	4b20      	ldr	r3, [pc, #128]	; (8001908 <MX_TIM4_Init+0xc0>)
 8001886:	2200      	movs	r2, #0
 8001888:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800188a:	4b1f      	ldr	r3, [pc, #124]	; (8001908 <MX_TIM4_Init+0xc0>)
 800188c:	2200      	movs	r2, #0
 800188e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001890:	481d      	ldr	r0, [pc, #116]	; (8001908 <MX_TIM4_Init+0xc0>)
 8001892:	f005 fafd 	bl	8006e90 <HAL_TIM_PWM_Init>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 800189c:	f000 f8ce 	bl	8001a3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018a0:	2300      	movs	r3, #0
 80018a2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018a4:	2300      	movs	r3, #0
 80018a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80018a8:	f107 0320 	add.w	r3, r7, #32
 80018ac:	4619      	mov	r1, r3
 80018ae:	4816      	ldr	r0, [pc, #88]	; (8001908 <MX_TIM4_Init+0xc0>)
 80018b0:	f006 f93a 	bl	8007b28 <HAL_TIMEx_MasterConfigSynchronization>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80018ba:	f000 f8bf 	bl	8001a3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018be:	2360      	movs	r3, #96	; 0x60
 80018c0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80018c2:	2300      	movs	r3, #0
 80018c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018c6:	2300      	movs	r3, #0
 80018c8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018ca:	2300      	movs	r3, #0
 80018cc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018ce:	1d3b      	adds	r3, r7, #4
 80018d0:	2200      	movs	r2, #0
 80018d2:	4619      	mov	r1, r3
 80018d4:	480c      	ldr	r0, [pc, #48]	; (8001908 <MX_TIM4_Init+0xc0>)
 80018d6:	f005 fcd5 	bl	8007284 <HAL_TIM_PWM_ConfigChannel>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80018e0:	f000 f8ac 	bl	8001a3c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018e4:	1d3b      	adds	r3, r7, #4
 80018e6:	2204      	movs	r2, #4
 80018e8:	4619      	mov	r1, r3
 80018ea:	4807      	ldr	r0, [pc, #28]	; (8001908 <MX_TIM4_Init+0xc0>)
 80018ec:	f005 fcca 	bl	8007284 <HAL_TIM_PWM_ConfigChannel>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80018f6:	f000 f8a1 	bl	8001a3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80018fa:	4803      	ldr	r0, [pc, #12]	; (8001908 <MX_TIM4_Init+0xc0>)
 80018fc:	f003 f8a6 	bl	8004a4c <HAL_TIM_MspPostInit>

}
 8001900:	bf00      	nop
 8001902:	3728      	adds	r7, #40	; 0x28
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	2000047c 	.word	0x2000047c
 800190c:	40000800 	.word	0x40000800

08001910 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001914:	4b11      	ldr	r3, [pc, #68]	; (800195c <MX_USART1_UART_Init+0x4c>)
 8001916:	4a12      	ldr	r2, [pc, #72]	; (8001960 <MX_USART1_UART_Init+0x50>)
 8001918:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800191a:	4b10      	ldr	r3, [pc, #64]	; (800195c <MX_USART1_UART_Init+0x4c>)
 800191c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001920:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001922:	4b0e      	ldr	r3, [pc, #56]	; (800195c <MX_USART1_UART_Init+0x4c>)
 8001924:	2200      	movs	r2, #0
 8001926:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001928:	4b0c      	ldr	r3, [pc, #48]	; (800195c <MX_USART1_UART_Init+0x4c>)
 800192a:	2200      	movs	r2, #0
 800192c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800192e:	4b0b      	ldr	r3, [pc, #44]	; (800195c <MX_USART1_UART_Init+0x4c>)
 8001930:	2200      	movs	r2, #0
 8001932:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001934:	4b09      	ldr	r3, [pc, #36]	; (800195c <MX_USART1_UART_Init+0x4c>)
 8001936:	220c      	movs	r2, #12
 8001938:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800193a:	4b08      	ldr	r3, [pc, #32]	; (800195c <MX_USART1_UART_Init+0x4c>)
 800193c:	2200      	movs	r2, #0
 800193e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001940:	4b06      	ldr	r3, [pc, #24]	; (800195c <MX_USART1_UART_Init+0x4c>)
 8001942:	2200      	movs	r2, #0
 8001944:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001946:	4805      	ldr	r0, [pc, #20]	; (800195c <MX_USART1_UART_Init+0x4c>)
 8001948:	f006 f95e 	bl	8007c08 <HAL_UART_Init>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001952:	f000 f873 	bl	8001a3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	200004c4 	.word	0x200004c4
 8001960:	40013800 	.word	0x40013800

08001964 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b088      	sub	sp, #32
 8001968:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800196a:	f107 0310 	add.w	r3, r7, #16
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	605a      	str	r2, [r3, #4]
 8001974:	609a      	str	r2, [r3, #8]
 8001976:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001978:	4b2d      	ldr	r3, [pc, #180]	; (8001a30 <MX_GPIO_Init+0xcc>)
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	4a2c      	ldr	r2, [pc, #176]	; (8001a30 <MX_GPIO_Init+0xcc>)
 800197e:	f043 0310 	orr.w	r3, r3, #16
 8001982:	6193      	str	r3, [r2, #24]
 8001984:	4b2a      	ldr	r3, [pc, #168]	; (8001a30 <MX_GPIO_Init+0xcc>)
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	f003 0310 	and.w	r3, r3, #16
 800198c:	60fb      	str	r3, [r7, #12]
 800198e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001990:	4b27      	ldr	r3, [pc, #156]	; (8001a30 <MX_GPIO_Init+0xcc>)
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	4a26      	ldr	r2, [pc, #152]	; (8001a30 <MX_GPIO_Init+0xcc>)
 8001996:	f043 0320 	orr.w	r3, r3, #32
 800199a:	6193      	str	r3, [r2, #24]
 800199c:	4b24      	ldr	r3, [pc, #144]	; (8001a30 <MX_GPIO_Init+0xcc>)
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	f003 0320 	and.w	r3, r3, #32
 80019a4:	60bb      	str	r3, [r7, #8]
 80019a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a8:	4b21      	ldr	r3, [pc, #132]	; (8001a30 <MX_GPIO_Init+0xcc>)
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	4a20      	ldr	r2, [pc, #128]	; (8001a30 <MX_GPIO_Init+0xcc>)
 80019ae:	f043 0304 	orr.w	r3, r3, #4
 80019b2:	6193      	str	r3, [r2, #24]
 80019b4:	4b1e      	ldr	r3, [pc, #120]	; (8001a30 <MX_GPIO_Init+0xcc>)
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	f003 0304 	and.w	r3, r3, #4
 80019bc:	607b      	str	r3, [r7, #4]
 80019be:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019c0:	4b1b      	ldr	r3, [pc, #108]	; (8001a30 <MX_GPIO_Init+0xcc>)
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	4a1a      	ldr	r2, [pc, #104]	; (8001a30 <MX_GPIO_Init+0xcc>)
 80019c6:	f043 0308 	orr.w	r3, r3, #8
 80019ca:	6193      	str	r3, [r2, #24]
 80019cc:	4b18      	ldr	r3, [pc, #96]	; (8001a30 <MX_GPIO_Init+0xcc>)
 80019ce:	699b      	ldr	r3, [r3, #24]
 80019d0:	f003 0308 	and.w	r3, r3, #8
 80019d4:	603b      	str	r3, [r7, #0]
 80019d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80019d8:	2200      	movs	r2, #0
 80019da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019de:	4815      	ldr	r0, [pc, #84]	; (8001a34 <MX_GPIO_Init+0xd0>)
 80019e0:	f003 fd32 	bl	8005448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_5, GPIO_PIN_RESET);
 80019e4:	2200      	movs	r2, #0
 80019e6:	2128      	movs	r1, #40	; 0x28
 80019e8:	4813      	ldr	r0, [pc, #76]	; (8001a38 <MX_GPIO_Init+0xd4>)
 80019ea:	f003 fd2d 	bl	8005448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80019ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f4:	2301      	movs	r3, #1
 80019f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f8:	2300      	movs	r3, #0
 80019fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fc:	2302      	movs	r3, #2
 80019fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a00:	f107 0310 	add.w	r3, r7, #16
 8001a04:	4619      	mov	r1, r3
 8001a06:	480b      	ldr	r0, [pc, #44]	; (8001a34 <MX_GPIO_Init+0xd0>)
 8001a08:	f003 fb9a 	bl	8005140 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001a0c:	2328      	movs	r3, #40	; 0x28
 8001a0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a10:	2301      	movs	r3, #1
 8001a12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a14:	2300      	movs	r3, #0
 8001a16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a18:	2302      	movs	r3, #2
 8001a1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a1c:	f107 0310 	add.w	r3, r7, #16
 8001a20:	4619      	mov	r1, r3
 8001a22:	4805      	ldr	r0, [pc, #20]	; (8001a38 <MX_GPIO_Init+0xd4>)
 8001a24:	f003 fb8c 	bl	8005140 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a28:	bf00      	nop
 8001a2a:	3720      	adds	r7, #32
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	40021000 	.word	0x40021000
 8001a34:	40011000 	.word	0x40011000
 8001a38:	40010800 	.word	0x40010800

08001a3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a40:	b672      	cpsid	i
}
 8001a42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a44:	e7fe      	b.n	8001a44 <Error_Handler+0x8>
	...

08001a48 <Limit_val>:
 *      Author: NGOC HOAN && Hien Nguyen
 */

#include "motor.h"

static void Limit_val(float *value){
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
	if(*value> VAL_MAX)  *value = VAL_MAX;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff fb2f 	bl	80010bc <__aeabi_fcmpgt>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d003      	beq.n	8001a6c <Limit_val+0x24>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001a6a:	601a      	str	r2, [r3, #0]
	if(*value<-VAL_MAX) *value = -VAL_MAX;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4907      	ldr	r1, [pc, #28]	; (8001a90 <Limit_val+0x48>)
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff fb04 	bl	8001080 <__aeabi_fcmplt>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d100      	bne.n	8001a80 <Limit_val+0x38>
}
 8001a7e:	e002      	b.n	8001a86 <Limit_val+0x3e>
	if(*value<-VAL_MAX) *value = -VAL_MAX;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	4a03      	ldr	r2, [pc, #12]	; (8001a90 <Limit_val+0x48>)
 8001a84:	601a      	str	r2, [r3, #0]
}
 8001a86:	bf00      	nop
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	bf800000 	.word	0xbf800000

08001a94 <Set_duty>:

static void Set_duty(float duty, TIM_HandleTypeDef *htim, int channel){
 8001a94:	b590      	push	{r4, r7, lr}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	607a      	str	r2, [r7, #4]
	if (channel == 1){
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d111      	bne.n	8001aca <Set_duty+0x36>
		htim->Instance->CCR1 =  (duty*MAX_CNT) + MIN_CNT;
 8001aa6:	4915      	ldr	r1, [pc, #84]	; (8001afc <Set_duty+0x68>)
 8001aa8:	68f8      	ldr	r0, [r7, #12]
 8001aaa:	f7ff f94b 	bl	8000d44 <__aeabi_fmul>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	4913      	ldr	r1, [pc, #76]	; (8001b00 <Set_duty+0x6c>)
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7ff f83e 	bl	8000b34 <__addsf3>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	461a      	mov	r2, r3
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	681c      	ldr	r4, [r3, #0]
 8001ac0:	4610      	mov	r0, r2
 8001ac2:	f7ff fb2b 	bl	800111c <__aeabi_f2uiz>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	6363      	str	r3, [r4, #52]	; 0x34
	}
	if (channel == 2){
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d111      	bne.n	8001af4 <Set_duty+0x60>
		htim->Instance->CCR2 =  (duty*MAX_CNT) + MIN_CNT;
 8001ad0:	490a      	ldr	r1, [pc, #40]	; (8001afc <Set_duty+0x68>)
 8001ad2:	68f8      	ldr	r0, [r7, #12]
 8001ad4:	f7ff f936 	bl	8000d44 <__aeabi_fmul>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	4909      	ldr	r1, [pc, #36]	; (8001b00 <Set_duty+0x6c>)
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff f829 	bl	8000b34 <__addsf3>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	681c      	ldr	r4, [r3, #0]
 8001aea:	4610      	mov	r0, r2
 8001aec:	f7ff fb16 	bl	800111c <__aeabi_f2uiz>
 8001af0:	4603      	mov	r3, r0
 8001af2:	63a3      	str	r3, [r4, #56]	; 0x38
	}
}
 8001af4:	bf00      	nop
 8001af6:	3714      	adds	r7, #20
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd90      	pop	{r4, r7, pc}
 8001afc:	4479c000 	.word	0x4479c000
 8001b00:	430c0000 	.word	0x430c0000

08001b04 <Init_tim_pwm>:

void Init_tim_pwm(){
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001b08:	2100      	movs	r1, #0
 8001b0a:	4808      	ldr	r0, [pc, #32]	; (8001b2c <Init_tim_pwm+0x28>)
 8001b0c:	f005 fa10 	bl	8006f30 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001b10:	2104      	movs	r1, #4
 8001b12:	4806      	ldr	r0, [pc, #24]	; (8001b2c <Init_tim_pwm+0x28>)
 8001b14:	f005 fa0c 	bl	8006f30 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001b18:	2100      	movs	r1, #0
 8001b1a:	4805      	ldr	r0, [pc, #20]	; (8001b30 <Init_tim_pwm+0x2c>)
 8001b1c:	f005 fa08 	bl	8006f30 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001b20:	2104      	movs	r1, #4
 8001b22:	4803      	ldr	r0, [pc, #12]	; (8001b30 <Init_tim_pwm+0x2c>)
 8001b24:	f005 fa04 	bl	8006f30 <HAL_TIM_PWM_Start>
}
 8001b28:	bf00      	nop
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	20000434 	.word	0x20000434
 8001b30:	2000047c 	.word	0x2000047c

08001b34 <Stop_motor>:

static void Stop_motor(){
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
	Set_duty(0, &htim3, 1);
 8001b38:	2201      	movs	r2, #1
 8001b3a:	490c      	ldr	r1, [pc, #48]	; (8001b6c <Stop_motor+0x38>)
 8001b3c:	f04f 0000 	mov.w	r0, #0
 8001b40:	f7ff ffa8 	bl	8001a94 <Set_duty>
	Set_duty(0, &htim3, 2);
 8001b44:	2202      	movs	r2, #2
 8001b46:	4909      	ldr	r1, [pc, #36]	; (8001b6c <Stop_motor+0x38>)
 8001b48:	f04f 0000 	mov.w	r0, #0
 8001b4c:	f7ff ffa2 	bl	8001a94 <Set_duty>
	Set_duty(0, &htim4, 1);
 8001b50:	2201      	movs	r2, #1
 8001b52:	4907      	ldr	r1, [pc, #28]	; (8001b70 <Stop_motor+0x3c>)
 8001b54:	f04f 0000 	mov.w	r0, #0
 8001b58:	f7ff ff9c 	bl	8001a94 <Set_duty>
	Set_duty(0, &htim4, 2);
 8001b5c:	2202      	movs	r2, #2
 8001b5e:	4904      	ldr	r1, [pc, #16]	; (8001b70 <Stop_motor+0x3c>)
 8001b60:	f04f 0000 	mov.w	r0, #0
 8001b64:	f7ff ff96 	bl	8001a94 <Set_duty>
}
 8001b68:	bf00      	nop
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	20000434 	.word	0x20000434
 8001b70:	2000047c 	.word	0x2000047c

08001b74 <Forward>:

void Forward (float duty){
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
	Set_duty(0, &htim3, 1);
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	490c      	ldr	r1, [pc, #48]	; (8001bb0 <Forward+0x3c>)
 8001b80:	f04f 0000 	mov.w	r0, #0
 8001b84:	f7ff ff86 	bl	8001a94 <Set_duty>
	Set_duty(duty, &htim3, 2);
 8001b88:	2202      	movs	r2, #2
 8001b8a:	4909      	ldr	r1, [pc, #36]	; (8001bb0 <Forward+0x3c>)
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f7ff ff81 	bl	8001a94 <Set_duty>
	Set_duty(0, &htim4, 1);
 8001b92:	2201      	movs	r2, #1
 8001b94:	4907      	ldr	r1, [pc, #28]	; (8001bb4 <Forward+0x40>)
 8001b96:	f04f 0000 	mov.w	r0, #0
 8001b9a:	f7ff ff7b 	bl	8001a94 <Set_duty>
	Set_duty(duty, &htim4, 2);
 8001b9e:	2202      	movs	r2, #2
 8001ba0:	4904      	ldr	r1, [pc, #16]	; (8001bb4 <Forward+0x40>)
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f7ff ff76 	bl	8001a94 <Set_duty>
}
 8001ba8:	bf00      	nop
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	20000434 	.word	0x20000434
 8001bb4:	2000047c 	.word	0x2000047c

08001bb8 <Reverse>:

void Reverse (float duty){
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
	Set_duty(duty, &htim3, 1);
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	490c      	ldr	r1, [pc, #48]	; (8001bf4 <Reverse+0x3c>)
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f7ff ff65 	bl	8001a94 <Set_duty>
	Set_duty(0, &htim3, 2);
 8001bca:	2202      	movs	r2, #2
 8001bcc:	4909      	ldr	r1, [pc, #36]	; (8001bf4 <Reverse+0x3c>)
 8001bce:	f04f 0000 	mov.w	r0, #0
 8001bd2:	f7ff ff5f 	bl	8001a94 <Set_duty>
	Set_duty(duty, &htim4, 1);
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	4907      	ldr	r1, [pc, #28]	; (8001bf8 <Reverse+0x40>)
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f7ff ff5a 	bl	8001a94 <Set_duty>
	Set_duty(0, &htim4, 2);
 8001be0:	2202      	movs	r2, #2
 8001be2:	4905      	ldr	r1, [pc, #20]	; (8001bf8 <Reverse+0x40>)
 8001be4:	f04f 0000 	mov.w	r0, #0
 8001be8:	f7ff ff54 	bl	8001a94 <Set_duty>
}
 8001bec:	bf00      	nop
 8001bee:	3708      	adds	r7, #8
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	20000434 	.word	0x20000434
 8001bf8:	2000047c 	.word	0x2000047c
 8001bfc:	00000000 	.word	0x00000000

08001c00 <Controller>:

void Controller (double new_angle, double vec_angle, Fuzzy_t *fuzzy){
 8001c00:	b5b0      	push	{r4, r5, r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001c0a:	e9c7 2300 	strd	r2, r3, [r7]
	if((new_angle>ANGLE_THRESHOLD)|(new_angle<(-1)*ANGLE_THRESHOLD)){
 8001c0e:	2301      	movs	r3, #1
 8001c10:	461c      	mov	r4, r3
 8001c12:	f04f 0200 	mov.w	r2, #0
 8001c16:	4b52      	ldr	r3, [pc, #328]	; (8001d60 <Controller+0x160>)
 8001c18:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c1c:	f7fe feec 	bl	80009f8 <__aeabi_dcmpgt>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d101      	bne.n	8001c2a <Controller+0x2a>
 8001c26:	2300      	movs	r3, #0
 8001c28:	461c      	mov	r4, r3
 8001c2a:	b2e4      	uxtb	r4, r4
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	461d      	mov	r5, r3
 8001c30:	f04f 0200 	mov.w	r2, #0
 8001c34:	4b4b      	ldr	r3, [pc, #300]	; (8001d64 <Controller+0x164>)
 8001c36:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c3a:	f7fe febf 	bl	80009bc <__aeabi_dcmplt>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d101      	bne.n	8001c48 <Controller+0x48>
 8001c44:	2300      	movs	r3, #0
 8001c46:	461d      	mov	r5, r3
 8001c48:	b2eb      	uxtb	r3, r5
 8001c4a:	4323      	orrs	r3, r4
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d002      	beq.n	8001c58 <Controller+0x58>
			Stop_motor();
 8001c52:	f7ff ff6f 	bl	8001b34 <Stop_motor>
			return;
 8001c56:	e071      	b.n	8001d3c <Controller+0x13c>
		}
//	if((new_angle < OFFSET +1)|(new_angle>OFFSET -1)){
//
//				return;
//			}
	fuzzy->f_inp_fuzzy[0] = (new_angle- OFFSET)/fuzzy->f_K_theta; //normalize value
 8001c58:	a33b      	add	r3, pc, #236	; (adr r3, 8001d48 <Controller+0x148>)
 8001c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c5e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c62:	f7fe fa83 	bl	800016c <__adddf3>
 8001c66:	4602      	mov	r2, r0
 8001c68:	460b      	mov	r3, r1
 8001c6a:	4614      	mov	r4, r2
 8001c6c:	461d      	mov	r5, r3
 8001c6e:	6a3b      	ldr	r3, [r7, #32]
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7fe fbd8 	bl	8000428 <__aeabi_f2d>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	4620      	mov	r0, r4
 8001c7e:	4629      	mov	r1, r5
 8001c80:	f7fe fd54 	bl	800072c <__aeabi_ddiv>
 8001c84:	4602      	mov	r2, r0
 8001c86:	460b      	mov	r3, r1
 8001c88:	4610      	mov	r0, r2
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	f7fe fefc 	bl	8000a88 <__aeabi_d2f>
 8001c90:	4602      	mov	r2, r0
 8001c92:	6a3b      	ldr	r3, [r7, #32]
 8001c94:	601a      	str	r2, [r3, #0]
	Limit_val(&fuzzy->f_inp_fuzzy[0]);
 8001c96:	6a3b      	ldr	r3, [r7, #32]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7ff fed5 	bl	8001a48 <Limit_val>
	fuzzy->f_inp_fuzzy[1] = vec_angle/fuzzy->f_K_theta_dot;  //normalize value
 8001c9e:	6a3b      	ldr	r3, [r7, #32]
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7fe fbc0 	bl	8000428 <__aeabi_f2d>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	460b      	mov	r3, r1
 8001cac:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001cb0:	f7fe fd3c 	bl	800072c <__aeabi_ddiv>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	4610      	mov	r0, r2
 8001cba:	4619      	mov	r1, r3
 8001cbc:	f7fe fee4 	bl	8000a88 <__aeabi_d2f>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	6a3b      	ldr	r3, [r7, #32]
 8001cc4:	605a      	str	r2, [r3, #4]
	Limit_val(&fuzzy->f_inp_fuzzy[1]);
 8001cc6:	6a3b      	ldr	r3, [r7, #32]
 8001cc8:	3304      	adds	r3, #4
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff febc 	bl	8001a48 <Limit_val>
	SBR1_run(fuzzy->f_inp_fuzzy, &fuzzy->f_out_fuzzy);
 8001cd0:	6a3a      	ldr	r2, [r7, #32]
 8001cd2:	6a3b      	ldr	r3, [r7, #32]
 8001cd4:	3308      	adds	r3, #8
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4610      	mov	r0, r2
 8001cda:	f7ff fb91 	bl	8001400 <SBR1_run>
	Limit_val(&fuzzy->f_out_fuzzy);
 8001cde:	6a3b      	ldr	r3, [r7, #32]
 8001ce0:	3308      	adds	r3, #8
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7ff feb0 	bl	8001a48 <Limit_val>

	if (fuzzy->f_out_fuzzy > 0.4){
 8001ce8:	6a3b      	ldr	r3, [r7, #32]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7fe fb9b 	bl	8000428 <__aeabi_f2d>
 8001cf2:	a317      	add	r3, pc, #92	; (adr r3, 8001d50 <Controller+0x150>)
 8001cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf8:	f7fe fe7e 	bl	80009f8 <__aeabi_dcmpgt>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d005      	beq.n	8001d0e <Controller+0x10e>
		Reverse (fuzzy->f_out_fuzzy);
 8001d02:	6a3b      	ldr	r3, [r7, #32]
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7ff ff56 	bl	8001bb8 <Reverse>
		// Reverse of forward belongs to you hardware structure
		return;
 8001d0c:	e016      	b.n	8001d3c <Controller+0x13c>
	    }
	   else if  (fuzzy->f_out_fuzzy < -0.4)
 8001d0e:	6a3b      	ldr	r3, [r7, #32]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7fe fb88 	bl	8000428 <__aeabi_f2d>
 8001d18:	a30f      	add	r3, pc, #60	; (adr r3, 8001d58 <Controller+0x158>)
 8001d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d1e:	f7fe fe4d 	bl	80009bc <__aeabi_dcmplt>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d007      	beq.n	8001d38 <Controller+0x138>
	    {
		Forward ((-1)*fuzzy->f_out_fuzzy);
 8001d28:	6a3b      	ldr	r3, [r7, #32]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7ff ff1f 	bl	8001b74 <Forward>
		return;
 8001d36:	e001      	b.n	8001d3c <Controller+0x13c>
	    }
	else {
		Stop_motor();
 8001d38:	f7ff fefc 	bl	8001b34 <Stop_motor>
	     }
	}
 8001d3c:	3710      	adds	r7, #16
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bdb0      	pop	{r4, r5, r7, pc}
 8001d42:	bf00      	nop
 8001d44:	f3af 8000 	nop.w
 8001d48:	9999999a 	.word	0x9999999a
 8001d4c:	40059999 	.word	0x40059999
 8001d50:	9999999a 	.word	0x9999999a
 8001d54:	3fd99999 	.word	0x3fd99999
 8001d58:	9999999a 	.word	0x9999999a
 8001d5c:	bfd99999 	.word	0xbfd99999
 8001d60:	40518000 	.word	0x40518000
 8001d64:	c0518000 	.word	0xc0518000

08001d68 <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b088      	sub	sp, #32
 8001d6c:	af04      	add	r7, sp, #16
 8001d6e:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8001d70:	2364      	movs	r3, #100	; 0x64
 8001d72:	9302      	str	r3, [sp, #8]
 8001d74:	2301      	movs	r3, #1
 8001d76:	9301      	str	r3, [sp, #4]
 8001d78:	f107 030f 	add.w	r3, r7, #15
 8001d7c:	9300      	str	r3, [sp, #0]
 8001d7e:	2301      	movs	r3, #1
 8001d80:	2275      	movs	r2, #117	; 0x75
 8001d82:	21d0      	movs	r1, #208	; 0xd0
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f003 fdb5 	bl	80058f4 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8001d8a:	7bfb      	ldrb	r3, [r7, #15]
 8001d8c:	2b68      	cmp	r3, #104	; 0x68
 8001d8e:	d13d      	bne.n	8001e0c <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8001d90:	2300      	movs	r3, #0
 8001d92:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8001d94:	2364      	movs	r3, #100	; 0x64
 8001d96:	9302      	str	r3, [sp, #8]
 8001d98:	2301      	movs	r3, #1
 8001d9a:	9301      	str	r3, [sp, #4]
 8001d9c:	f107 030e 	add.w	r3, r7, #14
 8001da0:	9300      	str	r3, [sp, #0]
 8001da2:	2301      	movs	r3, #1
 8001da4:	226b      	movs	r2, #107	; 0x6b
 8001da6:	21d0      	movs	r1, #208	; 0xd0
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f003 fca9 	bl	8005700 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8001dae:	2307      	movs	r3, #7
 8001db0:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8001db2:	2364      	movs	r3, #100	; 0x64
 8001db4:	9302      	str	r3, [sp, #8]
 8001db6:	2301      	movs	r3, #1
 8001db8:	9301      	str	r3, [sp, #4]
 8001dba:	f107 030e 	add.w	r3, r7, #14
 8001dbe:	9300      	str	r3, [sp, #0]
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	2219      	movs	r2, #25
 8001dc4:	21d0      	movs	r1, #208	; 0xd0
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f003 fc9a 	bl	8005700 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> ï¿½ 2g
        Data = 0x00;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001dd0:	2364      	movs	r3, #100	; 0x64
 8001dd2:	9302      	str	r3, [sp, #8]
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	9301      	str	r3, [sp, #4]
 8001dd8:	f107 030e 	add.w	r3, r7, #14
 8001ddc:	9300      	str	r3, [sp, #0]
 8001dde:	2301      	movs	r3, #1
 8001de0:	221c      	movs	r2, #28
 8001de2:	21d0      	movs	r1, #208	; 0xd0
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f003 fc8b 	bl	8005700 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> ï¿½ 250 ï¿½/s
        Data = 0x00;
 8001dea:	2300      	movs	r3, #0
 8001dec:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001dee:	2364      	movs	r3, #100	; 0x64
 8001df0:	9302      	str	r3, [sp, #8]
 8001df2:	2301      	movs	r3, #1
 8001df4:	9301      	str	r3, [sp, #4]
 8001df6:	f107 030e 	add.w	r3, r7, #14
 8001dfa:	9300      	str	r3, [sp, #0]
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	221b      	movs	r2, #27
 8001e00:	21d0      	movs	r1, #208	; 0xd0
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f003 fc7c 	bl	8005700 <HAL_I2C_Mem_Write>
        return 0;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	e000      	b.n	8001e0e <MPU6050_Init+0xa6>
    }
    return 1;
 8001e0c:	2301      	movs	r3, #1
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
	...

08001e18 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8001e18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e1c:	b094      	sub	sp, #80	; 0x50
 8001e1e:	af04      	add	r7, sp, #16
 8001e20:	6078      	str	r0, [r7, #4]
 8001e22:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8001e24:	2364      	movs	r3, #100	; 0x64
 8001e26:	9302      	str	r3, [sp, #8]
 8001e28:	230e      	movs	r3, #14
 8001e2a:	9301      	str	r3, [sp, #4]
 8001e2c:	f107 0308 	add.w	r3, r7, #8
 8001e30:	9300      	str	r3, [sp, #0]
 8001e32:	2301      	movs	r3, #1
 8001e34:	223b      	movs	r2, #59	; 0x3b
 8001e36:	21d0      	movs	r1, #208	; 0xd0
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f003 fd5b 	bl	80058f4 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8001e3e:	7a3b      	ldrb	r3, [r7, #8]
 8001e40:	021b      	lsls	r3, r3, #8
 8001e42:	b21a      	sxth	r2, r3
 8001e44:	7a7b      	ldrb	r3, [r7, #9]
 8001e46:	b21b      	sxth	r3, r3
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	b21a      	sxth	r2, r3
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8001e50:	7abb      	ldrb	r3, [r7, #10]
 8001e52:	021b      	lsls	r3, r3, #8
 8001e54:	b21a      	sxth	r2, r3
 8001e56:	7afb      	ldrb	r3, [r7, #11]
 8001e58:	b21b      	sxth	r3, r3
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	b21a      	sxth	r2, r3
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8001e62:	7b3b      	ldrb	r3, [r7, #12]
 8001e64:	021b      	lsls	r3, r3, #8
 8001e66:	b21a      	sxth	r2, r3
 8001e68:	7b7b      	ldrb	r3, [r7, #13]
 8001e6a:	b21b      	sxth	r3, r3
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	b21a      	sxth	r2, r3
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8001e74:	7bbb      	ldrb	r3, [r7, #14]
 8001e76:	021b      	lsls	r3, r3, #8
 8001e78:	b21a      	sxth	r2, r3
 8001e7a:	7bfb      	ldrb	r3, [r7, #15]
 8001e7c:	b21b      	sxth	r3, r3
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8001e82:	7c3b      	ldrb	r3, [r7, #16]
 8001e84:	021b      	lsls	r3, r3, #8
 8001e86:	b21a      	sxth	r2, r3
 8001e88:	7c7b      	ldrb	r3, [r7, #17]
 8001e8a:	b21b      	sxth	r3, r3
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	b21a      	sxth	r2, r3
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8001e94:	7cbb      	ldrb	r3, [r7, #18]
 8001e96:	021b      	lsls	r3, r3, #8
 8001e98:	b21a      	sxth	r2, r3
 8001e9a:	7cfb      	ldrb	r3, [r7, #19]
 8001e9c:	b21b      	sxth	r3, r3
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	b21a      	sxth	r2, r3
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8001ea6:	7d3b      	ldrb	r3, [r7, #20]
 8001ea8:	021b      	lsls	r3, r3, #8
 8001eaa:	b21a      	sxth	r2, r3
 8001eac:	7d7b      	ldrb	r3, [r7, #21]
 8001eae:	b21b      	sxth	r3, r3
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	b21a      	sxth	r2, r3
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7fe faa0 	bl	8000404 <__aeabi_i2d>
 8001ec4:	f04f 0200 	mov.w	r2, #0
 8001ec8:	4b95      	ldr	r3, [pc, #596]	; (8002120 <MPU6050_Read_All+0x308>)
 8001eca:	f7fe fc2f 	bl	800072c <__aeabi_ddiv>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	6839      	ldr	r1, [r7, #0]
 8001ed4:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7fe fa90 	bl	8000404 <__aeabi_i2d>
 8001ee4:	f04f 0200 	mov.w	r2, #0
 8001ee8:	4b8d      	ldr	r3, [pc, #564]	; (8002120 <MPU6050_Read_All+0x308>)
 8001eea:	f7fe fc1f 	bl	800072c <__aeabi_ddiv>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	6839      	ldr	r1, [r7, #0]
 8001ef4:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7fe fa80 	bl	8000404 <__aeabi_i2d>
 8001f04:	a380      	add	r3, pc, #512	; (adr r3, 8002108 <MPU6050_Read_All+0x2f0>)
 8001f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f0a:	f7fe fc0f 	bl	800072c <__aeabi_ddiv>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	460b      	mov	r3, r1
 8001f12:	6839      	ldr	r1, [r7, #0]
 8001f14:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8001f18:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7fe febd 	bl	8000c9c <__aeabi_i2f>
 8001f22:	4603      	mov	r3, r0
 8001f24:	497f      	ldr	r1, [pc, #508]	; (8002124 <MPU6050_Read_All+0x30c>)
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7fe ffc0 	bl	8000eac <__aeabi_fdiv>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	497e      	ldr	r1, [pc, #504]	; (8002128 <MPU6050_Read_All+0x310>)
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7fe fdff 	bl	8000b34 <__addsf3>
 8001f36:	4603      	mov	r3, r0
 8001f38:	461a      	mov	r2, r3
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	641a      	str	r2, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7fe fa5d 	bl	8000404 <__aeabi_i2d>
 8001f4a:	a371      	add	r3, pc, #452	; (adr r3, 8002110 <MPU6050_Read_All+0x2f8>)
 8001f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f50:	f7fe fbec 	bl	800072c <__aeabi_ddiv>
 8001f54:	4602      	mov	r2, r0
 8001f56:	460b      	mov	r3, r1
 8001f58:	6839      	ldr	r1, [r7, #0]
 8001f5a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7fe fa4d 	bl	8000404 <__aeabi_i2d>
 8001f6a:	a369      	add	r3, pc, #420	; (adr r3, 8002110 <MPU6050_Read_All+0x2f8>)
 8001f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f70:	f7fe fbdc 	bl	800072c <__aeabi_ddiv>
 8001f74:	4602      	mov	r2, r0
 8001f76:	460b      	mov	r3, r1
 8001f78:	6839      	ldr	r1, [r7, #0]
 8001f7a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7fe fa3d 	bl	8000404 <__aeabi_i2d>
 8001f8a:	a361      	add	r3, pc, #388	; (adr r3, 8002110 <MPU6050_Read_All+0x2f8>)
 8001f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f90:	f7fe fbcc 	bl	800072c <__aeabi_ddiv>
 8001f94:	4602      	mov	r2, r0
 8001f96:	460b      	mov	r3, r1
 8001f98:	6839      	ldr	r1, [r7, #0]
 8001f9a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 8001f9e:	f002 ff05 	bl	8004dac <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	4b61      	ldr	r3, [pc, #388]	; (800212c <MPU6050_Read_All+0x314>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7fe fa1a 	bl	80003e4 <__aeabi_ui2d>
 8001fb0:	f04f 0200 	mov.w	r2, #0
 8001fb4:	4b5e      	ldr	r3, [pc, #376]	; (8002130 <MPU6050_Read_All+0x318>)
 8001fb6:	f7fe fbb9 	bl	800072c <__aeabi_ddiv>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 8001fc2:	f002 fef3 	bl	8004dac <HAL_GetTick>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	4a58      	ldr	r2, [pc, #352]	; (800212c <MPU6050_Read_All+0x314>)
 8001fca:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fda:	fb03 f202 	mul.w	r2, r3, r2
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001fec:	fb01 f303 	mul.w	r3, r1, r3
 8001ff0:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7fe fa06 	bl	8000404 <__aeabi_i2d>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	4610      	mov	r0, r2
 8001ffe:	4619      	mov	r1, r3
 8002000:	f007 f8d9 	bl	80091b6 <sqrt>
 8002004:	e9c7 0108 	strd	r0, r1, [r7, #32]
    if (roll_sqrt != 0.0)
 8002008:	f04f 0200 	mov.w	r2, #0
 800200c:	f04f 0300 	mov.w	r3, #0
 8002010:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002014:	f7fe fcc8 	bl	80009a8 <__aeabi_dcmpeq>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d119      	bne.n	8002052 <MPU6050_Read_All+0x23a>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002024:	4618      	mov	r0, r3
 8002026:	f7fe f9ed 	bl	8000404 <__aeabi_i2d>
 800202a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800202e:	f7fe fb7d 	bl	800072c <__aeabi_ddiv>
 8002032:	4602      	mov	r2, r0
 8002034:	460b      	mov	r3, r1
 8002036:	4610      	mov	r0, r2
 8002038:	4619      	mov	r1, r3
 800203a:	f007 f8e1 	bl	8009200 <atan>
 800203e:	a336      	add	r3, pc, #216	; (adr r3, 8002118 <MPU6050_Read_All+0x300>)
 8002040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002044:	f7fe fa48 	bl	80004d8 <__aeabi_dmul>
 8002048:	4602      	mov	r2, r0
 800204a:	460b      	mov	r3, r1
 800204c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8002050:	e005      	b.n	800205e <MPU6050_Read_All+0x246>
    }
    else
    {
        roll = 0.0;
 8002052:	f04f 0200 	mov.w	r2, #0
 8002056:	f04f 0300 	mov.w	r3, #0
 800205a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002064:	425b      	negs	r3, r3
 8002066:	4618      	mov	r0, r3
 8002068:	f7fe f9cc 	bl	8000404 <__aeabi_i2d>
 800206c:	4682      	mov	sl, r0
 800206e:	468b      	mov	fp, r1
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002076:	4618      	mov	r0, r3
 8002078:	f7fe f9c4 	bl	8000404 <__aeabi_i2d>
 800207c:	4602      	mov	r2, r0
 800207e:	460b      	mov	r3, r1
 8002080:	4650      	mov	r0, sl
 8002082:	4659      	mov	r1, fp
 8002084:	f007 f895 	bl	80091b2 <atan2>
 8002088:	a323      	add	r3, pc, #140	; (adr r3, 8002118 <MPU6050_Read_All+0x300>)
 800208a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800208e:	f7fe fa23 	bl	80004d8 <__aeabi_dmul>
 8002092:	4602      	mov	r2, r0
 8002094:	460b      	mov	r3, r1
 8002096:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 800209a:	f04f 0200 	mov.w	r2, #0
 800209e:	4b25      	ldr	r3, [pc, #148]	; (8002134 <MPU6050_Read_All+0x31c>)
 80020a0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80020a4:	f7fe fc8a 	bl	80009bc <__aeabi_dcmplt>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d00a      	beq.n	80020c4 <MPU6050_Read_All+0x2ac>
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80020b4:	f04f 0200 	mov.w	r2, #0
 80020b8:	4b1f      	ldr	r3, [pc, #124]	; (8002138 <MPU6050_Read_All+0x320>)
 80020ba:	f7fe fc9d 	bl	80009f8 <__aeabi_dcmpgt>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d114      	bne.n	80020ee <MPU6050_Read_All+0x2d6>
 80020c4:	f04f 0200 	mov.w	r2, #0
 80020c8:	4b1b      	ldr	r3, [pc, #108]	; (8002138 <MPU6050_Read_All+0x320>)
 80020ca:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80020ce:	f7fe fc93 	bl	80009f8 <__aeabi_dcmpgt>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d033      	beq.n	8002140 <MPU6050_Read_All+0x328>
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80020de:	f04f 0200 	mov.w	r2, #0
 80020e2:	4b14      	ldr	r3, [pc, #80]	; (8002134 <MPU6050_Read_All+0x31c>)
 80020e4:	f7fe fc6a 	bl	80009bc <__aeabi_dcmplt>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d028      	beq.n	8002140 <MPU6050_Read_All+0x328>
    {
        KalmanY.angle = pitch;
 80020ee:	4913      	ldr	r1, [pc, #76]	; (800213c <MPU6050_Read_All+0x324>)
 80020f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020f4:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 80020f8:	6839      	ldr	r1, [r7, #0]
 80020fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020fe:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8002102:	e030      	b.n	8002166 <MPU6050_Read_All+0x34e>
 8002104:	f3af 8000 	nop.w
 8002108:	00000000 	.word	0x00000000
 800210c:	40cc2900 	.word	0x40cc2900
 8002110:	00000000 	.word	0x00000000
 8002114:	40606000 	.word	0x40606000
 8002118:	1a63c1f8 	.word	0x1a63c1f8
 800211c:	404ca5dc 	.word	0x404ca5dc
 8002120:	40d00000 	.word	0x40d00000
 8002124:	43aa0000 	.word	0x43aa0000
 8002128:	42121eb8 	.word	0x42121eb8
 800212c:	200005d0 	.word	0x200005d0
 8002130:	408f4000 	.word	0x408f4000
 8002134:	c0568000 	.word	0xc0568000
 8002138:	40568000 	.word	0x40568000
 800213c:	20000060 	.word	0x20000060
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002146:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800214a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800214e:	e9cd 2300 	strd	r2, r3, [sp]
 8002152:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002156:	481c      	ldr	r0, [pc, #112]	; (80021c8 <MPU6050_Read_All+0x3b0>)
 8002158:	f000 f83c 	bl	80021d4 <Kalman_getAngle>
 800215c:	4602      	mov	r2, r0
 800215e:	460b      	mov	r3, r1
 8002160:	6839      	ldr	r1, [r7, #0]
 8002162:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800216c:	4690      	mov	r8, r2
 800216e:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8002172:	f04f 0200 	mov.w	r2, #0
 8002176:	4b15      	ldr	r3, [pc, #84]	; (80021cc <MPU6050_Read_All+0x3b4>)
 8002178:	4640      	mov	r0, r8
 800217a:	4649      	mov	r1, r9
 800217c:	f7fe fc3c 	bl	80009f8 <__aeabi_dcmpgt>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d008      	beq.n	8002198 <MPU6050_Read_All+0x380>
        DataStruct->Gx = -DataStruct->Gx;
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800218c:	4614      	mov	r4, r2
 800218e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800219e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80021a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80021a6:	e9cd 2300 	strd	r2, r3, [sp]
 80021aa:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80021ae:	4808      	ldr	r0, [pc, #32]	; (80021d0 <MPU6050_Read_All+0x3b8>)
 80021b0:	f000 f810 	bl	80021d4 <Kalman_getAngle>
 80021b4:	4602      	mov	r2, r0
 80021b6:	460b      	mov	r3, r1
 80021b8:	6839      	ldr	r1, [r7, #0]
 80021ba:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
 80021be:	bf00      	nop
 80021c0:	3740      	adds	r7, #64	; 0x40
 80021c2:	46bd      	mov	sp, r7
 80021c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021c8:	20000060 	.word	0x20000060
 80021cc:	40568000 	.word	0x40568000
 80021d0:	20000018 	.word	0x20000018

080021d4 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 80021d4:	b5b0      	push	{r4, r5, r7, lr}
 80021d6:	b092      	sub	sp, #72	; 0x48
 80021d8:	af00      	add	r7, sp, #0
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	e9c7 2300 	strd	r2, r3, [r7]
    double rate = newRate - Kalman->bias;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80021e6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80021ea:	f7fd ffbd 	bl	8000168 <__aeabi_dsub>
 80021ee:	4602      	mov	r2, r0
 80021f0:	460b      	mov	r3, r1
 80021f2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += dt * rate;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80021fc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002200:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002204:	f7fe f968 	bl	80004d8 <__aeabi_dmul>
 8002208:	4602      	mov	r2, r0
 800220a:	460b      	mov	r3, r1
 800220c:	4620      	mov	r0, r4
 800220e:	4629      	mov	r1, r5
 8002210:	f7fd ffac 	bl	800016c <__adddf3>
 8002214:	4602      	mov	r2, r0
 8002216:	460b      	mov	r3, r1
 8002218:	68f9      	ldr	r1, [r7, #12]
 800221a:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800222a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800222e:	f7fe f953 	bl	80004d8 <__aeabi_dmul>
 8002232:	4602      	mov	r2, r0
 8002234:	460b      	mov	r3, r1
 8002236:	4610      	mov	r0, r2
 8002238:	4619      	mov	r1, r3
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002240:	f7fd ff92 	bl	8000168 <__aeabi_dsub>
 8002244:	4602      	mov	r2, r0
 8002246:	460b      	mov	r3, r1
 8002248:	4610      	mov	r0, r2
 800224a:	4619      	mov	r1, r3
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002252:	f7fd ff89 	bl	8000168 <__aeabi_dsub>
 8002256:	4602      	mov	r2, r0
 8002258:	460b      	mov	r3, r1
 800225a:	4610      	mov	r0, r2
 800225c:	4619      	mov	r1, r3
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002264:	f7fd ff82 	bl	800016c <__adddf3>
 8002268:	4602      	mov	r2, r0
 800226a:	460b      	mov	r3, r1
 800226c:	4610      	mov	r0, r2
 800226e:	4619      	mov	r1, r3
 8002270:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002274:	f7fe f930 	bl	80004d8 <__aeabi_dmul>
 8002278:	4602      	mov	r2, r0
 800227a:	460b      	mov	r3, r1
 800227c:	4620      	mov	r0, r4
 800227e:	4629      	mov	r1, r5
 8002280:	f7fd ff74 	bl	800016c <__adddf3>
 8002284:	4602      	mov	r2, r0
 8002286:	460b      	mov	r3, r1
 8002288:	68f9      	ldr	r1, [r7, #12]
 800228a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800229a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800229e:	f7fe f91b 	bl	80004d8 <__aeabi_dmul>
 80022a2:	4602      	mov	r2, r0
 80022a4:	460b      	mov	r3, r1
 80022a6:	4620      	mov	r0, r4
 80022a8:	4629      	mov	r1, r5
 80022aa:	f7fd ff5d 	bl	8000168 <__aeabi_dsub>
 80022ae:	4602      	mov	r2, r0
 80022b0:	460b      	mov	r3, r1
 80022b2:	68f9      	ldr	r1, [r7, #12]
 80022b4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80022c4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80022c8:	f7fe f906 	bl	80004d8 <__aeabi_dmul>
 80022cc:	4602      	mov	r2, r0
 80022ce:	460b      	mov	r3, r1
 80022d0:	4620      	mov	r0, r4
 80022d2:	4629      	mov	r1, r5
 80022d4:	f7fd ff48 	bl	8000168 <__aeabi_dsub>
 80022d8:	4602      	mov	r2, r0
 80022da:	460b      	mov	r3, r1
 80022dc:	68f9      	ldr	r1, [r7, #12]
 80022de:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80022ee:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80022f2:	f7fe f8f1 	bl	80004d8 <__aeabi_dmul>
 80022f6:	4602      	mov	r2, r0
 80022f8:	460b      	mov	r3, r1
 80022fa:	4620      	mov	r0, r4
 80022fc:	4629      	mov	r1, r5
 80022fe:	f7fd ff35 	bl	800016c <__adddf3>
 8002302:	4602      	mov	r2, r0
 8002304:	460b      	mov	r3, r1
 8002306:	68f9      	ldr	r1, [r7, #12]
 8002308:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002318:	f7fd ff28 	bl	800016c <__adddf3>
 800231c:	4602      	mov	r2, r0
 800231e:	460b      	mov	r3, r1
 8002320:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800232a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800232e:	f7fe f9fd 	bl	800072c <__aeabi_ddiv>
 8002332:	4602      	mov	r2, r0
 8002334:	460b      	mov	r3, r1
 8002336:	e9c7 2304 	strd	r2, r3, [r7, #16]
    K[1] = Kalman->P[1][0] / S;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002340:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002344:	f7fe f9f2 	bl	800072c <__aeabi_ddiv>
 8002348:	4602      	mov	r2, r0
 800234a:	460b      	mov	r3, r1
 800234c:	e9c7 2306 	strd	r2, r3, [r7, #24]

    double y = newAngle - Kalman->angle;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002356:	e9d7 0100 	ldrd	r0, r1, [r7]
 800235a:	f7fd ff05 	bl	8000168 <__aeabi_dsub>
 800235e:	4602      	mov	r2, r0
 8002360:	460b      	mov	r3, r1
 8002362:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    Kalman->angle += K[0] * y;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800236c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002370:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002374:	f7fe f8b0 	bl	80004d8 <__aeabi_dmul>
 8002378:	4602      	mov	r2, r0
 800237a:	460b      	mov	r3, r1
 800237c:	4620      	mov	r0, r4
 800237e:	4629      	mov	r1, r5
 8002380:	f7fd fef4 	bl	800016c <__adddf3>
 8002384:	4602      	mov	r2, r0
 8002386:	460b      	mov	r3, r1
 8002388:	68f9      	ldr	r1, [r7, #12]
 800238a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002394:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002398:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800239c:	f7fe f89c 	bl	80004d8 <__aeabi_dmul>
 80023a0:	4602      	mov	r2, r0
 80023a2:	460b      	mov	r3, r1
 80023a4:	4620      	mov	r0, r4
 80023a6:	4629      	mov	r1, r5
 80023a8:	f7fd fee0 	bl	800016c <__adddf3>
 80023ac:	4602      	mov	r2, r0
 80023ae:	460b      	mov	r3, r1
 80023b0:	68f9      	ldr	r1, [r7, #12]
 80023b2:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80023bc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double P01_temp = Kalman->P[0][1];
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80023c6:	e9c7 2308 	strd	r2, r3, [r7, #32]

    Kalman->P[0][0] -= K[0] * P00_temp;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80023d0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80023d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80023d8:	f7fe f87e 	bl	80004d8 <__aeabi_dmul>
 80023dc:	4602      	mov	r2, r0
 80023de:	460b      	mov	r3, r1
 80023e0:	4620      	mov	r0, r4
 80023e2:	4629      	mov	r1, r5
 80023e4:	f7fd fec0 	bl	8000168 <__aeabi_dsub>
 80023e8:	4602      	mov	r2, r0
 80023ea:	460b      	mov	r3, r1
 80023ec:	68f9      	ldr	r1, [r7, #12]
 80023ee:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80023f8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80023fc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002400:	f7fe f86a 	bl	80004d8 <__aeabi_dmul>
 8002404:	4602      	mov	r2, r0
 8002406:	460b      	mov	r3, r1
 8002408:	4620      	mov	r0, r4
 800240a:	4629      	mov	r1, r5
 800240c:	f7fd feac 	bl	8000168 <__aeabi_dsub>
 8002410:	4602      	mov	r2, r0
 8002412:	460b      	mov	r3, r1
 8002414:	68f9      	ldr	r1, [r7, #12]
 8002416:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8002420:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002424:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002428:	f7fe f856 	bl	80004d8 <__aeabi_dmul>
 800242c:	4602      	mov	r2, r0
 800242e:	460b      	mov	r3, r1
 8002430:	4620      	mov	r0, r4
 8002432:	4629      	mov	r1, r5
 8002434:	f7fd fe98 	bl	8000168 <__aeabi_dsub>
 8002438:	4602      	mov	r2, r0
 800243a:	460b      	mov	r3, r1
 800243c:	68f9      	ldr	r1, [r7, #12]
 800243e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8002448:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800244c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002450:	f7fe f842 	bl	80004d8 <__aeabi_dmul>
 8002454:	4602      	mov	r2, r0
 8002456:	460b      	mov	r3, r1
 8002458:	4620      	mov	r0, r4
 800245a:	4629      	mov	r1, r5
 800245c:	f7fd fe84 	bl	8000168 <__aeabi_dsub>
 8002460:	4602      	mov	r2, r0
 8002462:	460b      	mov	r3, r1
 8002464:	68f9      	ldr	r1, [r7, #12]
 8002466:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
};
 8002470:	4610      	mov	r0, r2
 8002472:	4619      	mov	r1, r3
 8002474:	3748      	adds	r7, #72	; 0x48
 8002476:	46bd      	mov	sp, r7
 8002478:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800247c <_qFFMath_GetAbnormal>:
#define cast_reinterpret( dst, src, dst_type )                              \
(void)memcpy( &dst, &src, sizeof(dst_type) )                                \

/*============================================================================*/
float _qFFMath_GetAbnormal( const int i )
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
    static const uint32_t u_ab[ 2 ] = { 0x7F800000u, 0x7FBFFFFFu };
    static float f_ab[ 2 ] = { 0.0f, 0.0f };
    static bool init = true;

    if ( init ) {
 8002484:	4b0a      	ldr	r3, [pc, #40]	; (80024b0 <_qFFMath_GetAbnormal+0x34>)
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d008      	beq.n	800249e <_qFFMath_GetAbnormal+0x22>
        (void)memcpy( f_ab, u_ab, sizeof(f_ab) );
 800248c:	4b09      	ldr	r3, [pc, #36]	; (80024b4 <_qFFMath_GetAbnormal+0x38>)
 800248e:	4a0a      	ldr	r2, [pc, #40]	; (80024b8 <_qFFMath_GetAbnormal+0x3c>)
 8002490:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002494:	e883 0003 	stmia.w	r3, {r0, r1}
        init = false;
 8002498:	4b05      	ldr	r3, [pc, #20]	; (80024b0 <_qFFMath_GetAbnormal+0x34>)
 800249a:	2200      	movs	r2, #0
 800249c:	701a      	strb	r2, [r3, #0]
    }

    return f_ab[ i ];
 800249e:	4a05      	ldr	r2, [pc, #20]	; (80024b4 <_qFFMath_GetAbnormal+0x38>)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bc80      	pop	{r7}
 80024ae:	4770      	bx	lr
 80024b0:	200000a8 	.word	0x200000a8
 80024b4:	200005d4 	.word	0x200005d4
 80024b8:	08009ae0 	.word	0x08009ae0

080024bc <qFFMath_FPClassify>:
/*============================================================================*/
int qFFMath_FPClassify( const float f )
{
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
    uint32_t u = 0u;
 80024c4:	2300      	movs	r3, #0
 80024c6:	60bb      	str	r3, [r7, #8]
 80024c8:	687b      	ldr	r3, [r7, #4]
    int retVal;

    cast_reinterpret( u, f, uint32_t );
 80024ca:	60bb      	str	r3, [r7, #8]
    u &= 0x7FFFFFFFu;
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80024d2:	60bb      	str	r3, [r7, #8]

    if ( 0u == u ) {
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d102      	bne.n	80024e0 <qFFMath_FPClassify+0x24>
        retVal = QFFM_FP_ZERO;
 80024da:	2300      	movs	r3, #0
 80024dc:	60fb      	str	r3, [r7, #12]
 80024de:	e016      	b.n	800250e <qFFMath_FPClassify+0x52>
    }
    else if ( u < 0x00800000u ) {
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80024e6:	d202      	bcs.n	80024ee <qFFMath_FPClassify+0x32>
        retVal = QFFM_FP_SUBNORMAL;
 80024e8:	2301      	movs	r3, #1
 80024ea:	60fb      	str	r3, [r7, #12]
 80024ec:	e00f      	b.n	800250e <qFFMath_FPClassify+0x52>
    }
    else if ( u < 0x7F800000u ) {
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80024f4:	d202      	bcs.n	80024fc <qFFMath_FPClassify+0x40>
        retVal = QFFM_FP_NORMAL;
 80024f6:	2302      	movs	r3, #2
 80024f8:	60fb      	str	r3, [r7, #12]
 80024fa:	e008      	b.n	800250e <qFFMath_FPClassify+0x52>
    }
    else if ( 0x7F800000U == u ) {
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8002502:	d102      	bne.n	800250a <qFFMath_FPClassify+0x4e>
        retVal = QFFM_FP_INFINITE;
 8002504:	2303      	movs	r3, #3
 8002506:	60fb      	str	r3, [r7, #12]
 8002508:	e001      	b.n	800250e <qFFMath_FPClassify+0x52>
    }
    else {
        retVal = QFFM_FP_NAN;
 800250a:	2304      	movs	r3, #4
 800250c:	60fb      	str	r3, [r7, #12]
    }

    return retVal;
 800250e:	68fb      	ldr	r3, [r7, #12]
}
 8002510:	4618      	mov	r0, r3
 8002512:	3714      	adds	r7, #20
 8002514:	46bd      	mov	sp, r7
 8002516:	bc80      	pop	{r7}
 8002518:	4770      	bx	lr

0800251a <qFFMath_IsNaN>:
/*============================================================================*/
bool qFFMath_IsNaN( const float x )
{
 800251a:	b580      	push	{r7, lr}
 800251c:	b082      	sub	sp, #8
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
    return ( QFFM_FP_NAN == qFFMath_FPClassify( x ) );
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f7ff ffca 	bl	80024bc <qFFMath_FPClassify>
 8002528:	4603      	mov	r3, r0
 800252a:	2b04      	cmp	r3, #4
 800252c:	bf0c      	ite	eq
 800252e:	2301      	moveq	r3, #1
 8002530:	2300      	movne	r3, #0
 8002532:	b2db      	uxtb	r3, r3
}
 8002534:	4618      	mov	r0, r3
 8002536:	3708      	adds	r7, #8
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <qFFMath_Abs>:
{
    return ( qFFMath_FPClassify( x ) == QFFM_FP_NORMAL );
}
/*============================================================================*/
float qFFMath_Abs( float x )
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
    return ( x < 0.0f ) ? -x : x;
 8002544:	f04f 0100 	mov.w	r1, #0
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f7fe fd99 	bl	8001080 <__aeabi_fcmplt>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d003      	beq.n	800255c <qFFMath_Abs+0x20>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800255a:	e000      	b.n	800255e <qFFMath_Abs+0x22>
 800255c:	687b      	ldr	r3, [r7, #4]
}
 800255e:	4618      	mov	r0, r3
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}

08002566 <qFFMath_Sqrt>:

    return z*( 2.0f - ( x*z ) );
}
/*============================================================================*/
float qFFMath_Sqrt( float x )
{
 8002566:	b580      	push	{r7, lr}
 8002568:	b086      	sub	sp, #24
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
    float retVal;

    if ( x < 0.0f ) {
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f04f 0100 	mov.w	r1, #0
 8002574:	4618      	mov	r0, r3
 8002576:	f7fe fd83 	bl	8001080 <__aeabi_fcmplt>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d004      	beq.n	800258a <qFFMath_Sqrt+0x24>
        retVal = QFFM_NAN;
 8002580:	2001      	movs	r0, #1
 8002582:	f7ff ff7b 	bl	800247c <_qFFMath_GetAbnormal>
 8002586:	6178      	str	r0, [r7, #20]
 8002588:	e02f      	b.n	80025ea <qFFMath_Sqrt+0x84>
    }
    else if ( QFFM_FP_ZERO == qFFMath_FPClassify( x ) ) {
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff ff95 	bl	80024bc <qFFMath_FPClassify>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d103      	bne.n	80025a0 <qFFMath_Sqrt+0x3a>
        retVal = 0.0f;
 8002598:	f04f 0300 	mov.w	r3, #0
 800259c:	617b      	str	r3, [r7, #20]
 800259e:	e024      	b.n	80025ea <qFFMath_Sqrt+0x84>
    }
    else {
        uint32_t y = 0u;
 80025a0:	2300      	movs	r3, #0
 80025a2:	613b      	str	r3, [r7, #16]
        float z = 0.0f;
 80025a4:	f04f 0300 	mov.w	r3, #0
 80025a8:	60fb      	str	r3, [r7, #12]
 80025aa:	687b      	ldr	r3, [r7, #4]

        cast_reinterpret( y, x, uint32_t );
 80025ac:	613b      	str	r3, [r7, #16]
        y = ( ( y - 0x00800000u ) >> 1u ) + 0x20000000u;
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80025b4:	085b      	lsrs	r3, r3, #1
 80025b6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80025ba:	613b      	str	r3, [r7, #16]
 80025bc:	693b      	ldr	r3, [r7, #16]
        cast_reinterpret( z, y, float );
 80025be:	60fb      	str	r3, [r7, #12]
        retVal = ( ( x/z ) + z ) * 0.5f;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	68fa      	ldr	r2, [r7, #12]
 80025c4:	4611      	mov	r1, r2
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7fe fc70 	bl	8000eac <__aeabi_fdiv>
 80025cc:	4603      	mov	r3, r0
 80025ce:	461a      	mov	r2, r3
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	4619      	mov	r1, r3
 80025d4:	4610      	mov	r0, r2
 80025d6:	f7fe faad 	bl	8000b34 <__addsf3>
 80025da:	4603      	mov	r3, r0
 80025dc:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7fe fbaf 	bl	8000d44 <__aeabi_fmul>
 80025e6:	4603      	mov	r3, r0
 80025e8:	617b      	str	r3, [r7, #20]
    }

    return retVal;
 80025ea:	697b      	ldr	r3, [r7, #20]
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3718      	adds	r7, #24
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <qFFMath_Sin>:
    return ( QFFM_FP_ZERO == qFFMath_FPClassify( x )) ? QFFM_NAN
                                                      : ( x - ( y*qFFMath_Trunc( x/y ) ) );
}
/*============================================================================*/
float qFFMath_Sin( float x )
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
    float y;
    x *= -0.318309886f;
 80025fc:	491e      	ldr	r1, [pc, #120]	; (8002678 <qFFMath_Sin+0x84>)
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f7fe fba0 	bl	8000d44 <__aeabi_fmul>
 8002604:	4603      	mov	r3, r0
 8002606:	607b      	str	r3, [r7, #4]
    y = x + 25165824.0f;
 8002608:	491c      	ldr	r1, [pc, #112]	; (800267c <qFFMath_Sin+0x88>)
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f7fe fa92 	bl	8000b34 <__addsf3>
 8002610:	4603      	mov	r3, r0
 8002612:	60fb      	str	r3, [r7, #12]
    x -= y - 25165824.0f;
 8002614:	4919      	ldr	r1, [pc, #100]	; (800267c <qFFMath_Sin+0x88>)
 8002616:	68f8      	ldr	r0, [r7, #12]
 8002618:	f7fe fa8a 	bl	8000b30 <__aeabi_fsub>
 800261c:	4603      	mov	r3, r0
 800261e:	4619      	mov	r1, r3
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f7fe fa85 	bl	8000b30 <__aeabi_fsub>
 8002626:	4603      	mov	r3, r0
 8002628:	607b      	str	r3, [r7, #4]
    x *= qFFMath_Abs( x ) - 1.0f;
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f7ff ff86 	bl	800253c <qFFMath_Abs>
 8002630:	4603      	mov	r3, r0
 8002632:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002636:	4618      	mov	r0, r3
 8002638:	f7fe fa7a 	bl	8000b30 <__aeabi_fsub>
 800263c:	4603      	mov	r3, r0
 800263e:	4619      	mov	r1, r3
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f7fe fb7f 	bl	8000d44 <__aeabi_fmul>
 8002646:	4603      	mov	r3, r0
 8002648:	607b      	str	r3, [r7, #4]
    return x*( ( 3.5841304553896f*qFFMath_Abs( x ) ) + 3.1039673861526f );
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f7ff ff76 	bl	800253c <qFFMath_Abs>
 8002650:	4603      	mov	r3, r0
 8002652:	490b      	ldr	r1, [pc, #44]	; (8002680 <qFFMath_Sin+0x8c>)
 8002654:	4618      	mov	r0, r3
 8002656:	f7fe fb75 	bl	8000d44 <__aeabi_fmul>
 800265a:	4603      	mov	r3, r0
 800265c:	4909      	ldr	r1, [pc, #36]	; (8002684 <qFFMath_Sin+0x90>)
 800265e:	4618      	mov	r0, r3
 8002660:	f7fe fa68 	bl	8000b34 <__addsf3>
 8002664:	4603      	mov	r3, r0
 8002666:	6879      	ldr	r1, [r7, #4]
 8002668:	4618      	mov	r0, r3
 800266a:	f7fe fb6b 	bl	8000d44 <__aeabi_fmul>
 800266e:	4603      	mov	r3, r0
}
 8002670:	4618      	mov	r0, r3
 8002672:	3710      	adds	r7, #16
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	bea2f983 	.word	0xbea2f983
 800267c:	4bc00000 	.word	0x4bc00000
 8002680:	40656265 	.word	0x40656265
 8002684:	4046a767 	.word	0x4046a767

08002688 <qFFMath_Cos>:
/*============================================================================*/
float qFFMath_Cos( float x )
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
    return qFFMath_Sin( x + 1.570796327f );
 8002690:	4906      	ldr	r1, [pc, #24]	; (80026ac <qFFMath_Cos+0x24>)
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f7fe fa4e 	bl	8000b34 <__addsf3>
 8002698:	4603      	mov	r3, r0
 800269a:	4618      	mov	r0, r3
 800269c:	f7ff ffaa 	bl	80025f4 <qFFMath_Sin>
 80026a0:	4603      	mov	r3, r0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	3fc90fdb 	.word	0x3fc90fdb

080026b0 <qFFMath_Exp2>:
    y = qFFMath_ATan( y/( x + f ) ) + ( ( x < 0.0f ) ? t : 0.0f );
    return y + ( f*( ( 0.5f*t ) - y ) );
}
/*============================================================================*/
float qFFMath_Exp2( float x )
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b086      	sub	sp, #24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
    float retVal;

    if ( x <= -126.0f ) {
 80026b8:	492e      	ldr	r1, [pc, #184]	; (8002774 <qFFMath_Exp2+0xc4>)
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f7fe fcea 	bl	8001094 <__aeabi_fcmple>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d003      	beq.n	80026ce <qFFMath_Exp2+0x1e>
        retVal = 0.0f;
 80026c6:	f04f 0300 	mov.w	r3, #0
 80026ca:	617b      	str	r3, [r7, #20]
 80026cc:	e04c      	b.n	8002768 <qFFMath_Exp2+0xb8>
    }
    else if ( x > 128.0f ) {
 80026ce:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f7fe fcf2 	bl	80010bc <__aeabi_fcmpgt>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d004      	beq.n	80026e8 <qFFMath_Exp2+0x38>
        retVal = QFFM_INFINITY;
 80026de:	2000      	movs	r0, #0
 80026e0:	f7ff fecc 	bl	800247c <_qFFMath_GetAbnormal>
 80026e4:	6178      	str	r0, [r7, #20]
 80026e6:	e03f      	b.n	8002768 <qFFMath_Exp2+0xb8>
    }
    else {
        float y = 0.0f;
 80026e8:	f04f 0300 	mov.w	r3, #0
 80026ec:	613b      	str	r3, [r7, #16]
        uint32_t exponent;
        /*cstat -CERT-FLP34-C -MISRAC2012-Rule-10.8*/
        exponent = (uint32_t)( x + 127.0f );
 80026ee:	4922      	ldr	r1, [pc, #136]	; (8002778 <qFFMath_Exp2+0xc8>)
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f7fe fa1f 	bl	8000b34 <__addsf3>
 80026f6:	4603      	mov	r3, r0
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7fe fd0f 	bl	800111c <__aeabi_f2uiz>
 80026fe:	4603      	mov	r3, r0
 8002700:	60fb      	str	r3, [r7, #12]
        /*cstat +CERT-FLP34-C +MISRAC2012-Rule-10.8 -CERT-FLP36-C*/
        x += 127.0f - (float)exponent;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	4618      	mov	r0, r3
 8002706:	f7fe fac5 	bl	8000c94 <__aeabi_ui2f>
 800270a:	4603      	mov	r3, r0
 800270c:	4619      	mov	r1, r3
 800270e:	481a      	ldr	r0, [pc, #104]	; (8002778 <qFFMath_Exp2+0xc8>)
 8002710:	f7fe fa0e 	bl	8000b30 <__aeabi_fsub>
 8002714:	4603      	mov	r3, r0
 8002716:	4619      	mov	r1, r3
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f7fe fa0b 	bl	8000b34 <__addsf3>
 800271e:	4603      	mov	r3, r0
 8002720:	607b      	str	r3, [r7, #4]
        /*cstat +CERT-FLP36-C*/
        exponent <<= 23u;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	05db      	lsls	r3, r3, #23
 8002726:	60fb      	str	r3, [r7, #12]
 8002728:	68fb      	ldr	r3, [r7, #12]
        cast_reinterpret( y, exponent, float );
 800272a:	613b      	str	r3, [r7, #16]
        x *= ( x*0.339766027f ) + 0.660233972f;
 800272c:	4913      	ldr	r1, [pc, #76]	; (800277c <qFFMath_Exp2+0xcc>)
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f7fe fb08 	bl	8000d44 <__aeabi_fmul>
 8002734:	4603      	mov	r3, r0
 8002736:	4912      	ldr	r1, [pc, #72]	; (8002780 <qFFMath_Exp2+0xd0>)
 8002738:	4618      	mov	r0, r3
 800273a:	f7fe f9fb 	bl	8000b34 <__addsf3>
 800273e:	4603      	mov	r3, r0
 8002740:	4619      	mov	r1, r3
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f7fe fafe 	bl	8000d44 <__aeabi_fmul>
 8002748:	4603      	mov	r3, r0
 800274a:	607b      	str	r3, [r7, #4]
        retVal = y*( x + 1.0f );
 800274c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f7fe f9ef 	bl	8000b34 <__addsf3>
 8002756:	4603      	mov	r3, r0
 8002758:	461a      	mov	r2, r3
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	4619      	mov	r1, r3
 800275e:	4610      	mov	r0, r2
 8002760:	f7fe faf0 	bl	8000d44 <__aeabi_fmul>
 8002764:	4603      	mov	r3, r0
 8002766:	617b      	str	r3, [r7, #20]
    }

    return retVal;
 8002768:	697b      	ldr	r3, [r7, #20]
}
 800276a:	4618      	mov	r0, r3
 800276c:	3718      	adds	r7, #24
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	c2fc0000 	.word	0xc2fc0000
 8002778:	42fe0000 	.word	0x42fe0000
 800277c:	3eadf5d0 	.word	0x3eadf5d0
 8002780:	3f290518 	.word	0x3f290518

08002784 <qFFMath_Log2>:
/*============================================================================*/
float qFFMath_Log2( float x )
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
    float retVal;

    if ( x < 0.0f ) {
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f04f 0100 	mov.w	r1, #0
 8002792:	4618      	mov	r0, r3
 8002794:	f7fe fc74 	bl	8001080 <__aeabi_fcmplt>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d004      	beq.n	80027a8 <qFFMath_Log2+0x24>
        retVal = QFFM_NAN;
 800279e:	2001      	movs	r0, #1
 80027a0:	f7ff fe6c 	bl	800247c <_qFFMath_GetAbnormal>
 80027a4:	6178      	str	r0, [r7, #20]
 80027a6:	e049      	b.n	800283c <qFFMath_Log2+0xb8>
    }
    else if ( QFFM_FP_ZERO == qFFMath_FPClassify( x ) ) {
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff fe86 	bl	80024bc <qFFMath_FPClassify>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d107      	bne.n	80027c6 <qFFMath_Log2+0x42>
        retVal = -QFFM_INFINITY;
 80027b6:	2000      	movs	r0, #0
 80027b8:	f7ff fe60 	bl	800247c <_qFFMath_GetAbnormal>
 80027bc:	4603      	mov	r3, r0
 80027be:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80027c2:	617b      	str	r3, [r7, #20]
 80027c4:	e03a      	b.n	800283c <qFFMath_Log2+0xb8>
    }
    else {
        uint32_t y = 0u, y2;
 80027c6:	2300      	movs	r3, #0
 80027c8:	60fb      	str	r3, [r7, #12]
 80027ca:	687b      	ldr	r3, [r7, #4]

        cast_reinterpret( y, x, uint32_t );
 80027cc:	60fb      	str	r3, [r7, #12]
        y2 = y;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	613b      	str	r3, [r7, #16]
        y >>= 23u;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	0ddb      	lsrs	r3, r3, #23
 80027d6:	60fb      	str	r3, [r7, #12]
        /*cstat -CERT-FLP36-C*/
        retVal = (float)y;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	4618      	mov	r0, r3
 80027dc:	f7fe fa5a 	bl	8000c94 <__aeabi_ui2f>
 80027e0:	4603      	mov	r3, r0
 80027e2:	617b      	str	r3, [r7, #20]
        /*cstat +CERT-FLP36-C*/
        y = ( y2 & 0x007FFFFFu ) | 0x3F800000u;
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80027ea:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 80027ee:	60fb      	str	r3, [r7, #12]
 80027f0:	68fb      	ldr	r3, [r7, #12]
        cast_reinterpret( x, y, float );
 80027f2:	607b      	str	r3, [r7, #4]
        retVal += -128.0f + ( x*( ( -0.333333333f*x ) + 2.0f ) ) - 0.666666666f;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	4914      	ldr	r1, [pc, #80]	; (8002848 <qFFMath_Log2+0xc4>)
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7fe faa3 	bl	8000d44 <__aeabi_fmul>
 80027fe:	4603      	mov	r3, r0
 8002800:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002804:	4618      	mov	r0, r3
 8002806:	f7fe f995 	bl	8000b34 <__addsf3>
 800280a:	4603      	mov	r3, r0
 800280c:	461a      	mov	r2, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4619      	mov	r1, r3
 8002812:	4610      	mov	r0, r2
 8002814:	f7fe fa96 	bl	8000d44 <__aeabi_fmul>
 8002818:	4603      	mov	r3, r0
 800281a:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
 800281e:	4618      	mov	r0, r3
 8002820:	f7fe f986 	bl	8000b30 <__aeabi_fsub>
 8002824:	4603      	mov	r3, r0
 8002826:	4909      	ldr	r1, [pc, #36]	; (800284c <qFFMath_Log2+0xc8>)
 8002828:	4618      	mov	r0, r3
 800282a:	f7fe f981 	bl	8000b30 <__aeabi_fsub>
 800282e:	4603      	mov	r3, r0
 8002830:	4619      	mov	r1, r3
 8002832:	6978      	ldr	r0, [r7, #20]
 8002834:	f7fe f97e 	bl	8000b34 <__addsf3>
 8002838:	4603      	mov	r3, r0
 800283a:	617b      	str	r3, [r7, #20]
    }

    return retVal;
 800283c:	697b      	ldr	r3, [r7, #20]
}
 800283e:	4618      	mov	r0, r3
 8002840:	3718      	adds	r7, #24
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	beaaaaab 	.word	0xbeaaaaab
 800284c:	3f2aaaab 	.word	0x3f2aaaab

08002850 <qFFMath_Exp>:
/*============================================================================*/
float qFFMath_Exp( float x )
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
    return qFFMath_Exp2( 1.442695041f*x );
 8002858:	4906      	ldr	r1, [pc, #24]	; (8002874 <qFFMath_Exp+0x24>)
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f7fe fa72 	bl	8000d44 <__aeabi_fmul>
 8002860:	4603      	mov	r3, r0
 8002862:	4618      	mov	r0, r3
 8002864:	f7ff ff24 	bl	80026b0 <qFFMath_Exp2>
 8002868:	4603      	mov	r3, r0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	3fb8aa3b 	.word	0x3fb8aa3b

08002878 <qFFMath_Log>:
{
    return qFFMath_Exp2( 3.32192809f*x );
}
/*============================================================================*/
float qFFMath_Log( float x )
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
    return 0.693147181f*qFFMath_Log2(x);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f7ff ff7f 	bl	8002784 <qFFMath_Log2>
 8002886:	4603      	mov	r3, r0
 8002888:	4904      	ldr	r1, [pc, #16]	; (800289c <qFFMath_Log+0x24>)
 800288a:	4618      	mov	r0, r3
 800288c:	f7fe fa5a 	bl	8000d44 <__aeabi_fmul>
 8002890:	4603      	mov	r3, r0
}
 8002892:	4618      	mov	r0, r3
 8002894:	3708      	adds	r7, #8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	3f317218 	.word	0x3f317218

080028a0 <qFFMath_Pow>:
    return 0.301029996f*qFFMath_Log2(x);
}
/*============================================================================*/
float qFFMath_Pow( float b,
                   float e )
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
    return qFFMath_Exp2( e*qFFMath_Log2( b ) );
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f7ff ff6a 	bl	8002784 <qFFMath_Log2>
 80028b0:	4603      	mov	r3, r0
 80028b2:	6839      	ldr	r1, [r7, #0]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7fe fa45 	bl	8000d44 <__aeabi_fmul>
 80028ba:	4603      	mov	r3, r0
 80028bc:	4618      	mov	r0, r3
 80028be:	f7ff fef7 	bl	80026b0 <qFFMath_Exp2>
 80028c2:	4603      	mov	r3, r0
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3708      	adds	r7, #8
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <qFIS_SetParameter>:

/*============================================================================*/
int qFIS_SetParameter( qFIS_t * const f,
                       const qFIS_Parameter_t p,
                       const qFIS_ParamValue_t x )
{
 80028cc:	b480      	push	{r7}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	460b      	mov	r3, r1
 80028d6:	70fb      	strb	r3, [r7, #3]
 80028d8:	4613      	mov	r3, r2
 80028da:	70bb      	strb	r3, [r7, #2]
    int retVal = 0;
 80028dc:	2300      	movs	r3, #0
 80028de:	60fb      	str	r3, [r7, #12]
    typedef float (*methods_fcn)( const float a, const float b );
    static const methods_fcn method[ 5 ] = { &qFIS_Min, &qFIS_Prod, &qFIS_Max,
                                             &qFIS_ProbOR, &qFIS_Sum
                                           };

    if ( NULL != f ) {
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d05a      	beq.n	800299c <qFIS_SetParameter+0xd0>
        switch ( p ) {
 80028e6:	78fb      	ldrb	r3, [r7, #3]
 80028e8:	2b04      	cmp	r3, #4
 80028ea:	d84c      	bhi.n	8002986 <qFIS_SetParameter+0xba>
 80028ec:	a201      	add	r2, pc, #4	; (adr r2, 80028f4 <qFIS_SetParameter+0x28>)
 80028ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028f2:	bf00      	nop
 80028f4:	08002909 	.word	0x08002909
 80028f8:	08002921 	.word	0x08002921
 80028fc:	0800293f 	.word	0x0800293f
 8002900:	08002957 	.word	0x08002957
 8002904:	08002975 	.word	0x08002975
            case qFIS_Implication:
                if ( x <= qFIS_PROD ) {
 8002908:	78bb      	ldrb	r3, [r7, #2]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d83d      	bhi.n	800298a <qFIS_SetParameter+0xbe>
                    f->implicate = method[ x ];
 800290e:	78bb      	ldrb	r3, [r7, #2]
 8002910:	4a25      	ldr	r2, [pc, #148]	; (80029a8 <qFIS_SetParameter+0xdc>)
 8002912:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	619a      	str	r2, [r3, #24]
                    retVal = 1;
 800291a:	2301      	movs	r3, #1
 800291c:	60fb      	str	r3, [r7, #12]
                }
                break;
 800291e:	e034      	b.n	800298a <qFIS_SetParameter+0xbe>
            case qFIS_Aggregation:
                if ( ( x >= qFIS_MAX ) && ( x <= qFIS_SUM ) ) {
 8002920:	78bb      	ldrb	r3, [r7, #2]
 8002922:	2b01      	cmp	r3, #1
 8002924:	d933      	bls.n	800298e <qFIS_SetParameter+0xc2>
 8002926:	78bb      	ldrb	r3, [r7, #2]
 8002928:	2b04      	cmp	r3, #4
 800292a:	d830      	bhi.n	800298e <qFIS_SetParameter+0xc2>
                    f->aggregate = method[ x ];
 800292c:	78bb      	ldrb	r3, [r7, #2]
 800292e:	4a1e      	ldr	r2, [pc, #120]	; (80029a8 <qFIS_SetParameter+0xdc>)
 8002930:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	61da      	str	r2, [r3, #28]
                    retVal = 1;
 8002938:	2301      	movs	r3, #1
 800293a:	60fb      	str	r3, [r7, #12]
                }
                break;
 800293c:	e027      	b.n	800298e <qFIS_SetParameter+0xc2>
            case qFIS_AND:
                if ( x <= qFIS_PROD ) {
 800293e:	78bb      	ldrb	r3, [r7, #2]
 8002940:	2b01      	cmp	r3, #1
 8002942:	d826      	bhi.n	8002992 <qFIS_SetParameter+0xc6>
                    f->andOp = method[ x ];
 8002944:	78bb      	ldrb	r3, [r7, #2]
 8002946:	4a18      	ldr	r2, [pc, #96]	; (80029a8 <qFIS_SetParameter+0xdc>)
 8002948:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	611a      	str	r2, [r3, #16]
                    retVal = 1;
 8002950:	2301      	movs	r3, #1
 8002952:	60fb      	str	r3, [r7, #12]
                }
                break;
 8002954:	e01d      	b.n	8002992 <qFIS_SetParameter+0xc6>
            case qFIS_OR:
                if ( ( x >= qFIS_MAX ) && ( x <= qFIS_PROBOR ) ) {
 8002956:	78bb      	ldrb	r3, [r7, #2]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d91c      	bls.n	8002996 <qFIS_SetParameter+0xca>
 800295c:	78bb      	ldrb	r3, [r7, #2]
 800295e:	2b03      	cmp	r3, #3
 8002960:	d819      	bhi.n	8002996 <qFIS_SetParameter+0xca>
                    f->orOp = method[ x ];
 8002962:	78bb      	ldrb	r3, [r7, #2]
 8002964:	4a10      	ldr	r2, [pc, #64]	; (80029a8 <qFIS_SetParameter+0xdc>)
 8002966:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	615a      	str	r2, [r3, #20]
                    retVal = 1;
 800296e:	2301      	movs	r3, #1
 8002970:	60fb      	str	r3, [r7, #12]
                }
                break;
 8002972:	e010      	b.n	8002996 <qFIS_SetParameter+0xca>
            case qFIS_EvalPoints:
                if ( (int)x >= 20 ) {
 8002974:	78bb      	ldrb	r3, [r7, #2]
 8002976:	2b13      	cmp	r3, #19
 8002978:	d90f      	bls.n	800299a <qFIS_SetParameter+0xce>
                    f->nPoints = (size_t)x;
 800297a:	78ba      	ldrb	r2, [r7, #2]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	64da      	str	r2, [r3, #76]	; 0x4c
                    retVal = 1;
 8002980:	2301      	movs	r3, #1
 8002982:	60fb      	str	r3, [r7, #12]
                }
                break;
 8002984:	e009      	b.n	800299a <qFIS_SetParameter+0xce>
            default:
                break;
 8002986:	bf00      	nop
 8002988:	e008      	b.n	800299c <qFIS_SetParameter+0xd0>
                break;
 800298a:	bf00      	nop
 800298c:	e006      	b.n	800299c <qFIS_SetParameter+0xd0>
                break;
 800298e:	bf00      	nop
 8002990:	e004      	b.n	800299c <qFIS_SetParameter+0xd0>
                break;
 8002992:	bf00      	nop
 8002994:	e002      	b.n	800299c <qFIS_SetParameter+0xd0>
                break;
 8002996:	bf00      	nop
 8002998:	e000      	b.n	800299c <qFIS_SetParameter+0xd0>
                break;
 800299a:	bf00      	nop
        }
    }

    return retVal;
 800299c:	68fb      	ldr	r3, [r7, #12]
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3714      	adds	r7, #20
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bc80      	pop	{r7}
 80029a6:	4770      	bx	lr
 80029a8:	08009ae8 	.word	0x08009ae8

080029ac <qFIS_Setup>:
                qFIS_MF_t *const mf_outputs,
                const size_t nmo,
                const qFIS_Rules_t * const r,
                float *wi,
                const size_t n )
{
 80029ac:	b5b0      	push	{r4, r5, r7, lr}
 80029ae:	b086      	sub	sp, #24
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	607a      	str	r2, [r7, #4]
 80029b6:	603b      	str	r3, [r7, #0]
 80029b8:	460b      	mov	r3, r1
 80029ba:	72fb      	strb	r3, [r7, #11]
    int retVal = 0;
 80029bc:	2300      	movs	r3, #0
 80029be:	617b      	str	r3, [r7, #20]

    if ( ( NULL != f ) && ( t <= Tsukamoto ) && ( NULL != r ) && ( NULL != wi ) ) {
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	f000 80bb 	beq.w	8002b3e <qFIS_Setup+0x192>
 80029c8:	7afb      	ldrb	r3, [r7, #11]
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	f200 80b7 	bhi.w	8002b3e <qFIS_Setup+0x192>
 80029d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	f000 80b3 	beq.w	8002b3e <qFIS_Setup+0x192>
 80029d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029da:	2b00      	cmp	r3, #0
 80029dc:	f000 80af 	beq.w	8002b3e <qFIS_Setup+0x192>
        size_t i;

        f->nInputs = ni/sizeof(qFIS_Input_t);
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	4a59      	ldr	r2, [pc, #356]	; (8002b48 <qFIS_Setup+0x19c>)
 80029e4:	fba2 2303 	umull	r2, r3, r2, r3
 80029e8:	08da      	lsrs	r2, r3, #3
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	63da      	str	r2, [r3, #60]	; 0x3c
        f->nOutputs = no/sizeof(qFIS_Output_t);
 80029ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f0:	4a56      	ldr	r2, [pc, #344]	; (8002b4c <qFIS_Setup+0x1a0>)
 80029f2:	fba2 2303 	umull	r2, r3, r2, r3
 80029f6:	091a      	lsrs	r2, r3, #4
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	641a      	str	r2, [r3, #64]	; 0x40
        f->nMFInputs = nmi/sizeof(qFIS_MF_t);
 80029fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029fe:	4a54      	ldr	r2, [pc, #336]	; (8002b50 <qFIS_Setup+0x1a4>)
 8002a00:	fba2 2303 	umull	r2, r3, r2, r3
 8002a04:	091a      	lsrs	r2, r3, #4
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	645a      	str	r2, [r3, #68]	; 0x44
        f->nMFOutputs = nmo/sizeof(qFIS_MF_t);
 8002a0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a0c:	4a50      	ldr	r2, [pc, #320]	; (8002b50 <qFIS_Setup+0x1a4>)
 8002a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a12:	091a      	lsrs	r2, r3, #4
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	649a      	str	r2, [r3, #72]	; 0x48
        f->input = inputs;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	601a      	str	r2, [r3, #0]
        f->output = outputs;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a22:	605a      	str	r2, [r3, #4]
        f->inMF = mf_inputs;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a28:	609a      	str	r2, [r3, #8]
        f->outMF = mf_outputs;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a2e:	60da      	str	r2, [r3, #12]
        f->wi = wi;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a34:	631a      	str	r2, [r3, #48]	; 0x30
        f->rules = r;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002a3a:	635a      	str	r2, [r3, #52]	; 0x34
        f->nRules = n;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a40:	651a      	str	r2, [r3, #80]	; 0x50
        f->type = t;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	7afa      	ldrb	r2, [r7, #11]
 8002a46:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
        retVal += qFIS_SetParameter( f, qFIS_EvalPoints, (qFIS_ParamValue_t)100 );
 8002a4a:	2264      	movs	r2, #100	; 0x64
 8002a4c:	2104      	movs	r1, #4
 8002a4e:	68f8      	ldr	r0, [r7, #12]
 8002a50:	f7ff ff3c 	bl	80028cc <qFIS_SetParameter>
 8002a54:	4602      	mov	r2, r0
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	4413      	add	r3, r2
 8002a5a:	617b      	str	r3, [r7, #20]
        retVal += qFIS_SetParameter( f, qFIS_AND, qFIS_MIN );
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	2102      	movs	r1, #2
 8002a60:	68f8      	ldr	r0, [r7, #12]
 8002a62:	f7ff ff33 	bl	80028cc <qFIS_SetParameter>
 8002a66:	4602      	mov	r2, r0
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	617b      	str	r3, [r7, #20]
        retVal += qFIS_SetParameter( f, qFIS_OR, qFIS_MAX );
 8002a6e:	2202      	movs	r2, #2
 8002a70:	2103      	movs	r1, #3
 8002a72:	68f8      	ldr	r0, [r7, #12]
 8002a74:	f7ff ff2a 	bl	80028cc <qFIS_SetParameter>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	617b      	str	r3, [r7, #20]
        retVal += qFIS_SetParameter( f, qFIS_Implication, qFIS_MIN );
 8002a80:	2200      	movs	r2, #0
 8002a82:	2100      	movs	r1, #0
 8002a84:	68f8      	ldr	r0, [r7, #12]
 8002a86:	f7ff ff21 	bl	80028cc <qFIS_SetParameter>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	4413      	add	r3, r2
 8002a90:	617b      	str	r3, [r7, #20]
        retVal += qFIS_SetParameter( f, qFIS_Aggregation, qFIS_MAX );
 8002a92:	2202      	movs	r2, #2
 8002a94:	2101      	movs	r1, #1
 8002a96:	68f8      	ldr	r0, [r7, #12]
 8002a98:	f7ff ff18 	bl	80028cc <qFIS_SetParameter>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	617b      	str	r3, [r7, #20]
        retVal = ( 5 == retVal ) ? 1 : 0;
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	2b05      	cmp	r3, #5
 8002aa8:	bf0c      	ite	eq
 8002aaa:	2301      	moveq	r3, #1
 8002aac:	2300      	movne	r3, #0
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	617b      	str	r3, [r7, #20]
        f->deFuzz = ( Mamdani == t ) ? &qFIS_DeFuzz_Centroid
                                     : &qFIS_DeFuzz_WtAverage;
 8002ab2:	7afb      	ldrb	r3, [r7, #11]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d101      	bne.n	8002abc <qFIS_Setup+0x110>
 8002ab8:	4a26      	ldr	r2, [pc, #152]	; (8002b54 <qFIS_Setup+0x1a8>)
 8002aba:	e000      	b.n	8002abe <qFIS_Setup+0x112>
 8002abc:	4a26      	ldr	r2, [pc, #152]	; (8002b58 <qFIS_Setup+0x1ac>)
        f->deFuzz = ( Mamdani == t ) ? &qFIS_DeFuzz_Centroid
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	629a      	str	r2, [r3, #40]	; 0x28
        f->ruleWeight = NULL;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	62da      	str	r2, [r3, #44]	; 0x2c
        for ( i = 0 ; i < f->nOutputs ; ++i ) {
 8002ac8:	2300      	movs	r3, #0
 8002aca:	613b      	str	r3, [r7, #16]
 8002acc:	e032      	b.n	8002b34 <qFIS_Setup+0x188>
            /*cstat -CERT-FLP36-C*/
            f->output[ i ].res = ( f->output[ i ].b.max - f->output[ i ].b.min )/(float)f->nPoints;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	685a      	ldr	r2, [r3, #4]
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	2134      	movs	r1, #52	; 0x34
 8002ad6:	fb01 f303 	mul.w	r3, r1, r3
 8002ada:	4413      	add	r3, r2
 8002adc:	6858      	ldr	r0, [r3, #4]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	685a      	ldr	r2, [r3, #4]
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	2134      	movs	r1, #52	; 0x34
 8002ae6:	fb01 f303 	mul.w	r3, r1, r3
 8002aea:	4413      	add	r3, r2
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4619      	mov	r1, r3
 8002af0:	f7fe f81e 	bl	8000b30 <__aeabi_fsub>
 8002af4:	4603      	mov	r3, r0
 8002af6:	461d      	mov	r5, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7fe f8c9 	bl	8000c94 <__aeabi_ui2f>
 8002b02:	4601      	mov	r1, r0
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	685a      	ldr	r2, [r3, #4]
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	2034      	movs	r0, #52	; 0x34
 8002b0c:	fb00 f303 	mul.w	r3, r0, r3
 8002b10:	18d4      	adds	r4, r2, r3
 8002b12:	4628      	mov	r0, r5
 8002b14:	f7fe f9ca 	bl	8000eac <__aeabi_fdiv>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	60e3      	str	r3, [r4, #12]
            /*cstat +CERT-FLP36-C*/
            f->output[ i ].owner = f;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	685a      	ldr	r2, [r3, #4]
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	2134      	movs	r1, #52	; 0x34
 8002b24:	fb01 f303 	mul.w	r3, r1, r3
 8002b28:	4413      	add	r3, r2
 8002b2a:	68fa      	ldr	r2, [r7, #12]
 8002b2c:	629a      	str	r2, [r3, #40]	; 0x28
        for ( i = 0 ; i < f->nOutputs ; ++i ) {
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	3301      	adds	r3, #1
 8002b32:	613b      	str	r3, [r7, #16]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b38:	693a      	ldr	r2, [r7, #16]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d3c7      	bcc.n	8002ace <qFIS_Setup+0x122>
        }
    }

    return retVal;
 8002b3e:	697b      	ldr	r3, [r7, #20]
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3718      	adds	r7, #24
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bdb0      	pop	{r4, r5, r7, pc}
 8002b48:	aaaaaaab 	.word	0xaaaaaaab
 8002b4c:	4ec4ec4f 	.word	0x4ec4ec4f
 8002b50:	cccccccd 	.word	0xcccccccd
 8002b54:	080033cd 	.word	0x080033cd
 8002b58:	08003465 	.word	0x08003465

08002b5c <qFIS_InputSetup>:
/*============================================================================*/
int qFIS_InputSetup( qFIS_Input_t * const v,
                     const qFIS_Tag_t t,
                     const float min,
                     const float max )
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b087      	sub	sp, #28
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	60b9      	str	r1, [r7, #8]
 8002b66:	607a      	str	r2, [r7, #4]
 8002b68:	603b      	str	r3, [r7, #0]
    int retVal = 0;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	617b      	str	r3, [r7, #20]

    if ( ( NULL != v ) && ( t >= 0 ) ) {
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d018      	beq.n	8002ba6 <qFIS_InputSetup+0x4a>
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	db15      	blt.n	8002ba6 <qFIS_InputSetup+0x4a>
        v[ t ].b.min = min;
 8002b7a:	68ba      	ldr	r2, [r7, #8]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	4413      	add	r3, r2
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	461a      	mov	r2, r3
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	4413      	add	r3, r2
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	601a      	str	r2, [r3, #0]
        v[ t ].b.max = max;
 8002b8e:	68ba      	ldr	r2, [r7, #8]
 8002b90:	4613      	mov	r3, r2
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	4413      	add	r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	461a      	mov	r2, r3
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	683a      	ldr	r2, [r7, #0]
 8002ba0:	605a      	str	r2, [r3, #4]
        retVal = 1;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	617b      	str	r3, [r7, #20]
    }

    return retVal;
 8002ba6:	697b      	ldr	r3, [r7, #20]
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	371c      	adds	r7, #28
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bc80      	pop	{r7}
 8002bb0:	4770      	bx	lr

08002bb2 <qFIS_OutputSetup>:
/*============================================================================*/
int qFIS_OutputSetup( qFIS_Output_t * const v,
                      const qFIS_Tag_t t,
                      const float min,
                      const float max )
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	b087      	sub	sp, #28
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	60f8      	str	r0, [r7, #12]
 8002bba:	60b9      	str	r1, [r7, #8]
 8002bbc:	607a      	str	r2, [r7, #4]
 8002bbe:	603b      	str	r3, [r7, #0]
    int retVal = 0;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	617b      	str	r3, [r7, #20]

    if ( ( NULL != v ) && ( t >= 0 ) ) {
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d05a      	beq.n	8002c80 <qFIS_OutputSetup+0xce>
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	db57      	blt.n	8002c80 <qFIS_OutputSetup+0xce>
        v[ t ].data[ 0 ] = 0.0f;
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	2234      	movs	r2, #52	; 0x34
 8002bd4:	fb02 f303 	mul.w	r3, r2, r3
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	4413      	add	r3, r2
 8002bdc:	f04f 0200 	mov.w	r2, #0
 8002be0:	619a      	str	r2, [r3, #24]
        v[ t ].data[ 1 ] = 0.0f;
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	2234      	movs	r2, #52	; 0x34
 8002be6:	fb02 f303 	mul.w	r3, r2, r3
 8002bea:	68fa      	ldr	r2, [r7, #12]
 8002bec:	4413      	add	r3, r2
 8002bee:	f04f 0200 	mov.w	r2, #0
 8002bf2:	61da      	str	r2, [r3, #28]
        v[ t ].data[ 2 ] = 0.0f;
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	2234      	movs	r2, #52	; 0x34
 8002bf8:	fb02 f303 	mul.w	r3, r2, r3
 8002bfc:	68fa      	ldr	r2, [r7, #12]
 8002bfe:	4413      	add	r3, r2
 8002c00:	f04f 0200 	mov.w	r2, #0
 8002c04:	621a      	str	r2, [r3, #32]
        v[ t ].data[ 3 ] = 0.0f;
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	2234      	movs	r2, #52	; 0x34
 8002c0a:	fb02 f303 	mul.w	r3, r2, r3
 8002c0e:	68fa      	ldr	r2, [r7, #12]
 8002c10:	4413      	add	r3, r2
 8002c12:	f04f 0200 	mov.w	r2, #0
 8002c16:	625a      	str	r2, [r3, #36]	; 0x24
        v[ t ].x = 0.0f;
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	2234      	movs	r2, #52	; 0x34
 8002c1c:	fb02 f303 	mul.w	r3, r2, r3
 8002c20:	68fa      	ldr	r2, [r7, #12]
 8002c22:	4413      	add	r3, r2
 8002c24:	f04f 0200 	mov.w	r2, #0
 8002c28:	611a      	str	r2, [r3, #16]
        v[ t ].y = 0.0f;
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	2234      	movs	r2, #52	; 0x34
 8002c2e:	fb02 f303 	mul.w	r3, r2, r3
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	4413      	add	r3, r2
 8002c36:	f04f 0200 	mov.w	r2, #0
 8002c3a:	615a      	str	r2, [r3, #20]
        v[ t ].b.min = min;
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	2234      	movs	r2, #52	; 0x34
 8002c40:	fb02 f303 	mul.w	r3, r2, r3
 8002c44:	68fa      	ldr	r2, [r7, #12]
 8002c46:	4413      	add	r3, r2
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	601a      	str	r2, [r3, #0]
        v[ t ].b.max = max;
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	2234      	movs	r2, #52	; 0x34
 8002c50:	fb02 f303 	mul.w	r3, r2, r3
 8002c54:	68fa      	ldr	r2, [r7, #12]
 8002c56:	4413      	add	r3, r2
 8002c58:	683a      	ldr	r2, [r7, #0]
 8002c5a:	605a      	str	r2, [r3, #4]
        v[ t ].xag = NULL;
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	2234      	movs	r2, #52	; 0x34
 8002c60:	fb02 f303 	mul.w	r3, r2, r3
 8002c64:	68fa      	ldr	r2, [r7, #12]
 8002c66:	4413      	add	r3, r2
 8002c68:	2200      	movs	r2, #0
 8002c6a:	62da      	str	r2, [r3, #44]	; 0x2c
        v[ t ].yag = NULL;
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	2234      	movs	r2, #52	; 0x34
 8002c70:	fb02 f303 	mul.w	r3, r2, r3
 8002c74:	68fa      	ldr	r2, [r7, #12]
 8002c76:	4413      	add	r3, r2
 8002c78:	2200      	movs	r2, #0
 8002c7a:	631a      	str	r2, [r3, #48]	; 0x30
        retVal = 1;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	617b      	str	r3, [r7, #20]
    }

    return retVal;
 8002c80:	697b      	ldr	r3, [r7, #20]
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	371c      	adds	r7, #28
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bc80      	pop	{r7}
 8002c8a:	4770      	bx	lr

08002c8c <qFIS_SetInput>:
/*============================================================================*/
int qFIS_SetInput( qFIS_Input_t * const v,
                   const qFIS_Tag_t t,
                   const float value )
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b087      	sub	sp, #28
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	607a      	str	r2, [r7, #4]
    int retVal = 0;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	617b      	str	r3, [r7, #20]

    if ( ( NULL != v ) && ( t >= 0 ) ) {
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00e      	beq.n	8002cc0 <qFIS_SetInput+0x34>
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	db0b      	blt.n	8002cc0 <qFIS_SetInput+0x34>
        v[ t ].b.value = value;
 8002ca8:	68ba      	ldr	r2, [r7, #8]
 8002caa:	4613      	mov	r3, r2
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	4413      	add	r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	609a      	str	r2, [r3, #8]
        retVal = 1;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	617b      	str	r3, [r7, #20]
    }

    return retVal;
 8002cc0:	697b      	ldr	r3, [r7, #20]
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	371c      	adds	r7, #28
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bc80      	pop	{r7}
 8002cca:	4770      	bx	lr

08002ccc <qFIS_GetOutput>:
/*============================================================================*/
float qFIS_GetOutput( const qFIS_Output_t * const v,
                      const qFIS_Tag_t t )
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
    float retVal = 0.0f;
 8002cd6:	f04f 0300 	mov.w	r3, #0
 8002cda:	60fb      	str	r3, [r7, #12]

    if ( ( NULL != v ) && ( t >= 0 ) ) {
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d00a      	beq.n	8002cf8 <qFIS_GetOutput+0x2c>
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	db07      	blt.n	8002cf8 <qFIS_GetOutput+0x2c>
        retVal = v[ t ].b.value;
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	2234      	movs	r2, #52	; 0x34
 8002cec:	fb02 f303 	mul.w	r3, r2, r3
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	60fb      	str	r3, [r7, #12]
    }

    return retVal;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3714      	adds	r7, #20
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bc80      	pop	{r7}
 8002d02:	4770      	bx	lr

08002d04 <qFIS_SetMF>:
                const qFIS_Tag_t mf,
                const qFIS_MF_Name_t s,
                qFIS_MF_Fcn_t custom_mf,
                const float *cp,
                float h )
{
 8002d04:	b590      	push	{r4, r7, lr}
 8002d06:	b087      	sub	sp, #28
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	607a      	str	r2, [r7, #4]
 8002d10:	70fb      	strb	r3, [r7, #3]
    int retVal = 0;
 8002d12:	2300      	movs	r3, #0
 8002d14:	617b      	str	r3, [r7, #20]
    /* Only for Tsukamoto consequents*/
    &qFIS_TLinSMF, &qFIS_TLinZMF, &qFIS_TConcaveMF,&qFIS_TSigMF, &qFIS_TSMF,
    &qFIS_TZMF
    };

    if ( ( NULL != m ) && ( io >= 0 ) && ( mf >= 0 ) && ( s < _NUM_MFS ) ) {
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d055      	beq.n	8002dc8 <qFIS_SetMF+0xc4>
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	db52      	blt.n	8002dc8 <qFIS_SetMF+0xc4>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	db4f      	blt.n	8002dc8 <qFIS_SetMF+0xc4>
 8002d28:	78fb      	ldrb	r3, [r7, #3]
 8002d2a:	2b1a      	cmp	r3, #26
 8002d2c:	d84c      	bhi.n	8002dc8 <qFIS_SetMF+0xc4>
        if ( NULL != custom_mf ) {
 8002d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00a      	beq.n	8002d4a <qFIS_SetMF+0x46>
            m[ mf ].shape = custom_mf; /*user-defined membership function*/
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	4613      	mov	r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	4413      	add	r3, r2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	461a      	mov	r2, r3
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	4413      	add	r3, r2
 8002d44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d46:	601a      	str	r2, [r3, #0]
 8002d48:	e00c      	b.n	8002d64 <qFIS_SetMF+0x60>
        }
        else {
            m[ mf ].shape = fShape[ s ];
 8002d4a:	78f9      	ldrb	r1, [r7, #3]
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	4613      	mov	r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	4413      	add	r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	461a      	mov	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	4a1d      	ldr	r2, [pc, #116]	; (8002dd4 <qFIS_SetMF+0xd0>)
 8002d5e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8002d62:	601a      	str	r2, [r3, #0]
        }
        m[ mf ].index = (size_t)io;
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	4613      	mov	r3, r2
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	4413      	add	r3, r2
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	461a      	mov	r2, r3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	4413      	add	r3, r2
 8002d74:	68ba      	ldr	r2, [r7, #8]
 8002d76:	611a      	str	r2, [r3, #16]
        m[ mf ].points = cp;
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	4413      	add	r3, r2
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	461a      	mov	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	4413      	add	r3, r2
 8002d88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d8a:	605a      	str	r2, [r3, #4]
        m[ mf ].fx = 0.0f;
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	4413      	add	r3, r2
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	461a      	mov	r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	4413      	add	r3, r2
 8002d9c:	f04f 0200 	mov.w	r2, #0
 8002da0:	609a      	str	r2, [r3, #8]
        m[ mf ].h = qFIS_Bound( h, 0.0f, 1.0f );
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	4613      	mov	r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	4413      	add	r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	461a      	mov	r2, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	189c      	adds	r4, r3, r2
 8002db2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002db6:	f04f 0100 	mov.w	r1, #0
 8002dba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002dbc:	f001 fcf1 	bl	80047a2 <qFIS_Bound>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	60e3      	str	r3, [r4, #12]
        retVal = 1;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	617b      	str	r3, [r7, #20]
    }

    return retVal;
 8002dc8:	697b      	ldr	r3, [r7, #20]
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	371c      	adds	r7, #28
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd90      	pop	{r4, r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	08009afc 	.word	0x08009afc

08002dd8 <qFIS_EvalInputMFs>:

    return retVal;
}
/*============================================================================*/
static void qFIS_EvalInputMFs( qFIS_t * const f )
{
 8002dd8:	b5b0      	push	{r4, r5, r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
    size_t i;
    qFIS_MF_t *mf;

    for ( i = 0 ; i < f->nMFInputs ; ++i ) {
 8002de0:	2300      	movs	r3, #0
 8002de2:	60fb      	str	r3, [r7, #12]
 8002de4:	e026      	b.n	8002e34 <qFIS_EvalInputMFs+0x5c>
        mf = &f->inMF[ i ];
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6899      	ldr	r1, [r3, #8]
 8002dea:	68fa      	ldr	r2, [r7, #12]
 8002dec:	4613      	mov	r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	4413      	add	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	440b      	add	r3, r1
 8002df6:	60bb      	str	r3, [r7, #8]
        /*cstat -MISRAC2012-Rule-11.3 -CERT-EXP39-C_d*/
        mf->fx = mf->h*mf->shape( (qFIS_IO_Base_t*)&f->input[ mf->index ],
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	68dd      	ldr	r5, [r3, #12]
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	681c      	ldr	r4, [r3, #0]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6819      	ldr	r1, [r3, #0]
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	691a      	ldr	r2, [r3, #16]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	005b      	lsls	r3, r3, #1
 8002e0c:	4413      	add	r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	18c8      	adds	r0, r1, r3
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	4619      	mov	r1, r3
 8002e1a:	47a0      	blx	r4
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	4619      	mov	r1, r3
 8002e20:	4628      	mov	r0, r5
 8002e22:	f7fd ff8f 	bl	8000d44 <__aeabi_fmul>
 8002e26:	4603      	mov	r3, r0
 8002e28:	461a      	mov	r2, r3
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	609a      	str	r2, [r3, #8]
    for ( i = 0 ; i < f->nMFInputs ; ++i ) {
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	3301      	adds	r3, #1
 8002e32:	60fb      	str	r3, [r7, #12]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e38:	68fa      	ldr	r2, [r7, #12]
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d3d3      	bcc.n	8002de6 <qFIS_EvalInputMFs+0xe>
                                  mf->points,
                                  1u );
        /*cstat +MISRAC2012-Rule-11.3 +CERT-EXP39-C_d*/
    }
}
 8002e3e:	bf00      	nop
 8002e40:	bf00      	nop
 8002e42:	3710      	adds	r7, #16
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bdb0      	pop	{r4, r5, r7, pc}

08002e48 <qFIS_TruncateInputs>:
/*============================================================================*/
static void qFIS_TruncateInputs( qFIS_t * const f )
{
 8002e48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e4a:	b085      	sub	sp, #20
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
    size_t i;

    for ( i = 0 ; i < f->nInputs ; ++i ) {
 8002e50:	2300      	movs	r3, #0
 8002e52:	60fb      	str	r3, [r7, #12]
 8002e54:	e02b      	b.n	8002eae <qFIS_TruncateInputs+0x66>
        f->input[ i ].b.value = qFIS_Bound( f->input[ i ].b.value,
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6819      	ldr	r1, [r3, #0]
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	005b      	lsls	r3, r3, #1
 8002e60:	4413      	add	r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	440b      	add	r3, r1
 8002e66:	6898      	ldr	r0, [r3, #8]
                                            f->input[ i ].b.min,
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6819      	ldr	r1, [r3, #0]
 8002e6c:	68fa      	ldr	r2, [r7, #12]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	4413      	add	r3, r2
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	440b      	add	r3, r1
        f->input[ i ].b.value = qFIS_Bound( f->input[ i ].b.value,
 8002e78:	681d      	ldr	r5, [r3, #0]
                                            f->input[ i ].b.max );
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6819      	ldr	r1, [r3, #0]
 8002e7e:	68fa      	ldr	r2, [r7, #12]
 8002e80:	4613      	mov	r3, r2
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	4413      	add	r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	440b      	add	r3, r1
        f->input[ i ].b.value = qFIS_Bound( f->input[ i ].b.value,
 8002e8a:	685e      	ldr	r6, [r3, #4]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6819      	ldr	r1, [r3, #0]
 8002e90:	68fa      	ldr	r2, [r7, #12]
 8002e92:	4613      	mov	r3, r2
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	4413      	add	r3, r2
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	18cc      	adds	r4, r1, r3
 8002e9c:	4632      	mov	r2, r6
 8002e9e:	4629      	mov	r1, r5
 8002ea0:	f001 fc7f 	bl	80047a2 <qFIS_Bound>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	60a3      	str	r3, [r4, #8]
    for ( i = 0 ; i < f->nInputs ; ++i ) {
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	3301      	adds	r3, #1
 8002eac:	60fb      	str	r3, [r7, #12]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d3ce      	bcc.n	8002e56 <qFIS_TruncateInputs+0xe>
    }
}
 8002eb8:	bf00      	nop
 8002eba:	bf00      	nop
 8002ebc:	3714      	adds	r7, #20
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ec2 <qFIS_Fuzzify>:
/*============================================================================*/
int qFIS_Fuzzify( qFIS_t * const f )
{
 8002ec2:	b580      	push	{r7, lr}
 8002ec4:	b084      	sub	sp, #16
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
    int retVal = 0;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	60fb      	str	r3, [r7, #12]

    if ( NULL != f ) {
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d007      	beq.n	8002ee4 <qFIS_Fuzzify+0x22>
        qFIS_TruncateInputs( f );
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f7ff ffb7 	bl	8002e48 <qFIS_TruncateInputs>
        qFIS_EvalInputMFs( f );
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f7ff ff7c 	bl	8002dd8 <qFIS_EvalInputMFs>
        retVal = 1;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	60fb      	str	r3, [r7, #12]
    }

    return retVal;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3710      	adds	r7, #16
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <qFIS_ParseFuzzValue>:
/*============================================================================*/
static float qFIS_ParseFuzzValue( qFIS_MF_t * const mfIO,
                                  qFIS_Rules_t index )
{
 8002eee:	b580      	push	{r7, lr}
 8002ef0:	b084      	sub	sp, #16
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	807b      	strh	r3, [r7, #2]
    uint8_t neg = (uint8_t)( index < 0 );
 8002efa:	887b      	ldrh	r3, [r7, #2]
 8002efc:	0bdb      	lsrs	r3, r3, #15
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	73fb      	strb	r3, [r7, #15]
    float y;

    if ( 0u != neg ) {
 8002f02:	7bfb      	ldrb	r3, [r7, #15]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d003      	beq.n	8002f10 <qFIS_ParseFuzzValue+0x22>
        index = -index;
 8002f08:	887b      	ldrh	r3, [r7, #2]
 8002f0a:	425b      	negs	r3, r3
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	807b      	strh	r3, [r7, #2]
    }
    /*cstat -CERT-INT32-C_a*/
    y = qFIS_Bound( mfIO[ index - 1 ].fx, 0.0f, 1.0f );
 8002f10:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002f14:	4613      	mov	r3, r2
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	4413      	add	r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	3b14      	subs	r3, #20
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	4413      	add	r3, r2
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002f28:	f04f 0100 	mov.w	r1, #0
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f001 fc38 	bl	80047a2 <qFIS_Bound>
 8002f32:	60b8      	str	r0, [r7, #8]
    /*cstat +CERT-INT32-C_a*/
    y = ( 0u != neg ) ? ( 1.0f - y ) : y ;
 8002f34:	7bfb      	ldrb	r3, [r7, #15]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d006      	beq.n	8002f48 <qFIS_ParseFuzzValue+0x5a>
 8002f3a:	68b9      	ldr	r1, [r7, #8]
 8002f3c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002f40:	f7fd fdf6 	bl	8000b30 <__aeabi_fsub>
 8002f44:	4603      	mov	r3, r0
 8002f46:	e000      	b.n	8002f4a <qFIS_ParseFuzzValue+0x5c>
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	60bb      	str	r3, [r7, #8]

    return y;
 8002f4c:	68bb      	ldr	r3, [r7, #8]
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3710      	adds	r7, #16
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
	...

08002f58 <qFIS_GetFuzzOperator>:
/*============================================================================*/
static qFIS_FuzzyOperator_t qFIS_GetFuzzOperator( const qFIS_t * const f )
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b085      	sub	sp, #20
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
    qFIS_FuzzyOperator_t oper;

    switch ( f->lastConnector ) {
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	; 0x5c
 8002f66:	4a0c      	ldr	r2, [pc, #48]	; (8002f98 <qFIS_GetFuzzOperator+0x40>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d003      	beq.n	8002f74 <qFIS_GetFuzzOperator+0x1c>
 8002f6c:	4a0b      	ldr	r2, [pc, #44]	; (8002f9c <qFIS_GetFuzzOperator+0x44>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d004      	beq.n	8002f7c <qFIS_GetFuzzOperator+0x24>
 8002f72:	e007      	b.n	8002f84 <qFIS_GetFuzzOperator+0x2c>
        case _QFIS_AND:
            oper = f->andOp;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	60fb      	str	r3, [r7, #12]
            break;
 8002f7a:	e006      	b.n	8002f8a <qFIS_GetFuzzOperator+0x32>
        case _QFIS_OR:
            oper = f->orOp;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	695b      	ldr	r3, [r3, #20]
 8002f80:	60fb      	str	r3, [r7, #12]
            break;
 8002f82:	e002      	b.n	8002f8a <qFIS_GetFuzzOperator+0x32>
        default:
            oper = &qFIS_Sum;
 8002f84:	4b06      	ldr	r3, [pc, #24]	; (8002fa0 <qFIS_GetFuzzOperator+0x48>)
 8002f86:	60fb      	str	r3, [r7, #12]
            break;
 8002f88:	bf00      	nop
    }

    return oper;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3714      	adds	r7, #20
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bc80      	pop	{r7}
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	ffff8002 	.word	0xffff8002
 8002f9c:	ffff8003 	.word	0xffff8003
 8002fa0:	08004777 	.word	0x08004777

08002fa4 <qFIS_InferenceAntecedent>:
/*============================================================================*/
static size_t qFIS_InferenceAntecedent( struct _qFIS_s * const f,
                                        size_t i )
{
 8002fa4:	b590      	push	{r4, r7, lr}
 8002fa6:	b087      	sub	sp, #28
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
    int16_t inIndex, MFInIndex, connector;
    qFIS_FuzzyOperator_t op;
    /*cstat -CERT-INT30-C_a*/
    inIndex = f->rules[ i ];
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	4413      	add	r3, r2
 8002fb8:	881b      	ldrh	r3, [r3, #0]
 8002fba:	82fb      	strh	r3, [r7, #22]
    MFInIndex = f->rules[ i + 1u ];
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	4413      	add	r3, r2
 8002fc8:	881b      	ldrh	r3, [r3, #0]
 8002fca:	82bb      	strh	r3, [r7, #20]
    connector = f->rules[ i + 2u ];
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	3302      	adds	r3, #2
 8002fd4:	005b      	lsls	r3, r3, #1
 8002fd6:	4413      	add	r3, r2
 8002fd8:	881b      	ldrh	r3, [r3, #0]
 8002fda:	827b      	strh	r3, [r7, #18]
    /*cstat -CERT-INT30-C_a*/
    op = qFIS_GetFuzzOperator( f );
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f7ff ffbb 	bl	8002f58 <qFIS_GetFuzzOperator>
 8002fe2:	60f8      	str	r0, [r7, #12]
    f->rStrength = op( f->rStrength, qFIS_ParseFuzzValue( f->inMF, MFInIndex ) );
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6d9c      	ldr	r4, [r3, #88]	; 0x58
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002ff0:	4611      	mov	r1, r2
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7ff ff7b 	bl	8002eee <qFIS_ParseFuzzValue>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	4611      	mov	r1, r2
 8002ffe:	4620      	mov	r0, r4
 8003000:	4798      	blx	r3
 8003002:	4602      	mov	r2, r0
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	659a      	str	r2, [r3, #88]	; 0x58

    if ( ( inIndex < 0 ) || ( (size_t)inIndex > f->nInputs ) ) {
 8003008:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800300c:	2b00      	cmp	r3, #0
 800300e:	db05      	blt.n	800301c <qFIS_InferenceAntecedent+0x78>
 8003010:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003018:	429a      	cmp	r2, r3
 800301a:	d902      	bls.n	8003022 <qFIS_InferenceAntecedent+0x7e>
        i = QFIS_INFERENCE_ERROR;
 800301c:	2300      	movs	r3, #0
 800301e:	603b      	str	r3, [r7, #0]
 8003020:	e022      	b.n	8003068 <qFIS_InferenceAntecedent+0xc4>
    }
    else {
        if ( ( _QFIS_AND == connector ) || ( _QFIS_OR == connector ) ) {
 8003022:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003026:	4a13      	ldr	r2, [pc, #76]	; (8003074 <qFIS_InferenceAntecedent+0xd0>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d004      	beq.n	8003036 <qFIS_InferenceAntecedent+0x92>
 800302c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003030:	4a11      	ldr	r2, [pc, #68]	; (8003078 <qFIS_InferenceAntecedent+0xd4>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d10a      	bne.n	800304c <qFIS_InferenceAntecedent+0xa8>
            f->lastConnector = connector;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	8a7a      	ldrh	r2, [r7, #18]
 800303a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
            f->inferenceState = &qFIS_InferenceAntecedent;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a0e      	ldr	r2, [pc, #56]	; (800307c <qFIS_InferenceAntecedent+0xd8>)
 8003042:	621a      	str	r2, [r3, #32]
            i += 2u;
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	3302      	adds	r3, #2
 8003048:	603b      	str	r3, [r7, #0]
 800304a:	e00d      	b.n	8003068 <qFIS_InferenceAntecedent+0xc4>
        }
        else if ( _QFIS_THEN == connector ) {
 800304c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003050:	4a0b      	ldr	r2, [pc, #44]	; (8003080 <qFIS_InferenceAntecedent+0xdc>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d106      	bne.n	8003064 <qFIS_InferenceAntecedent+0xc0>
            f->inferenceState = &qFIS_InferenceReachEnd;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a0a      	ldr	r2, [pc, #40]	; (8003084 <qFIS_InferenceAntecedent+0xe0>)
 800305a:	621a      	str	r2, [r3, #32]
            i += 2u;
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	3302      	adds	r3, #2
 8003060:	603b      	str	r3, [r7, #0]
 8003062:	e001      	b.n	8003068 <qFIS_InferenceAntecedent+0xc4>
        }
        else {
            i = QFIS_INFERENCE_ERROR;
 8003064:	2300      	movs	r3, #0
 8003066:	603b      	str	r3, [r7, #0]
        }
    }

    return i;
 8003068:	683b      	ldr	r3, [r7, #0]
}
 800306a:	4618      	mov	r0, r3
 800306c:	371c      	adds	r7, #28
 800306e:	46bd      	mov	sp, r7
 8003070:	bd90      	pop	{r4, r7, pc}
 8003072:	bf00      	nop
 8003074:	ffff8002 	.word	0xffff8002
 8003078:	ffff8003 	.word	0xffff8003
 800307c:	08002fa5 	.word	0x08002fa5
 8003080:	ffff8004 	.word	0xffff8004
 8003084:	08003089 	.word	0x08003089

08003088 <qFIS_InferenceReachEnd>:
/*============================================================================*/
static size_t qFIS_InferenceReachEnd( struct _qFIS_s * const f,
                                      size_t i )
{
 8003088:	b590      	push	{r4, r7, lr}
 800308a:	b085      	sub	sp, #20
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
    int16_t  connector;

    connector = ( f->nOutputs > 1u )? f->rules[ i + 2u ] : -1;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003096:	2b01      	cmp	r3, #1
 8003098:	d908      	bls.n	80030ac <qFIS_InferenceReachEnd+0x24>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	3302      	adds	r3, #2
 80030a2:	005b      	lsls	r3, r3, #1
 80030a4:	4413      	add	r3, r2
 80030a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030aa:	e001      	b.n	80030b0 <qFIS_InferenceReachEnd+0x28>
 80030ac:	f04f 33ff 	mov.w	r3, #4294967295
 80030b0:	81fb      	strh	r3, [r7, #14]
    i += 2u;
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	3302      	adds	r3, #2
 80030b6:	603b      	str	r3, [r7, #0]
    if ( _QFIS_AND != connector ) {
 80030b8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80030bc:	4a23      	ldr	r2, [pc, #140]	; (800314c <qFIS_InferenceReachEnd+0xc4>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d03f      	beq.n	8003142 <qFIS_InferenceReachEnd+0xba>
        f->inferenceState = &qFIS_InferenceAntecedent;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a22      	ldr	r2, [pc, #136]	; (8003150 <qFIS_InferenceReachEnd+0xc8>)
 80030c6:	621a      	str	r2, [r3, #32]
        f->lastConnector = -1;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80030ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
        f->wi[ f->ruleCount ] = f->rStrength;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	4413      	add	r3, r2
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80030e2:	601a      	str	r2, [r3, #0]
        if ( NULL != f->ruleWeight ) {
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d01e      	beq.n	800312a <qFIS_InferenceReachEnd+0xa2>
            f->wi[ f->ruleCount ] *= qFIS_Bound( f->ruleWeight[ f->ruleCount ], 0.0f, 1.0f );
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	4413      	add	r3, r2
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80030fe:	f04f 0100 	mov.w	r1, #0
 8003102:	4618      	mov	r0, r3
 8003104:	f001 fb4d 	bl	80047a2 <qFIS_Bound>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	4413      	add	r3, r2
 8003114:	6819      	ldr	r1, [r3, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	18d4      	adds	r4, r2, r3
 8003122:	f7fd fe0f 	bl	8000d44 <__aeabi_fmul>
 8003126:	4603      	mov	r3, r0
 8003128:	6023      	str	r3, [r4, #0]
        }
        f->rStrength = 0.0f;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f04f 0200 	mov.w	r2, #0
 8003130:	659a      	str	r2, [r3, #88]	; 0x58
        ++f->ruleCount;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003136:	1c5a      	adds	r2, r3, #1
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	655a      	str	r2, [r3, #84]	; 0x54
        --i;
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	3b01      	subs	r3, #1
 8003140:	603b      	str	r3, [r7, #0]
    }

    return i;
 8003142:	683b      	ldr	r3, [r7, #0]
}
 8003144:	4618      	mov	r0, r3
 8003146:	3714      	adds	r7, #20
 8003148:	46bd      	mov	sp, r7
 800314a:	bd90      	pop	{r4, r7, pc}
 800314c:	ffff8002 	.word	0xffff8002
 8003150:	08002fa5 	.word	0x08002fa5

08003154 <qFIS_AggregationFindConsequent>:
/*============================================================================*/
static size_t qFIS_AggregationFindConsequent( struct _qFIS_s * const f,
                                              size_t i )
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
    while ( _QFIS_THEN != f->rules[ i++ ] ) {}
 800315e:	bf00      	nop
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	1c59      	adds	r1, r3, #1
 8003168:	6039      	str	r1, [r7, #0]
 800316a:	005b      	lsls	r3, r3, #1
 800316c:	4413      	add	r3, r2
 800316e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003172:	4a07      	ldr	r2, [pc, #28]	; (8003190 <qFIS_AggregationFindConsequent+0x3c>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d1f3      	bne.n	8003160 <qFIS_AggregationFindConsequent+0xc>
    f->aggregationState = &qFIS_InferenceConsequent;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a06      	ldr	r2, [pc, #24]	; (8003194 <qFIS_AggregationFindConsequent+0x40>)
 800317c:	625a      	str	r2, [r3, #36]	; 0x24

    return --i;
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	3b01      	subs	r3, #1
 8003182:	603b      	str	r3, [r7, #0]
 8003184:	683b      	ldr	r3, [r7, #0]
}
 8003186:	4618      	mov	r0, r3
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	bc80      	pop	{r7}
 800318e:	4770      	bx	lr
 8003190:	ffff8004 	.word	0xffff8004
 8003194:	08003199 	.word	0x08003199

08003198 <qFIS_InferenceConsequent>:
/*============================================================================*/
static size_t qFIS_InferenceConsequent( struct _qFIS_s * const f,
                                        size_t i )
{
 8003198:	b5b0      	push	{r4, r5, r7, lr}
 800319a:	b088      	sub	sp, #32
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]
    int16_t outIndex, MFOutIndex, connector;
    uint8_t neg = 0u;
 80031a2:	2300      	movs	r3, #0
 80031a4:	777b      	strb	r3, [r7, #29]

    outIndex = f->rules[ i ];
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	005b      	lsls	r3, r3, #1
 80031ae:	4413      	add	r3, r2
 80031b0:	881b      	ldrh	r3, [r3, #0]
 80031b2:	837b      	strh	r3, [r7, #26]
    MFOutIndex = f->rules[ i + 1u ];
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	3301      	adds	r3, #1
 80031bc:	005b      	lsls	r3, r3, #1
 80031be:	4413      	add	r3, r2
 80031c0:	881b      	ldrh	r3, [r3, #0]
 80031c2:	83fb      	strh	r3, [r7, #30]
    connector = ( f->nOutputs > 1u )? f->rules[ i + 2u ] : -1;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d908      	bls.n	80031de <qFIS_InferenceConsequent+0x46>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	3302      	adds	r3, #2
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	4413      	add	r3, r2
 80031d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031dc:	e001      	b.n	80031e2 <qFIS_InferenceConsequent+0x4a>
 80031de:	f04f 33ff 	mov.w	r3, #4294967295
 80031e2:	833b      	strh	r3, [r7, #24]
    if ( MFOutIndex < 0 ) {
 80031e4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	da05      	bge.n	80031f8 <qFIS_InferenceConsequent+0x60>
        MFOutIndex = -MFOutIndex;
 80031ec:	8bfb      	ldrh	r3, [r7, #30]
 80031ee:	425b      	negs	r3, r3
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	83fb      	strh	r3, [r7, #30]
        neg = 1u;
 80031f4:	2301      	movs	r3, #1
 80031f6:	777b      	strb	r3, [r7, #29]
    }
    MFOutIndex -= 1;
 80031f8:	8bfb      	ldrh	r3, [r7, #30]
 80031fa:	3b01      	subs	r3, #1
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	83fb      	strh	r3, [r7, #30]

    if ( f->wi[ f->ruleCount ] > 0.0f ) {
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	4413      	add	r3, r2
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f04f 0100 	mov.w	r1, #0
 8003212:	4618      	mov	r0, r3
 8003214:	f7fd ff52 	bl	80010bc <__aeabi_fcmpgt>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d07b      	beq.n	8003316 <qFIS_InferenceConsequent+0x17e>
        qFIS_Output_t *o = &f->output[ outIndex ];
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685a      	ldr	r2, [r3, #4]
 8003222:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003226:	2134      	movs	r1, #52	; 0x34
 8003228:	fb01 f303 	mul.w	r3, r1, r3
 800322c:	4413      	add	r3, r2
 800322e:	617b      	str	r3, [r7, #20]
        qFIS_MF_t *m = &f->outMF[ MFOutIndex ];
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	68d9      	ldr	r1, [r3, #12]
 8003234:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8003238:	4613      	mov	r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	4413      	add	r3, r2
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	440b      	add	r3, r1
 8003242:	613b      	str	r3, [r7, #16]

        if ( Mamdani == f->type ) {
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800324a:	2b00      	cmp	r3, #0
 800324c:	d133      	bne.n	80032b6 <qFIS_InferenceConsequent+0x11e>
            float v;
            /*cstat -MISRAC2012-Rule-11.3 -CERT-EXP39-C_d*/
            v = m->h*m->shape( (qFIS_IO_Base_t*)o, m->points, 1u );
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	68dc      	ldr	r4, [r3, #12]
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	6851      	ldr	r1, [r2, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	6978      	ldr	r0, [r7, #20]
 800325e:	4798      	blx	r3
 8003260:	4603      	mov	r3, r0
 8003262:	4619      	mov	r1, r3
 8003264:	4620      	mov	r0, r4
 8003266:	f7fd fd6d 	bl	8000d44 <__aeabi_fmul>
 800326a:	4603      	mov	r3, r0
 800326c:	60bb      	str	r3, [r7, #8]
            /*cstat +MISRAC2012-Rule-11.3 +CERT-EXP39-C_d*/
            v = ( 1u == neg )? ( 1.0f - v ) : v;
 800326e:	7f7b      	ldrb	r3, [r7, #29]
 8003270:	2b01      	cmp	r3, #1
 8003272:	d106      	bne.n	8003282 <qFIS_InferenceConsequent+0xea>
 8003274:	68b9      	ldr	r1, [r7, #8]
 8003276:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800327a:	f7fd fc59 	bl	8000b30 <__aeabi_fsub>
 800327e:	4603      	mov	r3, r0
 8003280:	e000      	b.n	8003284 <qFIS_InferenceConsequent+0xec>
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	60bb      	str	r3, [r7, #8]
            o->y = f->aggregate( o->y, f->implicate( f->wi[ f->ruleCount ], v ) );
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	69dc      	ldr	r4, [r3, #28]
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	695d      	ldr	r5, [r3, #20]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800329a:	0092      	lsls	r2, r2, #2
 800329c:	440a      	add	r2, r1
 800329e:	6812      	ldr	r2, [r2, #0]
 80032a0:	68b9      	ldr	r1, [r7, #8]
 80032a2:	4610      	mov	r0, r2
 80032a4:	4798      	blx	r3
 80032a6:	4603      	mov	r3, r0
 80032a8:	4619      	mov	r1, r3
 80032aa:	4628      	mov	r0, r5
 80032ac:	47a0      	blx	r4
 80032ae:	4602      	mov	r2, r0
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	615a      	str	r2, [r3, #20]
 80032b4:	e02f      	b.n	8003316 <qFIS_InferenceConsequent+0x17e>
        }
        else { /* Sugeno and Tsukamoto*/
            float zi;
            /*cstat -MISRAC2012-Rule-11.3 -CERT-EXP39-C_d*/
            zi = m->shape( (qFIS_IO_Base_t*)f->input, m->points, f->nInputs );
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	6810      	ldr	r0, [r2, #0]
 80032be:	693a      	ldr	r2, [r7, #16]
 80032c0:	6851      	ldr	r1, [r2, #4]
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80032c6:	4798      	blx	r3
 80032c8:	60f8      	str	r0, [r7, #12]
            /*cstat +MISRAC2012-Rule-11.3 +CERT-EXP39-C_d*/
            o->data[ 0 ] += zi*f->wi[ f->ruleCount ];
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	699c      	ldr	r4, [r3, #24]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	4413      	add	r3, r2
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	68f9      	ldr	r1, [r7, #12]
 80032de:	4618      	mov	r0, r3
 80032e0:	f7fd fd30 	bl	8000d44 <__aeabi_fmul>
 80032e4:	4603      	mov	r3, r0
 80032e6:	4619      	mov	r1, r3
 80032e8:	4620      	mov	r0, r4
 80032ea:	f7fd fc23 	bl	8000b34 <__addsf3>
 80032ee:	4603      	mov	r3, r0
 80032f0:	461a      	mov	r2, r3
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	619a      	str	r2, [r3, #24]
            o->data[ 1 ] += f->wi[ f->ruleCount ];
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	69d8      	ldr	r0, [r3, #28]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	4413      	add	r3, r2
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4619      	mov	r1, r3
 800330a:	f7fd fc13 	bl	8000b34 <__addsf3>
 800330e:	4603      	mov	r3, r0
 8003310:	461a      	mov	r2, r3
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	61da      	str	r2, [r3, #28]
        }
    }

    i += 2u;
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	3302      	adds	r3, #2
 800331a:	603b      	str	r3, [r7, #0]
    if ( _QFIS_AND != connector ) {
 800331c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003320:	4a09      	ldr	r2, [pc, #36]	; (8003348 <qFIS_InferenceConsequent+0x1b0>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d00a      	beq.n	800333c <qFIS_InferenceConsequent+0x1a4>
        f->aggregationState = &qFIS_AggregationFindConsequent;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a08      	ldr	r2, [pc, #32]	; (800334c <qFIS_InferenceConsequent+0x1b4>)
 800332a:	625a      	str	r2, [r3, #36]	; 0x24
        ++f->ruleCount;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003330:	1c5a      	adds	r2, r3, #1
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	655a      	str	r2, [r3, #84]	; 0x54
        --i;
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	3b01      	subs	r3, #1
 800333a:	603b      	str	r3, [r7, #0]
    }

    return i;
 800333c:	683b      	ldr	r3, [r7, #0]
}
 800333e:	4618      	mov	r0, r3
 8003340:	3720      	adds	r7, #32
 8003342:	46bd      	mov	sp, r7
 8003344:	bdb0      	pop	{r4, r5, r7, pc}
 8003346:	bf00      	nop
 8003348:	ffff8002 	.word	0xffff8002
 800334c:	08003155 	.word	0x08003155

08003350 <qFIS_Aggregate>:
/*============================================================================*/
static void qFIS_Aggregate( qFIS_t * const f )
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
    if ( NULL != f ) {
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d02d      	beq.n	80033ba <qFIS_Aggregate+0x6a>
        if ( QFIS_RULES_BEGIN == f->rules[ 0 ] ) {
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003362:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003366:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800336a:	d126      	bne.n	80033ba <qFIS_Aggregate+0x6a>
            size_t i = 1u;
 800336c:	2301      	movs	r3, #1
 800336e:	60fb      	str	r3, [r7, #12]

            f->aggregationState = &qFIS_AggregationFindConsequent;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4a14      	ldr	r2, [pc, #80]	; (80033c4 <qFIS_Aggregate+0x74>)
 8003374:	625a      	str	r2, [r3, #36]	; 0x24
            f->ruleCount = 0u;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	655a      	str	r2, [r3, #84]	; 0x54
            while ( ( _QFIS_RULES_END != f->rules[ i ] ) && ( f->ruleCount < f->nRules ) ) {
 800337c:	e00b      	b.n	8003396 <qFIS_Aggregate+0x46>
                i = f->aggregationState( f, i );
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003382:	68f9      	ldr	r1, [r7, #12]
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	4798      	blx	r3
 8003388:	60f8      	str	r0, [r7, #12]
                if ( QFIS_INFERENCE_ERROR == i ) {
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d013      	beq.n	80033b8 <qFIS_Aggregate+0x68>
                    break;
                }
                ++i;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	3301      	adds	r3, #1
 8003394:	60fb      	str	r3, [r7, #12]
            while ( ( _QFIS_RULES_END != f->rules[ i ] ) && ( f->ruleCount < f->nRules ) ) {
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	005b      	lsls	r3, r3, #1
 800339e:	4413      	add	r3, r2
 80033a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033a4:	4a08      	ldr	r2, [pc, #32]	; (80033c8 <qFIS_Aggregate+0x78>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d007      	beq.n	80033ba <qFIS_Aggregate+0x6a>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d3e3      	bcc.n	800337e <qFIS_Aggregate+0x2e>
            }
        }
    }
}
 80033b6:	e000      	b.n	80033ba <qFIS_Aggregate+0x6a>
                    break;
 80033b8:	bf00      	nop
}
 80033ba:	bf00      	nop
 80033bc:	3710      	adds	r7, #16
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	08003155 	.word	0x08003155
 80033c8:	ffff8001 	.word	0xffff8001

080033cc <qFIS_DeFuzz_Centroid>:
/*============================================================================*/
static float qFIS_DeFuzz_Centroid( qFIS_Output_t * const o,
                                   const qFIS_DeFuzzState_t stage )
{
 80033cc:	b590      	push	{r4, r7, lr}
 80033ce:	b085      	sub	sp, #20
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	460b      	mov	r3, r1
 80033d6:	70fb      	strb	r3, [r7, #3]
    float d = 0.0f;
 80033d8:	f04f 0300 	mov.w	r3, #0
 80033dc:	60fb      	str	r3, [r7, #12]

    switch ( stage ) {
 80033de:	78fb      	ldrb	r3, [r7, #3]
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d02e      	beq.n	8003442 <qFIS_DeFuzz_Centroid+0x76>
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	dc37      	bgt.n	8003458 <qFIS_DeFuzz_Centroid+0x8c>
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d021      	beq.n	8003430 <qFIS_DeFuzz_Centroid+0x64>
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d133      	bne.n	8003458 <qFIS_DeFuzz_Centroid+0x8c>
        case DeFuzz_Compute:
            o->data[ 0 ] += o->x*o->y;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	699c      	ldr	r4, [r3, #24]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	691a      	ldr	r2, [r3, #16]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	695b      	ldr	r3, [r3, #20]
 80033fc:	4619      	mov	r1, r3
 80033fe:	4610      	mov	r0, r2
 8003400:	f7fd fca0 	bl	8000d44 <__aeabi_fmul>
 8003404:	4603      	mov	r3, r0
 8003406:	4619      	mov	r1, r3
 8003408:	4620      	mov	r0, r4
 800340a:	f7fd fb93 	bl	8000b34 <__addsf3>
 800340e:	4603      	mov	r3, r0
 8003410:	461a      	mov	r2, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	619a      	str	r2, [r3, #24]
            o->data[ 1 ] += o->y;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	69da      	ldr	r2, [r3, #28]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	4619      	mov	r1, r3
 8003420:	4610      	mov	r0, r2
 8003422:	f7fd fb87 	bl	8000b34 <__addsf3>
 8003426:	4603      	mov	r3, r0
 8003428:	461a      	mov	r2, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	61da      	str	r2, [r3, #28]
            break;
 800342e:	e014      	b.n	800345a <qFIS_DeFuzz_Centroid+0x8e>
        case DeFuzz_Init:
            o->data[ 0 ] = 0.0f; /*store sum(y)*/
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f04f 0200 	mov.w	r2, #0
 8003436:	619a      	str	r2, [r3, #24]
            o->data[ 1 ] = 0.0f; /*store sum(x*y)*/
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f04f 0200 	mov.w	r2, #0
 800343e:	61da      	str	r2, [r3, #28]
            break;
 8003440:	e00b      	b.n	800345a <qFIS_DeFuzz_Centroid+0x8e>
        case DeFuzz_End:
            d = o->data[ 0 ]/o->data[ 1 ]; /*sum(x*y)/sum(y)*/
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	699a      	ldr	r2, [r3, #24]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	69db      	ldr	r3, [r3, #28]
 800344a:	4619      	mov	r1, r3
 800344c:	4610      	mov	r0, r2
 800344e:	f7fd fd2d 	bl	8000eac <__aeabi_fdiv>
 8003452:	4603      	mov	r3, r0
 8003454:	60fb      	str	r3, [r7, #12]
            break;
 8003456:	e000      	b.n	800345a <qFIS_DeFuzz_Centroid+0x8e>
        default:
            break;
 8003458:	bf00      	nop
    }

    return d;
 800345a:	68fb      	ldr	r3, [r7, #12]
}
 800345c:	4618      	mov	r0, r3
 800345e:	3714      	adds	r7, #20
 8003460:	46bd      	mov	sp, r7
 8003462:	bd90      	pop	{r4, r7, pc}

08003464 <qFIS_DeFuzz_WtAverage>:
    return d;
}
/*============================================================================*/
static float qFIS_DeFuzz_WtAverage( qFIS_Output_t * const o,
                                    const qFIS_DeFuzzState_t stage )
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	460b      	mov	r3, r1
 800346e:	70fb      	strb	r3, [r7, #3]
    float d = 0.0f;
 8003470:	f04f 0300 	mov.w	r3, #0
 8003474:	60fb      	str	r3, [r7, #12]

    if ( DeFuzz_End == stage ) {
 8003476:	78fb      	ldrb	r3, [r7, #3]
 8003478:	2b02      	cmp	r3, #2
 800347a:	d109      	bne.n	8003490 <qFIS_DeFuzz_WtAverage+0x2c>
        d = o->data[ 0 ]/o->data[ 1 ];
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	699a      	ldr	r2, [r3, #24]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	69db      	ldr	r3, [r3, #28]
 8003484:	4619      	mov	r1, r3
 8003486:	4610      	mov	r0, r2
 8003488:	f7fd fd10 	bl	8000eac <__aeabi_fdiv>
 800348c:	4603      	mov	r3, r0
 800348e:	60fb      	str	r3, [r7, #12]
    }

    return d;
 8003490:	68fb      	ldr	r3, [r7, #12]
}
 8003492:	4618      	mov	r0, r3
 8003494:	3710      	adds	r7, #16
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <qFIS_DeFuzzify>:

    return d;
}
/*============================================================================*/
int qFIS_DeFuzzify( qFIS_t * const f )
{
 800349a:	b5b0      	push	{r4, r5, r7, lr}
 800349c:	b086      	sub	sp, #24
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
    int retVal = 0;
 80034a2:	2300      	movs	r3, #0
 80034a4:	60fb      	str	r3, [r7, #12]

    if ( NULL != f ) {
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	f000 8133 	beq.w	8003714 <qFIS_DeFuzzify+0x27a>
        size_t i;

        for ( i = 0; i < f->nOutputs ; ++i ) {
 80034ae:	2300      	movs	r3, #0
 80034b0:	617b      	str	r3, [r7, #20]
 80034b2:	e00e      	b.n	80034d2 <qFIS_DeFuzzify+0x38>
            f->deFuzz( &f->output[ i ] , DeFuzz_Init );
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	6851      	ldr	r1, [r2, #4]
 80034bc:	697a      	ldr	r2, [r7, #20]
 80034be:	2034      	movs	r0, #52	; 0x34
 80034c0:	fb00 f202 	mul.w	r2, r0, r2
 80034c4:	440a      	add	r2, r1
 80034c6:	2100      	movs	r1, #0
 80034c8:	4610      	mov	r0, r2
 80034ca:	4798      	blx	r3
        for ( i = 0; i < f->nOutputs ; ++i ) {
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	3301      	adds	r3, #1
 80034d0:	617b      	str	r3, [r7, #20]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d6:	697a      	ldr	r2, [r7, #20]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d3eb      	bcc.n	80034b4 <qFIS_DeFuzzify+0x1a>
        }

        if ( Mamdani == f->type  ) {
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	f040 809a 	bne.w	800361c <qFIS_DeFuzzify+0x182>
            size_t k;

            for ( k = 0u ; k < f->nPoints ; ++k ) {
 80034e8:	2300      	movs	r3, #0
 80034ea:	613b      	str	r3, [r7, #16]
 80034ec:	e08f      	b.n	800360e <qFIS_DeFuzzify+0x174>
                for ( i = 0; i < f->nOutputs ; ++i ) { /* initialize*/
 80034ee:	2300      	movs	r3, #0
 80034f0:	617b      	str	r3, [r7, #20]
 80034f2:	e038      	b.n	8003566 <qFIS_DeFuzzify+0xcc>
                    f->output[ i ].y = 0.0f;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685a      	ldr	r2, [r3, #4]
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	2134      	movs	r1, #52	; 0x34
 80034fc:	fb01 f303 	mul.w	r3, r1, r3
 8003500:	4413      	add	r3, r2
 8003502:	f04f 0200 	mov.w	r2, #0
 8003506:	615a      	str	r2, [r3, #20]
                    f->output[ i ].x = qFIS_GetNextX( f->output[ i ].b.min,
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685a      	ldr	r2, [r3, #4]
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	2134      	movs	r1, #52	; 0x34
 8003510:	fb01 f303 	mul.w	r3, r1, r3
 8003514:	4413      	add	r3, r2
 8003516:	6818      	ldr	r0, [r3, #0]
                                                      f->output[ i ].res,
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685a      	ldr	r2, [r3, #4]
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	2134      	movs	r1, #52	; 0x34
 8003520:	fb01 f303 	mul.w	r3, r1, r3
 8003524:	4413      	add	r3, r2
                    f->output[ i ].x = qFIS_GetNextX( f->output[ i ].b.min,
 8003526:	68d9      	ldr	r1, [r3, #12]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685a      	ldr	r2, [r3, #4]
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	2434      	movs	r4, #52	; 0x34
 8003530:	fb04 f303 	mul.w	r3, r4, r3
 8003534:	18d4      	adds	r4, r2, r3
 8003536:	693a      	ldr	r2, [r7, #16]
 8003538:	f000 f950 	bl	80037dc <qFIS_GetNextX>
 800353c:	4603      	mov	r3, r0
 800353e:	6123      	str	r3, [r4, #16]
                                                      k );
                    f->output[ i ].b.value = f->output[ i ].x;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685a      	ldr	r2, [r3, #4]
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	2134      	movs	r1, #52	; 0x34
 8003548:	fb01 f303 	mul.w	r3, r1, r3
 800354c:	441a      	add	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6859      	ldr	r1, [r3, #4]
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	2034      	movs	r0, #52	; 0x34
 8003556:	fb00 f303 	mul.w	r3, r0, r3
 800355a:	440b      	add	r3, r1
 800355c:	6912      	ldr	r2, [r2, #16]
 800355e:	609a      	str	r2, [r3, #8]
                for ( i = 0; i < f->nOutputs ; ++i ) { /* initialize*/
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	3301      	adds	r3, #1
 8003564:	617b      	str	r3, [r7, #20]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356a:	697a      	ldr	r2, [r7, #20]
 800356c:	429a      	cmp	r2, r3
 800356e:	d3c1      	bcc.n	80034f4 <qFIS_DeFuzzify+0x5a>
                }
                qFIS_Aggregate( f );
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f7ff feed 	bl	8003350 <qFIS_Aggregate>
                for ( i = 0; i < f->nOutputs ; ++i ) {
 8003576:	2300      	movs	r3, #0
 8003578:	617b      	str	r3, [r7, #20]
 800357a:	e040      	b.n	80035fe <qFIS_DeFuzzify+0x164>
                    f->deFuzz( &f->output[ i ] , DeFuzz_Compute );
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	6851      	ldr	r1, [r2, #4]
 8003584:	697a      	ldr	r2, [r7, #20]
 8003586:	2034      	movs	r0, #52	; 0x34
 8003588:	fb00 f202 	mul.w	r2, r0, r2
 800358c:	440a      	add	r2, r1
 800358e:	2101      	movs	r1, #1
 8003590:	4610      	mov	r0, r2
 8003592:	4798      	blx	r3
                    if ( NULL != f->output[ i ].xag ) { /*store aggregated*/
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685a      	ldr	r2, [r3, #4]
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	2134      	movs	r1, #52	; 0x34
 800359c:	fb01 f303 	mul.w	r3, r1, r3
 80035a0:	4413      	add	r3, r2
 80035a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d027      	beq.n	80035f8 <qFIS_DeFuzzify+0x15e>
                        f->output[ i ].xag[ k ] = f->output[ i ].x;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685a      	ldr	r2, [r3, #4]
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	2134      	movs	r1, #52	; 0x34
 80035b0:	fb01 f303 	mul.w	r3, r1, r3
 80035b4:	441a      	add	r2, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6859      	ldr	r1, [r3, #4]
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	2034      	movs	r0, #52	; 0x34
 80035be:	fb00 f303 	mul.w	r3, r0, r3
 80035c2:	440b      	add	r3, r1
 80035c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	440b      	add	r3, r1
 80035cc:	6912      	ldr	r2, [r2, #16]
 80035ce:	601a      	str	r2, [r3, #0]
                        f->output[ i ].yag[ k ] = f->output[ i ].y;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685a      	ldr	r2, [r3, #4]
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	2134      	movs	r1, #52	; 0x34
 80035d8:	fb01 f303 	mul.w	r3, r1, r3
 80035dc:	441a      	add	r2, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6859      	ldr	r1, [r3, #4]
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	2034      	movs	r0, #52	; 0x34
 80035e6:	fb00 f303 	mul.w	r3, r0, r3
 80035ea:	440b      	add	r3, r1
 80035ec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	440b      	add	r3, r1
 80035f4:	6952      	ldr	r2, [r2, #20]
 80035f6:	601a      	str	r2, [r3, #0]
                for ( i = 0; i < f->nOutputs ; ++i ) {
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	3301      	adds	r3, #1
 80035fc:	617b      	str	r3, [r7, #20]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003602:	697a      	ldr	r2, [r7, #20]
 8003604:	429a      	cmp	r2, r3
 8003606:	d3b9      	bcc.n	800357c <qFIS_DeFuzzify+0xe2>
            for ( k = 0u ; k < f->nPoints ; ++k ) {
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	3301      	adds	r3, #1
 800360c:	613b      	str	r3, [r7, #16]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003612:	693a      	ldr	r2, [r7, #16]
 8003614:	429a      	cmp	r2, r3
 8003616:	f4ff af6a 	bcc.w	80034ee <qFIS_DeFuzzify+0x54>
 800361a:	e038      	b.n	800368e <qFIS_DeFuzzify+0x1f4>
                    }
                }
            }
        }
        else { /*Sugeno and Tsukamoto systems*/
            for ( i = 0; i < f->nOutputs ; ++i ) { /* initialize*/
 800361c:	2300      	movs	r3, #0
 800361e:	617b      	str	r3, [r7, #20]
 8003620:	e016      	b.n	8003650 <qFIS_DeFuzzify+0x1b6>
                f->output[ i ].data[ 0 ] = 0.0f; /*store sum wi*/
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685a      	ldr	r2, [r3, #4]
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	2134      	movs	r1, #52	; 0x34
 800362a:	fb01 f303 	mul.w	r3, r1, r3
 800362e:	4413      	add	r3, r2
 8003630:	f04f 0200 	mov.w	r2, #0
 8003634:	619a      	str	r2, [r3, #24]
                f->output[ i ].data[ 1 ] = 0.0f; /*store sum zi*wi*/
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685a      	ldr	r2, [r3, #4]
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	2134      	movs	r1, #52	; 0x34
 800363e:	fb01 f303 	mul.w	r3, r1, r3
 8003642:	4413      	add	r3, r2
 8003644:	f04f 0200 	mov.w	r2, #0
 8003648:	61da      	str	r2, [r3, #28]
            for ( i = 0; i < f->nOutputs ; ++i ) { /* initialize*/
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	3301      	adds	r3, #1
 800364e:	617b      	str	r3, [r7, #20]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003654:	697a      	ldr	r2, [r7, #20]
 8003656:	429a      	cmp	r2, r3
 8003658:	d3e3      	bcc.n	8003622 <qFIS_DeFuzzify+0x188>
            }
            qFIS_Aggregate( f );
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f7ff fe78 	bl	8003350 <qFIS_Aggregate>
            for ( i = 0; i < f->nOutputs ; ++i ) { /* initialize*/
 8003660:	2300      	movs	r3, #0
 8003662:	617b      	str	r3, [r7, #20]
 8003664:	e00e      	b.n	8003684 <qFIS_DeFuzzify+0x1ea>
                f->deFuzz( &f->output[ i ] , DeFuzz_Compute );
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	6851      	ldr	r1, [r2, #4]
 800366e:	697a      	ldr	r2, [r7, #20]
 8003670:	2034      	movs	r0, #52	; 0x34
 8003672:	fb00 f202 	mul.w	r2, r0, r2
 8003676:	440a      	add	r2, r1
 8003678:	2101      	movs	r1, #1
 800367a:	4610      	mov	r0, r2
 800367c:	4798      	blx	r3
            for ( i = 0; i < f->nOutputs ; ++i ) { /* initialize*/
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	3301      	adds	r3, #1
 8003682:	617b      	str	r3, [r7, #20]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003688:	697a      	ldr	r2, [r7, #20]
 800368a:	429a      	cmp	r2, r3
 800368c:	d3eb      	bcc.n	8003666 <qFIS_DeFuzzify+0x1cc>
            }
        }

        for ( i = 0; i < f->nOutputs ; ++i ) {
 800368e:	2300      	movs	r3, #0
 8003690:	617b      	str	r3, [r7, #20]
 8003692:	e03a      	b.n	800370a <qFIS_DeFuzzify+0x270>
            f->output[ i ].b.value = f->deFuzz( &f->output[ i ] , DeFuzz_End );
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	6851      	ldr	r1, [r2, #4]
 800369c:	697a      	ldr	r2, [r7, #20]
 800369e:	2034      	movs	r0, #52	; 0x34
 80036a0:	fb00 f202 	mul.w	r2, r0, r2
 80036a4:	1888      	adds	r0, r1, r2
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	6851      	ldr	r1, [r2, #4]
 80036aa:	697a      	ldr	r2, [r7, #20]
 80036ac:	2434      	movs	r4, #52	; 0x34
 80036ae:	fb04 f202 	mul.w	r2, r4, r2
 80036b2:	188c      	adds	r4, r1, r2
 80036b4:	2102      	movs	r1, #2
 80036b6:	4798      	blx	r3
 80036b8:	4603      	mov	r3, r0
 80036ba:	60a3      	str	r3, [r4, #8]
            f->output[ i ].b.value = qFIS_Bound( f->output[ i ].b.value,
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685a      	ldr	r2, [r3, #4]
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	2134      	movs	r1, #52	; 0x34
 80036c4:	fb01 f303 	mul.w	r3, r1, r3
 80036c8:	4413      	add	r3, r2
 80036ca:	6898      	ldr	r0, [r3, #8]
                                                 f->output[ i ].b.min,
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685a      	ldr	r2, [r3, #4]
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	2134      	movs	r1, #52	; 0x34
 80036d4:	fb01 f303 	mul.w	r3, r1, r3
 80036d8:	4413      	add	r3, r2
            f->output[ i ].b.value = qFIS_Bound( f->output[ i ].b.value,
 80036da:	6819      	ldr	r1, [r3, #0]
                                                 f->output[ i ].b.max );
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	685a      	ldr	r2, [r3, #4]
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	2434      	movs	r4, #52	; 0x34
 80036e4:	fb04 f303 	mul.w	r3, r4, r3
 80036e8:	4413      	add	r3, r2
            f->output[ i ].b.value = qFIS_Bound( f->output[ i ].b.value,
 80036ea:	685d      	ldr	r5, [r3, #4]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685a      	ldr	r2, [r3, #4]
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	2434      	movs	r4, #52	; 0x34
 80036f4:	fb04 f303 	mul.w	r3, r4, r3
 80036f8:	18d4      	adds	r4, r2, r3
 80036fa:	462a      	mov	r2, r5
 80036fc:	f001 f851 	bl	80047a2 <qFIS_Bound>
 8003700:	4603      	mov	r3, r0
 8003702:	60a3      	str	r3, [r4, #8]
        for ( i = 0; i < f->nOutputs ; ++i ) {
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	3301      	adds	r3, #1
 8003708:	617b      	str	r3, [r7, #20]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370e:	697a      	ldr	r2, [r7, #20]
 8003710:	429a      	cmp	r2, r3
 8003712:	d3bf      	bcc.n	8003694 <qFIS_DeFuzzify+0x1fa>
        }
    }

    return retVal;
 8003714:	68fb      	ldr	r3, [r7, #12]
}
 8003716:	4618      	mov	r0, r3
 8003718:	3718      	adds	r7, #24
 800371a:	46bd      	mov	sp, r7
 800371c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003720 <qFIS_Inference>:

    return retVal;
}
/*============================================================================*/
int qFIS_Inference( qFIS_t * const f )
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
    int retVal = 0;
 8003728:	2300      	movs	r3, #0
 800372a:	60fb      	str	r3, [r7, #12]

    if ( NULL != f  ) {
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d04a      	beq.n	80037c8 <qFIS_Inference+0xa8>
        size_t i = 0u;
 8003732:	2300      	movs	r3, #0
 8003734:	60bb      	str	r3, [r7, #8]

        if ( QFIS_RULES_BEGIN == f->rules[ 0 ] ) {
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800373a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800373e:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8003742:	d12f      	bne.n	80037a4 <qFIS_Inference+0x84>
            f->inferenceState = &qFIS_InferenceAntecedent;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a23      	ldr	r2, [pc, #140]	; (80037d4 <qFIS_Inference+0xb4>)
 8003748:	621a      	str	r2, [r3, #32]
            f->rStrength = 0.0f;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f04f 0200 	mov.w	r2, #0
 8003750:	659a      	str	r2, [r3, #88]	; 0x58
            f->lastConnector = -1;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003758:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
            f->ruleCount = 0u;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	655a      	str	r2, [r3, #84]	; 0x54
            i = 1u;
 8003762:	2301      	movs	r3, #1
 8003764:	60bb      	str	r3, [r7, #8]
            while ( ( _QFIS_RULES_END != f->rules[ i ] ) && ( f->ruleCount < f->nRules ) ) {
 8003766:	e00b      	b.n	8003780 <qFIS_Inference+0x60>
                i = f->inferenceState( f, i );
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a1b      	ldr	r3, [r3, #32]
 800376c:	68b9      	ldr	r1, [r7, #8]
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	4798      	blx	r3
 8003772:	60b8      	str	r0, [r7, #8]
                if ( QFIS_INFERENCE_ERROR == i ) {
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d013      	beq.n	80037a2 <qFIS_Inference+0x82>
                    break;
                }
                ++i;
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	3301      	adds	r3, #1
 800377e:	60bb      	str	r3, [r7, #8]
            while ( ( _QFIS_RULES_END != f->rules[ i ] ) && ( f->ruleCount < f->nRules ) ) {
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	005b      	lsls	r3, r3, #1
 8003788:	4413      	add	r3, r2
 800378a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800378e:	4a12      	ldr	r2, [pc, #72]	; (80037d8 <qFIS_Inference+0xb8>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d007      	beq.n	80037a4 <qFIS_Inference+0x84>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800379c:	429a      	cmp	r2, r3
 800379e:	d3e3      	bcc.n	8003768 <qFIS_Inference+0x48>
 80037a0:	e000      	b.n	80037a4 <qFIS_Inference+0x84>
                    break;
 80037a2:	bf00      	nop
            }
        }
        if ( ( _QFIS_RULES_END == f->rules[ i ] ) && ( f->ruleCount == f->nRules) ) {
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	005b      	lsls	r3, r3, #1
 80037ac:	4413      	add	r3, r2
 80037ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037b2:	4a09      	ldr	r2, [pc, #36]	; (80037d8 <qFIS_Inference+0xb8>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d107      	bne.n	80037c8 <qFIS_Inference+0xa8>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d101      	bne.n	80037c8 <qFIS_Inference+0xa8>
            retVal = 1;
 80037c4:	2301      	movs	r3, #1
 80037c6:	60fb      	str	r3, [r7, #12]
        }
    }

    return retVal;
 80037c8:	68fb      	ldr	r3, [r7, #12]
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3710      	adds	r7, #16
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	08002fa5 	.word	0x08002fa5
 80037d8:	ffff8001 	.word	0xffff8001

080037dc <qFIS_GetNextX>:
/*============================================================================*/
static float qFIS_GetNextX( const float init,
                            const float res,
                            const size_t i )
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	607a      	str	r2, [r7, #4]
    /*cstat -CERT-FLP36-C*/
    return init + ( ( (float)i + 0.5f )*res );
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f7fd fa53 	bl	8000c94 <__aeabi_ui2f>
 80037ee:	4603      	mov	r3, r0
 80037f0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80037f4:	4618      	mov	r0, r3
 80037f6:	f7fd f99d 	bl	8000b34 <__addsf3>
 80037fa:	4603      	mov	r3, r0
 80037fc:	68b9      	ldr	r1, [r7, #8]
 80037fe:	4618      	mov	r0, r3
 8003800:	f7fd faa0 	bl	8000d44 <__aeabi_fmul>
 8003804:	4603      	mov	r3, r0
 8003806:	68f9      	ldr	r1, [r7, #12]
 8003808:	4618      	mov	r0, r3
 800380a:	f7fd f993 	bl	8000b34 <__addsf3>
 800380e:	4603      	mov	r3, r0
    /*cstat +CERT-FLP36-C*/
}
 8003810:	4618      	mov	r0, r3
 8003812:	3710      	adds	r7, #16
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <qFIS_TriMF>:
/*============================================================================*/
static float qFIS_TriMF( const qFIS_IO_Base_t * const in,
                         const float *p,
                         const size_t n )
{
 8003818:	b5b0      	push	{r4, r5, r7, lr}
 800381a:	b08a      	sub	sp, #40	; 0x28
 800381c:	af00      	add	r7, sp, #0
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	607a      	str	r2, [r7, #4]
    float a, b, c, tmp;
    float x = in[ 0 ].value;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	627b      	str	r3, [r7, #36]	; 0x24
    (void)n;

    a = p[ 0 ];
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	623b      	str	r3, [r7, #32]
    b = p[ 1 ];
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	3304      	adds	r3, #4
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	61fb      	str	r3, [r7, #28]
    c = p[ 2 ];
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	3308      	adds	r3, #8
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	61bb      	str	r3, [r7, #24]
    tmp = qFIS_Min( ( x - a )/( b - a ) , ( c - x )/( c - b ) );
 8003840:	6a39      	ldr	r1, [r7, #32]
 8003842:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003844:	f7fd f974 	bl	8000b30 <__aeabi_fsub>
 8003848:	4603      	mov	r3, r0
 800384a:	461c      	mov	r4, r3
 800384c:	6a39      	ldr	r1, [r7, #32]
 800384e:	69f8      	ldr	r0, [r7, #28]
 8003850:	f7fd f96e 	bl	8000b30 <__aeabi_fsub>
 8003854:	4603      	mov	r3, r0
 8003856:	4619      	mov	r1, r3
 8003858:	4620      	mov	r0, r4
 800385a:	f7fd fb27 	bl	8000eac <__aeabi_fdiv>
 800385e:	4603      	mov	r3, r0
 8003860:	461c      	mov	r4, r3
 8003862:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003864:	69b8      	ldr	r0, [r7, #24]
 8003866:	f7fd f963 	bl	8000b30 <__aeabi_fsub>
 800386a:	4603      	mov	r3, r0
 800386c:	461d      	mov	r5, r3
 800386e:	69f9      	ldr	r1, [r7, #28]
 8003870:	69b8      	ldr	r0, [r7, #24]
 8003872:	f7fd f95d 	bl	8000b30 <__aeabi_fsub>
 8003876:	4603      	mov	r3, r0
 8003878:	4619      	mov	r1, r3
 800387a:	4628      	mov	r0, r5
 800387c:	f7fd fb16 	bl	8000eac <__aeabi_fdiv>
 8003880:	4603      	mov	r3, r0
 8003882:	4619      	mov	r1, r3
 8003884:	4620      	mov	r0, r4
 8003886:	f000 ff09 	bl	800469c <qFIS_Min>
 800388a:	6178      	str	r0, [r7, #20]

    return qFIS_Max( tmp , 0.0f );
 800388c:	f04f 0100 	mov.w	r1, #0
 8003890:	6978      	ldr	r0, [r7, #20]
 8003892:	f000 ff1e 	bl	80046d2 <qFIS_Max>
 8003896:	4603      	mov	r3, r0
}
 8003898:	4618      	mov	r0, r3
 800389a:	3728      	adds	r7, #40	; 0x28
 800389c:	46bd      	mov	sp, r7
 800389e:	bdb0      	pop	{r4, r5, r7, pc}

080038a0 <qFIS_TrapMF>:
/*============================================================================*/
static float qFIS_TrapMF( const qFIS_IO_Base_t * const in,
                          const float *p,
                          const size_t n )
{
 80038a0:	b590      	push	{r4, r7, lr}
 80038a2:	b08b      	sub	sp, #44	; 0x2c
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]
    float a, b, c, d, tmp;
    float x = in[ 0 ].value;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	627b      	str	r3, [r7, #36]	; 0x24
    (void)n;

    a = p[ 0 ];
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	623b      	str	r3, [r7, #32]
    b = p[ 1 ];
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	3304      	adds	r3, #4
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	61fb      	str	r3, [r7, #28]
    c = p[ 2 ];
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	3308      	adds	r3, #8
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	61bb      	str	r3, [r7, #24]
    d = p[ 3 ];
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	330c      	adds	r3, #12
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	617b      	str	r3, [r7, #20]
    tmp = qFIS_Min( ( x - a )/( b - a ) , 1.0f );
 80038d0:	6a39      	ldr	r1, [r7, #32]
 80038d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80038d4:	f7fd f92c 	bl	8000b30 <__aeabi_fsub>
 80038d8:	4603      	mov	r3, r0
 80038da:	461c      	mov	r4, r3
 80038dc:	6a39      	ldr	r1, [r7, #32]
 80038de:	69f8      	ldr	r0, [r7, #28]
 80038e0:	f7fd f926 	bl	8000b30 <__aeabi_fsub>
 80038e4:	4603      	mov	r3, r0
 80038e6:	4619      	mov	r1, r3
 80038e8:	4620      	mov	r0, r4
 80038ea:	f7fd fadf 	bl	8000eac <__aeabi_fdiv>
 80038ee:	4603      	mov	r3, r0
 80038f0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80038f4:	4618      	mov	r0, r3
 80038f6:	f000 fed1 	bl	800469c <qFIS_Min>
 80038fa:	6138      	str	r0, [r7, #16]
    tmp = qFIS_Min( tmp, ( d - x )/( d - c ) ) ;
 80038fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038fe:	6978      	ldr	r0, [r7, #20]
 8003900:	f7fd f916 	bl	8000b30 <__aeabi_fsub>
 8003904:	4603      	mov	r3, r0
 8003906:	461c      	mov	r4, r3
 8003908:	69b9      	ldr	r1, [r7, #24]
 800390a:	6978      	ldr	r0, [r7, #20]
 800390c:	f7fd f910 	bl	8000b30 <__aeabi_fsub>
 8003910:	4603      	mov	r3, r0
 8003912:	4619      	mov	r1, r3
 8003914:	4620      	mov	r0, r4
 8003916:	f7fd fac9 	bl	8000eac <__aeabi_fdiv>
 800391a:	4603      	mov	r3, r0
 800391c:	4619      	mov	r1, r3
 800391e:	6938      	ldr	r0, [r7, #16]
 8003920:	f000 febc 	bl	800469c <qFIS_Min>
 8003924:	6138      	str	r0, [r7, #16]

    return qFIS_Max( tmp , 0.0f );
 8003926:	f04f 0100 	mov.w	r1, #0
 800392a:	6938      	ldr	r0, [r7, #16]
 800392c:	f000 fed1 	bl	80046d2 <qFIS_Max>
 8003930:	4603      	mov	r3, r0
}
 8003932:	4618      	mov	r0, r3
 8003934:	372c      	adds	r7, #44	; 0x2c
 8003936:	46bd      	mov	sp, r7
 8003938:	bd90      	pop	{r4, r7, pc}

0800393a <qFIS_GBellMF>:
/*============================================================================*/
static float qFIS_GBellMF( const qFIS_IO_Base_t * const in,
                           const float *p,
                           const size_t n )
{
 800393a:	b590      	push	{r4, r7, lr}
 800393c:	b089      	sub	sp, #36	; 0x24
 800393e:	af00      	add	r7, sp, #0
 8003940:	60f8      	str	r0, [r7, #12]
 8003942:	60b9      	str	r1, [r7, #8]
 8003944:	607a      	str	r2, [r7, #4]
    float a, b, c;
    float x = in[ 0 ].value;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	61fb      	str	r3, [r7, #28]
    (void)n;

    a = p[ 0 ];
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	61bb      	str	r3, [r7, #24]
    b = p[ 1 ];
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	3304      	adds	r3, #4
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	617b      	str	r3, [r7, #20]
    c = p[ 2 ];
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	3308      	adds	r3, #8
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	613b      	str	r3, [r7, #16]

    return ( 1.0f/( 1.0f + QLIB_POW( QLIB_ABS( ( x - c )/a ) , 2.0f*b ) ) );
 8003962:	6939      	ldr	r1, [r7, #16]
 8003964:	69f8      	ldr	r0, [r7, #28]
 8003966:	f7fd f8e3 	bl	8000b30 <__aeabi_fsub>
 800396a:	4603      	mov	r3, r0
 800396c:	69b9      	ldr	r1, [r7, #24]
 800396e:	4618      	mov	r0, r3
 8003970:	f7fd fa9c 	bl	8000eac <__aeabi_fdiv>
 8003974:	4603      	mov	r3, r0
 8003976:	4618      	mov	r0, r3
 8003978:	f7fe fde0 	bl	800253c <qFFMath_Abs>
 800397c:	4604      	mov	r4, r0
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	4619      	mov	r1, r3
 8003982:	4618      	mov	r0, r3
 8003984:	f7fd f8d6 	bl	8000b34 <__addsf3>
 8003988:	4603      	mov	r3, r0
 800398a:	4619      	mov	r1, r3
 800398c:	4620      	mov	r0, r4
 800398e:	f7fe ff87 	bl	80028a0 <qFFMath_Pow>
 8003992:	4603      	mov	r3, r0
 8003994:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003998:	4618      	mov	r0, r3
 800399a:	f7fd f8cb 	bl	8000b34 <__addsf3>
 800399e:	4603      	mov	r3, r0
 80039a0:	4619      	mov	r1, r3
 80039a2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80039a6:	f7fd fa81 	bl	8000eac <__aeabi_fdiv>
 80039aa:	4603      	mov	r3, r0
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3724      	adds	r7, #36	; 0x24
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd90      	pop	{r4, r7, pc}

080039b4 <qFIS_GaussMF>:
/*============================================================================*/
static float qFIS_GaussMF( const qFIS_IO_Base_t * const in,
                           const float *p,
                           const size_t n )
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b088      	sub	sp, #32
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	607a      	str	r2, [r7, #4]
    float a, c, tmp;
    float x = in[ 0 ].value;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	61fb      	str	r3, [r7, #28]
    (void)n;

    a = p[ 0 ];
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	61bb      	str	r3, [r7, #24]
    c = p[ 1 ];
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	3304      	adds	r3, #4
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	617b      	str	r3, [r7, #20]
    tmp = ( x - c )/a;
 80039d4:	6979      	ldr	r1, [r7, #20]
 80039d6:	69f8      	ldr	r0, [r7, #28]
 80039d8:	f7fd f8aa 	bl	8000b30 <__aeabi_fsub>
 80039dc:	4603      	mov	r3, r0
 80039de:	69b9      	ldr	r1, [r7, #24]
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7fd fa63 	bl	8000eac <__aeabi_fdiv>
 80039e6:	4603      	mov	r3, r0
 80039e8:	613b      	str	r3, [r7, #16]

    return QLIB_EXP( -0.5f*tmp*tmp );
 80039ea:	f04f 413f 	mov.w	r1, #3204448256	; 0xbf000000
 80039ee:	6938      	ldr	r0, [r7, #16]
 80039f0:	f7fd f9a8 	bl	8000d44 <__aeabi_fmul>
 80039f4:	4603      	mov	r3, r0
 80039f6:	6939      	ldr	r1, [r7, #16]
 80039f8:	4618      	mov	r0, r3
 80039fa:	f7fd f9a3 	bl	8000d44 <__aeabi_fmul>
 80039fe:	4603      	mov	r3, r0
 8003a00:	4618      	mov	r0, r3
 8003a02:	f7fe ff25 	bl	8002850 <qFFMath_Exp>
 8003a06:	4603      	mov	r3, r0
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3720      	adds	r7, #32
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <qFIS_Gauss2MF>:
/*============================================================================*/
static float qFIS_Gauss2MF( const qFIS_IO_Base_t * const in,
                            const float *p,
                            const size_t n )
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b08a      	sub	sp, #40	; 0x28
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	607a      	str	r2, [r7, #4]
    float c1, c2, f1, f2;
    float x = in[ 0 ].value;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	627b      	str	r3, [r7, #36]	; 0x24

    c1 = p[ 1 ];
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	3304      	adds	r3, #4
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	623b      	str	r3, [r7, #32]
    c2 = p[ 3 ];
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	330c      	adds	r3, #12
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	61fb      	str	r3, [r7, #28]
    f1 = ( x <= c1 ) ? qFIS_GaussMF( in , p, n ) : 1.0f;
 8003a32:	6a39      	ldr	r1, [r7, #32]
 8003a34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a36:	f7fd fb2d 	bl	8001094 <__aeabi_fcmple>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d006      	beq.n	8003a4e <qFIS_Gauss2MF+0x3e>
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	68b9      	ldr	r1, [r7, #8]
 8003a44:	68f8      	ldr	r0, [r7, #12]
 8003a46:	f7ff ffb5 	bl	80039b4 <qFIS_GaussMF>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	e001      	b.n	8003a52 <qFIS_Gauss2MF+0x42>
 8003a4e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003a52:	61bb      	str	r3, [r7, #24]
    f2 = ( x <= c2 ) ? qFIS_GaussMF( in , &p[ 2 ], n ) : 1.0f;
 8003a54:	69f9      	ldr	r1, [r7, #28]
 8003a56:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a58:	f7fd fb1c 	bl	8001094 <__aeabi_fcmple>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d008      	beq.n	8003a74 <qFIS_Gauss2MF+0x64>
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	3308      	adds	r3, #8
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	4619      	mov	r1, r3
 8003a6a:	68f8      	ldr	r0, [r7, #12]
 8003a6c:	f7ff ffa2 	bl	80039b4 <qFIS_GaussMF>
 8003a70:	4603      	mov	r3, r0
 8003a72:	e001      	b.n	8003a78 <qFIS_Gauss2MF+0x68>
 8003a74:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003a78:	617b      	str	r3, [r7, #20]

    return f1*f2;
 8003a7a:	6979      	ldr	r1, [r7, #20]
 8003a7c:	69b8      	ldr	r0, [r7, #24]
 8003a7e:	f7fd f961 	bl	8000d44 <__aeabi_fmul>
 8003a82:	4603      	mov	r3, r0
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3728      	adds	r7, #40	; 0x28
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <qFIS_SigMF>:
/*============================================================================*/
static float qFIS_SigMF( const qFIS_IO_Base_t * const in,
                         const float *p,
                         const size_t n )
{
 8003a8c:	b590      	push	{r4, r7, lr}
 8003a8e:	b089      	sub	sp, #36	; 0x24
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	607a      	str	r2, [r7, #4]
    float a, b;
    float x = in[ 0 ].value;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	61fb      	str	r3, [r7, #28]
    (void)n;

    a = p[ 0 ];
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	61bb      	str	r3, [r7, #24]
    b = p[ 1 ];
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	3304      	adds	r3, #4
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	617b      	str	r3, [r7, #20]

    return 1.0f/( 1.0f + QLIB_EXP( -a*( x - b ) ) );
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8003ab2:	6979      	ldr	r1, [r7, #20]
 8003ab4:	69f8      	ldr	r0, [r7, #28]
 8003ab6:	f7fd f83b 	bl	8000b30 <__aeabi_fsub>
 8003aba:	4603      	mov	r3, r0
 8003abc:	4619      	mov	r1, r3
 8003abe:	4620      	mov	r0, r4
 8003ac0:	f7fd f940 	bl	8000d44 <__aeabi_fmul>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7fe fec2 	bl	8002850 <qFFMath_Exp>
 8003acc:	4603      	mov	r3, r0
 8003ace:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f7fd f82e 	bl	8000b34 <__addsf3>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	4619      	mov	r1, r3
 8003adc:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003ae0:	f7fd f9e4 	bl	8000eac <__aeabi_fdiv>
 8003ae4:	4603      	mov	r3, r0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3724      	adds	r7, #36	; 0x24
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd90      	pop	{r4, r7, pc}

08003aee <qFIS_TSigMF>:
/*============================================================================*/
static float qFIS_TSigMF( const qFIS_IO_Base_t * const in,
                          const float *p,
                          const size_t n )
{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b08a      	sub	sp, #40	; 0x28
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	60f8      	str	r0, [r7, #12]
 8003af6:	60b9      	str	r1, [r7, #8]
 8003af8:	607a      	str	r2, [r7, #4]
    float a, b, y;
    float x = in[ 0 ].value;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	623b      	str	r3, [r7, #32]
    float min = in[ 0 ].min;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	61fb      	str	r3, [r7, #28]
    float max = in[ 0 ].max;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	61bb      	str	r3, [r7, #24]
    (void)n;

    a = p[ 0 ]; /*slope*/
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	617b      	str	r3, [r7, #20]
    b = p[ 1 ]; /*inflection*/
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	3304      	adds	r3, #4
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	613b      	str	r3, [r7, #16]
    if ( qFMathEx_Equal( x, 1.0f ) ) {
 8003b1a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003b1e:	6a38      	ldr	r0, [r7, #32]
 8003b20:	f000 fea9 	bl	8004876 <qFMathEx_Equal>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00d      	beq.n	8003b46 <qFIS_TSigMF+0x58>
        if ( a >= 0.0f ) {
 8003b2a:	f04f 0100 	mov.w	r1, #0
 8003b2e:	6978      	ldr	r0, [r7, #20]
 8003b30:	f7fd faba 	bl	80010a8 <__aeabi_fcmpge>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d002      	beq.n	8003b40 <qFIS_TSigMF+0x52>
            y = max;
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b3e:	e033      	b.n	8003ba8 <qFIS_TSigMF+0xba>
        }
        else {
            y = min;
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	627b      	str	r3, [r7, #36]	; 0x24
 8003b44:	e030      	b.n	8003ba8 <qFIS_TSigMF+0xba>
        }
    }
    else if ( qFMathEx_Equal( x, 0.0f ) ) {
 8003b46:	f04f 0100 	mov.w	r1, #0
 8003b4a:	6a38      	ldr	r0, [r7, #32]
 8003b4c:	f000 fe93 	bl	8004876 <qFMathEx_Equal>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00d      	beq.n	8003b72 <qFIS_TSigMF+0x84>
        if ( a >= 0.0f ) {
 8003b56:	f04f 0100 	mov.w	r1, #0
 8003b5a:	6978      	ldr	r0, [r7, #20]
 8003b5c:	f7fd faa4 	bl	80010a8 <__aeabi_fcmpge>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d002      	beq.n	8003b6c <qFIS_TSigMF+0x7e>
            y = min;
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	627b      	str	r3, [r7, #36]	; 0x24
 8003b6a:	e01d      	b.n	8003ba8 <qFIS_TSigMF+0xba>
        }
        else {
            y = max;
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b70:	e01a      	b.n	8003ba8 <qFIS_TSigMF+0xba>
        }
    }
    else {
        /*cstat -MISRAC2012-Dir-4.11_a*/
        y = b - ( QLIB_LOG( ( 1.0f/x ) - 1.0f )/a );
 8003b72:	6a39      	ldr	r1, [r7, #32]
 8003b74:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003b78:	f7fd f998 	bl	8000eac <__aeabi_fdiv>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7fc ffd4 	bl	8000b30 <__aeabi_fsub>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7fe fe74 	bl	8002878 <qFFMath_Log>
 8003b90:	4603      	mov	r3, r0
 8003b92:	6979      	ldr	r1, [r7, #20]
 8003b94:	4618      	mov	r0, r3
 8003b96:	f7fd f989 	bl	8000eac <__aeabi_fdiv>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	6938      	ldr	r0, [r7, #16]
 8003ba0:	f7fc ffc6 	bl	8000b30 <__aeabi_fsub>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	627b      	str	r3, [r7, #36]	; 0x24
        /*cstat +MISRAC2012-Dir-4.11_a*/
    }

    return y;
 8003ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3728      	adds	r7, #40	; 0x28
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}

08003bb2 <qFIS_DSigMF>:
/*============================================================================*/
static float qFIS_DSigMF( const qFIS_IO_Base_t * const in,
                          const float *p,
                          const size_t n )
{
 8003bb2:	b590      	push	{r4, r7, lr}
 8003bb4:	b085      	sub	sp, #20
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	60f8      	str	r0, [r7, #12]
 8003bba:	60b9      	str	r1, [r7, #8]
 8003bbc:	607a      	str	r2, [r7, #4]
    return QLIB_ABS( qFIS_SigMF( in , p, n ) - qFIS_SigMF( in , &p[ 2 ], n ) );
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	68b9      	ldr	r1, [r7, #8]
 8003bc2:	68f8      	ldr	r0, [r7, #12]
 8003bc4:	f7ff ff62 	bl	8003a8c <qFIS_SigMF>
 8003bc8:	4604      	mov	r4, r0
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	3308      	adds	r3, #8
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	68f8      	ldr	r0, [r7, #12]
 8003bd4:	f7ff ff5a 	bl	8003a8c <qFIS_SigMF>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	4619      	mov	r1, r3
 8003bdc:	4620      	mov	r0, r4
 8003bde:	f7fc ffa7 	bl	8000b30 <__aeabi_fsub>
 8003be2:	4603      	mov	r3, r0
 8003be4:	4618      	mov	r0, r3
 8003be6:	f7fe fca9 	bl	800253c <qFFMath_Abs>
 8003bea:	4603      	mov	r3, r0
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3714      	adds	r7, #20
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd90      	pop	{r4, r7, pc}

08003bf4 <qFIS_PSigMF>:
/*============================================================================*/
static float qFIS_PSigMF( const qFIS_IO_Base_t * const in,
                          const float *p,
                          const size_t n )
{
 8003bf4:	b590      	push	{r4, r7, lr}
 8003bf6:	b085      	sub	sp, #20
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	607a      	str	r2, [r7, #4]
    return QLIB_ABS( qFIS_SigMF( in , p, n )*qFIS_SigMF( in , &p[ 2 ], n ) );
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	68b9      	ldr	r1, [r7, #8]
 8003c04:	68f8      	ldr	r0, [r7, #12]
 8003c06:	f7ff ff41 	bl	8003a8c <qFIS_SigMF>
 8003c0a:	4604      	mov	r4, r0
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	3308      	adds	r3, #8
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	4619      	mov	r1, r3
 8003c14:	68f8      	ldr	r0, [r7, #12]
 8003c16:	f7ff ff39 	bl	8003a8c <qFIS_SigMF>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	4620      	mov	r0, r4
 8003c20:	f7fd f890 	bl	8000d44 <__aeabi_fmul>
 8003c24:	4603      	mov	r3, r0
 8003c26:	4618      	mov	r0, r3
 8003c28:	f7fe fc88 	bl	800253c <qFFMath_Abs>
 8003c2c:	4603      	mov	r3, r0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3714      	adds	r7, #20
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd90      	pop	{r4, r7, pc}

08003c36 <qFIS_SMF>:
/*============================================================================*/
static float qFIS_SMF( const qFIS_IO_Base_t * const in,
                       const float *p,
                       const size_t n )
{
 8003c36:	b590      	push	{r4, r7, lr}
 8003c38:	b08b      	sub	sp, #44	; 0x2c
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	60f8      	str	r0, [r7, #12]
 8003c3e:	60b9      	str	r1, [r7, #8]
 8003c40:	607a      	str	r2, [r7, #4]
    float a, b, tmp, y;
    float x = in[ 0 ].value;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	623b      	str	r3, [r7, #32]
    (void)n;

    a = p[ 0 ];
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	61fb      	str	r3, [r7, #28]
    b = p[ 1 ];
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	3304      	adds	r3, #4
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	61bb      	str	r3, [r7, #24]
    if ( x <= a ) {
 8003c56:	69f9      	ldr	r1, [r7, #28]
 8003c58:	6a38      	ldr	r0, [r7, #32]
 8003c5a:	f7fd fa1b 	bl	8001094 <__aeabi_fcmple>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d003      	beq.n	8003c6c <qFIS_SMF+0x36>
        y =  0.0f;
 8003c64:	f04f 0300 	mov.w	r3, #0
 8003c68:	627b      	str	r3, [r7, #36]	; 0x24
 8003c6a:	e081      	b.n	8003d70 <qFIS_SMF+0x13a>
    }
    else if ( x >= b ) {
 8003c6c:	69b9      	ldr	r1, [r7, #24]
 8003c6e:	6a38      	ldr	r0, [r7, #32]
 8003c70:	f7fd fa1a 	bl	80010a8 <__aeabi_fcmpge>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d003      	beq.n	8003c82 <qFIS_SMF+0x4c>
        y = 1.0f;
 8003c7a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003c7e:	627b      	str	r3, [r7, #36]	; 0x24
 8003c80:	e076      	b.n	8003d70 <qFIS_SMF+0x13a>
    }
    else if ( ( x >= a ) && ( x <= ( ( a + b )*0.5f ) ) ) {
 8003c82:	69f9      	ldr	r1, [r7, #28]
 8003c84:	6a38      	ldr	r0, [r7, #32]
 8003c86:	f7fd fa0f 	bl	80010a8 <__aeabi_fcmpge>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d02f      	beq.n	8003cf0 <qFIS_SMF+0xba>
 8003c90:	69b9      	ldr	r1, [r7, #24]
 8003c92:	69f8      	ldr	r0, [r7, #28]
 8003c94:	f7fc ff4e 	bl	8000b34 <__addsf3>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f7fd f850 	bl	8000d44 <__aeabi_fmul>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	6a38      	ldr	r0, [r7, #32]
 8003caa:	f7fd f9f3 	bl	8001094 <__aeabi_fcmple>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d01d      	beq.n	8003cf0 <qFIS_SMF+0xba>
        tmp = ( x - a )/( b - a );
 8003cb4:	69f9      	ldr	r1, [r7, #28]
 8003cb6:	6a38      	ldr	r0, [r7, #32]
 8003cb8:	f7fc ff3a 	bl	8000b30 <__aeabi_fsub>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	461c      	mov	r4, r3
 8003cc0:	69f9      	ldr	r1, [r7, #28]
 8003cc2:	69b8      	ldr	r0, [r7, #24]
 8003cc4:	f7fc ff34 	bl	8000b30 <__aeabi_fsub>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	4619      	mov	r1, r3
 8003ccc:	4620      	mov	r0, r4
 8003cce:	f7fd f8ed 	bl	8000eac <__aeabi_fdiv>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	617b      	str	r3, [r7, #20]
        y = 2.0f*tmp*tmp;
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	4619      	mov	r1, r3
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7fc ff2a 	bl	8000b34 <__addsf3>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	6978      	ldr	r0, [r7, #20]
 8003ce6:	f7fd f82d 	bl	8000d44 <__aeabi_fmul>
 8003cea:	4603      	mov	r3, r0
 8003cec:	627b      	str	r3, [r7, #36]	; 0x24
 8003cee:	e03f      	b.n	8003d70 <qFIS_SMF+0x13a>
    }
    else if ( ( x <= b ) && ( x >= ( ( a + b )*0.5f ) ) ) {
 8003cf0:	69b9      	ldr	r1, [r7, #24]
 8003cf2:	6a38      	ldr	r0, [r7, #32]
 8003cf4:	f7fd f9ce 	bl	8001094 <__aeabi_fcmple>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d035      	beq.n	8003d6a <qFIS_SMF+0x134>
 8003cfe:	69b9      	ldr	r1, [r7, #24]
 8003d00:	69f8      	ldr	r0, [r7, #28]
 8003d02:	f7fc ff17 	bl	8000b34 <__addsf3>
 8003d06:	4603      	mov	r3, r0
 8003d08:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f7fd f819 	bl	8000d44 <__aeabi_fmul>
 8003d12:	4603      	mov	r3, r0
 8003d14:	4619      	mov	r1, r3
 8003d16:	6a38      	ldr	r0, [r7, #32]
 8003d18:	f7fd f9c6 	bl	80010a8 <__aeabi_fcmpge>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d023      	beq.n	8003d6a <qFIS_SMF+0x134>
        tmp = ( x - b )/( b - a );
 8003d22:	69b9      	ldr	r1, [r7, #24]
 8003d24:	6a38      	ldr	r0, [r7, #32]
 8003d26:	f7fc ff03 	bl	8000b30 <__aeabi_fsub>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	461c      	mov	r4, r3
 8003d2e:	69f9      	ldr	r1, [r7, #28]
 8003d30:	69b8      	ldr	r0, [r7, #24]
 8003d32:	f7fc fefd 	bl	8000b30 <__aeabi_fsub>
 8003d36:	4603      	mov	r3, r0
 8003d38:	4619      	mov	r1, r3
 8003d3a:	4620      	mov	r0, r4
 8003d3c:	f7fd f8b6 	bl	8000eac <__aeabi_fdiv>
 8003d40:	4603      	mov	r3, r0
 8003d42:	617b      	str	r3, [r7, #20]
        y = ( 1.0f - ( 2.0f*tmp*tmp ) );
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	4619      	mov	r1, r3
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7fc fef3 	bl	8000b34 <__addsf3>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	6979      	ldr	r1, [r7, #20]
 8003d52:	4618      	mov	r0, r3
 8003d54:	f7fc fff6 	bl	8000d44 <__aeabi_fmul>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	4619      	mov	r1, r3
 8003d5c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003d60:	f7fc fee6 	bl	8000b30 <__aeabi_fsub>
 8003d64:	4603      	mov	r3, r0
 8003d66:	627b      	str	r3, [r7, #36]	; 0x24
 8003d68:	e002      	b.n	8003d70 <qFIS_SMF+0x13a>
    }
    else {
        y = 0.0f;
 8003d6a:	f04f 0300 	mov.w	r3, #0
 8003d6e:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return y;
 8003d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	372c      	adds	r7, #44	; 0x2c
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd90      	pop	{r4, r7, pc}

08003d7a <qFIS_TSMF>:
/*============================================================================*/
static float qFIS_TSMF( const qFIS_IO_Base_t * const in,
                        const float *p,
                        const size_t n )
{
 8003d7a:	b590      	push	{r4, r7, lr}
 8003d7c:	b091      	sub	sp, #68	; 0x44
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	60f8      	str	r0, [r7, #12]
 8003d82:	60b9      	str	r1, [r7, #8]
 8003d84:	607a      	str	r2, [r7, #4]
    float diff, a, b, ta, tb, ma, mb;
    float x = in[ 0 ].value;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
    (void)n;
    qFIS_IO_Base_t tmp;

    a = p[ 0 ]; /*start*/
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	63bb      	str	r3, [r7, #56]	; 0x38
    b = p[ 1 ]; /*end*/
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	3304      	adds	r3, #4
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	637b      	str	r3, [r7, #52]	; 0x34
    diff = b - a;
 8003d9a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d9c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003d9e:	f7fc fec7 	bl	8000b30 <__aeabi_fsub>
 8003da2:	4603      	mov	r3, r0
 8003da4:	633b      	str	r3, [r7, #48]	; 0x30
    diff = 0.5f*diff*diff;
 8003da6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003daa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003dac:	f7fc ffca 	bl	8000d44 <__aeabi_fmul>
 8003db0:	4603      	mov	r3, r0
 8003db2:	4619      	mov	r1, r3
 8003db4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003db6:	f7fc ffc5 	bl	8000d44 <__aeabi_fmul>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	633b      	str	r3, [r7, #48]	; 0x30
    /*cstat -MISRAC2012-Dir-4.11_a -MISRAC2012-Dir-4.11_b*/
    ta = a + QLIB_SQRT( x*diff );
 8003dbe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003dc0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003dc2:	f7fc ffbf 	bl	8000d44 <__aeabi_fmul>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f7fe fbcc 	bl	8002566 <qFFMath_Sqrt>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003dd4:	f7fc feae 	bl	8000b34 <__addsf3>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	62fb      	str	r3, [r7, #44]	; 0x2c
    tmp.value = ta;
 8003ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dde:	61fb      	str	r3, [r7, #28]
    ma = qFIS_SMF( &tmp, p, n );
 8003de0:	f107 0314 	add.w	r3, r7, #20
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	68b9      	ldr	r1, [r7, #8]
 8003de8:	4618      	mov	r0, r3
 8003dea:	f7ff ff24 	bl	8003c36 <qFIS_SMF>
 8003dee:	62b8      	str	r0, [r7, #40]	; 0x28
    tb = b + QLIB_SQRT( -( x - 1.0f )*diff );
 8003df0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003df4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003df6:	f7fc fe9b 	bl	8000b30 <__aeabi_fsub>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003e00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e02:	4618      	mov	r0, r3
 8003e04:	f7fc ff9e 	bl	8000d44 <__aeabi_fmul>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f7fe fbab 	bl	8002566 <qFFMath_Sqrt>
 8003e10:	4603      	mov	r3, r0
 8003e12:	4619      	mov	r1, r3
 8003e14:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003e16:	f7fc fe8d 	bl	8000b34 <__addsf3>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	627b      	str	r3, [r7, #36]	; 0x24
    tmp.value = tb;
 8003e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e20:	61fb      	str	r3, [r7, #28]
    mb = qFIS_SMF( &tmp, p, n );
 8003e22:	f107 0314 	add.w	r3, r7, #20
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	68b9      	ldr	r1, [r7, #8]
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7ff ff03 	bl	8003c36 <qFIS_SMF>
 8003e30:	6238      	str	r0, [r7, #32]
    /*cstat +MISRAC2012-Dir-4.11_a +MISRAC2012-Dir-4.11_b*/
    return  ( QLIB_ABS( x - ma ) < QLIB_ABS( x - mb ) ) ? ta : tb;
 8003e32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e34:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003e36:	f7fc fe7b 	bl	8000b30 <__aeabi_fsub>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f7fe fb7d 	bl	800253c <qFFMath_Abs>
 8003e42:	4604      	mov	r4, r0
 8003e44:	6a39      	ldr	r1, [r7, #32]
 8003e46:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003e48:	f7fc fe72 	bl	8000b30 <__aeabi_fsub>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f7fe fb74 	bl	800253c <qFFMath_Abs>
 8003e54:	4603      	mov	r3, r0
 8003e56:	4619      	mov	r1, r3
 8003e58:	4620      	mov	r0, r4
 8003e5a:	f7fd f911 	bl	8001080 <__aeabi_fcmplt>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d001      	beq.n	8003e68 <qFIS_TSMF+0xee>
 8003e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e66:	e000      	b.n	8003e6a <qFIS_TSMF+0xf0>
 8003e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3744      	adds	r7, #68	; 0x44
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd90      	pop	{r4, r7, pc}

08003e72 <qFIS_ZMF>:
/*============================================================================*/
static float qFIS_ZMF( const qFIS_IO_Base_t * const in,
                       const float *p,
                       const size_t n )
{
 8003e72:	b590      	push	{r4, r7, lr}
 8003e74:	b08b      	sub	sp, #44	; 0x2c
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	60f8      	str	r0, [r7, #12]
 8003e7a:	60b9      	str	r1, [r7, #8]
 8003e7c:	607a      	str	r2, [r7, #4]
    float a, b, tmp, y;
    float x = in[ 0 ].value;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	623b      	str	r3, [r7, #32]
    (void)n;

    a = p[ 0 ];
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	61fb      	str	r3, [r7, #28]
    b = p[ 1 ];
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	3304      	adds	r3, #4
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	61bb      	str	r3, [r7, #24]
    if ( x <= a ) {
 8003e92:	69f9      	ldr	r1, [r7, #28]
 8003e94:	6a38      	ldr	r0, [r7, #32]
 8003e96:	f7fd f8fd 	bl	8001094 <__aeabi_fcmple>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d003      	beq.n	8003ea8 <qFIS_ZMF+0x36>
        y = 1.0f;
 8003ea0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003ea4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ea6:	e081      	b.n	8003fac <qFIS_ZMF+0x13a>
    }
    else if ( x >= b ) {
 8003ea8:	69b9      	ldr	r1, [r7, #24]
 8003eaa:	6a38      	ldr	r0, [r7, #32]
 8003eac:	f7fd f8fc 	bl	80010a8 <__aeabi_fcmpge>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d003      	beq.n	8003ebe <qFIS_ZMF+0x4c>
        y = 0.0f;
 8003eb6:	f04f 0300 	mov.w	r3, #0
 8003eba:	627b      	str	r3, [r7, #36]	; 0x24
 8003ebc:	e076      	b.n	8003fac <qFIS_ZMF+0x13a>
    }
    else if ( ( x >= a ) && ( x <= ( ( a + b )*0.5f ) ) ) {
 8003ebe:	69f9      	ldr	r1, [r7, #28]
 8003ec0:	6a38      	ldr	r0, [r7, #32]
 8003ec2:	f7fd f8f1 	bl	80010a8 <__aeabi_fcmpge>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d035      	beq.n	8003f38 <qFIS_ZMF+0xc6>
 8003ecc:	69b9      	ldr	r1, [r7, #24]
 8003ece:	69f8      	ldr	r0, [r7, #28]
 8003ed0:	f7fc fe30 	bl	8000b34 <__addsf3>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7fc ff32 	bl	8000d44 <__aeabi_fmul>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	6a38      	ldr	r0, [r7, #32]
 8003ee6:	f7fd f8d5 	bl	8001094 <__aeabi_fcmple>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d023      	beq.n	8003f38 <qFIS_ZMF+0xc6>
        tmp = ( x - a )/( b - a );
 8003ef0:	69f9      	ldr	r1, [r7, #28]
 8003ef2:	6a38      	ldr	r0, [r7, #32]
 8003ef4:	f7fc fe1c 	bl	8000b30 <__aeabi_fsub>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	461c      	mov	r4, r3
 8003efc:	69f9      	ldr	r1, [r7, #28]
 8003efe:	69b8      	ldr	r0, [r7, #24]
 8003f00:	f7fc fe16 	bl	8000b30 <__aeabi_fsub>
 8003f04:	4603      	mov	r3, r0
 8003f06:	4619      	mov	r1, r3
 8003f08:	4620      	mov	r0, r4
 8003f0a:	f7fc ffcf 	bl	8000eac <__aeabi_fdiv>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	617b      	str	r3, [r7, #20]
        y = 1.0f - ( 2.0f*tmp*tmp );
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	4619      	mov	r1, r3
 8003f16:	4618      	mov	r0, r3
 8003f18:	f7fc fe0c 	bl	8000b34 <__addsf3>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	6979      	ldr	r1, [r7, #20]
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7fc ff0f 	bl	8000d44 <__aeabi_fmul>
 8003f26:	4603      	mov	r3, r0
 8003f28:	4619      	mov	r1, r3
 8003f2a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003f2e:	f7fc fdff 	bl	8000b30 <__aeabi_fsub>
 8003f32:	4603      	mov	r3, r0
 8003f34:	627b      	str	r3, [r7, #36]	; 0x24
 8003f36:	e039      	b.n	8003fac <qFIS_ZMF+0x13a>
    }
    else if ( ( x <= b ) && ( x >= ( ( a + b )*0.5f ) ) ) {
 8003f38:	69b9      	ldr	r1, [r7, #24]
 8003f3a:	6a38      	ldr	r0, [r7, #32]
 8003f3c:	f7fd f8aa 	bl	8001094 <__aeabi_fcmple>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d02f      	beq.n	8003fa6 <qFIS_ZMF+0x134>
 8003f46:	69b9      	ldr	r1, [r7, #24]
 8003f48:	69f8      	ldr	r0, [r7, #28]
 8003f4a:	f7fc fdf3 	bl	8000b34 <__addsf3>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003f54:	4618      	mov	r0, r3
 8003f56:	f7fc fef5 	bl	8000d44 <__aeabi_fmul>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	6a38      	ldr	r0, [r7, #32]
 8003f60:	f7fd f8a2 	bl	80010a8 <__aeabi_fcmpge>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d01d      	beq.n	8003fa6 <qFIS_ZMF+0x134>
        tmp = ( x - b )/( b - a );
 8003f6a:	69b9      	ldr	r1, [r7, #24]
 8003f6c:	6a38      	ldr	r0, [r7, #32]
 8003f6e:	f7fc fddf 	bl	8000b30 <__aeabi_fsub>
 8003f72:	4603      	mov	r3, r0
 8003f74:	461c      	mov	r4, r3
 8003f76:	69f9      	ldr	r1, [r7, #28]
 8003f78:	69b8      	ldr	r0, [r7, #24]
 8003f7a:	f7fc fdd9 	bl	8000b30 <__aeabi_fsub>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	4619      	mov	r1, r3
 8003f82:	4620      	mov	r0, r4
 8003f84:	f7fc ff92 	bl	8000eac <__aeabi_fdiv>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	617b      	str	r3, [r7, #20]
        y = 2.0f*tmp*tmp;
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	4619      	mov	r1, r3
 8003f90:	4618      	mov	r0, r3
 8003f92:	f7fc fdcf 	bl	8000b34 <__addsf3>
 8003f96:	4603      	mov	r3, r0
 8003f98:	4619      	mov	r1, r3
 8003f9a:	6978      	ldr	r0, [r7, #20]
 8003f9c:	f7fc fed2 	bl	8000d44 <__aeabi_fmul>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	627b      	str	r3, [r7, #36]	; 0x24
 8003fa4:	e002      	b.n	8003fac <qFIS_ZMF+0x13a>
    }
    else {
        y = 0.0f;
 8003fa6:	f04f 0300 	mov.w	r3, #0
 8003faa:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return y;
 8003fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	372c      	adds	r7, #44	; 0x2c
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd90      	pop	{r4, r7, pc}

08003fb6 <qFIS_LinSMF>:
/*============================================================================*/
static float qFIS_LinSMF( const qFIS_IO_Base_t * const in,
                          const float *p,
                          const size_t n )
{
 8003fb6:	b590      	push	{r4, r7, lr}
 8003fb8:	b089      	sub	sp, #36	; 0x24
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	60f8      	str	r0, [r7, #12]
 8003fbe:	60b9      	str	r1, [r7, #8]
 8003fc0:	607a      	str	r2, [r7, #4]
    float a, b, y;
    float x = in[ 0 ].value;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	61bb      	str	r3, [r7, #24]
    (void)n;

    a = p[ 0 ];
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	617b      	str	r3, [r7, #20]
    b = p[ 1 ];
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	3304      	adds	r3, #4
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	613b      	str	r3, [r7, #16]
    if ( a < b ) {
 8003fd6:	6939      	ldr	r1, [r7, #16]
 8003fd8:	6978      	ldr	r0, [r7, #20]
 8003fda:	f7fd f851 	bl	8001080 <__aeabi_fcmplt>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d027      	beq.n	8004034 <qFIS_LinSMF+0x7e>
        if ( x < a ) {
 8003fe4:	6979      	ldr	r1, [r7, #20]
 8003fe6:	69b8      	ldr	r0, [r7, #24]
 8003fe8:	f7fd f84a 	bl	8001080 <__aeabi_fcmplt>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d003      	beq.n	8003ffa <qFIS_LinSMF+0x44>
            y = 0.0f;
 8003ff2:	f04f 0300 	mov.w	r3, #0
 8003ff6:	61fb      	str	r3, [r7, #28]
 8003ff8:	e034      	b.n	8004064 <qFIS_LinSMF+0xae>
        }
        else if ( x > b ) {
 8003ffa:	6939      	ldr	r1, [r7, #16]
 8003ffc:	69b8      	ldr	r0, [r7, #24]
 8003ffe:	f7fd f85d 	bl	80010bc <__aeabi_fcmpgt>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d003      	beq.n	8004010 <qFIS_LinSMF+0x5a>
            y = 1.0f;
 8004008:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800400c:	61fb      	str	r3, [r7, #28]
 800400e:	e029      	b.n	8004064 <qFIS_LinSMF+0xae>
        }
        else {
            y = ( x - a )/( b - a );
 8004010:	6979      	ldr	r1, [r7, #20]
 8004012:	69b8      	ldr	r0, [r7, #24]
 8004014:	f7fc fd8c 	bl	8000b30 <__aeabi_fsub>
 8004018:	4603      	mov	r3, r0
 800401a:	461c      	mov	r4, r3
 800401c:	6979      	ldr	r1, [r7, #20]
 800401e:	6938      	ldr	r0, [r7, #16]
 8004020:	f7fc fd86 	bl	8000b30 <__aeabi_fsub>
 8004024:	4603      	mov	r3, r0
 8004026:	4619      	mov	r1, r3
 8004028:	4620      	mov	r0, r4
 800402a:	f7fc ff3f 	bl	8000eac <__aeabi_fdiv>
 800402e:	4603      	mov	r3, r0
 8004030:	61fb      	str	r3, [r7, #28]
 8004032:	e017      	b.n	8004064 <qFIS_LinSMF+0xae>
        }
    }
    else if ( qFMathEx_Equal( a, b ) ) {
 8004034:	6939      	ldr	r1, [r7, #16]
 8004036:	6978      	ldr	r0, [r7, #20]
 8004038:	f000 fc1d 	bl	8004876 <qFMathEx_Equal>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d00d      	beq.n	800405e <qFIS_LinSMF+0xa8>
        y = ( x < a ) ? 0.0f : 1.0f;
 8004042:	6979      	ldr	r1, [r7, #20]
 8004044:	69b8      	ldr	r0, [r7, #24]
 8004046:	f7fd f81b 	bl	8001080 <__aeabi_fcmplt>
 800404a:	4603      	mov	r3, r0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d002      	beq.n	8004056 <qFIS_LinSMF+0xa0>
 8004050:	f04f 0300 	mov.w	r3, #0
 8004054:	e001      	b.n	800405a <qFIS_LinSMF+0xa4>
 8004056:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800405a:	61fb      	str	r3, [r7, #28]
 800405c:	e002      	b.n	8004064 <qFIS_LinSMF+0xae>
    }
    else {
        y = 0.0f;
 800405e:	f04f 0300 	mov.w	r3, #0
 8004062:	61fb      	str	r3, [r7, #28]
    }

    return y;
 8004064:	69fb      	ldr	r3, [r7, #28]
}
 8004066:	4618      	mov	r0, r3
 8004068:	3724      	adds	r7, #36	; 0x24
 800406a:	46bd      	mov	sp, r7
 800406c:	bd90      	pop	{r4, r7, pc}

0800406e <qFIS_LinZMF>:
/*============================================================================*/
static float qFIS_LinZMF( const qFIS_IO_Base_t * const in,
                          const float *p,
                          const size_t n )
{
 800406e:	b590      	push	{r4, r7, lr}
 8004070:	b089      	sub	sp, #36	; 0x24
 8004072:	af00      	add	r7, sp, #0
 8004074:	60f8      	str	r0, [r7, #12]
 8004076:	60b9      	str	r1, [r7, #8]
 8004078:	607a      	str	r2, [r7, #4]
    float a, b, y;
    float x = in[ 0 ].value;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	61bb      	str	r3, [r7, #24]
    (void)n;

    a = p[ 0 ];
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	617b      	str	r3, [r7, #20]
    b = p[ 1 ];
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	3304      	adds	r3, #4
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	613b      	str	r3, [r7, #16]
    if ( a < b ) {
 800408e:	6939      	ldr	r1, [r7, #16]
 8004090:	6978      	ldr	r0, [r7, #20]
 8004092:	f7fc fff5 	bl	8001080 <__aeabi_fcmplt>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d027      	beq.n	80040ec <qFIS_LinZMF+0x7e>
        if ( x < a ) {
 800409c:	6979      	ldr	r1, [r7, #20]
 800409e:	69b8      	ldr	r0, [r7, #24]
 80040a0:	f7fc ffee 	bl	8001080 <__aeabi_fcmplt>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d003      	beq.n	80040b2 <qFIS_LinZMF+0x44>
            y = 1.0f;
 80040aa:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80040ae:	61fb      	str	r3, [r7, #28]
 80040b0:	e034      	b.n	800411c <qFIS_LinZMF+0xae>
        }
        else if ( x > b ) {
 80040b2:	6939      	ldr	r1, [r7, #16]
 80040b4:	69b8      	ldr	r0, [r7, #24]
 80040b6:	f7fd f801 	bl	80010bc <__aeabi_fcmpgt>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d003      	beq.n	80040c8 <qFIS_LinZMF+0x5a>
            y = 0.0f;
 80040c0:	f04f 0300 	mov.w	r3, #0
 80040c4:	61fb      	str	r3, [r7, #28]
 80040c6:	e029      	b.n	800411c <qFIS_LinZMF+0xae>
        }
        else {
            y = ( a - x )/( a - b );
 80040c8:	69b9      	ldr	r1, [r7, #24]
 80040ca:	6978      	ldr	r0, [r7, #20]
 80040cc:	f7fc fd30 	bl	8000b30 <__aeabi_fsub>
 80040d0:	4603      	mov	r3, r0
 80040d2:	461c      	mov	r4, r3
 80040d4:	6939      	ldr	r1, [r7, #16]
 80040d6:	6978      	ldr	r0, [r7, #20]
 80040d8:	f7fc fd2a 	bl	8000b30 <__aeabi_fsub>
 80040dc:	4603      	mov	r3, r0
 80040de:	4619      	mov	r1, r3
 80040e0:	4620      	mov	r0, r4
 80040e2:	f7fc fee3 	bl	8000eac <__aeabi_fdiv>
 80040e6:	4603      	mov	r3, r0
 80040e8:	61fb      	str	r3, [r7, #28]
 80040ea:	e017      	b.n	800411c <qFIS_LinZMF+0xae>
        }
    }
    else if ( qFMathEx_Equal( a, b ) ) {
 80040ec:	6939      	ldr	r1, [r7, #16]
 80040ee:	6978      	ldr	r0, [r7, #20]
 80040f0:	f000 fbc1 	bl	8004876 <qFMathEx_Equal>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00d      	beq.n	8004116 <qFIS_LinZMF+0xa8>
        y = ( x < a ) ? 1.0f : 0.0f;
 80040fa:	6979      	ldr	r1, [r7, #20]
 80040fc:	69b8      	ldr	r0, [r7, #24]
 80040fe:	f7fc ffbf 	bl	8001080 <__aeabi_fcmplt>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d002      	beq.n	800410e <qFIS_LinZMF+0xa0>
 8004108:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800410c:	e001      	b.n	8004112 <qFIS_LinZMF+0xa4>
 800410e:	f04f 0300 	mov.w	r3, #0
 8004112:	61fb      	str	r3, [r7, #28]
 8004114:	e002      	b.n	800411c <qFIS_LinZMF+0xae>
    }
    else {
        y = 0.0f;
 8004116:	f04f 0300 	mov.w	r3, #0
 800411a:	61fb      	str	r3, [r7, #28]
    }

    return y;
 800411c:	69fb      	ldr	r3, [r7, #28]
}
 800411e:	4618      	mov	r0, r3
 8004120:	3724      	adds	r7, #36	; 0x24
 8004122:	46bd      	mov	sp, r7
 8004124:	bd90      	pop	{r4, r7, pc}

08004126 <qFIS_TZMF>:
/*============================================================================*/
static float qFIS_TZMF( const qFIS_IO_Base_t * const in,
                        const float *p,
                        const size_t n )
{
 8004126:	b590      	push	{r4, r7, lr}
 8004128:	b091      	sub	sp, #68	; 0x44
 800412a:	af00      	add	r7, sp, #0
 800412c:	60f8      	str	r0, [r7, #12]
 800412e:	60b9      	str	r1, [r7, #8]
 8004130:	607a      	str	r2, [r7, #4]
    float diff, a, b, ta, tb, ma, mb;
    float x = in[ 0 ].value;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	63fb      	str	r3, [r7, #60]	; 0x3c
    (void)n;
    qFIS_IO_Base_t tmp;

    a = p[ 0 ]; /*start*/
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	63bb      	str	r3, [r7, #56]	; 0x38
    b = p[ 1 ]; /*end*/
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	3304      	adds	r3, #4
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	637b      	str	r3, [r7, #52]	; 0x34
    diff = b - a;
 8004146:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004148:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800414a:	f7fc fcf1 	bl	8000b30 <__aeabi_fsub>
 800414e:	4603      	mov	r3, r0
 8004150:	633b      	str	r3, [r7, #48]	; 0x30
    diff = 0.5f*diff*diff;
 8004152:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004156:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004158:	f7fc fdf4 	bl	8000d44 <__aeabi_fmul>
 800415c:	4603      	mov	r3, r0
 800415e:	4619      	mov	r1, r3
 8004160:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004162:	f7fc fdef 	bl	8000d44 <__aeabi_fmul>
 8004166:	4603      	mov	r3, r0
 8004168:	633b      	str	r3, [r7, #48]	; 0x30
    /*cstat -MISRAC2012-Dir-4.11_a -MISRAC2012-Dir-4.11_b*/
    ta = a + QLIB_SQRT( -( x - 1.0f )*diff );
 800416a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800416e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004170:	f7fc fcde 	bl	8000b30 <__aeabi_fsub>
 8004174:	4603      	mov	r3, r0
 8004176:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800417a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800417c:	4618      	mov	r0, r3
 800417e:	f7fc fde1 	bl	8000d44 <__aeabi_fmul>
 8004182:	4603      	mov	r3, r0
 8004184:	4618      	mov	r0, r3
 8004186:	f7fe f9ee 	bl	8002566 <qFFMath_Sqrt>
 800418a:	4603      	mov	r3, r0
 800418c:	4619      	mov	r1, r3
 800418e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004190:	f7fc fcd0 	bl	8000b34 <__addsf3>
 8004194:	4603      	mov	r3, r0
 8004196:	62fb      	str	r3, [r7, #44]	; 0x2c
    tmp.value = ta;
 8004198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800419a:	61fb      	str	r3, [r7, #28]
    ma = qFIS_SMF( &tmp, p, n );
 800419c:	f107 0314 	add.w	r3, r7, #20
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	68b9      	ldr	r1, [r7, #8]
 80041a4:	4618      	mov	r0, r3
 80041a6:	f7ff fd46 	bl	8003c36 <qFIS_SMF>
 80041aa:	62b8      	str	r0, [r7, #40]	; 0x28
    tb = b + QLIB_SQRT( x*diff );
 80041ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80041ae:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80041b0:	f7fc fdc8 	bl	8000d44 <__aeabi_fmul>
 80041b4:	4603      	mov	r3, r0
 80041b6:	4618      	mov	r0, r3
 80041b8:	f7fe f9d5 	bl	8002566 <qFFMath_Sqrt>
 80041bc:	4603      	mov	r3, r0
 80041be:	4619      	mov	r1, r3
 80041c0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80041c2:	f7fc fcb7 	bl	8000b34 <__addsf3>
 80041c6:	4603      	mov	r3, r0
 80041c8:	627b      	str	r3, [r7, #36]	; 0x24
    tmp.value = tb;
 80041ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041cc:	61fb      	str	r3, [r7, #28]
    mb = qFIS_SMF( &tmp, p, n );
 80041ce:	f107 0314 	add.w	r3, r7, #20
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	68b9      	ldr	r1, [r7, #8]
 80041d6:	4618      	mov	r0, r3
 80041d8:	f7ff fd2d 	bl	8003c36 <qFIS_SMF>
 80041dc:	6238      	str	r0, [r7, #32]
    /*cstat +MISRAC2012-Dir-4.11_a +MISRAC2012-Dir-4.11_b*/
    return  ( QLIB_ABS( x - ma ) < QLIB_ABS( x - mb ) ) ? ta : tb;
 80041de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041e0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80041e2:	f7fc fca5 	bl	8000b30 <__aeabi_fsub>
 80041e6:	4603      	mov	r3, r0
 80041e8:	4618      	mov	r0, r3
 80041ea:	f7fe f9a7 	bl	800253c <qFFMath_Abs>
 80041ee:	4604      	mov	r4, r0
 80041f0:	6a39      	ldr	r1, [r7, #32]
 80041f2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80041f4:	f7fc fc9c 	bl	8000b30 <__aeabi_fsub>
 80041f8:	4603      	mov	r3, r0
 80041fa:	4618      	mov	r0, r3
 80041fc:	f7fe f99e 	bl	800253c <qFFMath_Abs>
 8004200:	4603      	mov	r3, r0
 8004202:	4619      	mov	r1, r3
 8004204:	4620      	mov	r0, r4
 8004206:	f7fc ff3b 	bl	8001080 <__aeabi_fcmplt>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d001      	beq.n	8004214 <qFIS_TZMF+0xee>
 8004210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004212:	e000      	b.n	8004216 <qFIS_TZMF+0xf0>
 8004214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004216:	4618      	mov	r0, r3
 8004218:	3744      	adds	r7, #68	; 0x44
 800421a:	46bd      	mov	sp, r7
 800421c:	bd90      	pop	{r4, r7, pc}

0800421e <qFIS_PiMF>:
/*============================================================================*/
static float qFIS_PiMF( const qFIS_IO_Base_t * const in,
                        const float *p,
                        const size_t n )
{
 800421e:	b590      	push	{r4, r7, lr}
 8004220:	b085      	sub	sp, #20
 8004222:	af00      	add	r7, sp, #0
 8004224:	60f8      	str	r0, [r7, #12]
 8004226:	60b9      	str	r1, [r7, #8]
 8004228:	607a      	str	r2, [r7, #4]
    return QLIB_ABS( qFIS_SMF( in , p, n )*qFIS_ZMF( in , &p[ 2 ], n ) );
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	68b9      	ldr	r1, [r7, #8]
 800422e:	68f8      	ldr	r0, [r7, #12]
 8004230:	f7ff fd01 	bl	8003c36 <qFIS_SMF>
 8004234:	4604      	mov	r4, r0
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	3308      	adds	r3, #8
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	4619      	mov	r1, r3
 800423e:	68f8      	ldr	r0, [r7, #12]
 8004240:	f7ff fe17 	bl	8003e72 <qFIS_ZMF>
 8004244:	4603      	mov	r3, r0
 8004246:	4619      	mov	r1, r3
 8004248:	4620      	mov	r0, r4
 800424a:	f7fc fd7b 	bl	8000d44 <__aeabi_fmul>
 800424e:	4603      	mov	r3, r0
 8004250:	4618      	mov	r0, r3
 8004252:	f7fe f973 	bl	800253c <qFFMath_Abs>
 8004256:	4603      	mov	r3, r0
}
 8004258:	4618      	mov	r0, r3
 800425a:	3714      	adds	r7, #20
 800425c:	46bd      	mov	sp, r7
 800425e:	bd90      	pop	{r4, r7, pc}

08004260 <qFIS_SingletonMF>:
/*============================================================================*/
static float qFIS_SingletonMF( const qFIS_IO_Base_t * const in,
                               const float *p,
                               const size_t n )
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b086      	sub	sp, #24
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]
    float x = in[ 0 ].value;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	617b      	str	r3, [r7, #20]
    (void)n;

    return ( qFMathEx_Equal( x, p[ 0 ] ) ) ? 1.0f : 0.0f;
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4619      	mov	r1, r3
 8004278:	6978      	ldr	r0, [r7, #20]
 800427a:	f000 fafc 	bl	8004876 <qFMathEx_Equal>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d002      	beq.n	800428a <qFIS_SingletonMF+0x2a>
 8004284:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004288:	e001      	b.n	800428e <qFIS_SingletonMF+0x2e>
 800428a:	f04f 0300 	mov.w	r3, #0
}
 800428e:	4618      	mov	r0, r3
 8004290:	3718      	adds	r7, #24
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}

08004296 <qFIS_ConcaveMF>:
/*============================================================================*/
static float qFIS_ConcaveMF( const qFIS_IO_Base_t * const in,
                             const float *p,
                             const size_t n )
{
 8004296:	b590      	push	{r4, r7, lr}
 8004298:	b089      	sub	sp, #36	; 0x24
 800429a:	af00      	add	r7, sp, #0
 800429c:	60f8      	str	r0, [r7, #12]
 800429e:	60b9      	str	r1, [r7, #8]
 80042a0:	607a      	str	r2, [r7, #4]
    float x = in[ 0 ].value;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	61bb      	str	r3, [r7, #24]
    float i, e, y;
    (void)n;

    i = p[ 0 ];
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	617b      	str	r3, [r7, #20]
    e = p[ 1 ];
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	3304      	adds	r3, #4
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	613b      	str	r3, [r7, #16]
    if ( ( i <= e ) && ( x < e ) ) {
 80042b6:	6939      	ldr	r1, [r7, #16]
 80042b8:	6978      	ldr	r0, [r7, #20]
 80042ba:	f7fc feeb 	bl	8001094 <__aeabi_fcmple>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d023      	beq.n	800430c <qFIS_ConcaveMF+0x76>
 80042c4:	6939      	ldr	r1, [r7, #16]
 80042c6:	69b8      	ldr	r0, [r7, #24]
 80042c8:	f7fc feda 	bl	8001080 <__aeabi_fcmplt>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d01c      	beq.n	800430c <qFIS_ConcaveMF+0x76>
        y = ( e - i )/( ( 2.0f*e ) - i -x );
 80042d2:	6979      	ldr	r1, [r7, #20]
 80042d4:	6938      	ldr	r0, [r7, #16]
 80042d6:	f7fc fc2b 	bl	8000b30 <__aeabi_fsub>
 80042da:	4603      	mov	r3, r0
 80042dc:	461c      	mov	r4, r3
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	4619      	mov	r1, r3
 80042e2:	4618      	mov	r0, r3
 80042e4:	f7fc fc26 	bl	8000b34 <__addsf3>
 80042e8:	4603      	mov	r3, r0
 80042ea:	6979      	ldr	r1, [r7, #20]
 80042ec:	4618      	mov	r0, r3
 80042ee:	f7fc fc1f 	bl	8000b30 <__aeabi_fsub>
 80042f2:	4603      	mov	r3, r0
 80042f4:	69b9      	ldr	r1, [r7, #24]
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7fc fc1a 	bl	8000b30 <__aeabi_fsub>
 80042fc:	4603      	mov	r3, r0
 80042fe:	4619      	mov	r1, r3
 8004300:	4620      	mov	r0, r4
 8004302:	f7fc fdd3 	bl	8000eac <__aeabi_fdiv>
 8004306:	4603      	mov	r3, r0
 8004308:	61fb      	str	r3, [r7, #28]
 800430a:	e02d      	b.n	8004368 <qFIS_ConcaveMF+0xd2>
    }
    else if ( ( i > e ) && ( x > e ) ) {
 800430c:	6939      	ldr	r1, [r7, #16]
 800430e:	6978      	ldr	r0, [r7, #20]
 8004310:	f7fc fed4 	bl	80010bc <__aeabi_fcmpgt>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d023      	beq.n	8004362 <qFIS_ConcaveMF+0xcc>
 800431a:	6939      	ldr	r1, [r7, #16]
 800431c:	69b8      	ldr	r0, [r7, #24]
 800431e:	f7fc fecd 	bl	80010bc <__aeabi_fcmpgt>
 8004322:	4603      	mov	r3, r0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d01c      	beq.n	8004362 <qFIS_ConcaveMF+0xcc>
        y = ( i - e )/( -( 2.0f*e ) + i +x );
 8004328:	6939      	ldr	r1, [r7, #16]
 800432a:	6978      	ldr	r0, [r7, #20]
 800432c:	f7fc fc00 	bl	8000b30 <__aeabi_fsub>
 8004330:	4603      	mov	r3, r0
 8004332:	461c      	mov	r4, r3
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	4619      	mov	r1, r3
 8004338:	4618      	mov	r0, r3
 800433a:	f7fc fbfb 	bl	8000b34 <__addsf3>
 800433e:	4603      	mov	r3, r0
 8004340:	4619      	mov	r1, r3
 8004342:	6978      	ldr	r0, [r7, #20]
 8004344:	f7fc fbf4 	bl	8000b30 <__aeabi_fsub>
 8004348:	4603      	mov	r3, r0
 800434a:	69b9      	ldr	r1, [r7, #24]
 800434c:	4618      	mov	r0, r3
 800434e:	f7fc fbf1 	bl	8000b34 <__addsf3>
 8004352:	4603      	mov	r3, r0
 8004354:	4619      	mov	r1, r3
 8004356:	4620      	mov	r0, r4
 8004358:	f7fc fda8 	bl	8000eac <__aeabi_fdiv>
 800435c:	4603      	mov	r3, r0
 800435e:	61fb      	str	r3, [r7, #28]
 8004360:	e002      	b.n	8004368 <qFIS_ConcaveMF+0xd2>
    }
    else {
        y = 1.0f;
 8004362:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004366:	61fb      	str	r3, [r7, #28]
    }

    return y;
 8004368:	69fb      	ldr	r3, [r7, #28]
}
 800436a:	4618      	mov	r0, r3
 800436c:	3724      	adds	r7, #36	; 0x24
 800436e:	46bd      	mov	sp, r7
 8004370:	bd90      	pop	{r4, r7, pc}

08004372 <qFIS_TConcaveMF>:
/*============================================================================*/
static float qFIS_TConcaveMF( const qFIS_IO_Base_t * const in,
                              const float *p,
                              const size_t n )
{
 8004372:	b590      	push	{r4, r7, lr}
 8004374:	b087      	sub	sp, #28
 8004376:	af00      	add	r7, sp, #0
 8004378:	60f8      	str	r0, [r7, #12]
 800437a:	60b9      	str	r1, [r7, #8]
 800437c:	607a      	str	r2, [r7, #4]
    float i, e;

    i = p[ 0 ];
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	617b      	str	r3, [r7, #20]
    e = p[ 1 ];
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	3304      	adds	r3, #4
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	613b      	str	r3, [r7, #16]

    return ( ( i - e )/qFIS_ConcaveMF( in, p, n ) ) + ( 2.0f*e ) - i;
 800438c:	6939      	ldr	r1, [r7, #16]
 800438e:	6978      	ldr	r0, [r7, #20]
 8004390:	f7fc fbce 	bl	8000b30 <__aeabi_fsub>
 8004394:	4603      	mov	r3, r0
 8004396:	461c      	mov	r4, r3
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	68b9      	ldr	r1, [r7, #8]
 800439c:	68f8      	ldr	r0, [r7, #12]
 800439e:	f7ff ff7a 	bl	8004296 <qFIS_ConcaveMF>
 80043a2:	4603      	mov	r3, r0
 80043a4:	4619      	mov	r1, r3
 80043a6:	4620      	mov	r0, r4
 80043a8:	f7fc fd80 	bl	8000eac <__aeabi_fdiv>
 80043ac:	4603      	mov	r3, r0
 80043ae:	461c      	mov	r4, r3
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	4619      	mov	r1, r3
 80043b4:	4618      	mov	r0, r3
 80043b6:	f7fc fbbd 	bl	8000b34 <__addsf3>
 80043ba:	4603      	mov	r3, r0
 80043bc:	4619      	mov	r1, r3
 80043be:	4620      	mov	r0, r4
 80043c0:	f7fc fbb8 	bl	8000b34 <__addsf3>
 80043c4:	4603      	mov	r3, r0
 80043c6:	6979      	ldr	r1, [r7, #20]
 80043c8:	4618      	mov	r0, r3
 80043ca:	f7fc fbb1 	bl	8000b30 <__aeabi_fsub>
 80043ce:	4603      	mov	r3, r0
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	371c      	adds	r7, #28
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd90      	pop	{r4, r7, pc}

080043d8 <qFIS_SpikeMF>:
/*============================================================================*/
static float qFIS_SpikeMF( const qFIS_IO_Base_t * const in,
                           const float *p,
                           const size_t n )
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b088      	sub	sp, #32
 80043dc:	af00      	add	r7, sp, #0
 80043de:	60f8      	str	r0, [r7, #12]
 80043e0:	60b9      	str	r1, [r7, #8]
 80043e2:	607a      	str	r2, [r7, #4]
    float x = in[ 0 ].value;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	61fb      	str	r3, [r7, #28]
    float w, c;
    (void)n;

    w = p[ 0 ];
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	61bb      	str	r3, [r7, #24]
    c = p[ 1 ];
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	3304      	adds	r3, #4
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	617b      	str	r3, [r7, #20]

    return QLIB_EXP( -QLIB_ABS( 10.0f*( x - c )/w ) );
 80043f8:	6979      	ldr	r1, [r7, #20]
 80043fa:	69f8      	ldr	r0, [r7, #28]
 80043fc:	f7fc fb98 	bl	8000b30 <__aeabi_fsub>
 8004400:	4603      	mov	r3, r0
 8004402:	490c      	ldr	r1, [pc, #48]	; (8004434 <qFIS_SpikeMF+0x5c>)
 8004404:	4618      	mov	r0, r3
 8004406:	f7fc fc9d 	bl	8000d44 <__aeabi_fmul>
 800440a:	4603      	mov	r3, r0
 800440c:	69b9      	ldr	r1, [r7, #24]
 800440e:	4618      	mov	r0, r3
 8004410:	f7fc fd4c 	bl	8000eac <__aeabi_fdiv>
 8004414:	4603      	mov	r3, r0
 8004416:	4618      	mov	r0, r3
 8004418:	f7fe f890 	bl	800253c <qFFMath_Abs>
 800441c:	4603      	mov	r3, r0
 800441e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004422:	4618      	mov	r0, r3
 8004424:	f7fe fa14 	bl	8002850 <qFFMath_Exp>
 8004428:	4603      	mov	r3, r0
}
 800442a:	4618      	mov	r0, r3
 800442c:	3720      	adds	r7, #32
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	41200000 	.word	0x41200000

08004438 <qFIS_TLinSMF>:
/*============================================================================*/
static float qFIS_TLinSMF( const qFIS_IO_Base_t * const in,
                           const float *p,
                           const size_t n )
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b088      	sub	sp, #32
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	60b9      	str	r1, [r7, #8]
 8004442:	607a      	str	r2, [r7, #4]
    float x = in[ 0 ].value;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	61fb      	str	r3, [r7, #28]
    float a, b;
    (void)n;

    a = p[ 0 ];
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	61bb      	str	r3, [r7, #24]
    b = p[ 1 ];
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	3304      	adds	r3, #4
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	617b      	str	r3, [r7, #20]

    return ( ( b - a )*x ) + a;
 8004458:	69b9      	ldr	r1, [r7, #24]
 800445a:	6978      	ldr	r0, [r7, #20]
 800445c:	f7fc fb68 	bl	8000b30 <__aeabi_fsub>
 8004460:	4603      	mov	r3, r0
 8004462:	69f9      	ldr	r1, [r7, #28]
 8004464:	4618      	mov	r0, r3
 8004466:	f7fc fc6d 	bl	8000d44 <__aeabi_fmul>
 800446a:	4603      	mov	r3, r0
 800446c:	69b9      	ldr	r1, [r7, #24]
 800446e:	4618      	mov	r0, r3
 8004470:	f7fc fb60 	bl	8000b34 <__addsf3>
 8004474:	4603      	mov	r3, r0
}
 8004476:	4618      	mov	r0, r3
 8004478:	3720      	adds	r7, #32
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}

0800447e <qFIS_TLinZMF>:
/*============================================================================*/
static float qFIS_TLinZMF( const qFIS_IO_Base_t * const in,
                           const float *p,
                           const size_t n )
{
 800447e:	b580      	push	{r7, lr}
 8004480:	b088      	sub	sp, #32
 8004482:	af00      	add	r7, sp, #0
 8004484:	60f8      	str	r0, [r7, #12]
 8004486:	60b9      	str	r1, [r7, #8]
 8004488:	607a      	str	r2, [r7, #4]
    float x = in[ 0 ].value;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	61fb      	str	r3, [r7, #28]
    float a, b;
    (void)n;

    a = p[ 0 ];
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	61bb      	str	r3, [r7, #24]
    b = p[ 1 ];
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	3304      	adds	r3, #4
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	617b      	str	r3, [r7, #20]

    return + a - ( ( a - b )*x );
 800449e:	6979      	ldr	r1, [r7, #20]
 80044a0:	69b8      	ldr	r0, [r7, #24]
 80044a2:	f7fc fb45 	bl	8000b30 <__aeabi_fsub>
 80044a6:	4603      	mov	r3, r0
 80044a8:	69f9      	ldr	r1, [r7, #28]
 80044aa:	4618      	mov	r0, r3
 80044ac:	f7fc fc4a 	bl	8000d44 <__aeabi_fmul>
 80044b0:	4603      	mov	r3, r0
 80044b2:	4619      	mov	r1, r3
 80044b4:	69b8      	ldr	r0, [r7, #24]
 80044b6:	f7fc fb3b 	bl	8000b30 <__aeabi_fsub>
 80044ba:	4603      	mov	r3, r0
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3720      	adds	r7, #32
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <qFIS_RectangleMF>:
/*============================================================================*/
static float qFIS_RectangleMF( const qFIS_IO_Base_t * const in,
                               const float *p,
                               const size_t n )
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b088      	sub	sp, #32
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	607a      	str	r2, [r7, #4]
    float x = in[ 0 ].value;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	61fb      	str	r3, [r7, #28]
    float s, e;
    (void)n;

    s = p[ 0 ];
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	61bb      	str	r3, [r7, #24]
    e = p[ 1 ];
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	3304      	adds	r3, #4
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	617b      	str	r3, [r7, #20]

    return ( ( x >= s ) && ( x <= e ) ) ? 1.0f : 0.0f;
 80044e4:	69b9      	ldr	r1, [r7, #24]
 80044e6:	69f8      	ldr	r0, [r7, #28]
 80044e8:	f7fc fdde 	bl	80010a8 <__aeabi_fcmpge>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d009      	beq.n	8004506 <qFIS_RectangleMF+0x42>
 80044f2:	6979      	ldr	r1, [r7, #20]
 80044f4:	69f8      	ldr	r0, [r7, #28]
 80044f6:	f7fc fdcd 	bl	8001094 <__aeabi_fcmple>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d002      	beq.n	8004506 <qFIS_RectangleMF+0x42>
 8004500:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004504:	e001      	b.n	800450a <qFIS_RectangleMF+0x46>
 8004506:	f04f 0300 	mov.w	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	3720      	adds	r7, #32
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
	...

08004514 <qFIS_CosineMF>:
/*============================================================================*/
static float qFIS_CosineMF( const qFIS_IO_Base_t * const in,
                            const float *p,
                            const size_t n )
{
 8004514:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004518:	b08a      	sub	sp, #40	; 0x28
 800451a:	af00      	add	r7, sp, #0
 800451c:	60f8      	str	r0, [r7, #12]
 800451e:	60b9      	str	r1, [r7, #8]
 8004520:	607a      	str	r2, [r7, #4]
    float x = in[ 0 ].value;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	623b      	str	r3, [r7, #32]
    float c, w, y;
    const float pi = 3.14159265358979323846f;
 8004528:	4b36      	ldr	r3, [pc, #216]	; (8004604 <qFIS_CosineMF+0xf0>)
 800452a:	61fb      	str	r3, [r7, #28]
    (void)n;

    c = p[ 0 ];
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	61bb      	str	r3, [r7, #24]
    w = p[ 1 ];
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	3304      	adds	r3, #4
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	617b      	str	r3, [r7, #20]
    if ( ( x < ( c - ( 0.5*w ) ) ) || ( x > ( c + ( 0.5f*w ) ) ) ) {
 800453a:	6a38      	ldr	r0, [r7, #32]
 800453c:	f7fb ff74 	bl	8000428 <__aeabi_f2d>
 8004540:	4604      	mov	r4, r0
 8004542:	460d      	mov	r5, r1
 8004544:	69b8      	ldr	r0, [r7, #24]
 8004546:	f7fb ff6f 	bl	8000428 <__aeabi_f2d>
 800454a:	4680      	mov	r8, r0
 800454c:	4689      	mov	r9, r1
 800454e:	6978      	ldr	r0, [r7, #20]
 8004550:	f7fb ff6a 	bl	8000428 <__aeabi_f2d>
 8004554:	f04f 0200 	mov.w	r2, #0
 8004558:	4b2b      	ldr	r3, [pc, #172]	; (8004608 <qFIS_CosineMF+0xf4>)
 800455a:	f7fb ffbd 	bl	80004d8 <__aeabi_dmul>
 800455e:	4602      	mov	r2, r0
 8004560:	460b      	mov	r3, r1
 8004562:	4640      	mov	r0, r8
 8004564:	4649      	mov	r1, r9
 8004566:	f7fb fdff 	bl	8000168 <__aeabi_dsub>
 800456a:	4602      	mov	r2, r0
 800456c:	460b      	mov	r3, r1
 800456e:	4620      	mov	r0, r4
 8004570:	4629      	mov	r1, r5
 8004572:	f7fc fa23 	bl	80009bc <__aeabi_dcmplt>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d111      	bne.n	80045a0 <qFIS_CosineMF+0x8c>
 800457c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004580:	6978      	ldr	r0, [r7, #20]
 8004582:	f7fc fbdf 	bl	8000d44 <__aeabi_fmul>
 8004586:	4603      	mov	r3, r0
 8004588:	69b9      	ldr	r1, [r7, #24]
 800458a:	4618      	mov	r0, r3
 800458c:	f7fc fad2 	bl	8000b34 <__addsf3>
 8004590:	4603      	mov	r3, r0
 8004592:	4619      	mov	r1, r3
 8004594:	6a38      	ldr	r0, [r7, #32]
 8004596:	f7fc fd91 	bl	80010bc <__aeabi_fcmpgt>
 800459a:	4603      	mov	r3, r0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d003      	beq.n	80045a8 <qFIS_CosineMF+0x94>
        y = 0.0f;
 80045a0:	f04f 0300 	mov.w	r3, #0
 80045a4:	627b      	str	r3, [r7, #36]	; 0x24
 80045a6:	e026      	b.n	80045f6 <qFIS_CosineMF+0xe2>
    }
    else {
        y = 0.5f*( 1.0f + QLIB_COS( 2.0f/w*pi*( x - c) ) );
 80045a8:	6979      	ldr	r1, [r7, #20]
 80045aa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80045ae:	f7fc fc7d 	bl	8000eac <__aeabi_fdiv>
 80045b2:	4603      	mov	r3, r0
 80045b4:	69f9      	ldr	r1, [r7, #28]
 80045b6:	4618      	mov	r0, r3
 80045b8:	f7fc fbc4 	bl	8000d44 <__aeabi_fmul>
 80045bc:	4603      	mov	r3, r0
 80045be:	461c      	mov	r4, r3
 80045c0:	69b9      	ldr	r1, [r7, #24]
 80045c2:	6a38      	ldr	r0, [r7, #32]
 80045c4:	f7fc fab4 	bl	8000b30 <__aeabi_fsub>
 80045c8:	4603      	mov	r3, r0
 80045ca:	4619      	mov	r1, r3
 80045cc:	4620      	mov	r0, r4
 80045ce:	f7fc fbb9 	bl	8000d44 <__aeabi_fmul>
 80045d2:	4603      	mov	r3, r0
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7fe f857 	bl	8002688 <qFFMath_Cos>
 80045da:	4603      	mov	r3, r0
 80045dc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80045e0:	4618      	mov	r0, r3
 80045e2:	f7fc faa7 	bl	8000b34 <__addsf3>
 80045e6:	4603      	mov	r3, r0
 80045e8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80045ec:	4618      	mov	r0, r3
 80045ee:	f7fc fba9 	bl	8000d44 <__aeabi_fmul>
 80045f2:	4603      	mov	r3, r0
 80045f4:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return y;
 80045f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3728      	adds	r7, #40	; 0x28
 80045fc:	46bd      	mov	sp, r7
 80045fe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004602:	bf00      	nop
 8004604:	40490fdb 	.word	0x40490fdb
 8004608:	3fe00000 	.word	0x3fe00000

0800460c <qFIS_ConstantMF>:
/*============================================================================*/
static float qFIS_ConstantMF( const qFIS_IO_Base_t * const in,
                              const float *p,
                              const size_t n )
{
 800460c:	b480      	push	{r7}
 800460e:	b085      	sub	sp, #20
 8004610:	af00      	add	r7, sp, #0
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	607a      	str	r2, [r7, #4]
    (void)in;
    (void)n;
    return p[ 0 ];
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	681b      	ldr	r3, [r3, #0]
}
 800461c:	4618      	mov	r0, r3
 800461e:	3714      	adds	r7, #20
 8004620:	46bd      	mov	sp, r7
 8004622:	bc80      	pop	{r7}
 8004624:	4770      	bx	lr

08004626 <qFIS_LinearMF>:
/*============================================================================*/
static float qFIS_LinearMF( const qFIS_IO_Base_t * const in,
                            const float *p,
                            const size_t n )
{
 8004626:	b580      	push	{r7, lr}
 8004628:	b086      	sub	sp, #24
 800462a:	af00      	add	r7, sp, #0
 800462c:	60f8      	str	r0, [r7, #12]
 800462e:	60b9      	str	r1, [r7, #8]
 8004630:	607a      	str	r2, [r7, #4]
    float px = 0.0f;
 8004632:	f04f 0300 	mov.w	r3, #0
 8004636:	617b      	str	r3, [r7, #20]
    size_t i;

    for ( i = 0u ; i < n ; ++i ) {
 8004638:	2300      	movs	r3, #0
 800463a:	613b      	str	r3, [r7, #16]
 800463c:	e01a      	b.n	8004674 <qFIS_LinearMF+0x4e>
        px += in[ i ].value*p[ i ];
 800463e:	693a      	ldr	r2, [r7, #16]
 8004640:	4613      	mov	r3, r2
 8004642:	005b      	lsls	r3, r3, #1
 8004644:	4413      	add	r3, r2
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	461a      	mov	r2, r3
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	4413      	add	r3, r2
 800464e:	6898      	ldr	r0, [r3, #8]
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	68ba      	ldr	r2, [r7, #8]
 8004656:	4413      	add	r3, r2
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4619      	mov	r1, r3
 800465c:	f7fc fb72 	bl	8000d44 <__aeabi_fmul>
 8004660:	4603      	mov	r3, r0
 8004662:	4619      	mov	r1, r3
 8004664:	6978      	ldr	r0, [r7, #20]
 8004666:	f7fc fa65 	bl	8000b34 <__addsf3>
 800466a:	4603      	mov	r3, r0
 800466c:	617b      	str	r3, [r7, #20]
    for ( i = 0u ; i < n ; ++i ) {
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	3301      	adds	r3, #1
 8004672:	613b      	str	r3, [r7, #16]
 8004674:	693a      	ldr	r2, [r7, #16]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	429a      	cmp	r2, r3
 800467a:	d3e0      	bcc.n	800463e <qFIS_LinearMF+0x18>
    }
    px += p[ i ];
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	68ba      	ldr	r2, [r7, #8]
 8004682:	4413      	add	r3, r2
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4619      	mov	r1, r3
 8004688:	6978      	ldr	r0, [r7, #20]
 800468a:	f7fc fa53 	bl	8000b34 <__addsf3>
 800468e:	4603      	mov	r3, r0
 8004690:	617b      	str	r3, [r7, #20]

    return px;
 8004692:	697b      	ldr	r3, [r7, #20]
}
 8004694:	4618      	mov	r0, r3
 8004696:	3718      	adds	r7, #24
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <qFIS_Min>:
/*============================================================================*/
static float qFIS_Min( const float a,
                       const float b )
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
    return qFIS_Bound( ( a < b ) ? a : b, 0.0f, 1.0f );
 80046a6:	6839      	ldr	r1, [r7, #0]
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f7fc fce9 	bl	8001080 <__aeabi_fcmplt>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d001      	beq.n	80046b8 <qFIS_Min+0x1c>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	e000      	b.n	80046ba <qFIS_Min+0x1e>
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80046be:	f04f 0100 	mov.w	r1, #0
 80046c2:	4618      	mov	r0, r3
 80046c4:	f000 f86d 	bl	80047a2 <qFIS_Bound>
 80046c8:	4603      	mov	r3, r0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3708      	adds	r7, #8
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}

080046d2 <qFIS_Max>:
/*============================================================================*/
static float qFIS_Max( const float a,
                       const float b )
{
 80046d2:	b580      	push	{r7, lr}
 80046d4:	b082      	sub	sp, #8
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
 80046da:	6039      	str	r1, [r7, #0]
    return qFIS_Bound( ( a > b ) ? a : b, 0.0f, 1.0f );
 80046dc:	6839      	ldr	r1, [r7, #0]
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f7fc fcec 	bl	80010bc <__aeabi_fcmpgt>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d001      	beq.n	80046ee <qFIS_Max+0x1c>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	e000      	b.n	80046f0 <qFIS_Max+0x1e>
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80046f4:	f04f 0100 	mov.w	r1, #0
 80046f8:	4618      	mov	r0, r3
 80046fa:	f000 f852 	bl	80047a2 <qFIS_Bound>
 80046fe:	4603      	mov	r3, r0
}
 8004700:	4618      	mov	r0, r3
 8004702:	3708      	adds	r7, #8
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}

08004708 <qFIS_Prod>:
/*============================================================================*/
static float qFIS_Prod( const float a,
                        const float b )
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b082      	sub	sp, #8
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	6039      	str	r1, [r7, #0]
    return qFIS_Bound( a*b, 0.0f, 1.0f );
 8004712:	6839      	ldr	r1, [r7, #0]
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f7fc fb15 	bl	8000d44 <__aeabi_fmul>
 800471a:	4603      	mov	r3, r0
 800471c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004720:	f04f 0100 	mov.w	r1, #0
 8004724:	4618      	mov	r0, r3
 8004726:	f000 f83c 	bl	80047a2 <qFIS_Bound>
 800472a:	4603      	mov	r3, r0
}
 800472c:	4618      	mov	r0, r3
 800472e:	3708      	adds	r7, #8
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <qFIS_ProbOR>:
/*============================================================================*/
static float qFIS_ProbOR( const float a,
                          const float b )
{
 8004734:	b590      	push	{r4, r7, lr}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
    return qFIS_Bound( a + b - ( a*b ), 0.0f, 1.0f );
 800473e:	6839      	ldr	r1, [r7, #0]
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f7fc f9f7 	bl	8000b34 <__addsf3>
 8004746:	4603      	mov	r3, r0
 8004748:	461c      	mov	r4, r3
 800474a:	6839      	ldr	r1, [r7, #0]
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f7fc faf9 	bl	8000d44 <__aeabi_fmul>
 8004752:	4603      	mov	r3, r0
 8004754:	4619      	mov	r1, r3
 8004756:	4620      	mov	r0, r4
 8004758:	f7fc f9ea 	bl	8000b30 <__aeabi_fsub>
 800475c:	4603      	mov	r3, r0
 800475e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004762:	f04f 0100 	mov.w	r1, #0
 8004766:	4618      	mov	r0, r3
 8004768:	f000 f81b 	bl	80047a2 <qFIS_Bound>
 800476c:	4603      	mov	r3, r0
}
 800476e:	4618      	mov	r0, r3
 8004770:	370c      	adds	r7, #12
 8004772:	46bd      	mov	sp, r7
 8004774:	bd90      	pop	{r4, r7, pc}

08004776 <qFIS_Sum>:
/*============================================================================*/
static float qFIS_Sum( const float a,
                       const float b )
{
 8004776:	b580      	push	{r7, lr}
 8004778:	b082      	sub	sp, #8
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
 800477e:	6039      	str	r1, [r7, #0]
    return qFIS_Bound( a + b, 0.0f, 1.0f );
 8004780:	6839      	ldr	r1, [r7, #0]
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f7fc f9d6 	bl	8000b34 <__addsf3>
 8004788:	4603      	mov	r3, r0
 800478a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800478e:	f04f 0100 	mov.w	r1, #0
 8004792:	4618      	mov	r0, r3
 8004794:	f000 f805 	bl	80047a2 <qFIS_Bound>
 8004798:	4603      	mov	r3, r0
}
 800479a:	4618      	mov	r0, r3
 800479c:	3708      	adds	r7, #8
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}

080047a2 <qFIS_Bound>:
/*============================================================================*/
static float qFIS_Bound( float y,
                         const float yMin,
                         const float yMax )
{
 80047a2:	b580      	push	{r7, lr}
 80047a4:	b084      	sub	sp, #16
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	60f8      	str	r0, [r7, #12]
 80047aa:	60b9      	str	r1, [r7, #8]
 80047ac:	607a      	str	r2, [r7, #4]
    (void)qFMathEx_InRangeCoerce( &y, yMin, yMax );
 80047ae:	f107 030c 	add.w	r3, r7, #12
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	68b9      	ldr	r1, [r7, #8]
 80047b6:	4618      	mov	r0, r3
 80047b8:	f000 f805 	bl	80047c6 <qFMathEx_InRangeCoerce>

    return y;
 80047bc:	68fb      	ldr	r3, [r7, #12]
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3710      	adds	r7, #16
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}

080047c6 <qFMathEx_InRangeCoerce>:
}
/*============================================================================*/
bool qFMathEx_InRangeCoerce( float * const x,
                             const float lowerL,
                             const float upperL )
{
 80047c6:	b580      	push	{r7, lr}
 80047c8:	b086      	sub	sp, #24
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	60f8      	str	r0, [r7, #12]
 80047ce:	60b9      	str	r1, [r7, #8]
 80047d0:	607a      	str	r2, [r7, #4]
    bool retVal = false;
 80047d2:	2300      	movs	r3, #0
 80047d4:	75fb      	strb	r3, [r7, #23]

    if ( 1 == (int)QLIB_ISNAN( x[ 0 ] ) ) {
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4618      	mov	r0, r3
 80047dc:	f7fd fe9d 	bl	800251a <qFFMath_IsNaN>
 80047e0:	4603      	mov	r3, r0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d003      	beq.n	80047ee <qFMathEx_InRangeCoerce+0x28>
        x[ 0 ] = lowerL;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	68ba      	ldr	r2, [r7, #8]
 80047ea:	601a      	str	r2, [r3, #0]
 80047ec:	e01b      	b.n	8004826 <qFMathEx_InRangeCoerce+0x60>
    }
    else {
        if ( x[ 0 ] < lowerL ) {
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4619      	mov	r1, r3
 80047f4:	68b8      	ldr	r0, [r7, #8]
 80047f6:	f7fc fc61 	bl	80010bc <__aeabi_fcmpgt>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d003      	beq.n	8004808 <qFMathEx_InRangeCoerce+0x42>
            x[ 0 ] = lowerL;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	68ba      	ldr	r2, [r7, #8]
 8004804:	601a      	str	r2, [r3, #0]
 8004806:	e00e      	b.n	8004826 <qFMathEx_InRangeCoerce+0x60>
        }
        else if ( x[ 0 ] > upperL ) {
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4619      	mov	r1, r3
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f7fc fc36 	bl	8001080 <__aeabi_fcmplt>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d003      	beq.n	8004822 <qFMathEx_InRangeCoerce+0x5c>
            x[ 0 ] = upperL;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	601a      	str	r2, [r3, #0]
 8004820:	e001      	b.n	8004826 <qFMathEx_InRangeCoerce+0x60>
        }
        else {
            retVal = true;
 8004822:	2301      	movs	r3, #1
 8004824:	75fb      	strb	r3, [r7, #23]
        }
    }

    return retVal;
 8004826:	7dfb      	ldrb	r3, [r7, #23]
}
 8004828:	4618      	mov	r0, r3
 800482a:	3718      	adds	r7, #24
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <qFMathEx_AlmostEqual>:
/*============================================================================*/
bool qFMathEx_AlmostEqual( const float a,
                           const float b,
                           const float tol )
{
 8004830:	b5b0      	push	{r4, r5, r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	607a      	str	r2, [r7, #4]
    return ( QLIB_ABS( a - b ) <= QLIB_ABS( tol ) );
 800483c:	68b9      	ldr	r1, [r7, #8]
 800483e:	68f8      	ldr	r0, [r7, #12]
 8004840:	f7fc f976 	bl	8000b30 <__aeabi_fsub>
 8004844:	4603      	mov	r3, r0
 8004846:	4618      	mov	r0, r3
 8004848:	f7fd fe78 	bl	800253c <qFFMath_Abs>
 800484c:	4604      	mov	r4, r0
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f7fd fe74 	bl	800253c <qFFMath_Abs>
 8004854:	4603      	mov	r3, r0
 8004856:	2201      	movs	r2, #1
 8004858:	4615      	mov	r5, r2
 800485a:	4619      	mov	r1, r3
 800485c:	4620      	mov	r0, r4
 800485e:	f7fc fc19 	bl	8001094 <__aeabi_fcmple>
 8004862:	4603      	mov	r3, r0
 8004864:	2b00      	cmp	r3, #0
 8004866:	d101      	bne.n	800486c <qFMathEx_AlmostEqual+0x3c>
 8004868:	2300      	movs	r3, #0
 800486a:	461d      	mov	r5, r3
 800486c:	b2eb      	uxtb	r3, r5
}
 800486e:	4618      	mov	r0, r3
 8004870:	3710      	adds	r7, #16
 8004872:	46bd      	mov	sp, r7
 8004874:	bdb0      	pop	{r4, r5, r7, pc}

08004876 <qFMathEx_Equal>:
/*============================================================================*/
bool qFMathEx_Equal( const float a,
                     const float b )
{
 8004876:	b580      	push	{r7, lr}
 8004878:	b082      	sub	sp, #8
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
 800487e:	6039      	str	r1, [r7, #0]
    return qFMathEx_AlmostEqual( a, b, FLT_MIN );
 8004880:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004884:	6839      	ldr	r1, [r7, #0]
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f7ff ffd2 	bl	8004830 <qFMathEx_AlmostEqual>
 800488c:	4603      	mov	r3, r0
}
 800488e:	4618      	mov	r0, r3
 8004890:	3708      	adds	r7, #8
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
	...

08004898 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004898:	b480      	push	{r7}
 800489a:	b085      	sub	sp, #20
 800489c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800489e:	4b15      	ldr	r3, [pc, #84]	; (80048f4 <HAL_MspInit+0x5c>)
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	4a14      	ldr	r2, [pc, #80]	; (80048f4 <HAL_MspInit+0x5c>)
 80048a4:	f043 0301 	orr.w	r3, r3, #1
 80048a8:	6193      	str	r3, [r2, #24]
 80048aa:	4b12      	ldr	r3, [pc, #72]	; (80048f4 <HAL_MspInit+0x5c>)
 80048ac:	699b      	ldr	r3, [r3, #24]
 80048ae:	f003 0301 	and.w	r3, r3, #1
 80048b2:	60bb      	str	r3, [r7, #8]
 80048b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80048b6:	4b0f      	ldr	r3, [pc, #60]	; (80048f4 <HAL_MspInit+0x5c>)
 80048b8:	69db      	ldr	r3, [r3, #28]
 80048ba:	4a0e      	ldr	r2, [pc, #56]	; (80048f4 <HAL_MspInit+0x5c>)
 80048bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048c0:	61d3      	str	r3, [r2, #28]
 80048c2:	4b0c      	ldr	r3, [pc, #48]	; (80048f4 <HAL_MspInit+0x5c>)
 80048c4:	69db      	ldr	r3, [r3, #28]
 80048c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048ca:	607b      	str	r3, [r7, #4]
 80048cc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80048ce:	4b0a      	ldr	r3, [pc, #40]	; (80048f8 <HAL_MspInit+0x60>)
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	60fb      	str	r3, [r7, #12]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80048da:	60fb      	str	r3, [r7, #12]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80048e2:	60fb      	str	r3, [r7, #12]
 80048e4:	4a04      	ldr	r2, [pc, #16]	; (80048f8 <HAL_MspInit+0x60>)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80048ea:	bf00      	nop
 80048ec:	3714      	adds	r7, #20
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bc80      	pop	{r7}
 80048f2:	4770      	bx	lr
 80048f4:	40021000 	.word	0x40021000
 80048f8:	40010000 	.word	0x40010000

080048fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b08a      	sub	sp, #40	; 0x28
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004904:	f107 0314 	add.w	r3, r7, #20
 8004908:	2200      	movs	r2, #0
 800490a:	601a      	str	r2, [r3, #0]
 800490c:	605a      	str	r2, [r3, #4]
 800490e:	609a      	str	r2, [r3, #8]
 8004910:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a1d      	ldr	r2, [pc, #116]	; (800498c <HAL_I2C_MspInit+0x90>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d132      	bne.n	8004982 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800491c:	4b1c      	ldr	r3, [pc, #112]	; (8004990 <HAL_I2C_MspInit+0x94>)
 800491e:	699b      	ldr	r3, [r3, #24]
 8004920:	4a1b      	ldr	r2, [pc, #108]	; (8004990 <HAL_I2C_MspInit+0x94>)
 8004922:	f043 0308 	orr.w	r3, r3, #8
 8004926:	6193      	str	r3, [r2, #24]
 8004928:	4b19      	ldr	r3, [pc, #100]	; (8004990 <HAL_I2C_MspInit+0x94>)
 800492a:	699b      	ldr	r3, [r3, #24]
 800492c:	f003 0308 	and.w	r3, r3, #8
 8004930:	613b      	str	r3, [r7, #16]
 8004932:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004934:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004938:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800493a:	2312      	movs	r3, #18
 800493c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800493e:	2303      	movs	r3, #3
 8004940:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004942:	f107 0314 	add.w	r3, r7, #20
 8004946:	4619      	mov	r1, r3
 8004948:	4812      	ldr	r0, [pc, #72]	; (8004994 <HAL_I2C_MspInit+0x98>)
 800494a:	f000 fbf9 	bl	8005140 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800494e:	4b12      	ldr	r3, [pc, #72]	; (8004998 <HAL_I2C_MspInit+0x9c>)
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	627b      	str	r3, [r7, #36]	; 0x24
 8004954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004956:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800495a:	627b      	str	r3, [r7, #36]	; 0x24
 800495c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495e:	f043 0302 	orr.w	r3, r3, #2
 8004962:	627b      	str	r3, [r7, #36]	; 0x24
 8004964:	4a0c      	ldr	r2, [pc, #48]	; (8004998 <HAL_I2C_MspInit+0x9c>)
 8004966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004968:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800496a:	4b09      	ldr	r3, [pc, #36]	; (8004990 <HAL_I2C_MspInit+0x94>)
 800496c:	69db      	ldr	r3, [r3, #28]
 800496e:	4a08      	ldr	r2, [pc, #32]	; (8004990 <HAL_I2C_MspInit+0x94>)
 8004970:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004974:	61d3      	str	r3, [r2, #28]
 8004976:	4b06      	ldr	r3, [pc, #24]	; (8004990 <HAL_I2C_MspInit+0x94>)
 8004978:	69db      	ldr	r3, [r3, #28]
 800497a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800497e:	60fb      	str	r3, [r7, #12]
 8004980:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004982:	bf00      	nop
 8004984:	3728      	adds	r7, #40	; 0x28
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	40005400 	.word	0x40005400
 8004990:	40021000 	.word	0x40021000
 8004994:	40010c00 	.word	0x40010c00
 8004998:	40010000 	.word	0x40010000

0800499c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b084      	sub	sp, #16
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a0d      	ldr	r2, [pc, #52]	; (80049e0 <HAL_TIM_Base_MspInit+0x44>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d113      	bne.n	80049d6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80049ae:	4b0d      	ldr	r3, [pc, #52]	; (80049e4 <HAL_TIM_Base_MspInit+0x48>)
 80049b0:	699b      	ldr	r3, [r3, #24]
 80049b2:	4a0c      	ldr	r2, [pc, #48]	; (80049e4 <HAL_TIM_Base_MspInit+0x48>)
 80049b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80049b8:	6193      	str	r3, [r2, #24]
 80049ba:	4b0a      	ldr	r3, [pc, #40]	; (80049e4 <HAL_TIM_Base_MspInit+0x48>)
 80049bc:	699b      	ldr	r3, [r3, #24]
 80049be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049c2:	60fb      	str	r3, [r7, #12]
 80049c4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80049c6:	2200      	movs	r2, #0
 80049c8:	2100      	movs	r1, #0
 80049ca:	2019      	movs	r0, #25
 80049cc:	f000 facf 	bl	8004f6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80049d0:	2019      	movs	r0, #25
 80049d2:	f000 fae8 	bl	8004fa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80049d6:	bf00      	nop
 80049d8:	3710      	adds	r7, #16
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	40012c00 	.word	0x40012c00
 80049e4:	40021000 	.word	0x40021000

080049e8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b085      	sub	sp, #20
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a12      	ldr	r2, [pc, #72]	; (8004a40 <HAL_TIM_PWM_MspInit+0x58>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d10c      	bne.n	8004a14 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80049fa:	4b12      	ldr	r3, [pc, #72]	; (8004a44 <HAL_TIM_PWM_MspInit+0x5c>)
 80049fc:	69db      	ldr	r3, [r3, #28]
 80049fe:	4a11      	ldr	r2, [pc, #68]	; (8004a44 <HAL_TIM_PWM_MspInit+0x5c>)
 8004a00:	f043 0302 	orr.w	r3, r3, #2
 8004a04:	61d3      	str	r3, [r2, #28]
 8004a06:	4b0f      	ldr	r3, [pc, #60]	; (8004a44 <HAL_TIM_PWM_MspInit+0x5c>)
 8004a08:	69db      	ldr	r3, [r3, #28]
 8004a0a:	f003 0302 	and.w	r3, r3, #2
 8004a0e:	60fb      	str	r3, [r7, #12]
 8004a10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004a12:	e010      	b.n	8004a36 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM4)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a0b      	ldr	r2, [pc, #44]	; (8004a48 <HAL_TIM_PWM_MspInit+0x60>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d10b      	bne.n	8004a36 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004a1e:	4b09      	ldr	r3, [pc, #36]	; (8004a44 <HAL_TIM_PWM_MspInit+0x5c>)
 8004a20:	69db      	ldr	r3, [r3, #28]
 8004a22:	4a08      	ldr	r2, [pc, #32]	; (8004a44 <HAL_TIM_PWM_MspInit+0x5c>)
 8004a24:	f043 0304 	orr.w	r3, r3, #4
 8004a28:	61d3      	str	r3, [r2, #28]
 8004a2a:	4b06      	ldr	r3, [pc, #24]	; (8004a44 <HAL_TIM_PWM_MspInit+0x5c>)
 8004a2c:	69db      	ldr	r3, [r3, #28]
 8004a2e:	f003 0304 	and.w	r3, r3, #4
 8004a32:	60bb      	str	r3, [r7, #8]
 8004a34:	68bb      	ldr	r3, [r7, #8]
}
 8004a36:	bf00      	nop
 8004a38:	3714      	adds	r7, #20
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bc80      	pop	{r7}
 8004a3e:	4770      	bx	lr
 8004a40:	40000400 	.word	0x40000400
 8004a44:	40021000 	.word	0x40021000
 8004a48:	40000800 	.word	0x40000800

08004a4c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b08a      	sub	sp, #40	; 0x28
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a54:	f107 0314 	add.w	r3, r7, #20
 8004a58:	2200      	movs	r2, #0
 8004a5a:	601a      	str	r2, [r3, #0]
 8004a5c:	605a      	str	r2, [r3, #4]
 8004a5e:	609a      	str	r2, [r3, #8]
 8004a60:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a27      	ldr	r2, [pc, #156]	; (8004b04 <HAL_TIM_MspPostInit+0xb8>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d12a      	bne.n	8004ac2 <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a6c:	4b26      	ldr	r3, [pc, #152]	; (8004b08 <HAL_TIM_MspPostInit+0xbc>)
 8004a6e:	699b      	ldr	r3, [r3, #24]
 8004a70:	4a25      	ldr	r2, [pc, #148]	; (8004b08 <HAL_TIM_MspPostInit+0xbc>)
 8004a72:	f043 0308 	orr.w	r3, r3, #8
 8004a76:	6193      	str	r3, [r2, #24]
 8004a78:	4b23      	ldr	r3, [pc, #140]	; (8004b08 <HAL_TIM_MspPostInit+0xbc>)
 8004a7a:	699b      	ldr	r3, [r3, #24]
 8004a7c:	f003 0308 	and.w	r3, r3, #8
 8004a80:	613b      	str	r3, [r7, #16]
 8004a82:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004a84:	2330      	movs	r3, #48	; 0x30
 8004a86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a88:	2302      	movs	r3, #2
 8004a8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a8c:	2302      	movs	r3, #2
 8004a8e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a90:	f107 0314 	add.w	r3, r7, #20
 8004a94:	4619      	mov	r1, r3
 8004a96:	481d      	ldr	r0, [pc, #116]	; (8004b0c <HAL_TIM_MspPostInit+0xc0>)
 8004a98:	f000 fb52 	bl	8005140 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8004a9c:	4b1c      	ldr	r3, [pc, #112]	; (8004b10 <HAL_TIM_MspPostInit+0xc4>)
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	627b      	str	r3, [r7, #36]	; 0x24
 8004aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004aa8:	627b      	str	r3, [r7, #36]	; 0x24
 8004aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aac:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8004ab0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004ab8:	627b      	str	r3, [r7, #36]	; 0x24
 8004aba:	4a15      	ldr	r2, [pc, #84]	; (8004b10 <HAL_TIM_MspPostInit+0xc4>)
 8004abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004abe:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8004ac0:	e01c      	b.n	8004afc <HAL_TIM_MspPostInit+0xb0>
  else if(htim->Instance==TIM4)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a13      	ldr	r2, [pc, #76]	; (8004b14 <HAL_TIM_MspPostInit+0xc8>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d117      	bne.n	8004afc <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004acc:	4b0e      	ldr	r3, [pc, #56]	; (8004b08 <HAL_TIM_MspPostInit+0xbc>)
 8004ace:	699b      	ldr	r3, [r3, #24]
 8004ad0:	4a0d      	ldr	r2, [pc, #52]	; (8004b08 <HAL_TIM_MspPostInit+0xbc>)
 8004ad2:	f043 0308 	orr.w	r3, r3, #8
 8004ad6:	6193      	str	r3, [r2, #24]
 8004ad8:	4b0b      	ldr	r3, [pc, #44]	; (8004b08 <HAL_TIM_MspPostInit+0xbc>)
 8004ada:	699b      	ldr	r3, [r3, #24]
 8004adc:	f003 0308 	and.w	r3, r3, #8
 8004ae0:	60fb      	str	r3, [r7, #12]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004ae4:	23c0      	movs	r3, #192	; 0xc0
 8004ae6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ae8:	2302      	movs	r3, #2
 8004aea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004aec:	2302      	movs	r3, #2
 8004aee:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004af0:	f107 0314 	add.w	r3, r7, #20
 8004af4:	4619      	mov	r1, r3
 8004af6:	4805      	ldr	r0, [pc, #20]	; (8004b0c <HAL_TIM_MspPostInit+0xc0>)
 8004af8:	f000 fb22 	bl	8005140 <HAL_GPIO_Init>
}
 8004afc:	bf00      	nop
 8004afe:	3728      	adds	r7, #40	; 0x28
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}
 8004b04:	40000400 	.word	0x40000400
 8004b08:	40021000 	.word	0x40021000
 8004b0c:	40010c00 	.word	0x40010c00
 8004b10:	40010000 	.word	0x40010000
 8004b14:	40000800 	.word	0x40000800

08004b18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b088      	sub	sp, #32
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b20:	f107 0310 	add.w	r3, r7, #16
 8004b24:	2200      	movs	r2, #0
 8004b26:	601a      	str	r2, [r3, #0]
 8004b28:	605a      	str	r2, [r3, #4]
 8004b2a:	609a      	str	r2, [r3, #8]
 8004b2c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a20      	ldr	r2, [pc, #128]	; (8004bb4 <HAL_UART_MspInit+0x9c>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d139      	bne.n	8004bac <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004b38:	4b1f      	ldr	r3, [pc, #124]	; (8004bb8 <HAL_UART_MspInit+0xa0>)
 8004b3a:	699b      	ldr	r3, [r3, #24]
 8004b3c:	4a1e      	ldr	r2, [pc, #120]	; (8004bb8 <HAL_UART_MspInit+0xa0>)
 8004b3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b42:	6193      	str	r3, [r2, #24]
 8004b44:	4b1c      	ldr	r3, [pc, #112]	; (8004bb8 <HAL_UART_MspInit+0xa0>)
 8004b46:	699b      	ldr	r3, [r3, #24]
 8004b48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b4c:	60fb      	str	r3, [r7, #12]
 8004b4e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b50:	4b19      	ldr	r3, [pc, #100]	; (8004bb8 <HAL_UART_MspInit+0xa0>)
 8004b52:	699b      	ldr	r3, [r3, #24]
 8004b54:	4a18      	ldr	r2, [pc, #96]	; (8004bb8 <HAL_UART_MspInit+0xa0>)
 8004b56:	f043 0304 	orr.w	r3, r3, #4
 8004b5a:	6193      	str	r3, [r2, #24]
 8004b5c:	4b16      	ldr	r3, [pc, #88]	; (8004bb8 <HAL_UART_MspInit+0xa0>)
 8004b5e:	699b      	ldr	r3, [r3, #24]
 8004b60:	f003 0304 	and.w	r3, r3, #4
 8004b64:	60bb      	str	r3, [r7, #8]
 8004b66:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004b68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b6c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b6e:	2302      	movs	r3, #2
 8004b70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004b72:	2303      	movs	r3, #3
 8004b74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b76:	f107 0310 	add.w	r3, r7, #16
 8004b7a:	4619      	mov	r1, r3
 8004b7c:	480f      	ldr	r0, [pc, #60]	; (8004bbc <HAL_UART_MspInit+0xa4>)
 8004b7e:	f000 fadf 	bl	8005140 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004b82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b90:	f107 0310 	add.w	r3, r7, #16
 8004b94:	4619      	mov	r1, r3
 8004b96:	4809      	ldr	r0, [pc, #36]	; (8004bbc <HAL_UART_MspInit+0xa4>)
 8004b98:	f000 fad2 	bl	8005140 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	2100      	movs	r1, #0
 8004ba0:	2025      	movs	r0, #37	; 0x25
 8004ba2:	f000 f9e4 	bl	8004f6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004ba6:	2025      	movs	r0, #37	; 0x25
 8004ba8:	f000 f9fd 	bl	8004fa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004bac:	bf00      	nop
 8004bae:	3720      	adds	r7, #32
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	40013800 	.word	0x40013800
 8004bb8:	40021000 	.word	0x40021000
 8004bbc:	40010800 	.word	0x40010800

08004bc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004bc4:	e7fe      	b.n	8004bc4 <NMI_Handler+0x4>

08004bc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004bc6:	b480      	push	{r7}
 8004bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004bca:	e7fe      	b.n	8004bca <HardFault_Handler+0x4>

08004bcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004bd0:	e7fe      	b.n	8004bd0 <MemManage_Handler+0x4>

08004bd2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004bd2:	b480      	push	{r7}
 8004bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004bd6:	e7fe      	b.n	8004bd6 <BusFault_Handler+0x4>

08004bd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004bdc:	e7fe      	b.n	8004bdc <UsageFault_Handler+0x4>

08004bde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004bde:	b480      	push	{r7}
 8004be0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004be2:	bf00      	nop
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bc80      	pop	{r7}
 8004be8:	4770      	bx	lr

08004bea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004bea:	b480      	push	{r7}
 8004bec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004bee:	bf00      	nop
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bc80      	pop	{r7}
 8004bf4:	4770      	bx	lr

08004bf6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004bf6:	b480      	push	{r7}
 8004bf8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004bfa:	bf00      	nop
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bc80      	pop	{r7}
 8004c00:	4770      	bx	lr

08004c02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004c02:	b580      	push	{r7, lr}
 8004c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004c06:	f000 f8bf 	bl	8004d88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004c0a:	bf00      	nop
 8004c0c:	bd80      	pop	{r7, pc}
	...

08004c10 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004c14:	4802      	ldr	r0, [pc, #8]	; (8004c20 <TIM1_UP_IRQHandler+0x10>)
 8004c16:	f002 fa2d 	bl	8007074 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8004c1a:	bf00      	nop
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	200003ec 	.word	0x200003ec

08004c24 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004c28:	4802      	ldr	r0, [pc, #8]	; (8004c34 <USART1_IRQHandler+0x10>)
 8004c2a:	f003 f8c1 	bl	8007db0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004c2e:	bf00      	nop
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	200004c4 	.word	0x200004c4

08004c38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b086      	sub	sp, #24
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004c40:	4a14      	ldr	r2, [pc, #80]	; (8004c94 <_sbrk+0x5c>)
 8004c42:	4b15      	ldr	r3, [pc, #84]	; (8004c98 <_sbrk+0x60>)
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004c4c:	4b13      	ldr	r3, [pc, #76]	; (8004c9c <_sbrk+0x64>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d102      	bne.n	8004c5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004c54:	4b11      	ldr	r3, [pc, #68]	; (8004c9c <_sbrk+0x64>)
 8004c56:	4a12      	ldr	r2, [pc, #72]	; (8004ca0 <_sbrk+0x68>)
 8004c58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004c5a:	4b10      	ldr	r3, [pc, #64]	; (8004c9c <_sbrk+0x64>)
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4413      	add	r3, r2
 8004c62:	693a      	ldr	r2, [r7, #16]
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d207      	bcs.n	8004c78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004c68:	f003 fe1a 	bl	80088a0 <__errno>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	220c      	movs	r2, #12
 8004c70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004c72:	f04f 33ff 	mov.w	r3, #4294967295
 8004c76:	e009      	b.n	8004c8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004c78:	4b08      	ldr	r3, [pc, #32]	; (8004c9c <_sbrk+0x64>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004c7e:	4b07      	ldr	r3, [pc, #28]	; (8004c9c <_sbrk+0x64>)
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4413      	add	r3, r2
 8004c86:	4a05      	ldr	r2, [pc, #20]	; (8004c9c <_sbrk+0x64>)
 8004c88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3718      	adds	r7, #24
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	20005000 	.word	0x20005000
 8004c98:	00000400 	.word	0x00000400
 8004c9c:	200005dc 	.word	0x200005dc
 8004ca0:	20000730 	.word	0x20000730

08004ca4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004ca8:	bf00      	nop
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bc80      	pop	{r7}
 8004cae:	4770      	bx	lr

08004cb0 <Reset_Handler>:
  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/    bl  SystemInit
 8004cb0:	f7ff fff8 	bl	8004ca4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004cb4:	480b      	ldr	r0, [pc, #44]	; (8004ce4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8004cb6:	490c      	ldr	r1, [pc, #48]	; (8004ce8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004cb8:	4a0c      	ldr	r2, [pc, #48]	; (8004cec <LoopFillZerobss+0x16>)
  movs r3, #0
 8004cba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004cbc:	e002      	b.n	8004cc4 <LoopCopyDataInit>

08004cbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004cbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004cc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004cc2:	3304      	adds	r3, #4

08004cc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004cc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004cc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004cc8:	d3f9      	bcc.n	8004cbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004cca:	4a09      	ldr	r2, [pc, #36]	; (8004cf0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8004ccc:	4c09      	ldr	r4, [pc, #36]	; (8004cf4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004cce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004cd0:	e001      	b.n	8004cd6 <LoopFillZerobss>

08004cd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004cd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004cd4:	3204      	adds	r2, #4

08004cd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004cd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004cd8:	d3fb      	bcc.n	8004cd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004cda:	f003 fde7 	bl	80088ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004cde:	f7fc fbd7 	bl	8001490 <main>
  bx lr
 8004ce2:	4770      	bx	lr
  ldr r0, =_sdata
 8004ce4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004ce8:	20000118 	.word	0x20000118
  ldr r2, =_sidata
 8004cec:	08009c40 	.word	0x08009c40
  ldr r2, =_sbss
 8004cf0:	20000118 	.word	0x20000118
  ldr r4, =_ebss
 8004cf4:	2000072c 	.word	0x2000072c

08004cf8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004cf8:	e7fe      	b.n	8004cf8 <ADC1_2_IRQHandler>
	...

08004cfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004d00:	4b08      	ldr	r3, [pc, #32]	; (8004d24 <HAL_Init+0x28>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a07      	ldr	r2, [pc, #28]	; (8004d24 <HAL_Init+0x28>)
 8004d06:	f043 0310 	orr.w	r3, r3, #16
 8004d0a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004d0c:	2003      	movs	r0, #3
 8004d0e:	f000 f923 	bl	8004f58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004d12:	200f      	movs	r0, #15
 8004d14:	f000 f808 	bl	8004d28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004d18:	f7ff fdbe 	bl	8004898 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004d1c:	2300      	movs	r3, #0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	bd80      	pop	{r7, pc}
 8004d22:	bf00      	nop
 8004d24:	40022000 	.word	0x40022000

08004d28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b082      	sub	sp, #8
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004d30:	4b12      	ldr	r3, [pc, #72]	; (8004d7c <HAL_InitTick+0x54>)
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	4b12      	ldr	r3, [pc, #72]	; (8004d80 <HAL_InitTick+0x58>)
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	4619      	mov	r1, r3
 8004d3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004d3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d46:	4618      	mov	r0, r3
 8004d48:	f000 f93b 	bl	8004fc2 <HAL_SYSTICK_Config>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d001      	beq.n	8004d56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e00e      	b.n	8004d74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2b0f      	cmp	r3, #15
 8004d5a:	d80a      	bhi.n	8004d72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	6879      	ldr	r1, [r7, #4]
 8004d60:	f04f 30ff 	mov.w	r0, #4294967295
 8004d64:	f000 f903 	bl	8004f6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004d68:	4a06      	ldr	r2, [pc, #24]	; (8004d84 <HAL_InitTick+0x5c>)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	e000      	b.n	8004d74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3708      	adds	r7, #8
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}
 8004d7c:	200000ac 	.word	0x200000ac
 8004d80:	200000b4 	.word	0x200000b4
 8004d84:	200000b0 	.word	0x200000b0

08004d88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004d8c:	4b05      	ldr	r3, [pc, #20]	; (8004da4 <HAL_IncTick+0x1c>)
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	461a      	mov	r2, r3
 8004d92:	4b05      	ldr	r3, [pc, #20]	; (8004da8 <HAL_IncTick+0x20>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4413      	add	r3, r2
 8004d98:	4a03      	ldr	r2, [pc, #12]	; (8004da8 <HAL_IncTick+0x20>)
 8004d9a:	6013      	str	r3, [r2, #0]
}
 8004d9c:	bf00      	nop
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bc80      	pop	{r7}
 8004da2:	4770      	bx	lr
 8004da4:	200000b4 	.word	0x200000b4
 8004da8:	200005e0 	.word	0x200005e0

08004dac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004dac:	b480      	push	{r7}
 8004dae:	af00      	add	r7, sp, #0
  return uwTick;
 8004db0:	4b02      	ldr	r3, [pc, #8]	; (8004dbc <HAL_GetTick+0x10>)
 8004db2:	681b      	ldr	r3, [r3, #0]
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bc80      	pop	{r7}
 8004dba:	4770      	bx	lr
 8004dbc:	200005e0 	.word	0x200005e0

08004dc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b085      	sub	sp, #20
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f003 0307 	and.w	r3, r3, #7
 8004dce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004dd0:	4b0c      	ldr	r3, [pc, #48]	; (8004e04 <__NVIC_SetPriorityGrouping+0x44>)
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004dd6:	68ba      	ldr	r2, [r7, #8]
 8004dd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004ddc:	4013      	ands	r3, r2
 8004dde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004de8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004dec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004df0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004df2:	4a04      	ldr	r2, [pc, #16]	; (8004e04 <__NVIC_SetPriorityGrouping+0x44>)
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	60d3      	str	r3, [r2, #12]
}
 8004df8:	bf00      	nop
 8004dfa:	3714      	adds	r7, #20
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bc80      	pop	{r7}
 8004e00:	4770      	bx	lr
 8004e02:	bf00      	nop
 8004e04:	e000ed00 	.word	0xe000ed00

08004e08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e0c:	4b04      	ldr	r3, [pc, #16]	; (8004e20 <__NVIC_GetPriorityGrouping+0x18>)
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	0a1b      	lsrs	r3, r3, #8
 8004e12:	f003 0307 	and.w	r3, r3, #7
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bc80      	pop	{r7}
 8004e1c:	4770      	bx	lr
 8004e1e:	bf00      	nop
 8004e20:	e000ed00 	.word	0xe000ed00

08004e24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b083      	sub	sp, #12
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	db0b      	blt.n	8004e4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e36:	79fb      	ldrb	r3, [r7, #7]
 8004e38:	f003 021f 	and.w	r2, r3, #31
 8004e3c:	4906      	ldr	r1, [pc, #24]	; (8004e58 <__NVIC_EnableIRQ+0x34>)
 8004e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e42:	095b      	lsrs	r3, r3, #5
 8004e44:	2001      	movs	r0, #1
 8004e46:	fa00 f202 	lsl.w	r2, r0, r2
 8004e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004e4e:	bf00      	nop
 8004e50:	370c      	adds	r7, #12
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bc80      	pop	{r7}
 8004e56:	4770      	bx	lr
 8004e58:	e000e100 	.word	0xe000e100

08004e5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	4603      	mov	r3, r0
 8004e64:	6039      	str	r1, [r7, #0]
 8004e66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	db0a      	blt.n	8004e86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	b2da      	uxtb	r2, r3
 8004e74:	490c      	ldr	r1, [pc, #48]	; (8004ea8 <__NVIC_SetPriority+0x4c>)
 8004e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e7a:	0112      	lsls	r2, r2, #4
 8004e7c:	b2d2      	uxtb	r2, r2
 8004e7e:	440b      	add	r3, r1
 8004e80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e84:	e00a      	b.n	8004e9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	b2da      	uxtb	r2, r3
 8004e8a:	4908      	ldr	r1, [pc, #32]	; (8004eac <__NVIC_SetPriority+0x50>)
 8004e8c:	79fb      	ldrb	r3, [r7, #7]
 8004e8e:	f003 030f 	and.w	r3, r3, #15
 8004e92:	3b04      	subs	r3, #4
 8004e94:	0112      	lsls	r2, r2, #4
 8004e96:	b2d2      	uxtb	r2, r2
 8004e98:	440b      	add	r3, r1
 8004e9a:	761a      	strb	r2, [r3, #24]
}
 8004e9c:	bf00      	nop
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bc80      	pop	{r7}
 8004ea4:	4770      	bx	lr
 8004ea6:	bf00      	nop
 8004ea8:	e000e100 	.word	0xe000e100
 8004eac:	e000ed00 	.word	0xe000ed00

08004eb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b089      	sub	sp, #36	; 0x24
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f003 0307 	and.w	r3, r3, #7
 8004ec2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	f1c3 0307 	rsb	r3, r3, #7
 8004eca:	2b04      	cmp	r3, #4
 8004ecc:	bf28      	it	cs
 8004ece:	2304      	movcs	r3, #4
 8004ed0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	3304      	adds	r3, #4
 8004ed6:	2b06      	cmp	r3, #6
 8004ed8:	d902      	bls.n	8004ee0 <NVIC_EncodePriority+0x30>
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	3b03      	subs	r3, #3
 8004ede:	e000      	b.n	8004ee2 <NVIC_EncodePriority+0x32>
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ee8:	69bb      	ldr	r3, [r7, #24]
 8004eea:	fa02 f303 	lsl.w	r3, r2, r3
 8004eee:	43da      	mvns	r2, r3
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	401a      	ands	r2, r3
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ef8:	f04f 31ff 	mov.w	r1, #4294967295
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	fa01 f303 	lsl.w	r3, r1, r3
 8004f02:	43d9      	mvns	r1, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f08:	4313      	orrs	r3, r2
         );
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3724      	adds	r7, #36	; 0x24
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bc80      	pop	{r7}
 8004f12:	4770      	bx	lr

08004f14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b082      	sub	sp, #8
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	3b01      	subs	r3, #1
 8004f20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f24:	d301      	bcc.n	8004f2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004f26:	2301      	movs	r3, #1
 8004f28:	e00f      	b.n	8004f4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004f2a:	4a0a      	ldr	r2, [pc, #40]	; (8004f54 <SysTick_Config+0x40>)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004f32:	210f      	movs	r1, #15
 8004f34:	f04f 30ff 	mov.w	r0, #4294967295
 8004f38:	f7ff ff90 	bl	8004e5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004f3c:	4b05      	ldr	r3, [pc, #20]	; (8004f54 <SysTick_Config+0x40>)
 8004f3e:	2200      	movs	r2, #0
 8004f40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f42:	4b04      	ldr	r3, [pc, #16]	; (8004f54 <SysTick_Config+0x40>)
 8004f44:	2207      	movs	r2, #7
 8004f46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004f48:	2300      	movs	r3, #0
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3708      	adds	r7, #8
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	e000e010 	.word	0xe000e010

08004f58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f7ff ff2d 	bl	8004dc0 <__NVIC_SetPriorityGrouping>
}
 8004f66:	bf00      	nop
 8004f68:	3708      	adds	r7, #8
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}

08004f6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004f6e:	b580      	push	{r7, lr}
 8004f70:	b086      	sub	sp, #24
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	4603      	mov	r3, r0
 8004f76:	60b9      	str	r1, [r7, #8]
 8004f78:	607a      	str	r2, [r7, #4]
 8004f7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004f80:	f7ff ff42 	bl	8004e08 <__NVIC_GetPriorityGrouping>
 8004f84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	68b9      	ldr	r1, [r7, #8]
 8004f8a:	6978      	ldr	r0, [r7, #20]
 8004f8c:	f7ff ff90 	bl	8004eb0 <NVIC_EncodePriority>
 8004f90:	4602      	mov	r2, r0
 8004f92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f96:	4611      	mov	r1, r2
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f7ff ff5f 	bl	8004e5c <__NVIC_SetPriority>
}
 8004f9e:	bf00      	nop
 8004fa0:	3718      	adds	r7, #24
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}

08004fa6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fa6:	b580      	push	{r7, lr}
 8004fa8:	b082      	sub	sp, #8
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	4603      	mov	r3, r0
 8004fae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f7ff ff35 	bl	8004e24 <__NVIC_EnableIRQ>
}
 8004fba:	bf00      	nop
 8004fbc:	3708      	adds	r7, #8
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}

08004fc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004fc2:	b580      	push	{r7, lr}
 8004fc4:	b082      	sub	sp, #8
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f7ff ffa2 	bl	8004f14 <SysTick_Config>
 8004fd0:	4603      	mov	r3, r0
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3708      	adds	r7, #8
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}

08004fda <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004fda:	b480      	push	{r7}
 8004fdc:	b085      	sub	sp, #20
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d008      	beq.n	8005004 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2204      	movs	r2, #4
 8004ff6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e020      	b.n	8005046 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f022 020e 	bic.w	r2, r2, #14
 8005012:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f022 0201 	bic.w	r2, r2, #1
 8005022:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800502c:	2101      	movs	r1, #1
 800502e:	fa01 f202 	lsl.w	r2, r1, r2
 8005032:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8005044:	7bfb      	ldrb	r3, [r7, #15]
}
 8005046:	4618      	mov	r0, r3
 8005048:	3714      	adds	r7, #20
 800504a:	46bd      	mov	sp, r7
 800504c:	bc80      	pop	{r7}
 800504e:	4770      	bx	lr

08005050 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005050:	b580      	push	{r7, lr}
 8005052:	b084      	sub	sp, #16
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005058:	2300      	movs	r3, #0
 800505a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005062:	b2db      	uxtb	r3, r3
 8005064:	2b02      	cmp	r3, #2
 8005066:	d005      	beq.n	8005074 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2204      	movs	r2, #4
 800506c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	73fb      	strb	r3, [r7, #15]
 8005072:	e051      	b.n	8005118 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f022 020e 	bic.w	r2, r2, #14
 8005082:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f022 0201 	bic.w	r2, r2, #1
 8005092:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a22      	ldr	r2, [pc, #136]	; (8005124 <HAL_DMA_Abort_IT+0xd4>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d029      	beq.n	80050f2 <HAL_DMA_Abort_IT+0xa2>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a21      	ldr	r2, [pc, #132]	; (8005128 <HAL_DMA_Abort_IT+0xd8>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d022      	beq.n	80050ee <HAL_DMA_Abort_IT+0x9e>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a1f      	ldr	r2, [pc, #124]	; (800512c <HAL_DMA_Abort_IT+0xdc>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d01a      	beq.n	80050e8 <HAL_DMA_Abort_IT+0x98>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a1e      	ldr	r2, [pc, #120]	; (8005130 <HAL_DMA_Abort_IT+0xe0>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d012      	beq.n	80050e2 <HAL_DMA_Abort_IT+0x92>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a1c      	ldr	r2, [pc, #112]	; (8005134 <HAL_DMA_Abort_IT+0xe4>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d00a      	beq.n	80050dc <HAL_DMA_Abort_IT+0x8c>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a1b      	ldr	r2, [pc, #108]	; (8005138 <HAL_DMA_Abort_IT+0xe8>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d102      	bne.n	80050d6 <HAL_DMA_Abort_IT+0x86>
 80050d0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80050d4:	e00e      	b.n	80050f4 <HAL_DMA_Abort_IT+0xa4>
 80050d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80050da:	e00b      	b.n	80050f4 <HAL_DMA_Abort_IT+0xa4>
 80050dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80050e0:	e008      	b.n	80050f4 <HAL_DMA_Abort_IT+0xa4>
 80050e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80050e6:	e005      	b.n	80050f4 <HAL_DMA_Abort_IT+0xa4>
 80050e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80050ec:	e002      	b.n	80050f4 <HAL_DMA_Abort_IT+0xa4>
 80050ee:	2310      	movs	r3, #16
 80050f0:	e000      	b.n	80050f4 <HAL_DMA_Abort_IT+0xa4>
 80050f2:	2301      	movs	r3, #1
 80050f4:	4a11      	ldr	r2, [pc, #68]	; (800513c <HAL_DMA_Abort_IT+0xec>)
 80050f6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800510c:	2b00      	cmp	r3, #0
 800510e:	d003      	beq.n	8005118 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	4798      	blx	r3
    } 
  }
  return status;
 8005118:	7bfb      	ldrb	r3, [r7, #15]
}
 800511a:	4618      	mov	r0, r3
 800511c:	3710      	adds	r7, #16
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	40020008 	.word	0x40020008
 8005128:	4002001c 	.word	0x4002001c
 800512c:	40020030 	.word	0x40020030
 8005130:	40020044 	.word	0x40020044
 8005134:	40020058 	.word	0x40020058
 8005138:	4002006c 	.word	0x4002006c
 800513c:	40020000 	.word	0x40020000

08005140 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005140:	b480      	push	{r7}
 8005142:	b08b      	sub	sp, #44	; 0x2c
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800514a:	2300      	movs	r3, #0
 800514c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800514e:	2300      	movs	r3, #0
 8005150:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005152:	e169      	b.n	8005428 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005154:	2201      	movs	r2, #1
 8005156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005158:	fa02 f303 	lsl.w	r3, r2, r3
 800515c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	69fa      	ldr	r2, [r7, #28]
 8005164:	4013      	ands	r3, r2
 8005166:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005168:	69ba      	ldr	r2, [r7, #24]
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	429a      	cmp	r2, r3
 800516e:	f040 8158 	bne.w	8005422 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	4a9a      	ldr	r2, [pc, #616]	; (80053e0 <HAL_GPIO_Init+0x2a0>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d05e      	beq.n	800523a <HAL_GPIO_Init+0xfa>
 800517c:	4a98      	ldr	r2, [pc, #608]	; (80053e0 <HAL_GPIO_Init+0x2a0>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d875      	bhi.n	800526e <HAL_GPIO_Init+0x12e>
 8005182:	4a98      	ldr	r2, [pc, #608]	; (80053e4 <HAL_GPIO_Init+0x2a4>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d058      	beq.n	800523a <HAL_GPIO_Init+0xfa>
 8005188:	4a96      	ldr	r2, [pc, #600]	; (80053e4 <HAL_GPIO_Init+0x2a4>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d86f      	bhi.n	800526e <HAL_GPIO_Init+0x12e>
 800518e:	4a96      	ldr	r2, [pc, #600]	; (80053e8 <HAL_GPIO_Init+0x2a8>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d052      	beq.n	800523a <HAL_GPIO_Init+0xfa>
 8005194:	4a94      	ldr	r2, [pc, #592]	; (80053e8 <HAL_GPIO_Init+0x2a8>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d869      	bhi.n	800526e <HAL_GPIO_Init+0x12e>
 800519a:	4a94      	ldr	r2, [pc, #592]	; (80053ec <HAL_GPIO_Init+0x2ac>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d04c      	beq.n	800523a <HAL_GPIO_Init+0xfa>
 80051a0:	4a92      	ldr	r2, [pc, #584]	; (80053ec <HAL_GPIO_Init+0x2ac>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d863      	bhi.n	800526e <HAL_GPIO_Init+0x12e>
 80051a6:	4a92      	ldr	r2, [pc, #584]	; (80053f0 <HAL_GPIO_Init+0x2b0>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d046      	beq.n	800523a <HAL_GPIO_Init+0xfa>
 80051ac:	4a90      	ldr	r2, [pc, #576]	; (80053f0 <HAL_GPIO_Init+0x2b0>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d85d      	bhi.n	800526e <HAL_GPIO_Init+0x12e>
 80051b2:	2b12      	cmp	r3, #18
 80051b4:	d82a      	bhi.n	800520c <HAL_GPIO_Init+0xcc>
 80051b6:	2b12      	cmp	r3, #18
 80051b8:	d859      	bhi.n	800526e <HAL_GPIO_Init+0x12e>
 80051ba:	a201      	add	r2, pc, #4	; (adr r2, 80051c0 <HAL_GPIO_Init+0x80>)
 80051bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c0:	0800523b 	.word	0x0800523b
 80051c4:	08005215 	.word	0x08005215
 80051c8:	08005227 	.word	0x08005227
 80051cc:	08005269 	.word	0x08005269
 80051d0:	0800526f 	.word	0x0800526f
 80051d4:	0800526f 	.word	0x0800526f
 80051d8:	0800526f 	.word	0x0800526f
 80051dc:	0800526f 	.word	0x0800526f
 80051e0:	0800526f 	.word	0x0800526f
 80051e4:	0800526f 	.word	0x0800526f
 80051e8:	0800526f 	.word	0x0800526f
 80051ec:	0800526f 	.word	0x0800526f
 80051f0:	0800526f 	.word	0x0800526f
 80051f4:	0800526f 	.word	0x0800526f
 80051f8:	0800526f 	.word	0x0800526f
 80051fc:	0800526f 	.word	0x0800526f
 8005200:	0800526f 	.word	0x0800526f
 8005204:	0800521d 	.word	0x0800521d
 8005208:	08005231 	.word	0x08005231
 800520c:	4a79      	ldr	r2, [pc, #484]	; (80053f4 <HAL_GPIO_Init+0x2b4>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d013      	beq.n	800523a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005212:	e02c      	b.n	800526e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	623b      	str	r3, [r7, #32]
          break;
 800521a:	e029      	b.n	8005270 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	3304      	adds	r3, #4
 8005222:	623b      	str	r3, [r7, #32]
          break;
 8005224:	e024      	b.n	8005270 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	3308      	adds	r3, #8
 800522c:	623b      	str	r3, [r7, #32]
          break;
 800522e:	e01f      	b.n	8005270 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	330c      	adds	r3, #12
 8005236:	623b      	str	r3, [r7, #32]
          break;
 8005238:	e01a      	b.n	8005270 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d102      	bne.n	8005248 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005242:	2304      	movs	r3, #4
 8005244:	623b      	str	r3, [r7, #32]
          break;
 8005246:	e013      	b.n	8005270 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	2b01      	cmp	r3, #1
 800524e:	d105      	bne.n	800525c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005250:	2308      	movs	r3, #8
 8005252:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	69fa      	ldr	r2, [r7, #28]
 8005258:	611a      	str	r2, [r3, #16]
          break;
 800525a:	e009      	b.n	8005270 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800525c:	2308      	movs	r3, #8
 800525e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	69fa      	ldr	r2, [r7, #28]
 8005264:	615a      	str	r2, [r3, #20]
          break;
 8005266:	e003      	b.n	8005270 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005268:	2300      	movs	r3, #0
 800526a:	623b      	str	r3, [r7, #32]
          break;
 800526c:	e000      	b.n	8005270 <HAL_GPIO_Init+0x130>
          break;
 800526e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	2bff      	cmp	r3, #255	; 0xff
 8005274:	d801      	bhi.n	800527a <HAL_GPIO_Init+0x13a>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	e001      	b.n	800527e <HAL_GPIO_Init+0x13e>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	3304      	adds	r3, #4
 800527e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	2bff      	cmp	r3, #255	; 0xff
 8005284:	d802      	bhi.n	800528c <HAL_GPIO_Init+0x14c>
 8005286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	e002      	b.n	8005292 <HAL_GPIO_Init+0x152>
 800528c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528e:	3b08      	subs	r3, #8
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	210f      	movs	r1, #15
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	fa01 f303 	lsl.w	r3, r1, r3
 80052a0:	43db      	mvns	r3, r3
 80052a2:	401a      	ands	r2, r3
 80052a4:	6a39      	ldr	r1, [r7, #32]
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	fa01 f303 	lsl.w	r3, r1, r3
 80052ac:	431a      	orrs	r2, r3
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	f000 80b1 	beq.w	8005422 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80052c0:	4b4d      	ldr	r3, [pc, #308]	; (80053f8 <HAL_GPIO_Init+0x2b8>)
 80052c2:	699b      	ldr	r3, [r3, #24]
 80052c4:	4a4c      	ldr	r2, [pc, #304]	; (80053f8 <HAL_GPIO_Init+0x2b8>)
 80052c6:	f043 0301 	orr.w	r3, r3, #1
 80052ca:	6193      	str	r3, [r2, #24]
 80052cc:	4b4a      	ldr	r3, [pc, #296]	; (80053f8 <HAL_GPIO_Init+0x2b8>)
 80052ce:	699b      	ldr	r3, [r3, #24]
 80052d0:	f003 0301 	and.w	r3, r3, #1
 80052d4:	60bb      	str	r3, [r7, #8]
 80052d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80052d8:	4a48      	ldr	r2, [pc, #288]	; (80053fc <HAL_GPIO_Init+0x2bc>)
 80052da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052dc:	089b      	lsrs	r3, r3, #2
 80052de:	3302      	adds	r3, #2
 80052e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80052e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e8:	f003 0303 	and.w	r3, r3, #3
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	220f      	movs	r2, #15
 80052f0:	fa02 f303 	lsl.w	r3, r2, r3
 80052f4:	43db      	mvns	r3, r3
 80052f6:	68fa      	ldr	r2, [r7, #12]
 80052f8:	4013      	ands	r3, r2
 80052fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4a40      	ldr	r2, [pc, #256]	; (8005400 <HAL_GPIO_Init+0x2c0>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d013      	beq.n	800532c <HAL_GPIO_Init+0x1ec>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4a3f      	ldr	r2, [pc, #252]	; (8005404 <HAL_GPIO_Init+0x2c4>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d00d      	beq.n	8005328 <HAL_GPIO_Init+0x1e8>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4a3e      	ldr	r2, [pc, #248]	; (8005408 <HAL_GPIO_Init+0x2c8>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d007      	beq.n	8005324 <HAL_GPIO_Init+0x1e4>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4a3d      	ldr	r2, [pc, #244]	; (800540c <HAL_GPIO_Init+0x2cc>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d101      	bne.n	8005320 <HAL_GPIO_Init+0x1e0>
 800531c:	2303      	movs	r3, #3
 800531e:	e006      	b.n	800532e <HAL_GPIO_Init+0x1ee>
 8005320:	2304      	movs	r3, #4
 8005322:	e004      	b.n	800532e <HAL_GPIO_Init+0x1ee>
 8005324:	2302      	movs	r3, #2
 8005326:	e002      	b.n	800532e <HAL_GPIO_Init+0x1ee>
 8005328:	2301      	movs	r3, #1
 800532a:	e000      	b.n	800532e <HAL_GPIO_Init+0x1ee>
 800532c:	2300      	movs	r3, #0
 800532e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005330:	f002 0203 	and.w	r2, r2, #3
 8005334:	0092      	lsls	r2, r2, #2
 8005336:	4093      	lsls	r3, r2
 8005338:	68fa      	ldr	r2, [r7, #12]
 800533a:	4313      	orrs	r3, r2
 800533c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800533e:	492f      	ldr	r1, [pc, #188]	; (80053fc <HAL_GPIO_Init+0x2bc>)
 8005340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005342:	089b      	lsrs	r3, r3, #2
 8005344:	3302      	adds	r3, #2
 8005346:	68fa      	ldr	r2, [r7, #12]
 8005348:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005354:	2b00      	cmp	r3, #0
 8005356:	d006      	beq.n	8005366 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005358:	4b2d      	ldr	r3, [pc, #180]	; (8005410 <HAL_GPIO_Init+0x2d0>)
 800535a:	689a      	ldr	r2, [r3, #8]
 800535c:	492c      	ldr	r1, [pc, #176]	; (8005410 <HAL_GPIO_Init+0x2d0>)
 800535e:	69bb      	ldr	r3, [r7, #24]
 8005360:	4313      	orrs	r3, r2
 8005362:	608b      	str	r3, [r1, #8]
 8005364:	e006      	b.n	8005374 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005366:	4b2a      	ldr	r3, [pc, #168]	; (8005410 <HAL_GPIO_Init+0x2d0>)
 8005368:	689a      	ldr	r2, [r3, #8]
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	43db      	mvns	r3, r3
 800536e:	4928      	ldr	r1, [pc, #160]	; (8005410 <HAL_GPIO_Init+0x2d0>)
 8005370:	4013      	ands	r3, r2
 8005372:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800537c:	2b00      	cmp	r3, #0
 800537e:	d006      	beq.n	800538e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005380:	4b23      	ldr	r3, [pc, #140]	; (8005410 <HAL_GPIO_Init+0x2d0>)
 8005382:	68da      	ldr	r2, [r3, #12]
 8005384:	4922      	ldr	r1, [pc, #136]	; (8005410 <HAL_GPIO_Init+0x2d0>)
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	4313      	orrs	r3, r2
 800538a:	60cb      	str	r3, [r1, #12]
 800538c:	e006      	b.n	800539c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800538e:	4b20      	ldr	r3, [pc, #128]	; (8005410 <HAL_GPIO_Init+0x2d0>)
 8005390:	68da      	ldr	r2, [r3, #12]
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	43db      	mvns	r3, r3
 8005396:	491e      	ldr	r1, [pc, #120]	; (8005410 <HAL_GPIO_Init+0x2d0>)
 8005398:	4013      	ands	r3, r2
 800539a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d006      	beq.n	80053b6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80053a8:	4b19      	ldr	r3, [pc, #100]	; (8005410 <HAL_GPIO_Init+0x2d0>)
 80053aa:	685a      	ldr	r2, [r3, #4]
 80053ac:	4918      	ldr	r1, [pc, #96]	; (8005410 <HAL_GPIO_Init+0x2d0>)
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	604b      	str	r3, [r1, #4]
 80053b4:	e006      	b.n	80053c4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80053b6:	4b16      	ldr	r3, [pc, #88]	; (8005410 <HAL_GPIO_Init+0x2d0>)
 80053b8:	685a      	ldr	r2, [r3, #4]
 80053ba:	69bb      	ldr	r3, [r7, #24]
 80053bc:	43db      	mvns	r3, r3
 80053be:	4914      	ldr	r1, [pc, #80]	; (8005410 <HAL_GPIO_Init+0x2d0>)
 80053c0:	4013      	ands	r3, r2
 80053c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d021      	beq.n	8005414 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80053d0:	4b0f      	ldr	r3, [pc, #60]	; (8005410 <HAL_GPIO_Init+0x2d0>)
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	490e      	ldr	r1, [pc, #56]	; (8005410 <HAL_GPIO_Init+0x2d0>)
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	4313      	orrs	r3, r2
 80053da:	600b      	str	r3, [r1, #0]
 80053dc:	e021      	b.n	8005422 <HAL_GPIO_Init+0x2e2>
 80053de:	bf00      	nop
 80053e0:	10320000 	.word	0x10320000
 80053e4:	10310000 	.word	0x10310000
 80053e8:	10220000 	.word	0x10220000
 80053ec:	10210000 	.word	0x10210000
 80053f0:	10120000 	.word	0x10120000
 80053f4:	10110000 	.word	0x10110000
 80053f8:	40021000 	.word	0x40021000
 80053fc:	40010000 	.word	0x40010000
 8005400:	40010800 	.word	0x40010800
 8005404:	40010c00 	.word	0x40010c00
 8005408:	40011000 	.word	0x40011000
 800540c:	40011400 	.word	0x40011400
 8005410:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005414:	4b0b      	ldr	r3, [pc, #44]	; (8005444 <HAL_GPIO_Init+0x304>)
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	69bb      	ldr	r3, [r7, #24]
 800541a:	43db      	mvns	r3, r3
 800541c:	4909      	ldr	r1, [pc, #36]	; (8005444 <HAL_GPIO_Init+0x304>)
 800541e:	4013      	ands	r3, r2
 8005420:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8005422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005424:	3301      	adds	r3, #1
 8005426:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542e:	fa22 f303 	lsr.w	r3, r2, r3
 8005432:	2b00      	cmp	r3, #0
 8005434:	f47f ae8e 	bne.w	8005154 <HAL_GPIO_Init+0x14>
  }
}
 8005438:	bf00      	nop
 800543a:	bf00      	nop
 800543c:	372c      	adds	r7, #44	; 0x2c
 800543e:	46bd      	mov	sp, r7
 8005440:	bc80      	pop	{r7}
 8005442:	4770      	bx	lr
 8005444:	40010400 	.word	0x40010400

08005448 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005448:	b480      	push	{r7}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	460b      	mov	r3, r1
 8005452:	807b      	strh	r3, [r7, #2]
 8005454:	4613      	mov	r3, r2
 8005456:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005458:	787b      	ldrb	r3, [r7, #1]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d003      	beq.n	8005466 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800545e:	887a      	ldrh	r2, [r7, #2]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005464:	e003      	b.n	800546e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005466:	887b      	ldrh	r3, [r7, #2]
 8005468:	041a      	lsls	r2, r3, #16
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	611a      	str	r2, [r3, #16]
}
 800546e:	bf00      	nop
 8005470:	370c      	adds	r7, #12
 8005472:	46bd      	mov	sp, r7
 8005474:	bc80      	pop	{r7}
 8005476:	4770      	bx	lr

08005478 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b084      	sub	sp, #16
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d101      	bne.n	800548a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e12b      	b.n	80056e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005490:	b2db      	uxtb	r3, r3
 8005492:	2b00      	cmp	r3, #0
 8005494:	d106      	bne.n	80054a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f7ff fa2c 	bl	80048fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2224      	movs	r2, #36	; 0x24
 80054a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f022 0201 	bic.w	r2, r2, #1
 80054ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80054ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80054da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80054dc:	f001 fbf0 	bl	8006cc0 <HAL_RCC_GetPCLK1Freq>
 80054e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	4a81      	ldr	r2, [pc, #516]	; (80056ec <HAL_I2C_Init+0x274>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d807      	bhi.n	80054fc <HAL_I2C_Init+0x84>
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	4a80      	ldr	r2, [pc, #512]	; (80056f0 <HAL_I2C_Init+0x278>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	bf94      	ite	ls
 80054f4:	2301      	movls	r3, #1
 80054f6:	2300      	movhi	r3, #0
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	e006      	b.n	800550a <HAL_I2C_Init+0x92>
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	4a7d      	ldr	r2, [pc, #500]	; (80056f4 <HAL_I2C_Init+0x27c>)
 8005500:	4293      	cmp	r3, r2
 8005502:	bf94      	ite	ls
 8005504:	2301      	movls	r3, #1
 8005506:	2300      	movhi	r3, #0
 8005508:	b2db      	uxtb	r3, r3
 800550a:	2b00      	cmp	r3, #0
 800550c:	d001      	beq.n	8005512 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e0e7      	b.n	80056e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	4a78      	ldr	r2, [pc, #480]	; (80056f8 <HAL_I2C_Init+0x280>)
 8005516:	fba2 2303 	umull	r2, r3, r2, r3
 800551a:	0c9b      	lsrs	r3, r3, #18
 800551c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	68ba      	ldr	r2, [r7, #8]
 800552e:	430a      	orrs	r2, r1
 8005530:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	6a1b      	ldr	r3, [r3, #32]
 8005538:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	4a6a      	ldr	r2, [pc, #424]	; (80056ec <HAL_I2C_Init+0x274>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d802      	bhi.n	800554c <HAL_I2C_Init+0xd4>
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	3301      	adds	r3, #1
 800554a:	e009      	b.n	8005560 <HAL_I2C_Init+0xe8>
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005552:	fb02 f303 	mul.w	r3, r2, r3
 8005556:	4a69      	ldr	r2, [pc, #420]	; (80056fc <HAL_I2C_Init+0x284>)
 8005558:	fba2 2303 	umull	r2, r3, r2, r3
 800555c:	099b      	lsrs	r3, r3, #6
 800555e:	3301      	adds	r3, #1
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	6812      	ldr	r2, [r2, #0]
 8005564:	430b      	orrs	r3, r1
 8005566:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	69db      	ldr	r3, [r3, #28]
 800556e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005572:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	495c      	ldr	r1, [pc, #368]	; (80056ec <HAL_I2C_Init+0x274>)
 800557c:	428b      	cmp	r3, r1
 800557e:	d819      	bhi.n	80055b4 <HAL_I2C_Init+0x13c>
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	1e59      	subs	r1, r3, #1
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	005b      	lsls	r3, r3, #1
 800558a:	fbb1 f3f3 	udiv	r3, r1, r3
 800558e:	1c59      	adds	r1, r3, #1
 8005590:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005594:	400b      	ands	r3, r1
 8005596:	2b00      	cmp	r3, #0
 8005598:	d00a      	beq.n	80055b0 <HAL_I2C_Init+0x138>
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	1e59      	subs	r1, r3, #1
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	005b      	lsls	r3, r3, #1
 80055a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80055a8:	3301      	adds	r3, #1
 80055aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055ae:	e051      	b.n	8005654 <HAL_I2C_Init+0x1dc>
 80055b0:	2304      	movs	r3, #4
 80055b2:	e04f      	b.n	8005654 <HAL_I2C_Init+0x1dc>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d111      	bne.n	80055e0 <HAL_I2C_Init+0x168>
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	1e58      	subs	r0, r3, #1
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6859      	ldr	r1, [r3, #4]
 80055c4:	460b      	mov	r3, r1
 80055c6:	005b      	lsls	r3, r3, #1
 80055c8:	440b      	add	r3, r1
 80055ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80055ce:	3301      	adds	r3, #1
 80055d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	bf0c      	ite	eq
 80055d8:	2301      	moveq	r3, #1
 80055da:	2300      	movne	r3, #0
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	e012      	b.n	8005606 <HAL_I2C_Init+0x18e>
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	1e58      	subs	r0, r3, #1
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6859      	ldr	r1, [r3, #4]
 80055e8:	460b      	mov	r3, r1
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	440b      	add	r3, r1
 80055ee:	0099      	lsls	r1, r3, #2
 80055f0:	440b      	add	r3, r1
 80055f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80055f6:	3301      	adds	r3, #1
 80055f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	bf0c      	ite	eq
 8005600:	2301      	moveq	r3, #1
 8005602:	2300      	movne	r3, #0
 8005604:	b2db      	uxtb	r3, r3
 8005606:	2b00      	cmp	r3, #0
 8005608:	d001      	beq.n	800560e <HAL_I2C_Init+0x196>
 800560a:	2301      	movs	r3, #1
 800560c:	e022      	b.n	8005654 <HAL_I2C_Init+0x1dc>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d10e      	bne.n	8005634 <HAL_I2C_Init+0x1bc>
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	1e58      	subs	r0, r3, #1
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6859      	ldr	r1, [r3, #4]
 800561e:	460b      	mov	r3, r1
 8005620:	005b      	lsls	r3, r3, #1
 8005622:	440b      	add	r3, r1
 8005624:	fbb0 f3f3 	udiv	r3, r0, r3
 8005628:	3301      	adds	r3, #1
 800562a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800562e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005632:	e00f      	b.n	8005654 <HAL_I2C_Init+0x1dc>
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	1e58      	subs	r0, r3, #1
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6859      	ldr	r1, [r3, #4]
 800563c:	460b      	mov	r3, r1
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	440b      	add	r3, r1
 8005642:	0099      	lsls	r1, r3, #2
 8005644:	440b      	add	r3, r1
 8005646:	fbb0 f3f3 	udiv	r3, r0, r3
 800564a:	3301      	adds	r3, #1
 800564c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005650:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005654:	6879      	ldr	r1, [r7, #4]
 8005656:	6809      	ldr	r1, [r1, #0]
 8005658:	4313      	orrs	r3, r2
 800565a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	69da      	ldr	r2, [r3, #28]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a1b      	ldr	r3, [r3, #32]
 800566e:	431a      	orrs	r2, r3
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	430a      	orrs	r2, r1
 8005676:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005682:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	6911      	ldr	r1, [r2, #16]
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	68d2      	ldr	r2, [r2, #12]
 800568e:	4311      	orrs	r1, r2
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	6812      	ldr	r2, [r2, #0]
 8005694:	430b      	orrs	r3, r1
 8005696:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	68db      	ldr	r3, [r3, #12]
 800569e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	695a      	ldr	r2, [r3, #20]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	699b      	ldr	r3, [r3, #24]
 80056aa:	431a      	orrs	r2, r3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	430a      	orrs	r2, r1
 80056b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f042 0201 	orr.w	r2, r2, #1
 80056c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2220      	movs	r2, #32
 80056ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2200      	movs	r2, #0
 80056dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80056e0:	2300      	movs	r3, #0
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3710      	adds	r7, #16
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop
 80056ec:	000186a0 	.word	0x000186a0
 80056f0:	001e847f 	.word	0x001e847f
 80056f4:	003d08ff 	.word	0x003d08ff
 80056f8:	431bde83 	.word	0x431bde83
 80056fc:	10624dd3 	.word	0x10624dd3

08005700 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b088      	sub	sp, #32
 8005704:	af02      	add	r7, sp, #8
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	4608      	mov	r0, r1
 800570a:	4611      	mov	r1, r2
 800570c:	461a      	mov	r2, r3
 800570e:	4603      	mov	r3, r0
 8005710:	817b      	strh	r3, [r7, #10]
 8005712:	460b      	mov	r3, r1
 8005714:	813b      	strh	r3, [r7, #8]
 8005716:	4613      	mov	r3, r2
 8005718:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800571a:	f7ff fb47 	bl	8004dac <HAL_GetTick>
 800571e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005726:	b2db      	uxtb	r3, r3
 8005728:	2b20      	cmp	r3, #32
 800572a:	f040 80d9 	bne.w	80058e0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	9300      	str	r3, [sp, #0]
 8005732:	2319      	movs	r3, #25
 8005734:	2201      	movs	r2, #1
 8005736:	496d      	ldr	r1, [pc, #436]	; (80058ec <HAL_I2C_Mem_Write+0x1ec>)
 8005738:	68f8      	ldr	r0, [r7, #12]
 800573a:	f000 fcc1 	bl	80060c0 <I2C_WaitOnFlagUntilTimeout>
 800573e:	4603      	mov	r3, r0
 8005740:	2b00      	cmp	r3, #0
 8005742:	d001      	beq.n	8005748 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005744:	2302      	movs	r3, #2
 8005746:	e0cc      	b.n	80058e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800574e:	2b01      	cmp	r3, #1
 8005750:	d101      	bne.n	8005756 <HAL_I2C_Mem_Write+0x56>
 8005752:	2302      	movs	r3, #2
 8005754:	e0c5      	b.n	80058e2 <HAL_I2C_Mem_Write+0x1e2>
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2201      	movs	r2, #1
 800575a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 0301 	and.w	r3, r3, #1
 8005768:	2b01      	cmp	r3, #1
 800576a:	d007      	beq.n	800577c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f042 0201 	orr.w	r2, r2, #1
 800577a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800578a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2221      	movs	r2, #33	; 0x21
 8005790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2240      	movs	r2, #64	; 0x40
 8005798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2200      	movs	r2, #0
 80057a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	6a3a      	ldr	r2, [r7, #32]
 80057a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80057ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057b2:	b29a      	uxth	r2, r3
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	4a4d      	ldr	r2, [pc, #308]	; (80058f0 <HAL_I2C_Mem_Write+0x1f0>)
 80057bc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80057be:	88f8      	ldrh	r0, [r7, #6]
 80057c0:	893a      	ldrh	r2, [r7, #8]
 80057c2:	8979      	ldrh	r1, [r7, #10]
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	9301      	str	r3, [sp, #4]
 80057c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ca:	9300      	str	r3, [sp, #0]
 80057cc:	4603      	mov	r3, r0
 80057ce:	68f8      	ldr	r0, [r7, #12]
 80057d0:	f000 faf8 	bl	8005dc4 <I2C_RequestMemoryWrite>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d052      	beq.n	8005880 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e081      	b.n	80058e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057de:	697a      	ldr	r2, [r7, #20]
 80057e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80057e2:	68f8      	ldr	r0, [r7, #12]
 80057e4:	f000 fd86 	bl	80062f4 <I2C_WaitOnTXEFlagUntilTimeout>
 80057e8:	4603      	mov	r3, r0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d00d      	beq.n	800580a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f2:	2b04      	cmp	r3, #4
 80057f4:	d107      	bne.n	8005806 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005804:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	e06b      	b.n	80058e2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580e:	781a      	ldrb	r2, [r3, #0]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581a:	1c5a      	adds	r2, r3, #1
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005824:	3b01      	subs	r3, #1
 8005826:	b29a      	uxth	r2, r3
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005830:	b29b      	uxth	r3, r3
 8005832:	3b01      	subs	r3, #1
 8005834:	b29a      	uxth	r2, r3
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	695b      	ldr	r3, [r3, #20]
 8005840:	f003 0304 	and.w	r3, r3, #4
 8005844:	2b04      	cmp	r3, #4
 8005846:	d11b      	bne.n	8005880 <HAL_I2C_Mem_Write+0x180>
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800584c:	2b00      	cmp	r3, #0
 800584e:	d017      	beq.n	8005880 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005854:	781a      	ldrb	r2, [r3, #0]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005860:	1c5a      	adds	r2, r3, #1
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800586a:	3b01      	subs	r3, #1
 800586c:	b29a      	uxth	r2, r3
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005876:	b29b      	uxth	r3, r3
 8005878:	3b01      	subs	r3, #1
 800587a:	b29a      	uxth	r2, r3
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005884:	2b00      	cmp	r3, #0
 8005886:	d1aa      	bne.n	80057de <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005888:	697a      	ldr	r2, [r7, #20]
 800588a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800588c:	68f8      	ldr	r0, [r7, #12]
 800588e:	f000 fd79 	bl	8006384 <I2C_WaitOnBTFFlagUntilTimeout>
 8005892:	4603      	mov	r3, r0
 8005894:	2b00      	cmp	r3, #0
 8005896:	d00d      	beq.n	80058b4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589c:	2b04      	cmp	r3, #4
 800589e:	d107      	bne.n	80058b0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058ae:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	e016      	b.n	80058e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2220      	movs	r2, #32
 80058c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2200      	movs	r2, #0
 80058d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80058dc:	2300      	movs	r3, #0
 80058de:	e000      	b.n	80058e2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80058e0:	2302      	movs	r3, #2
  }
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3718      	adds	r7, #24
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	bf00      	nop
 80058ec:	00100002 	.word	0x00100002
 80058f0:	ffff0000 	.word	0xffff0000

080058f4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b08c      	sub	sp, #48	; 0x30
 80058f8:	af02      	add	r7, sp, #8
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	4608      	mov	r0, r1
 80058fe:	4611      	mov	r1, r2
 8005900:	461a      	mov	r2, r3
 8005902:	4603      	mov	r3, r0
 8005904:	817b      	strh	r3, [r7, #10]
 8005906:	460b      	mov	r3, r1
 8005908:	813b      	strh	r3, [r7, #8]
 800590a:	4613      	mov	r3, r2
 800590c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800590e:	2300      	movs	r3, #0
 8005910:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005912:	f7ff fa4b 	bl	8004dac <HAL_GetTick>
 8005916:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800591e:	b2db      	uxtb	r3, r3
 8005920:	2b20      	cmp	r3, #32
 8005922:	f040 8244 	bne.w	8005dae <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005928:	9300      	str	r3, [sp, #0]
 800592a:	2319      	movs	r3, #25
 800592c:	2201      	movs	r2, #1
 800592e:	4982      	ldr	r1, [pc, #520]	; (8005b38 <HAL_I2C_Mem_Read+0x244>)
 8005930:	68f8      	ldr	r0, [r7, #12]
 8005932:	f000 fbc5 	bl	80060c0 <I2C_WaitOnFlagUntilTimeout>
 8005936:	4603      	mov	r3, r0
 8005938:	2b00      	cmp	r3, #0
 800593a:	d001      	beq.n	8005940 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800593c:	2302      	movs	r3, #2
 800593e:	e237      	b.n	8005db0 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005946:	2b01      	cmp	r3, #1
 8005948:	d101      	bne.n	800594e <HAL_I2C_Mem_Read+0x5a>
 800594a:	2302      	movs	r3, #2
 800594c:	e230      	b.n	8005db0 <HAL_I2C_Mem_Read+0x4bc>
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2201      	movs	r2, #1
 8005952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 0301 	and.w	r3, r3, #1
 8005960:	2b01      	cmp	r3, #1
 8005962:	d007      	beq.n	8005974 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f042 0201 	orr.w	r2, r2, #1
 8005972:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005982:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2222      	movs	r2, #34	; 0x22
 8005988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2240      	movs	r2, #64	; 0x40
 8005990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2200      	movs	r2, #0
 8005998:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800599e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80059a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059aa:	b29a      	uxth	r2, r3
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	4a62      	ldr	r2, [pc, #392]	; (8005b3c <HAL_I2C_Mem_Read+0x248>)
 80059b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80059b6:	88f8      	ldrh	r0, [r7, #6]
 80059b8:	893a      	ldrh	r2, [r7, #8]
 80059ba:	8979      	ldrh	r1, [r7, #10]
 80059bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059be:	9301      	str	r3, [sp, #4]
 80059c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c2:	9300      	str	r3, [sp, #0]
 80059c4:	4603      	mov	r3, r0
 80059c6:	68f8      	ldr	r0, [r7, #12]
 80059c8:	f000 fa92 	bl	8005ef0 <I2C_RequestMemoryRead>
 80059cc:	4603      	mov	r3, r0
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d001      	beq.n	80059d6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	e1ec      	b.n	8005db0 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d113      	bne.n	8005a06 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059de:	2300      	movs	r3, #0
 80059e0:	61fb      	str	r3, [r7, #28]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	695b      	ldr	r3, [r3, #20]
 80059e8:	61fb      	str	r3, [r7, #28]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	699b      	ldr	r3, [r3, #24]
 80059f0:	61fb      	str	r3, [r7, #28]
 80059f2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a02:	601a      	str	r2, [r3, #0]
 8005a04:	e1c0      	b.n	8005d88 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d11e      	bne.n	8005a4c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a1c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005a1e:	b672      	cpsid	i
}
 8005a20:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a22:	2300      	movs	r3, #0
 8005a24:	61bb      	str	r3, [r7, #24]
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	695b      	ldr	r3, [r3, #20]
 8005a2c:	61bb      	str	r3, [r7, #24]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	699b      	ldr	r3, [r3, #24]
 8005a34:	61bb      	str	r3, [r7, #24]
 8005a36:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a46:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005a48:	b662      	cpsie	i
}
 8005a4a:	e035      	b.n	8005ab8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a50:	2b02      	cmp	r3, #2
 8005a52:	d11e      	bne.n	8005a92 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a62:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005a64:	b672      	cpsid	i
}
 8005a66:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a68:	2300      	movs	r3, #0
 8005a6a:	617b      	str	r3, [r7, #20]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	695b      	ldr	r3, [r3, #20]
 8005a72:	617b      	str	r3, [r7, #20]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	699b      	ldr	r3, [r3, #24]
 8005a7a:	617b      	str	r3, [r7, #20]
 8005a7c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a8c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005a8e:	b662      	cpsie	i
}
 8005a90:	e012      	b.n	8005ab8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005aa0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	613b      	str	r3, [r7, #16]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	695b      	ldr	r3, [r3, #20]
 8005aac:	613b      	str	r3, [r7, #16]
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	699b      	ldr	r3, [r3, #24]
 8005ab4:	613b      	str	r3, [r7, #16]
 8005ab6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8005ab8:	e166      	b.n	8005d88 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005abe:	2b03      	cmp	r3, #3
 8005ac0:	f200 811f 	bhi.w	8005d02 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d123      	bne.n	8005b14 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005acc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ace:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005ad0:	68f8      	ldr	r0, [r7, #12]
 8005ad2:	f000 fc9f 	bl	8006414 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d001      	beq.n	8005ae0 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	e167      	b.n	8005db0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	691a      	ldr	r2, [r3, #16]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aea:	b2d2      	uxtb	r2, r2
 8005aec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af2:	1c5a      	adds	r2, r3, #1
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005afc:	3b01      	subs	r3, #1
 8005afe:	b29a      	uxth	r2, r3
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	3b01      	subs	r3, #1
 8005b0c:	b29a      	uxth	r2, r3
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005b12:	e139      	b.n	8005d88 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b18:	2b02      	cmp	r3, #2
 8005b1a:	d152      	bne.n	8005bc2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1e:	9300      	str	r3, [sp, #0]
 8005b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b22:	2200      	movs	r2, #0
 8005b24:	4906      	ldr	r1, [pc, #24]	; (8005b40 <HAL_I2C_Mem_Read+0x24c>)
 8005b26:	68f8      	ldr	r0, [r7, #12]
 8005b28:	f000 faca 	bl	80060c0 <I2C_WaitOnFlagUntilTimeout>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d008      	beq.n	8005b44 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	e13c      	b.n	8005db0 <HAL_I2C_Mem_Read+0x4bc>
 8005b36:	bf00      	nop
 8005b38:	00100002 	.word	0x00100002
 8005b3c:	ffff0000 	.word	0xffff0000
 8005b40:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8005b44:	b672      	cpsid	i
}
 8005b46:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	691a      	ldr	r2, [r3, #16]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b62:	b2d2      	uxtb	r2, r2
 8005b64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6a:	1c5a      	adds	r2, r3, #1
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b74:	3b01      	subs	r3, #1
 8005b76:	b29a      	uxth	r2, r3
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	3b01      	subs	r3, #1
 8005b84:	b29a      	uxth	r2, r3
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005b8a:	b662      	cpsie	i
}
 8005b8c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	691a      	ldr	r2, [r3, #16]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b98:	b2d2      	uxtb	r2, r2
 8005b9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba0:	1c5a      	adds	r2, r3, #1
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005baa:	3b01      	subs	r3, #1
 8005bac:	b29a      	uxth	r2, r3
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	3b01      	subs	r3, #1
 8005bba:	b29a      	uxth	r2, r3
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005bc0:	e0e2      	b.n	8005d88 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc4:	9300      	str	r3, [sp, #0]
 8005bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bc8:	2200      	movs	r2, #0
 8005bca:	497b      	ldr	r1, [pc, #492]	; (8005db8 <HAL_I2C_Mem_Read+0x4c4>)
 8005bcc:	68f8      	ldr	r0, [r7, #12]
 8005bce:	f000 fa77 	bl	80060c0 <I2C_WaitOnFlagUntilTimeout>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d001      	beq.n	8005bdc <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e0e9      	b.n	8005db0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005bec:	b672      	cpsid	i
}
 8005bee:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	691a      	ldr	r2, [r3, #16]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfa:	b2d2      	uxtb	r2, r2
 8005bfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c02:	1c5a      	adds	r2, r3, #1
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c0c:	3b01      	subs	r3, #1
 8005c0e:	b29a      	uxth	r2, r3
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	3b01      	subs	r3, #1
 8005c1c:	b29a      	uxth	r2, r3
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005c22:	4b66      	ldr	r3, [pc, #408]	; (8005dbc <HAL_I2C_Mem_Read+0x4c8>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	08db      	lsrs	r3, r3, #3
 8005c28:	4a65      	ldr	r2, [pc, #404]	; (8005dc0 <HAL_I2C_Mem_Read+0x4cc>)
 8005c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c2e:	0a1a      	lsrs	r2, r3, #8
 8005c30:	4613      	mov	r3, r2
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	4413      	add	r3, r2
 8005c36:	00da      	lsls	r2, r3, #3
 8005c38:	1ad3      	subs	r3, r2, r3
 8005c3a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8005c3c:	6a3b      	ldr	r3, [r7, #32]
 8005c3e:	3b01      	subs	r3, #1
 8005c40:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8005c42:	6a3b      	ldr	r3, [r7, #32]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d118      	bne.n	8005c7a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2220      	movs	r2, #32
 8005c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c62:	f043 0220 	orr.w	r2, r3, #32
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8005c6a:	b662      	cpsie	i
}
 8005c6c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2200      	movs	r2, #0
 8005c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	e09a      	b.n	8005db0 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	695b      	ldr	r3, [r3, #20]
 8005c80:	f003 0304 	and.w	r3, r3, #4
 8005c84:	2b04      	cmp	r3, #4
 8005c86:	d1d9      	bne.n	8005c3c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	691a      	ldr	r2, [r3, #16]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca2:	b2d2      	uxtb	r2, r2
 8005ca4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005caa:	1c5a      	adds	r2, r3, #1
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cb4:	3b01      	subs	r3, #1
 8005cb6:	b29a      	uxth	r2, r3
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	3b01      	subs	r3, #1
 8005cc4:	b29a      	uxth	r2, r3
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005cca:	b662      	cpsie	i
}
 8005ccc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	691a      	ldr	r2, [r3, #16]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd8:	b2d2      	uxtb	r2, r2
 8005cda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce0:	1c5a      	adds	r2, r3, #1
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cea:	3b01      	subs	r3, #1
 8005cec:	b29a      	uxth	r2, r3
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	3b01      	subs	r3, #1
 8005cfa:	b29a      	uxth	r2, r3
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005d00:	e042      	b.n	8005d88 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d04:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005d06:	68f8      	ldr	r0, [r7, #12]
 8005d08:	f000 fb84 	bl	8006414 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d001      	beq.n	8005d16 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	e04c      	b.n	8005db0 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	691a      	ldr	r2, [r3, #16]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d20:	b2d2      	uxtb	r2, r2
 8005d22:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d28:	1c5a      	adds	r2, r3, #1
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d32:	3b01      	subs	r3, #1
 8005d34:	b29a      	uxth	r2, r3
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	3b01      	subs	r3, #1
 8005d42:	b29a      	uxth	r2, r3
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	695b      	ldr	r3, [r3, #20]
 8005d4e:	f003 0304 	and.w	r3, r3, #4
 8005d52:	2b04      	cmp	r3, #4
 8005d54:	d118      	bne.n	8005d88 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	691a      	ldr	r2, [r3, #16]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d60:	b2d2      	uxtb	r2, r2
 8005d62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d68:	1c5a      	adds	r2, r3, #1
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d72:	3b01      	subs	r3, #1
 8005d74:	b29a      	uxth	r2, r3
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	3b01      	subs	r3, #1
 8005d82:	b29a      	uxth	r2, r3
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	f47f ae94 	bne.w	8005aba <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2220      	movs	r2, #32
 8005d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2200      	movs	r2, #0
 8005da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005daa:	2300      	movs	r3, #0
 8005dac:	e000      	b.n	8005db0 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8005dae:	2302      	movs	r3, #2
  }
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3728      	adds	r7, #40	; 0x28
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}
 8005db8:	00010004 	.word	0x00010004
 8005dbc:	200000ac 	.word	0x200000ac
 8005dc0:	14f8b589 	.word	0x14f8b589

08005dc4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b088      	sub	sp, #32
 8005dc8:	af02      	add	r7, sp, #8
 8005dca:	60f8      	str	r0, [r7, #12]
 8005dcc:	4608      	mov	r0, r1
 8005dce:	4611      	mov	r1, r2
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	817b      	strh	r3, [r7, #10]
 8005dd6:	460b      	mov	r3, r1
 8005dd8:	813b      	strh	r3, [r7, #8]
 8005dda:	4613      	mov	r3, r2
 8005ddc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005dec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df0:	9300      	str	r3, [sp, #0]
 8005df2:	6a3b      	ldr	r3, [r7, #32]
 8005df4:	2200      	movs	r2, #0
 8005df6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005dfa:	68f8      	ldr	r0, [r7, #12]
 8005dfc:	f000 f960 	bl	80060c0 <I2C_WaitOnFlagUntilTimeout>
 8005e00:	4603      	mov	r3, r0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d00d      	beq.n	8005e22 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e14:	d103      	bne.n	8005e1e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e1c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005e1e:	2303      	movs	r3, #3
 8005e20:	e05f      	b.n	8005ee2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005e22:	897b      	ldrh	r3, [r7, #10]
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	461a      	mov	r2, r3
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005e30:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e34:	6a3a      	ldr	r2, [r7, #32]
 8005e36:	492d      	ldr	r1, [pc, #180]	; (8005eec <I2C_RequestMemoryWrite+0x128>)
 8005e38:	68f8      	ldr	r0, [r7, #12]
 8005e3a:	f000 f9bb 	bl	80061b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d001      	beq.n	8005e48 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	e04c      	b.n	8005ee2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e48:	2300      	movs	r3, #0
 8005e4a:	617b      	str	r3, [r7, #20]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	695b      	ldr	r3, [r3, #20]
 8005e52:	617b      	str	r3, [r7, #20]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	699b      	ldr	r3, [r3, #24]
 8005e5a:	617b      	str	r3, [r7, #20]
 8005e5c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e60:	6a39      	ldr	r1, [r7, #32]
 8005e62:	68f8      	ldr	r0, [r7, #12]
 8005e64:	f000 fa46 	bl	80062f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d00d      	beq.n	8005e8a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e72:	2b04      	cmp	r3, #4
 8005e74:	d107      	bne.n	8005e86 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e84:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	e02b      	b.n	8005ee2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005e8a:	88fb      	ldrh	r3, [r7, #6]
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d105      	bne.n	8005e9c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e90:	893b      	ldrh	r3, [r7, #8]
 8005e92:	b2da      	uxtb	r2, r3
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	611a      	str	r2, [r3, #16]
 8005e9a:	e021      	b.n	8005ee0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005e9c:	893b      	ldrh	r3, [r7, #8]
 8005e9e:	0a1b      	lsrs	r3, r3, #8
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	b2da      	uxtb	r2, r3
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005eaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eac:	6a39      	ldr	r1, [r7, #32]
 8005eae:	68f8      	ldr	r0, [r7, #12]
 8005eb0:	f000 fa20 	bl	80062f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d00d      	beq.n	8005ed6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ebe:	2b04      	cmp	r3, #4
 8005ec0:	d107      	bne.n	8005ed2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ed0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e005      	b.n	8005ee2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ed6:	893b      	ldrh	r3, [r7, #8]
 8005ed8:	b2da      	uxtb	r2, r3
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005ee0:	2300      	movs	r3, #0
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3718      	adds	r7, #24
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop
 8005eec:	00010002 	.word	0x00010002

08005ef0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b088      	sub	sp, #32
 8005ef4:	af02      	add	r7, sp, #8
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	4608      	mov	r0, r1
 8005efa:	4611      	mov	r1, r2
 8005efc:	461a      	mov	r2, r3
 8005efe:	4603      	mov	r3, r0
 8005f00:	817b      	strh	r3, [r7, #10]
 8005f02:	460b      	mov	r3, r1
 8005f04:	813b      	strh	r3, [r7, #8]
 8005f06:	4613      	mov	r3, r2
 8005f08:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005f18:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f28:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2c:	9300      	str	r3, [sp, #0]
 8005f2e:	6a3b      	ldr	r3, [r7, #32]
 8005f30:	2200      	movs	r2, #0
 8005f32:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005f36:	68f8      	ldr	r0, [r7, #12]
 8005f38:	f000 f8c2 	bl	80060c0 <I2C_WaitOnFlagUntilTimeout>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d00d      	beq.n	8005f5e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f50:	d103      	bne.n	8005f5a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f58:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005f5a:	2303      	movs	r3, #3
 8005f5c:	e0aa      	b.n	80060b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005f5e:	897b      	ldrh	r3, [r7, #10]
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	461a      	mov	r2, r3
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005f6c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f70:	6a3a      	ldr	r2, [r7, #32]
 8005f72:	4952      	ldr	r1, [pc, #328]	; (80060bc <I2C_RequestMemoryRead+0x1cc>)
 8005f74:	68f8      	ldr	r0, [r7, #12]
 8005f76:	f000 f91d 	bl	80061b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d001      	beq.n	8005f84 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	e097      	b.n	80060b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f84:	2300      	movs	r3, #0
 8005f86:	617b      	str	r3, [r7, #20]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	695b      	ldr	r3, [r3, #20]
 8005f8e:	617b      	str	r3, [r7, #20]
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	699b      	ldr	r3, [r3, #24]
 8005f96:	617b      	str	r3, [r7, #20]
 8005f98:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f9c:	6a39      	ldr	r1, [r7, #32]
 8005f9e:	68f8      	ldr	r0, [r7, #12]
 8005fa0:	f000 f9a8 	bl	80062f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d00d      	beq.n	8005fc6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fae:	2b04      	cmp	r3, #4
 8005fb0:	d107      	bne.n	8005fc2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fc0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e076      	b.n	80060b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005fc6:	88fb      	ldrh	r3, [r7, #6]
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d105      	bne.n	8005fd8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005fcc:	893b      	ldrh	r3, [r7, #8]
 8005fce:	b2da      	uxtb	r2, r3
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	611a      	str	r2, [r3, #16]
 8005fd6:	e021      	b.n	800601c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005fd8:	893b      	ldrh	r3, [r7, #8]
 8005fda:	0a1b      	lsrs	r3, r3, #8
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	b2da      	uxtb	r2, r3
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fe8:	6a39      	ldr	r1, [r7, #32]
 8005fea:	68f8      	ldr	r0, [r7, #12]
 8005fec:	f000 f982 	bl	80062f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d00d      	beq.n	8006012 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ffa:	2b04      	cmp	r3, #4
 8005ffc:	d107      	bne.n	800600e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800600c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800600e:	2301      	movs	r3, #1
 8006010:	e050      	b.n	80060b4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006012:	893b      	ldrh	r3, [r7, #8]
 8006014:	b2da      	uxtb	r2, r3
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800601c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800601e:	6a39      	ldr	r1, [r7, #32]
 8006020:	68f8      	ldr	r0, [r7, #12]
 8006022:	f000 f967 	bl	80062f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006026:	4603      	mov	r3, r0
 8006028:	2b00      	cmp	r3, #0
 800602a:	d00d      	beq.n	8006048 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006030:	2b04      	cmp	r3, #4
 8006032:	d107      	bne.n	8006044 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006042:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	e035      	b.n	80060b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006056:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605a:	9300      	str	r3, [sp, #0]
 800605c:	6a3b      	ldr	r3, [r7, #32]
 800605e:	2200      	movs	r2, #0
 8006060:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006064:	68f8      	ldr	r0, [r7, #12]
 8006066:	f000 f82b 	bl	80060c0 <I2C_WaitOnFlagUntilTimeout>
 800606a:	4603      	mov	r3, r0
 800606c:	2b00      	cmp	r3, #0
 800606e:	d00d      	beq.n	800608c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800607a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800607e:	d103      	bne.n	8006088 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006086:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006088:	2303      	movs	r3, #3
 800608a:	e013      	b.n	80060b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800608c:	897b      	ldrh	r3, [r7, #10]
 800608e:	b2db      	uxtb	r3, r3
 8006090:	f043 0301 	orr.w	r3, r3, #1
 8006094:	b2da      	uxtb	r2, r3
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800609c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609e:	6a3a      	ldr	r2, [r7, #32]
 80060a0:	4906      	ldr	r1, [pc, #24]	; (80060bc <I2C_RequestMemoryRead+0x1cc>)
 80060a2:	68f8      	ldr	r0, [r7, #12]
 80060a4:	f000 f886 	bl	80061b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80060a8:	4603      	mov	r3, r0
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d001      	beq.n	80060b2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	e000      	b.n	80060b4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80060b2:	2300      	movs	r3, #0
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3718      	adds	r7, #24
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}
 80060bc:	00010002 	.word	0x00010002

080060c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b084      	sub	sp, #16
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	603b      	str	r3, [r7, #0]
 80060cc:	4613      	mov	r3, r2
 80060ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80060d0:	e048      	b.n	8006164 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060d8:	d044      	beq.n	8006164 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060da:	f7fe fe67 	bl	8004dac <HAL_GetTick>
 80060de:	4602      	mov	r2, r0
 80060e0:	69bb      	ldr	r3, [r7, #24]
 80060e2:	1ad3      	subs	r3, r2, r3
 80060e4:	683a      	ldr	r2, [r7, #0]
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d302      	bcc.n	80060f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d139      	bne.n	8006164 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	0c1b      	lsrs	r3, r3, #16
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d10d      	bne.n	8006116 <I2C_WaitOnFlagUntilTimeout+0x56>
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	695b      	ldr	r3, [r3, #20]
 8006100:	43da      	mvns	r2, r3
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	4013      	ands	r3, r2
 8006106:	b29b      	uxth	r3, r3
 8006108:	2b00      	cmp	r3, #0
 800610a:	bf0c      	ite	eq
 800610c:	2301      	moveq	r3, #1
 800610e:	2300      	movne	r3, #0
 8006110:	b2db      	uxtb	r3, r3
 8006112:	461a      	mov	r2, r3
 8006114:	e00c      	b.n	8006130 <I2C_WaitOnFlagUntilTimeout+0x70>
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	699b      	ldr	r3, [r3, #24]
 800611c:	43da      	mvns	r2, r3
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	4013      	ands	r3, r2
 8006122:	b29b      	uxth	r3, r3
 8006124:	2b00      	cmp	r3, #0
 8006126:	bf0c      	ite	eq
 8006128:	2301      	moveq	r3, #1
 800612a:	2300      	movne	r3, #0
 800612c:	b2db      	uxtb	r3, r3
 800612e:	461a      	mov	r2, r3
 8006130:	79fb      	ldrb	r3, [r7, #7]
 8006132:	429a      	cmp	r2, r3
 8006134:	d116      	bne.n	8006164 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2200      	movs	r2, #0
 800613a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2220      	movs	r2, #32
 8006140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2200      	movs	r2, #0
 8006148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006150:	f043 0220 	orr.w	r2, r3, #32
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2200      	movs	r2, #0
 800615c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006160:	2301      	movs	r3, #1
 8006162:	e023      	b.n	80061ac <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	0c1b      	lsrs	r3, r3, #16
 8006168:	b2db      	uxtb	r3, r3
 800616a:	2b01      	cmp	r3, #1
 800616c:	d10d      	bne.n	800618a <I2C_WaitOnFlagUntilTimeout+0xca>
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	695b      	ldr	r3, [r3, #20]
 8006174:	43da      	mvns	r2, r3
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	4013      	ands	r3, r2
 800617a:	b29b      	uxth	r3, r3
 800617c:	2b00      	cmp	r3, #0
 800617e:	bf0c      	ite	eq
 8006180:	2301      	moveq	r3, #1
 8006182:	2300      	movne	r3, #0
 8006184:	b2db      	uxtb	r3, r3
 8006186:	461a      	mov	r2, r3
 8006188:	e00c      	b.n	80061a4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	699b      	ldr	r3, [r3, #24]
 8006190:	43da      	mvns	r2, r3
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	4013      	ands	r3, r2
 8006196:	b29b      	uxth	r3, r3
 8006198:	2b00      	cmp	r3, #0
 800619a:	bf0c      	ite	eq
 800619c:	2301      	moveq	r3, #1
 800619e:	2300      	movne	r3, #0
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	461a      	mov	r2, r3
 80061a4:	79fb      	ldrb	r3, [r7, #7]
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d093      	beq.n	80060d2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80061aa:	2300      	movs	r3, #0
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3710      	adds	r7, #16
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b084      	sub	sp, #16
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	60b9      	str	r1, [r7, #8]
 80061be:	607a      	str	r2, [r7, #4]
 80061c0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80061c2:	e071      	b.n	80062a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	695b      	ldr	r3, [r3, #20]
 80061ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061d2:	d123      	bne.n	800621c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061e2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80061ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2200      	movs	r2, #0
 80061f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2220      	movs	r2, #32
 80061f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2200      	movs	r2, #0
 8006200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006208:	f043 0204 	orr.w	r2, r3, #4
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2200      	movs	r2, #0
 8006214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006218:	2301      	movs	r3, #1
 800621a:	e067      	b.n	80062ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006222:	d041      	beq.n	80062a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006224:	f7fe fdc2 	bl	8004dac <HAL_GetTick>
 8006228:	4602      	mov	r2, r0
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	1ad3      	subs	r3, r2, r3
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	429a      	cmp	r2, r3
 8006232:	d302      	bcc.n	800623a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d136      	bne.n	80062a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	0c1b      	lsrs	r3, r3, #16
 800623e:	b2db      	uxtb	r3, r3
 8006240:	2b01      	cmp	r3, #1
 8006242:	d10c      	bne.n	800625e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	695b      	ldr	r3, [r3, #20]
 800624a:	43da      	mvns	r2, r3
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	4013      	ands	r3, r2
 8006250:	b29b      	uxth	r3, r3
 8006252:	2b00      	cmp	r3, #0
 8006254:	bf14      	ite	ne
 8006256:	2301      	movne	r3, #1
 8006258:	2300      	moveq	r3, #0
 800625a:	b2db      	uxtb	r3, r3
 800625c:	e00b      	b.n	8006276 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	699b      	ldr	r3, [r3, #24]
 8006264:	43da      	mvns	r2, r3
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	4013      	ands	r3, r2
 800626a:	b29b      	uxth	r3, r3
 800626c:	2b00      	cmp	r3, #0
 800626e:	bf14      	ite	ne
 8006270:	2301      	movne	r3, #1
 8006272:	2300      	moveq	r3, #0
 8006274:	b2db      	uxtb	r3, r3
 8006276:	2b00      	cmp	r3, #0
 8006278:	d016      	beq.n	80062a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2200      	movs	r2, #0
 800627e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2220      	movs	r2, #32
 8006284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2200      	movs	r2, #0
 800628c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006294:	f043 0220 	orr.w	r2, r3, #32
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2200      	movs	r2, #0
 80062a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80062a4:	2301      	movs	r3, #1
 80062a6:	e021      	b.n	80062ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	0c1b      	lsrs	r3, r3, #16
 80062ac:	b2db      	uxtb	r3, r3
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d10c      	bne.n	80062cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	695b      	ldr	r3, [r3, #20]
 80062b8:	43da      	mvns	r2, r3
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	4013      	ands	r3, r2
 80062be:	b29b      	uxth	r3, r3
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	bf14      	ite	ne
 80062c4:	2301      	movne	r3, #1
 80062c6:	2300      	moveq	r3, #0
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	e00b      	b.n	80062e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	699b      	ldr	r3, [r3, #24]
 80062d2:	43da      	mvns	r2, r3
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	4013      	ands	r3, r2
 80062d8:	b29b      	uxth	r3, r3
 80062da:	2b00      	cmp	r3, #0
 80062dc:	bf14      	ite	ne
 80062de:	2301      	movne	r3, #1
 80062e0:	2300      	moveq	r3, #0
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	f47f af6d 	bne.w	80061c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80062ea:	2300      	movs	r3, #0
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3710      	adds	r7, #16
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}

080062f4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b084      	sub	sp, #16
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	60f8      	str	r0, [r7, #12]
 80062fc:	60b9      	str	r1, [r7, #8]
 80062fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006300:	e034      	b.n	800636c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006302:	68f8      	ldr	r0, [r7, #12]
 8006304:	f000 f8e3 	bl	80064ce <I2C_IsAcknowledgeFailed>
 8006308:	4603      	mov	r3, r0
 800630a:	2b00      	cmp	r3, #0
 800630c:	d001      	beq.n	8006312 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	e034      	b.n	800637c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006318:	d028      	beq.n	800636c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800631a:	f7fe fd47 	bl	8004dac <HAL_GetTick>
 800631e:	4602      	mov	r2, r0
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	1ad3      	subs	r3, r2, r3
 8006324:	68ba      	ldr	r2, [r7, #8]
 8006326:	429a      	cmp	r2, r3
 8006328:	d302      	bcc.n	8006330 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d11d      	bne.n	800636c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	695b      	ldr	r3, [r3, #20]
 8006336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800633a:	2b80      	cmp	r3, #128	; 0x80
 800633c:	d016      	beq.n	800636c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2200      	movs	r2, #0
 8006342:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2220      	movs	r2, #32
 8006348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2200      	movs	r2, #0
 8006350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006358:	f043 0220 	orr.w	r2, r3, #32
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2200      	movs	r2, #0
 8006364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	e007      	b.n	800637c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	695b      	ldr	r3, [r3, #20]
 8006372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006376:	2b80      	cmp	r3, #128	; 0x80
 8006378:	d1c3      	bne.n	8006302 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800637a:	2300      	movs	r3, #0
}
 800637c:	4618      	mov	r0, r3
 800637e:	3710      	adds	r7, #16
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b084      	sub	sp, #16
 8006388:	af00      	add	r7, sp, #0
 800638a:	60f8      	str	r0, [r7, #12]
 800638c:	60b9      	str	r1, [r7, #8]
 800638e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006390:	e034      	b.n	80063fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006392:	68f8      	ldr	r0, [r7, #12]
 8006394:	f000 f89b 	bl	80064ce <I2C_IsAcknowledgeFailed>
 8006398:	4603      	mov	r3, r0
 800639a:	2b00      	cmp	r3, #0
 800639c:	d001      	beq.n	80063a2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	e034      	b.n	800640c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063a8:	d028      	beq.n	80063fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063aa:	f7fe fcff 	bl	8004dac <HAL_GetTick>
 80063ae:	4602      	mov	r2, r0
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	1ad3      	subs	r3, r2, r3
 80063b4:	68ba      	ldr	r2, [r7, #8]
 80063b6:	429a      	cmp	r2, r3
 80063b8:	d302      	bcc.n	80063c0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d11d      	bne.n	80063fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	695b      	ldr	r3, [r3, #20]
 80063c6:	f003 0304 	and.w	r3, r3, #4
 80063ca:	2b04      	cmp	r3, #4
 80063cc:	d016      	beq.n	80063fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2200      	movs	r2, #0
 80063d2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2220      	movs	r2, #32
 80063d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2200      	movs	r2, #0
 80063e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e8:	f043 0220 	orr.w	r2, r3, #32
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	e007      	b.n	800640c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	695b      	ldr	r3, [r3, #20]
 8006402:	f003 0304 	and.w	r3, r3, #4
 8006406:	2b04      	cmp	r3, #4
 8006408:	d1c3      	bne.n	8006392 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800640a:	2300      	movs	r3, #0
}
 800640c:	4618      	mov	r0, r3
 800640e:	3710      	adds	r7, #16
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}

08006414 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b084      	sub	sp, #16
 8006418:	af00      	add	r7, sp, #0
 800641a:	60f8      	str	r0, [r7, #12]
 800641c:	60b9      	str	r1, [r7, #8]
 800641e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006420:	e049      	b.n	80064b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	695b      	ldr	r3, [r3, #20]
 8006428:	f003 0310 	and.w	r3, r3, #16
 800642c:	2b10      	cmp	r3, #16
 800642e:	d119      	bne.n	8006464 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f06f 0210 	mvn.w	r2, #16
 8006438:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2200      	movs	r2, #0
 800643e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2220      	movs	r2, #32
 8006444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2200      	movs	r2, #0
 800644c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2200      	movs	r2, #0
 800645c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	e030      	b.n	80064c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006464:	f7fe fca2 	bl	8004dac <HAL_GetTick>
 8006468:	4602      	mov	r2, r0
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	1ad3      	subs	r3, r2, r3
 800646e:	68ba      	ldr	r2, [r7, #8]
 8006470:	429a      	cmp	r2, r3
 8006472:	d302      	bcc.n	800647a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d11d      	bne.n	80064b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	695b      	ldr	r3, [r3, #20]
 8006480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006484:	2b40      	cmp	r3, #64	; 0x40
 8006486:	d016      	beq.n	80064b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2200      	movs	r2, #0
 800648c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2220      	movs	r2, #32
 8006492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2200      	movs	r2, #0
 800649a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a2:	f043 0220 	orr.w	r2, r3, #32
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2200      	movs	r2, #0
 80064ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	e007      	b.n	80064c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	695b      	ldr	r3, [r3, #20]
 80064bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064c0:	2b40      	cmp	r3, #64	; 0x40
 80064c2:	d1ae      	bne.n	8006422 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80064c4:	2300      	movs	r3, #0
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3710      	adds	r7, #16
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}

080064ce <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80064ce:	b480      	push	{r7}
 80064d0:	b083      	sub	sp, #12
 80064d2:	af00      	add	r7, sp, #0
 80064d4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	695b      	ldr	r3, [r3, #20]
 80064dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064e4:	d11b      	bne.n	800651e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80064ee:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2200      	movs	r2, #0
 80064f4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2220      	movs	r2, #32
 80064fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2200      	movs	r2, #0
 8006502:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800650a:	f043 0204 	orr.w	r2, r3, #4
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	e000      	b.n	8006520 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800651e:	2300      	movs	r3, #0
}
 8006520:	4618      	mov	r0, r3
 8006522:	370c      	adds	r7, #12
 8006524:	46bd      	mov	sp, r7
 8006526:	bc80      	pop	{r7}
 8006528:	4770      	bx	lr
	...

0800652c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b086      	sub	sp, #24
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d101      	bne.n	800653e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800653a:	2301      	movs	r3, #1
 800653c:	e272      	b.n	8006a24 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f003 0301 	and.w	r3, r3, #1
 8006546:	2b00      	cmp	r3, #0
 8006548:	f000 8087 	beq.w	800665a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800654c:	4b92      	ldr	r3, [pc, #584]	; (8006798 <HAL_RCC_OscConfig+0x26c>)
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	f003 030c 	and.w	r3, r3, #12
 8006554:	2b04      	cmp	r3, #4
 8006556:	d00c      	beq.n	8006572 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006558:	4b8f      	ldr	r3, [pc, #572]	; (8006798 <HAL_RCC_OscConfig+0x26c>)
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	f003 030c 	and.w	r3, r3, #12
 8006560:	2b08      	cmp	r3, #8
 8006562:	d112      	bne.n	800658a <HAL_RCC_OscConfig+0x5e>
 8006564:	4b8c      	ldr	r3, [pc, #560]	; (8006798 <HAL_RCC_OscConfig+0x26c>)
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800656c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006570:	d10b      	bne.n	800658a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006572:	4b89      	ldr	r3, [pc, #548]	; (8006798 <HAL_RCC_OscConfig+0x26c>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800657a:	2b00      	cmp	r3, #0
 800657c:	d06c      	beq.n	8006658 <HAL_RCC_OscConfig+0x12c>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d168      	bne.n	8006658 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006586:	2301      	movs	r3, #1
 8006588:	e24c      	b.n	8006a24 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006592:	d106      	bne.n	80065a2 <HAL_RCC_OscConfig+0x76>
 8006594:	4b80      	ldr	r3, [pc, #512]	; (8006798 <HAL_RCC_OscConfig+0x26c>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a7f      	ldr	r2, [pc, #508]	; (8006798 <HAL_RCC_OscConfig+0x26c>)
 800659a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800659e:	6013      	str	r3, [r2, #0]
 80065a0:	e02e      	b.n	8006600 <HAL_RCC_OscConfig+0xd4>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d10c      	bne.n	80065c4 <HAL_RCC_OscConfig+0x98>
 80065aa:	4b7b      	ldr	r3, [pc, #492]	; (8006798 <HAL_RCC_OscConfig+0x26c>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a7a      	ldr	r2, [pc, #488]	; (8006798 <HAL_RCC_OscConfig+0x26c>)
 80065b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065b4:	6013      	str	r3, [r2, #0]
 80065b6:	4b78      	ldr	r3, [pc, #480]	; (8006798 <HAL_RCC_OscConfig+0x26c>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a77      	ldr	r2, [pc, #476]	; (8006798 <HAL_RCC_OscConfig+0x26c>)
 80065bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80065c0:	6013      	str	r3, [r2, #0]
 80065c2:	e01d      	b.n	8006600 <HAL_RCC_OscConfig+0xd4>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80065cc:	d10c      	bne.n	80065e8 <HAL_RCC_OscConfig+0xbc>
 80065ce:	4b72      	ldr	r3, [pc, #456]	; (8006798 <HAL_RCC_OscConfig+0x26c>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a71      	ldr	r2, [pc, #452]	; (8006798 <HAL_RCC_OscConfig+0x26c>)
 80065d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80065d8:	6013      	str	r3, [r2, #0]
 80065da:	4b6f      	ldr	r3, [pc, #444]	; (8006798 <HAL_RCC_OscConfig+0x26c>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a6e      	ldr	r2, [pc, #440]	; (8006798 <HAL_RCC_OscConfig+0x26c>)
 80065e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065e4:	6013      	str	r3, [r2, #0]
 80065e6:	e00b      	b.n	8006600 <HAL_RCC_OscConfig+0xd4>
 80065e8:	4b6b      	ldr	r3, [pc, #428]	; (8006798 <HAL_RCC_OscConfig+0x26c>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a6a      	ldr	r2, [pc, #424]	; (8006798 <HAL_RCC_OscConfig+0x26c>)
 80065ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065f2:	6013      	str	r3, [r2, #0]
 80065f4:	4b68      	ldr	r3, [pc, #416]	; (8006798 <HAL_RCC_OscConfig+0x26c>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a67      	ldr	r2, [pc, #412]	; (8006798 <HAL_RCC_OscConfig+0x26c>)
 80065fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80065fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d013      	beq.n	8006630 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006608:	f7fe fbd0 	bl	8004dac <HAL_GetTick>
 800660c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800660e:	e008      	b.n	8006622 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006610:	f7fe fbcc 	bl	8004dac <HAL_GetTick>
 8006614:	4602      	mov	r2, r0
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	1ad3      	subs	r3, r2, r3
 800661a:	2b64      	cmp	r3, #100	; 0x64
 800661c:	d901      	bls.n	8006622 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800661e:	2303      	movs	r3, #3
 8006620:	e200      	b.n	8006a24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006622:	4b5d      	ldr	r3, [pc, #372]	; (8006798 <HAL_RCC_OscConfig+0x26c>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800662a:	2b00      	cmp	r3, #0
 800662c:	d0f0      	beq.n	8006610 <HAL_RCC_OscConfig+0xe4>
 800662e:	e014      	b.n	800665a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006630:	f7fe fbbc 	bl	8004dac <HAL_GetTick>
 8006634:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006636:	e008      	b.n	800664a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006638:	f7fe fbb8 	bl	8004dac <HAL_GetTick>
 800663c:	4602      	mov	r2, r0
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	1ad3      	subs	r3, r2, r3
 8006642:	2b64      	cmp	r3, #100	; 0x64
 8006644:	d901      	bls.n	800664a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006646:	2303      	movs	r3, #3
 8006648:	e1ec      	b.n	8006a24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800664a:	4b53      	ldr	r3, [pc, #332]	; (8006798 <HAL_RCC_OscConfig+0x26c>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006652:	2b00      	cmp	r3, #0
 8006654:	d1f0      	bne.n	8006638 <HAL_RCC_OscConfig+0x10c>
 8006656:	e000      	b.n	800665a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006658:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f003 0302 	and.w	r3, r3, #2
 8006662:	2b00      	cmp	r3, #0
 8006664:	d063      	beq.n	800672e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006666:	4b4c      	ldr	r3, [pc, #304]	; (8006798 <HAL_RCC_OscConfig+0x26c>)
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	f003 030c 	and.w	r3, r3, #12
 800666e:	2b00      	cmp	r3, #0
 8006670:	d00b      	beq.n	800668a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006672:	4b49      	ldr	r3, [pc, #292]	; (8006798 <HAL_RCC_OscConfig+0x26c>)
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	f003 030c 	and.w	r3, r3, #12
 800667a:	2b08      	cmp	r3, #8
 800667c:	d11c      	bne.n	80066b8 <HAL_RCC_OscConfig+0x18c>
 800667e:	4b46      	ldr	r3, [pc, #280]	; (8006798 <HAL_RCC_OscConfig+0x26c>)
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006686:	2b00      	cmp	r3, #0
 8006688:	d116      	bne.n	80066b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800668a:	4b43      	ldr	r3, [pc, #268]	; (8006798 <HAL_RCC_OscConfig+0x26c>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f003 0302 	and.w	r3, r3, #2
 8006692:	2b00      	cmp	r3, #0
 8006694:	d005      	beq.n	80066a2 <HAL_RCC_OscConfig+0x176>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	691b      	ldr	r3, [r3, #16]
 800669a:	2b01      	cmp	r3, #1
 800669c:	d001      	beq.n	80066a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	e1c0      	b.n	8006a24 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066a2:	4b3d      	ldr	r3, [pc, #244]	; (8006798 <HAL_RCC_OscConfig+0x26c>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	695b      	ldr	r3, [r3, #20]
 80066ae:	00db      	lsls	r3, r3, #3
 80066b0:	4939      	ldr	r1, [pc, #228]	; (8006798 <HAL_RCC_OscConfig+0x26c>)
 80066b2:	4313      	orrs	r3, r2
 80066b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066b6:	e03a      	b.n	800672e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	691b      	ldr	r3, [r3, #16]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d020      	beq.n	8006702 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80066c0:	4b36      	ldr	r3, [pc, #216]	; (800679c <HAL_RCC_OscConfig+0x270>)
 80066c2:	2201      	movs	r2, #1
 80066c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066c6:	f7fe fb71 	bl	8004dac <HAL_GetTick>
 80066ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066cc:	e008      	b.n	80066e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066ce:	f7fe fb6d 	bl	8004dac <HAL_GetTick>
 80066d2:	4602      	mov	r2, r0
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	1ad3      	subs	r3, r2, r3
 80066d8:	2b02      	cmp	r3, #2
 80066da:	d901      	bls.n	80066e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80066dc:	2303      	movs	r3, #3
 80066de:	e1a1      	b.n	8006a24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066e0:	4b2d      	ldr	r3, [pc, #180]	; (8006798 <HAL_RCC_OscConfig+0x26c>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f003 0302 	and.w	r3, r3, #2
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d0f0      	beq.n	80066ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066ec:	4b2a      	ldr	r3, [pc, #168]	; (8006798 <HAL_RCC_OscConfig+0x26c>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	695b      	ldr	r3, [r3, #20]
 80066f8:	00db      	lsls	r3, r3, #3
 80066fa:	4927      	ldr	r1, [pc, #156]	; (8006798 <HAL_RCC_OscConfig+0x26c>)
 80066fc:	4313      	orrs	r3, r2
 80066fe:	600b      	str	r3, [r1, #0]
 8006700:	e015      	b.n	800672e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006702:	4b26      	ldr	r3, [pc, #152]	; (800679c <HAL_RCC_OscConfig+0x270>)
 8006704:	2200      	movs	r2, #0
 8006706:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006708:	f7fe fb50 	bl	8004dac <HAL_GetTick>
 800670c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800670e:	e008      	b.n	8006722 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006710:	f7fe fb4c 	bl	8004dac <HAL_GetTick>
 8006714:	4602      	mov	r2, r0
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	1ad3      	subs	r3, r2, r3
 800671a:	2b02      	cmp	r3, #2
 800671c:	d901      	bls.n	8006722 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800671e:	2303      	movs	r3, #3
 8006720:	e180      	b.n	8006a24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006722:	4b1d      	ldr	r3, [pc, #116]	; (8006798 <HAL_RCC_OscConfig+0x26c>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 0302 	and.w	r3, r3, #2
 800672a:	2b00      	cmp	r3, #0
 800672c:	d1f0      	bne.n	8006710 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f003 0308 	and.w	r3, r3, #8
 8006736:	2b00      	cmp	r3, #0
 8006738:	d03a      	beq.n	80067b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	699b      	ldr	r3, [r3, #24]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d019      	beq.n	8006776 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006742:	4b17      	ldr	r3, [pc, #92]	; (80067a0 <HAL_RCC_OscConfig+0x274>)
 8006744:	2201      	movs	r2, #1
 8006746:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006748:	f7fe fb30 	bl	8004dac <HAL_GetTick>
 800674c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800674e:	e008      	b.n	8006762 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006750:	f7fe fb2c 	bl	8004dac <HAL_GetTick>
 8006754:	4602      	mov	r2, r0
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	1ad3      	subs	r3, r2, r3
 800675a:	2b02      	cmp	r3, #2
 800675c:	d901      	bls.n	8006762 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800675e:	2303      	movs	r3, #3
 8006760:	e160      	b.n	8006a24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006762:	4b0d      	ldr	r3, [pc, #52]	; (8006798 <HAL_RCC_OscConfig+0x26c>)
 8006764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006766:	f003 0302 	and.w	r3, r3, #2
 800676a:	2b00      	cmp	r3, #0
 800676c:	d0f0      	beq.n	8006750 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800676e:	2001      	movs	r0, #1
 8006770:	f000 face 	bl	8006d10 <RCC_Delay>
 8006774:	e01c      	b.n	80067b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006776:	4b0a      	ldr	r3, [pc, #40]	; (80067a0 <HAL_RCC_OscConfig+0x274>)
 8006778:	2200      	movs	r2, #0
 800677a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800677c:	f7fe fb16 	bl	8004dac <HAL_GetTick>
 8006780:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006782:	e00f      	b.n	80067a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006784:	f7fe fb12 	bl	8004dac <HAL_GetTick>
 8006788:	4602      	mov	r2, r0
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	1ad3      	subs	r3, r2, r3
 800678e:	2b02      	cmp	r3, #2
 8006790:	d908      	bls.n	80067a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006792:	2303      	movs	r3, #3
 8006794:	e146      	b.n	8006a24 <HAL_RCC_OscConfig+0x4f8>
 8006796:	bf00      	nop
 8006798:	40021000 	.word	0x40021000
 800679c:	42420000 	.word	0x42420000
 80067a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067a4:	4b92      	ldr	r3, [pc, #584]	; (80069f0 <HAL_RCC_OscConfig+0x4c4>)
 80067a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a8:	f003 0302 	and.w	r3, r3, #2
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d1e9      	bne.n	8006784 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f003 0304 	and.w	r3, r3, #4
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	f000 80a6 	beq.w	800690a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80067be:	2300      	movs	r3, #0
 80067c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80067c2:	4b8b      	ldr	r3, [pc, #556]	; (80069f0 <HAL_RCC_OscConfig+0x4c4>)
 80067c4:	69db      	ldr	r3, [r3, #28]
 80067c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d10d      	bne.n	80067ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80067ce:	4b88      	ldr	r3, [pc, #544]	; (80069f0 <HAL_RCC_OscConfig+0x4c4>)
 80067d0:	69db      	ldr	r3, [r3, #28]
 80067d2:	4a87      	ldr	r2, [pc, #540]	; (80069f0 <HAL_RCC_OscConfig+0x4c4>)
 80067d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067d8:	61d3      	str	r3, [r2, #28]
 80067da:	4b85      	ldr	r3, [pc, #532]	; (80069f0 <HAL_RCC_OscConfig+0x4c4>)
 80067dc:	69db      	ldr	r3, [r3, #28]
 80067de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067e2:	60bb      	str	r3, [r7, #8]
 80067e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80067e6:	2301      	movs	r3, #1
 80067e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067ea:	4b82      	ldr	r3, [pc, #520]	; (80069f4 <HAL_RCC_OscConfig+0x4c8>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d118      	bne.n	8006828 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80067f6:	4b7f      	ldr	r3, [pc, #508]	; (80069f4 <HAL_RCC_OscConfig+0x4c8>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a7e      	ldr	r2, [pc, #504]	; (80069f4 <HAL_RCC_OscConfig+0x4c8>)
 80067fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006800:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006802:	f7fe fad3 	bl	8004dac <HAL_GetTick>
 8006806:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006808:	e008      	b.n	800681c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800680a:	f7fe facf 	bl	8004dac <HAL_GetTick>
 800680e:	4602      	mov	r2, r0
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	1ad3      	subs	r3, r2, r3
 8006814:	2b64      	cmp	r3, #100	; 0x64
 8006816:	d901      	bls.n	800681c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006818:	2303      	movs	r3, #3
 800681a:	e103      	b.n	8006a24 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800681c:	4b75      	ldr	r3, [pc, #468]	; (80069f4 <HAL_RCC_OscConfig+0x4c8>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006824:	2b00      	cmp	r3, #0
 8006826:	d0f0      	beq.n	800680a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	2b01      	cmp	r3, #1
 800682e:	d106      	bne.n	800683e <HAL_RCC_OscConfig+0x312>
 8006830:	4b6f      	ldr	r3, [pc, #444]	; (80069f0 <HAL_RCC_OscConfig+0x4c4>)
 8006832:	6a1b      	ldr	r3, [r3, #32]
 8006834:	4a6e      	ldr	r2, [pc, #440]	; (80069f0 <HAL_RCC_OscConfig+0x4c4>)
 8006836:	f043 0301 	orr.w	r3, r3, #1
 800683a:	6213      	str	r3, [r2, #32]
 800683c:	e02d      	b.n	800689a <HAL_RCC_OscConfig+0x36e>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	68db      	ldr	r3, [r3, #12]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d10c      	bne.n	8006860 <HAL_RCC_OscConfig+0x334>
 8006846:	4b6a      	ldr	r3, [pc, #424]	; (80069f0 <HAL_RCC_OscConfig+0x4c4>)
 8006848:	6a1b      	ldr	r3, [r3, #32]
 800684a:	4a69      	ldr	r2, [pc, #420]	; (80069f0 <HAL_RCC_OscConfig+0x4c4>)
 800684c:	f023 0301 	bic.w	r3, r3, #1
 8006850:	6213      	str	r3, [r2, #32]
 8006852:	4b67      	ldr	r3, [pc, #412]	; (80069f0 <HAL_RCC_OscConfig+0x4c4>)
 8006854:	6a1b      	ldr	r3, [r3, #32]
 8006856:	4a66      	ldr	r2, [pc, #408]	; (80069f0 <HAL_RCC_OscConfig+0x4c4>)
 8006858:	f023 0304 	bic.w	r3, r3, #4
 800685c:	6213      	str	r3, [r2, #32]
 800685e:	e01c      	b.n	800689a <HAL_RCC_OscConfig+0x36e>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	2b05      	cmp	r3, #5
 8006866:	d10c      	bne.n	8006882 <HAL_RCC_OscConfig+0x356>
 8006868:	4b61      	ldr	r3, [pc, #388]	; (80069f0 <HAL_RCC_OscConfig+0x4c4>)
 800686a:	6a1b      	ldr	r3, [r3, #32]
 800686c:	4a60      	ldr	r2, [pc, #384]	; (80069f0 <HAL_RCC_OscConfig+0x4c4>)
 800686e:	f043 0304 	orr.w	r3, r3, #4
 8006872:	6213      	str	r3, [r2, #32]
 8006874:	4b5e      	ldr	r3, [pc, #376]	; (80069f0 <HAL_RCC_OscConfig+0x4c4>)
 8006876:	6a1b      	ldr	r3, [r3, #32]
 8006878:	4a5d      	ldr	r2, [pc, #372]	; (80069f0 <HAL_RCC_OscConfig+0x4c4>)
 800687a:	f043 0301 	orr.w	r3, r3, #1
 800687e:	6213      	str	r3, [r2, #32]
 8006880:	e00b      	b.n	800689a <HAL_RCC_OscConfig+0x36e>
 8006882:	4b5b      	ldr	r3, [pc, #364]	; (80069f0 <HAL_RCC_OscConfig+0x4c4>)
 8006884:	6a1b      	ldr	r3, [r3, #32]
 8006886:	4a5a      	ldr	r2, [pc, #360]	; (80069f0 <HAL_RCC_OscConfig+0x4c4>)
 8006888:	f023 0301 	bic.w	r3, r3, #1
 800688c:	6213      	str	r3, [r2, #32]
 800688e:	4b58      	ldr	r3, [pc, #352]	; (80069f0 <HAL_RCC_OscConfig+0x4c4>)
 8006890:	6a1b      	ldr	r3, [r3, #32]
 8006892:	4a57      	ldr	r2, [pc, #348]	; (80069f0 <HAL_RCC_OscConfig+0x4c4>)
 8006894:	f023 0304 	bic.w	r3, r3, #4
 8006898:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	68db      	ldr	r3, [r3, #12]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d015      	beq.n	80068ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80068a2:	f7fe fa83 	bl	8004dac <HAL_GetTick>
 80068a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068a8:	e00a      	b.n	80068c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068aa:	f7fe fa7f 	bl	8004dac <HAL_GetTick>
 80068ae:	4602      	mov	r2, r0
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	1ad3      	subs	r3, r2, r3
 80068b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d901      	bls.n	80068c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80068bc:	2303      	movs	r3, #3
 80068be:	e0b1      	b.n	8006a24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068c0:	4b4b      	ldr	r3, [pc, #300]	; (80069f0 <HAL_RCC_OscConfig+0x4c4>)
 80068c2:	6a1b      	ldr	r3, [r3, #32]
 80068c4:	f003 0302 	and.w	r3, r3, #2
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d0ee      	beq.n	80068aa <HAL_RCC_OscConfig+0x37e>
 80068cc:	e014      	b.n	80068f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80068ce:	f7fe fa6d 	bl	8004dac <HAL_GetTick>
 80068d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80068d4:	e00a      	b.n	80068ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068d6:	f7fe fa69 	bl	8004dac <HAL_GetTick>
 80068da:	4602      	mov	r2, r0
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	1ad3      	subs	r3, r2, r3
 80068e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d901      	bls.n	80068ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80068e8:	2303      	movs	r3, #3
 80068ea:	e09b      	b.n	8006a24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80068ec:	4b40      	ldr	r3, [pc, #256]	; (80069f0 <HAL_RCC_OscConfig+0x4c4>)
 80068ee:	6a1b      	ldr	r3, [r3, #32]
 80068f0:	f003 0302 	and.w	r3, r3, #2
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d1ee      	bne.n	80068d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80068f8:	7dfb      	ldrb	r3, [r7, #23]
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	d105      	bne.n	800690a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80068fe:	4b3c      	ldr	r3, [pc, #240]	; (80069f0 <HAL_RCC_OscConfig+0x4c4>)
 8006900:	69db      	ldr	r3, [r3, #28]
 8006902:	4a3b      	ldr	r2, [pc, #236]	; (80069f0 <HAL_RCC_OscConfig+0x4c4>)
 8006904:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006908:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	69db      	ldr	r3, [r3, #28]
 800690e:	2b00      	cmp	r3, #0
 8006910:	f000 8087 	beq.w	8006a22 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006914:	4b36      	ldr	r3, [pc, #216]	; (80069f0 <HAL_RCC_OscConfig+0x4c4>)
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	f003 030c 	and.w	r3, r3, #12
 800691c:	2b08      	cmp	r3, #8
 800691e:	d061      	beq.n	80069e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	69db      	ldr	r3, [r3, #28]
 8006924:	2b02      	cmp	r3, #2
 8006926:	d146      	bne.n	80069b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006928:	4b33      	ldr	r3, [pc, #204]	; (80069f8 <HAL_RCC_OscConfig+0x4cc>)
 800692a:	2200      	movs	r2, #0
 800692c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800692e:	f7fe fa3d 	bl	8004dac <HAL_GetTick>
 8006932:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006934:	e008      	b.n	8006948 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006936:	f7fe fa39 	bl	8004dac <HAL_GetTick>
 800693a:	4602      	mov	r2, r0
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	1ad3      	subs	r3, r2, r3
 8006940:	2b02      	cmp	r3, #2
 8006942:	d901      	bls.n	8006948 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006944:	2303      	movs	r3, #3
 8006946:	e06d      	b.n	8006a24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006948:	4b29      	ldr	r3, [pc, #164]	; (80069f0 <HAL_RCC_OscConfig+0x4c4>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006950:	2b00      	cmp	r3, #0
 8006952:	d1f0      	bne.n	8006936 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6a1b      	ldr	r3, [r3, #32]
 8006958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800695c:	d108      	bne.n	8006970 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800695e:	4b24      	ldr	r3, [pc, #144]	; (80069f0 <HAL_RCC_OscConfig+0x4c4>)
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	4921      	ldr	r1, [pc, #132]	; (80069f0 <HAL_RCC_OscConfig+0x4c4>)
 800696c:	4313      	orrs	r3, r2
 800696e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006970:	4b1f      	ldr	r3, [pc, #124]	; (80069f0 <HAL_RCC_OscConfig+0x4c4>)
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6a19      	ldr	r1, [r3, #32]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006980:	430b      	orrs	r3, r1
 8006982:	491b      	ldr	r1, [pc, #108]	; (80069f0 <HAL_RCC_OscConfig+0x4c4>)
 8006984:	4313      	orrs	r3, r2
 8006986:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006988:	4b1b      	ldr	r3, [pc, #108]	; (80069f8 <HAL_RCC_OscConfig+0x4cc>)
 800698a:	2201      	movs	r2, #1
 800698c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800698e:	f7fe fa0d 	bl	8004dac <HAL_GetTick>
 8006992:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006994:	e008      	b.n	80069a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006996:	f7fe fa09 	bl	8004dac <HAL_GetTick>
 800699a:	4602      	mov	r2, r0
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	1ad3      	subs	r3, r2, r3
 80069a0:	2b02      	cmp	r3, #2
 80069a2:	d901      	bls.n	80069a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80069a4:	2303      	movs	r3, #3
 80069a6:	e03d      	b.n	8006a24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80069a8:	4b11      	ldr	r3, [pc, #68]	; (80069f0 <HAL_RCC_OscConfig+0x4c4>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d0f0      	beq.n	8006996 <HAL_RCC_OscConfig+0x46a>
 80069b4:	e035      	b.n	8006a22 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069b6:	4b10      	ldr	r3, [pc, #64]	; (80069f8 <HAL_RCC_OscConfig+0x4cc>)
 80069b8:	2200      	movs	r2, #0
 80069ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069bc:	f7fe f9f6 	bl	8004dac <HAL_GetTick>
 80069c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80069c2:	e008      	b.n	80069d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069c4:	f7fe f9f2 	bl	8004dac <HAL_GetTick>
 80069c8:	4602      	mov	r2, r0
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	1ad3      	subs	r3, r2, r3
 80069ce:	2b02      	cmp	r3, #2
 80069d0:	d901      	bls.n	80069d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80069d2:	2303      	movs	r3, #3
 80069d4:	e026      	b.n	8006a24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80069d6:	4b06      	ldr	r3, [pc, #24]	; (80069f0 <HAL_RCC_OscConfig+0x4c4>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d1f0      	bne.n	80069c4 <HAL_RCC_OscConfig+0x498>
 80069e2:	e01e      	b.n	8006a22 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	69db      	ldr	r3, [r3, #28]
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d107      	bne.n	80069fc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80069ec:	2301      	movs	r3, #1
 80069ee:	e019      	b.n	8006a24 <HAL_RCC_OscConfig+0x4f8>
 80069f0:	40021000 	.word	0x40021000
 80069f4:	40007000 	.word	0x40007000
 80069f8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80069fc:	4b0b      	ldr	r3, [pc, #44]	; (8006a2c <HAL_RCC_OscConfig+0x500>)
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6a1b      	ldr	r3, [r3, #32]
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d106      	bne.n	8006a1e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d001      	beq.n	8006a22 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e000      	b.n	8006a24 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006a22:	2300      	movs	r3, #0
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3718      	adds	r7, #24
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}
 8006a2c:	40021000 	.word	0x40021000

08006a30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b084      	sub	sp, #16
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d101      	bne.n	8006a44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a40:	2301      	movs	r3, #1
 8006a42:	e0d0      	b.n	8006be6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006a44:	4b6a      	ldr	r3, [pc, #424]	; (8006bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f003 0307 	and.w	r3, r3, #7
 8006a4c:	683a      	ldr	r2, [r7, #0]
 8006a4e:	429a      	cmp	r2, r3
 8006a50:	d910      	bls.n	8006a74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a52:	4b67      	ldr	r3, [pc, #412]	; (8006bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f023 0207 	bic.w	r2, r3, #7
 8006a5a:	4965      	ldr	r1, [pc, #404]	; (8006bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a62:	4b63      	ldr	r3, [pc, #396]	; (8006bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f003 0307 	and.w	r3, r3, #7
 8006a6a:	683a      	ldr	r2, [r7, #0]
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d001      	beq.n	8006a74 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006a70:	2301      	movs	r3, #1
 8006a72:	e0b8      	b.n	8006be6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f003 0302 	and.w	r3, r3, #2
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d020      	beq.n	8006ac2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f003 0304 	and.w	r3, r3, #4
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d005      	beq.n	8006a98 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006a8c:	4b59      	ldr	r3, [pc, #356]	; (8006bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	4a58      	ldr	r2, [pc, #352]	; (8006bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8006a92:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006a96:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f003 0308 	and.w	r3, r3, #8
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d005      	beq.n	8006ab0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006aa4:	4b53      	ldr	r3, [pc, #332]	; (8006bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	4a52      	ldr	r2, [pc, #328]	; (8006bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8006aaa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006aae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ab0:	4b50      	ldr	r3, [pc, #320]	; (8006bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	494d      	ldr	r1, [pc, #308]	; (8006bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f003 0301 	and.w	r3, r3, #1
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d040      	beq.n	8006b50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	2b01      	cmp	r3, #1
 8006ad4:	d107      	bne.n	8006ae6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ad6:	4b47      	ldr	r3, [pc, #284]	; (8006bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d115      	bne.n	8006b0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e07f      	b.n	8006be6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	2b02      	cmp	r3, #2
 8006aec:	d107      	bne.n	8006afe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006aee:	4b41      	ldr	r3, [pc, #260]	; (8006bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d109      	bne.n	8006b0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	e073      	b.n	8006be6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006afe:	4b3d      	ldr	r3, [pc, #244]	; (8006bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f003 0302 	and.w	r3, r3, #2
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d101      	bne.n	8006b0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	e06b      	b.n	8006be6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006b0e:	4b39      	ldr	r3, [pc, #228]	; (8006bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	f023 0203 	bic.w	r2, r3, #3
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	685b      	ldr	r3, [r3, #4]
 8006b1a:	4936      	ldr	r1, [pc, #216]	; (8006bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006b20:	f7fe f944 	bl	8004dac <HAL_GetTick>
 8006b24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b26:	e00a      	b.n	8006b3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b28:	f7fe f940 	bl	8004dac <HAL_GetTick>
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	1ad3      	subs	r3, r2, r3
 8006b32:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d901      	bls.n	8006b3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006b3a:	2303      	movs	r3, #3
 8006b3c:	e053      	b.n	8006be6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b3e:	4b2d      	ldr	r3, [pc, #180]	; (8006bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	f003 020c 	and.w	r2, r3, #12
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	009b      	lsls	r3, r3, #2
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d1eb      	bne.n	8006b28 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006b50:	4b27      	ldr	r3, [pc, #156]	; (8006bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f003 0307 	and.w	r3, r3, #7
 8006b58:	683a      	ldr	r2, [r7, #0]
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d210      	bcs.n	8006b80 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b5e:	4b24      	ldr	r3, [pc, #144]	; (8006bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f023 0207 	bic.w	r2, r3, #7
 8006b66:	4922      	ldr	r1, [pc, #136]	; (8006bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b6e:	4b20      	ldr	r3, [pc, #128]	; (8006bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f003 0307 	and.w	r3, r3, #7
 8006b76:	683a      	ldr	r2, [r7, #0]
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	d001      	beq.n	8006b80 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	e032      	b.n	8006be6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f003 0304 	and.w	r3, r3, #4
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d008      	beq.n	8006b9e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006b8c:	4b19      	ldr	r3, [pc, #100]	; (8006bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	68db      	ldr	r3, [r3, #12]
 8006b98:	4916      	ldr	r1, [pc, #88]	; (8006bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f003 0308 	and.w	r3, r3, #8
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d009      	beq.n	8006bbe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006baa:	4b12      	ldr	r3, [pc, #72]	; (8006bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	691b      	ldr	r3, [r3, #16]
 8006bb6:	00db      	lsls	r3, r3, #3
 8006bb8:	490e      	ldr	r1, [pc, #56]	; (8006bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006bbe:	f000 f821 	bl	8006c04 <HAL_RCC_GetSysClockFreq>
 8006bc2:	4602      	mov	r2, r0
 8006bc4:	4b0b      	ldr	r3, [pc, #44]	; (8006bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	091b      	lsrs	r3, r3, #4
 8006bca:	f003 030f 	and.w	r3, r3, #15
 8006bce:	490a      	ldr	r1, [pc, #40]	; (8006bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8006bd0:	5ccb      	ldrb	r3, [r1, r3]
 8006bd2:	fa22 f303 	lsr.w	r3, r2, r3
 8006bd6:	4a09      	ldr	r2, [pc, #36]	; (8006bfc <HAL_RCC_ClockConfig+0x1cc>)
 8006bd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006bda:	4b09      	ldr	r3, [pc, #36]	; (8006c00 <HAL_RCC_ClockConfig+0x1d0>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4618      	mov	r0, r3
 8006be0:	f7fe f8a2 	bl	8004d28 <HAL_InitTick>

  return HAL_OK;
 8006be4:	2300      	movs	r3, #0
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3710      	adds	r7, #16
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}
 8006bee:	bf00      	nop
 8006bf0:	40022000 	.word	0x40022000
 8006bf4:	40021000 	.word	0x40021000
 8006bf8:	08009b68 	.word	0x08009b68
 8006bfc:	200000ac 	.word	0x200000ac
 8006c00:	200000b0 	.word	0x200000b0

08006c04 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b087      	sub	sp, #28
 8006c08:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	60fb      	str	r3, [r7, #12]
 8006c0e:	2300      	movs	r3, #0
 8006c10:	60bb      	str	r3, [r7, #8]
 8006c12:	2300      	movs	r3, #0
 8006c14:	617b      	str	r3, [r7, #20]
 8006c16:	2300      	movs	r3, #0
 8006c18:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006c1e:	4b1e      	ldr	r3, [pc, #120]	; (8006c98 <HAL_RCC_GetSysClockFreq+0x94>)
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f003 030c 	and.w	r3, r3, #12
 8006c2a:	2b04      	cmp	r3, #4
 8006c2c:	d002      	beq.n	8006c34 <HAL_RCC_GetSysClockFreq+0x30>
 8006c2e:	2b08      	cmp	r3, #8
 8006c30:	d003      	beq.n	8006c3a <HAL_RCC_GetSysClockFreq+0x36>
 8006c32:	e027      	b.n	8006c84 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006c34:	4b19      	ldr	r3, [pc, #100]	; (8006c9c <HAL_RCC_GetSysClockFreq+0x98>)
 8006c36:	613b      	str	r3, [r7, #16]
      break;
 8006c38:	e027      	b.n	8006c8a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	0c9b      	lsrs	r3, r3, #18
 8006c3e:	f003 030f 	and.w	r3, r3, #15
 8006c42:	4a17      	ldr	r2, [pc, #92]	; (8006ca0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006c44:	5cd3      	ldrb	r3, [r2, r3]
 8006c46:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d010      	beq.n	8006c74 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006c52:	4b11      	ldr	r3, [pc, #68]	; (8006c98 <HAL_RCC_GetSysClockFreq+0x94>)
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	0c5b      	lsrs	r3, r3, #17
 8006c58:	f003 0301 	and.w	r3, r3, #1
 8006c5c:	4a11      	ldr	r2, [pc, #68]	; (8006ca4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006c5e:	5cd3      	ldrb	r3, [r2, r3]
 8006c60:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	4a0d      	ldr	r2, [pc, #52]	; (8006c9c <HAL_RCC_GetSysClockFreq+0x98>)
 8006c66:	fb03 f202 	mul.w	r2, r3, r2
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c70:	617b      	str	r3, [r7, #20]
 8006c72:	e004      	b.n	8006c7e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	4a0c      	ldr	r2, [pc, #48]	; (8006ca8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006c78:	fb02 f303 	mul.w	r3, r2, r3
 8006c7c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	613b      	str	r3, [r7, #16]
      break;
 8006c82:	e002      	b.n	8006c8a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006c84:	4b05      	ldr	r3, [pc, #20]	; (8006c9c <HAL_RCC_GetSysClockFreq+0x98>)
 8006c86:	613b      	str	r3, [r7, #16]
      break;
 8006c88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006c8a:	693b      	ldr	r3, [r7, #16]
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	371c      	adds	r7, #28
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bc80      	pop	{r7}
 8006c94:	4770      	bx	lr
 8006c96:	bf00      	nop
 8006c98:	40021000 	.word	0x40021000
 8006c9c:	007a1200 	.word	0x007a1200
 8006ca0:	08009b80 	.word	0x08009b80
 8006ca4:	08009b90 	.word	0x08009b90
 8006ca8:	003d0900 	.word	0x003d0900

08006cac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006cac:	b480      	push	{r7}
 8006cae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006cb0:	4b02      	ldr	r3, [pc, #8]	; (8006cbc <HAL_RCC_GetHCLKFreq+0x10>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bc80      	pop	{r7}
 8006cba:	4770      	bx	lr
 8006cbc:	200000ac 	.word	0x200000ac

08006cc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006cc4:	f7ff fff2 	bl	8006cac <HAL_RCC_GetHCLKFreq>
 8006cc8:	4602      	mov	r2, r0
 8006cca:	4b05      	ldr	r3, [pc, #20]	; (8006ce0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	0a1b      	lsrs	r3, r3, #8
 8006cd0:	f003 0307 	and.w	r3, r3, #7
 8006cd4:	4903      	ldr	r1, [pc, #12]	; (8006ce4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006cd6:	5ccb      	ldrb	r3, [r1, r3]
 8006cd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	bd80      	pop	{r7, pc}
 8006ce0:	40021000 	.word	0x40021000
 8006ce4:	08009b78 	.word	0x08009b78

08006ce8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006cec:	f7ff ffde 	bl	8006cac <HAL_RCC_GetHCLKFreq>
 8006cf0:	4602      	mov	r2, r0
 8006cf2:	4b05      	ldr	r3, [pc, #20]	; (8006d08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	0adb      	lsrs	r3, r3, #11
 8006cf8:	f003 0307 	and.w	r3, r3, #7
 8006cfc:	4903      	ldr	r1, [pc, #12]	; (8006d0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006cfe:	5ccb      	ldrb	r3, [r1, r3]
 8006d00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	bd80      	pop	{r7, pc}
 8006d08:	40021000 	.word	0x40021000
 8006d0c:	08009b78 	.word	0x08009b78

08006d10 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b085      	sub	sp, #20
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006d18:	4b0a      	ldr	r3, [pc, #40]	; (8006d44 <RCC_Delay+0x34>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a0a      	ldr	r2, [pc, #40]	; (8006d48 <RCC_Delay+0x38>)
 8006d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d22:	0a5b      	lsrs	r3, r3, #9
 8006d24:	687a      	ldr	r2, [r7, #4]
 8006d26:	fb02 f303 	mul.w	r3, r2, r3
 8006d2a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006d2c:	bf00      	nop
  }
  while (Delay --);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	1e5a      	subs	r2, r3, #1
 8006d32:	60fa      	str	r2, [r7, #12]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d1f9      	bne.n	8006d2c <RCC_Delay+0x1c>
}
 8006d38:	bf00      	nop
 8006d3a:	bf00      	nop
 8006d3c:	3714      	adds	r7, #20
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bc80      	pop	{r7}
 8006d42:	4770      	bx	lr
 8006d44:	200000ac 	.word	0x200000ac
 8006d48:	10624dd3 	.word	0x10624dd3

08006d4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b082      	sub	sp, #8
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d101      	bne.n	8006d5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e041      	b.n	8006de2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d64:	b2db      	uxtb	r3, r3
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d106      	bne.n	8006d78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f7fd fe12 	bl	800499c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2202      	movs	r2, #2
 8006d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681a      	ldr	r2, [r3, #0]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	3304      	adds	r3, #4
 8006d88:	4619      	mov	r1, r3
 8006d8a:	4610      	mov	r0, r2
 8006d8c:	f000 fc28 	bl	80075e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2201      	movs	r2, #1
 8006d94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2201      	movs	r2, #1
 8006da4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2201      	movs	r2, #1
 8006dac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2201      	movs	r2, #1
 8006db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2201      	movs	r2, #1
 8006ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006de0:	2300      	movs	r3, #0
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3708      	adds	r7, #8
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}
	...

08006dec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b085      	sub	sp, #20
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dfa:	b2db      	uxtb	r3, r3
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d001      	beq.n	8006e04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006e00:	2301      	movs	r3, #1
 8006e02:	e03a      	b.n	8006e7a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2202      	movs	r2, #2
 8006e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	68da      	ldr	r2, [r3, #12]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f042 0201 	orr.w	r2, r2, #1
 8006e1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a18      	ldr	r2, [pc, #96]	; (8006e84 <HAL_TIM_Base_Start_IT+0x98>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d00e      	beq.n	8006e44 <HAL_TIM_Base_Start_IT+0x58>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e2e:	d009      	beq.n	8006e44 <HAL_TIM_Base_Start_IT+0x58>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a14      	ldr	r2, [pc, #80]	; (8006e88 <HAL_TIM_Base_Start_IT+0x9c>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d004      	beq.n	8006e44 <HAL_TIM_Base_Start_IT+0x58>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a13      	ldr	r2, [pc, #76]	; (8006e8c <HAL_TIM_Base_Start_IT+0xa0>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d111      	bne.n	8006e68 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	f003 0307 	and.w	r3, r3, #7
 8006e4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2b06      	cmp	r3, #6
 8006e54:	d010      	beq.n	8006e78 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f042 0201 	orr.w	r2, r2, #1
 8006e64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e66:	e007      	b.n	8006e78 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	681a      	ldr	r2, [r3, #0]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f042 0201 	orr.w	r2, r2, #1
 8006e76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e78:	2300      	movs	r3, #0
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3714      	adds	r7, #20
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bc80      	pop	{r7}
 8006e82:	4770      	bx	lr
 8006e84:	40012c00 	.word	0x40012c00
 8006e88:	40000400 	.word	0x40000400
 8006e8c:	40000800 	.word	0x40000800

08006e90 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b082      	sub	sp, #8
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d101      	bne.n	8006ea2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	e041      	b.n	8006f26 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ea8:	b2db      	uxtb	r3, r3
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d106      	bne.n	8006ebc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f7fd fd96 	bl	80049e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2202      	movs	r2, #2
 8006ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681a      	ldr	r2, [r3, #0]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	3304      	adds	r3, #4
 8006ecc:	4619      	mov	r1, r3
 8006ece:	4610      	mov	r0, r2
 8006ed0:	f000 fb86 	bl	80075e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2201      	movs	r2, #1
 8006f00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2201      	movs	r2, #1
 8006f08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2201      	movs	r2, #1
 8006f18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2201      	movs	r2, #1
 8006f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f24:	2300      	movs	r3, #0
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3708      	adds	r7, #8
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}
	...

08006f30 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b084      	sub	sp, #16
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d109      	bne.n	8006f54 <HAL_TIM_PWM_Start+0x24>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f46:	b2db      	uxtb	r3, r3
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	bf14      	ite	ne
 8006f4c:	2301      	movne	r3, #1
 8006f4e:	2300      	moveq	r3, #0
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	e022      	b.n	8006f9a <HAL_TIM_PWM_Start+0x6a>
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	2b04      	cmp	r3, #4
 8006f58:	d109      	bne.n	8006f6e <HAL_TIM_PWM_Start+0x3e>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006f60:	b2db      	uxtb	r3, r3
 8006f62:	2b01      	cmp	r3, #1
 8006f64:	bf14      	ite	ne
 8006f66:	2301      	movne	r3, #1
 8006f68:	2300      	moveq	r3, #0
 8006f6a:	b2db      	uxtb	r3, r3
 8006f6c:	e015      	b.n	8006f9a <HAL_TIM_PWM_Start+0x6a>
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	2b08      	cmp	r3, #8
 8006f72:	d109      	bne.n	8006f88 <HAL_TIM_PWM_Start+0x58>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006f7a:	b2db      	uxtb	r3, r3
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	bf14      	ite	ne
 8006f80:	2301      	movne	r3, #1
 8006f82:	2300      	moveq	r3, #0
 8006f84:	b2db      	uxtb	r3, r3
 8006f86:	e008      	b.n	8006f9a <HAL_TIM_PWM_Start+0x6a>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f8e:	b2db      	uxtb	r3, r3
 8006f90:	2b01      	cmp	r3, #1
 8006f92:	bf14      	ite	ne
 8006f94:	2301      	movne	r3, #1
 8006f96:	2300      	moveq	r3, #0
 8006f98:	b2db      	uxtb	r3, r3
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d001      	beq.n	8006fa2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	e05e      	b.n	8007060 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d104      	bne.n	8006fb2 <HAL_TIM_PWM_Start+0x82>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2202      	movs	r2, #2
 8006fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006fb0:	e013      	b.n	8006fda <HAL_TIM_PWM_Start+0xaa>
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	2b04      	cmp	r3, #4
 8006fb6:	d104      	bne.n	8006fc2 <HAL_TIM_PWM_Start+0x92>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2202      	movs	r2, #2
 8006fbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006fc0:	e00b      	b.n	8006fda <HAL_TIM_PWM_Start+0xaa>
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	2b08      	cmp	r3, #8
 8006fc6:	d104      	bne.n	8006fd2 <HAL_TIM_PWM_Start+0xa2>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2202      	movs	r2, #2
 8006fcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006fd0:	e003      	b.n	8006fda <HAL_TIM_PWM_Start+0xaa>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2202      	movs	r2, #2
 8006fd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	2201      	movs	r2, #1
 8006fe0:	6839      	ldr	r1, [r7, #0]
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f000 fd7c 	bl	8007ae0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a1e      	ldr	r2, [pc, #120]	; (8007068 <HAL_TIM_PWM_Start+0x138>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d107      	bne.n	8007002 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007000:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a18      	ldr	r2, [pc, #96]	; (8007068 <HAL_TIM_PWM_Start+0x138>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d00e      	beq.n	800702a <HAL_TIM_PWM_Start+0xfa>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007014:	d009      	beq.n	800702a <HAL_TIM_PWM_Start+0xfa>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a14      	ldr	r2, [pc, #80]	; (800706c <HAL_TIM_PWM_Start+0x13c>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d004      	beq.n	800702a <HAL_TIM_PWM_Start+0xfa>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a12      	ldr	r2, [pc, #72]	; (8007070 <HAL_TIM_PWM_Start+0x140>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d111      	bne.n	800704e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	f003 0307 	and.w	r3, r3, #7
 8007034:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2b06      	cmp	r3, #6
 800703a:	d010      	beq.n	800705e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	681a      	ldr	r2, [r3, #0]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f042 0201 	orr.w	r2, r2, #1
 800704a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800704c:	e007      	b.n	800705e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f042 0201 	orr.w	r2, r2, #1
 800705c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800705e:	2300      	movs	r3, #0
}
 8007060:	4618      	mov	r0, r3
 8007062:	3710      	adds	r7, #16
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}
 8007068:	40012c00 	.word	0x40012c00
 800706c:	40000400 	.word	0x40000400
 8007070:	40000800 	.word	0x40000800

08007074 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b082      	sub	sp, #8
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	691b      	ldr	r3, [r3, #16]
 8007082:	f003 0302 	and.w	r3, r3, #2
 8007086:	2b02      	cmp	r3, #2
 8007088:	d122      	bne.n	80070d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	68db      	ldr	r3, [r3, #12]
 8007090:	f003 0302 	and.w	r3, r3, #2
 8007094:	2b02      	cmp	r3, #2
 8007096:	d11b      	bne.n	80070d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f06f 0202 	mvn.w	r2, #2
 80070a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2201      	movs	r2, #1
 80070a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	699b      	ldr	r3, [r3, #24]
 80070ae:	f003 0303 	and.w	r3, r3, #3
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d003      	beq.n	80070be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f000 fa76 	bl	80075a8 <HAL_TIM_IC_CaptureCallback>
 80070bc:	e005      	b.n	80070ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 fa69 	bl	8007596 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f000 fa78 	bl	80075ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2200      	movs	r2, #0
 80070ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	691b      	ldr	r3, [r3, #16]
 80070d6:	f003 0304 	and.w	r3, r3, #4
 80070da:	2b04      	cmp	r3, #4
 80070dc:	d122      	bne.n	8007124 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	68db      	ldr	r3, [r3, #12]
 80070e4:	f003 0304 	and.w	r3, r3, #4
 80070e8:	2b04      	cmp	r3, #4
 80070ea:	d11b      	bne.n	8007124 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f06f 0204 	mvn.w	r2, #4
 80070f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2202      	movs	r2, #2
 80070fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	699b      	ldr	r3, [r3, #24]
 8007102:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007106:	2b00      	cmp	r3, #0
 8007108:	d003      	beq.n	8007112 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 fa4c 	bl	80075a8 <HAL_TIM_IC_CaptureCallback>
 8007110:	e005      	b.n	800711e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f000 fa3f 	bl	8007596 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f000 fa4e 	bl	80075ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2200      	movs	r2, #0
 8007122:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	691b      	ldr	r3, [r3, #16]
 800712a:	f003 0308 	and.w	r3, r3, #8
 800712e:	2b08      	cmp	r3, #8
 8007130:	d122      	bne.n	8007178 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	68db      	ldr	r3, [r3, #12]
 8007138:	f003 0308 	and.w	r3, r3, #8
 800713c:	2b08      	cmp	r3, #8
 800713e:	d11b      	bne.n	8007178 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f06f 0208 	mvn.w	r2, #8
 8007148:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2204      	movs	r2, #4
 800714e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	69db      	ldr	r3, [r3, #28]
 8007156:	f003 0303 	and.w	r3, r3, #3
 800715a:	2b00      	cmp	r3, #0
 800715c:	d003      	beq.n	8007166 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f000 fa22 	bl	80075a8 <HAL_TIM_IC_CaptureCallback>
 8007164:	e005      	b.n	8007172 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f000 fa15 	bl	8007596 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f000 fa24 	bl	80075ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2200      	movs	r2, #0
 8007176:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	691b      	ldr	r3, [r3, #16]
 800717e:	f003 0310 	and.w	r3, r3, #16
 8007182:	2b10      	cmp	r3, #16
 8007184:	d122      	bne.n	80071cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	68db      	ldr	r3, [r3, #12]
 800718c:	f003 0310 	and.w	r3, r3, #16
 8007190:	2b10      	cmp	r3, #16
 8007192:	d11b      	bne.n	80071cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f06f 0210 	mvn.w	r2, #16
 800719c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2208      	movs	r2, #8
 80071a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	69db      	ldr	r3, [r3, #28]
 80071aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d003      	beq.n	80071ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f000 f9f8 	bl	80075a8 <HAL_TIM_IC_CaptureCallback>
 80071b8:	e005      	b.n	80071c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f000 f9eb 	bl	8007596 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 f9fa 	bl	80075ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2200      	movs	r2, #0
 80071ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	691b      	ldr	r3, [r3, #16]
 80071d2:	f003 0301 	and.w	r3, r3, #1
 80071d6:	2b01      	cmp	r3, #1
 80071d8:	d10e      	bne.n	80071f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	68db      	ldr	r3, [r3, #12]
 80071e0:	f003 0301 	and.w	r3, r3, #1
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d107      	bne.n	80071f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f06f 0201 	mvn.w	r2, #1
 80071f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f7fa f936 	bl	8001464 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	691b      	ldr	r3, [r3, #16]
 80071fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007202:	2b80      	cmp	r3, #128	; 0x80
 8007204:	d10e      	bne.n	8007224 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	68db      	ldr	r3, [r3, #12]
 800720c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007210:	2b80      	cmp	r3, #128	; 0x80
 8007212:	d107      	bne.n	8007224 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800721c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f000 fce9 	bl	8007bf6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	691b      	ldr	r3, [r3, #16]
 800722a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800722e:	2b40      	cmp	r3, #64	; 0x40
 8007230:	d10e      	bne.n	8007250 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	68db      	ldr	r3, [r3, #12]
 8007238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800723c:	2b40      	cmp	r3, #64	; 0x40
 800723e:	d107      	bne.n	8007250 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 f9be 	bl	80075cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	691b      	ldr	r3, [r3, #16]
 8007256:	f003 0320 	and.w	r3, r3, #32
 800725a:	2b20      	cmp	r3, #32
 800725c:	d10e      	bne.n	800727c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	68db      	ldr	r3, [r3, #12]
 8007264:	f003 0320 	and.w	r3, r3, #32
 8007268:	2b20      	cmp	r3, #32
 800726a:	d107      	bne.n	800727c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f06f 0220 	mvn.w	r2, #32
 8007274:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 fcb4 	bl	8007be4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800727c:	bf00      	nop
 800727e:	3708      	adds	r7, #8
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}

08007284 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b086      	sub	sp, #24
 8007288:	af00      	add	r7, sp, #0
 800728a:	60f8      	str	r0, [r7, #12]
 800728c:	60b9      	str	r1, [r7, #8]
 800728e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007290:	2300      	movs	r3, #0
 8007292:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800729a:	2b01      	cmp	r3, #1
 800729c:	d101      	bne.n	80072a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800729e:	2302      	movs	r3, #2
 80072a0:	e0ae      	b.n	8007400 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2201      	movs	r2, #1
 80072a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2b0c      	cmp	r3, #12
 80072ae:	f200 809f 	bhi.w	80073f0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80072b2:	a201      	add	r2, pc, #4	; (adr r2, 80072b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80072b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072b8:	080072ed 	.word	0x080072ed
 80072bc:	080073f1 	.word	0x080073f1
 80072c0:	080073f1 	.word	0x080073f1
 80072c4:	080073f1 	.word	0x080073f1
 80072c8:	0800732d 	.word	0x0800732d
 80072cc:	080073f1 	.word	0x080073f1
 80072d0:	080073f1 	.word	0x080073f1
 80072d4:	080073f1 	.word	0x080073f1
 80072d8:	0800736f 	.word	0x0800736f
 80072dc:	080073f1 	.word	0x080073f1
 80072e0:	080073f1 	.word	0x080073f1
 80072e4:	080073f1 	.word	0x080073f1
 80072e8:	080073af 	.word	0x080073af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	68b9      	ldr	r1, [r7, #8]
 80072f2:	4618      	mov	r0, r3
 80072f4:	f000 f9d6 	bl	80076a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	699a      	ldr	r2, [r3, #24]
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f042 0208 	orr.w	r2, r2, #8
 8007306:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	699a      	ldr	r2, [r3, #24]
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f022 0204 	bic.w	r2, r2, #4
 8007316:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	6999      	ldr	r1, [r3, #24]
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	691a      	ldr	r2, [r3, #16]
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	430a      	orrs	r2, r1
 8007328:	619a      	str	r2, [r3, #24]
      break;
 800732a:	e064      	b.n	80073f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	68b9      	ldr	r1, [r7, #8]
 8007332:	4618      	mov	r0, r3
 8007334:	f000 fa1c 	bl	8007770 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	699a      	ldr	r2, [r3, #24]
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007346:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	699a      	ldr	r2, [r3, #24]
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007356:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	6999      	ldr	r1, [r3, #24]
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	691b      	ldr	r3, [r3, #16]
 8007362:	021a      	lsls	r2, r3, #8
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	430a      	orrs	r2, r1
 800736a:	619a      	str	r2, [r3, #24]
      break;
 800736c:	e043      	b.n	80073f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	68b9      	ldr	r1, [r7, #8]
 8007374:	4618      	mov	r0, r3
 8007376:	f000 fa65 	bl	8007844 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	69da      	ldr	r2, [r3, #28]
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f042 0208 	orr.w	r2, r2, #8
 8007388:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	69da      	ldr	r2, [r3, #28]
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f022 0204 	bic.w	r2, r2, #4
 8007398:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	69d9      	ldr	r1, [r3, #28]
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	691a      	ldr	r2, [r3, #16]
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	430a      	orrs	r2, r1
 80073aa:	61da      	str	r2, [r3, #28]
      break;
 80073ac:	e023      	b.n	80073f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	68b9      	ldr	r1, [r7, #8]
 80073b4:	4618      	mov	r0, r3
 80073b6:	f000 faaf 	bl	8007918 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	69da      	ldr	r2, [r3, #28]
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	69da      	ldr	r2, [r3, #28]
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	69d9      	ldr	r1, [r3, #28]
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	691b      	ldr	r3, [r3, #16]
 80073e4:	021a      	lsls	r2, r3, #8
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	430a      	orrs	r2, r1
 80073ec:	61da      	str	r2, [r3, #28]
      break;
 80073ee:	e002      	b.n	80073f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80073f0:	2301      	movs	r3, #1
 80073f2:	75fb      	strb	r3, [r7, #23]
      break;
 80073f4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2200      	movs	r2, #0
 80073fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80073fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007400:	4618      	mov	r0, r3
 8007402:	3718      	adds	r7, #24
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}

08007408 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b084      	sub	sp, #16
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
 8007410:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007412:	2300      	movs	r3, #0
 8007414:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800741c:	2b01      	cmp	r3, #1
 800741e:	d101      	bne.n	8007424 <HAL_TIM_ConfigClockSource+0x1c>
 8007420:	2302      	movs	r3, #2
 8007422:	e0b4      	b.n	800758e <HAL_TIM_ConfigClockSource+0x186>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2201      	movs	r2, #1
 8007428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2202      	movs	r2, #2
 8007430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	689b      	ldr	r3, [r3, #8]
 800743a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007442:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800744a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	68ba      	ldr	r2, [r7, #8]
 8007452:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800745c:	d03e      	beq.n	80074dc <HAL_TIM_ConfigClockSource+0xd4>
 800745e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007462:	f200 8087 	bhi.w	8007574 <HAL_TIM_ConfigClockSource+0x16c>
 8007466:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800746a:	f000 8086 	beq.w	800757a <HAL_TIM_ConfigClockSource+0x172>
 800746e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007472:	d87f      	bhi.n	8007574 <HAL_TIM_ConfigClockSource+0x16c>
 8007474:	2b70      	cmp	r3, #112	; 0x70
 8007476:	d01a      	beq.n	80074ae <HAL_TIM_ConfigClockSource+0xa6>
 8007478:	2b70      	cmp	r3, #112	; 0x70
 800747a:	d87b      	bhi.n	8007574 <HAL_TIM_ConfigClockSource+0x16c>
 800747c:	2b60      	cmp	r3, #96	; 0x60
 800747e:	d050      	beq.n	8007522 <HAL_TIM_ConfigClockSource+0x11a>
 8007480:	2b60      	cmp	r3, #96	; 0x60
 8007482:	d877      	bhi.n	8007574 <HAL_TIM_ConfigClockSource+0x16c>
 8007484:	2b50      	cmp	r3, #80	; 0x50
 8007486:	d03c      	beq.n	8007502 <HAL_TIM_ConfigClockSource+0xfa>
 8007488:	2b50      	cmp	r3, #80	; 0x50
 800748a:	d873      	bhi.n	8007574 <HAL_TIM_ConfigClockSource+0x16c>
 800748c:	2b40      	cmp	r3, #64	; 0x40
 800748e:	d058      	beq.n	8007542 <HAL_TIM_ConfigClockSource+0x13a>
 8007490:	2b40      	cmp	r3, #64	; 0x40
 8007492:	d86f      	bhi.n	8007574 <HAL_TIM_ConfigClockSource+0x16c>
 8007494:	2b30      	cmp	r3, #48	; 0x30
 8007496:	d064      	beq.n	8007562 <HAL_TIM_ConfigClockSource+0x15a>
 8007498:	2b30      	cmp	r3, #48	; 0x30
 800749a:	d86b      	bhi.n	8007574 <HAL_TIM_ConfigClockSource+0x16c>
 800749c:	2b20      	cmp	r3, #32
 800749e:	d060      	beq.n	8007562 <HAL_TIM_ConfigClockSource+0x15a>
 80074a0:	2b20      	cmp	r3, #32
 80074a2:	d867      	bhi.n	8007574 <HAL_TIM_ConfigClockSource+0x16c>
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d05c      	beq.n	8007562 <HAL_TIM_ConfigClockSource+0x15a>
 80074a8:	2b10      	cmp	r3, #16
 80074aa:	d05a      	beq.n	8007562 <HAL_TIM_ConfigClockSource+0x15a>
 80074ac:	e062      	b.n	8007574 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80074be:	f000 faf0 	bl	8007aa2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	689b      	ldr	r3, [r3, #8]
 80074c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80074d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	68ba      	ldr	r2, [r7, #8]
 80074d8:	609a      	str	r2, [r3, #8]
      break;
 80074da:	e04f      	b.n	800757c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80074ec:	f000 fad9 	bl	8007aa2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	689a      	ldr	r2, [r3, #8]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80074fe:	609a      	str	r2, [r3, #8]
      break;
 8007500:	e03c      	b.n	800757c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800750e:	461a      	mov	r2, r3
 8007510:	f000 fa50 	bl	80079b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	2150      	movs	r1, #80	; 0x50
 800751a:	4618      	mov	r0, r3
 800751c:	f000 faa7 	bl	8007a6e <TIM_ITRx_SetConfig>
      break;
 8007520:	e02c      	b.n	800757c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800752e:	461a      	mov	r2, r3
 8007530:	f000 fa6e 	bl	8007a10 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	2160      	movs	r1, #96	; 0x60
 800753a:	4618      	mov	r0, r3
 800753c:	f000 fa97 	bl	8007a6e <TIM_ITRx_SetConfig>
      break;
 8007540:	e01c      	b.n	800757c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800754e:	461a      	mov	r2, r3
 8007550:	f000 fa30 	bl	80079b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	2140      	movs	r1, #64	; 0x40
 800755a:	4618      	mov	r0, r3
 800755c:	f000 fa87 	bl	8007a6e <TIM_ITRx_SetConfig>
      break;
 8007560:	e00c      	b.n	800757c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681a      	ldr	r2, [r3, #0]
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4619      	mov	r1, r3
 800756c:	4610      	mov	r0, r2
 800756e:	f000 fa7e 	bl	8007a6e <TIM_ITRx_SetConfig>
      break;
 8007572:	e003      	b.n	800757c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007574:	2301      	movs	r3, #1
 8007576:	73fb      	strb	r3, [r7, #15]
      break;
 8007578:	e000      	b.n	800757c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800757a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2201      	movs	r2, #1
 8007580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2200      	movs	r2, #0
 8007588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800758c:	7bfb      	ldrb	r3, [r7, #15]
}
 800758e:	4618      	mov	r0, r3
 8007590:	3710      	adds	r7, #16
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}

08007596 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007596:	b480      	push	{r7}
 8007598:	b083      	sub	sp, #12
 800759a:	af00      	add	r7, sp, #0
 800759c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800759e:	bf00      	nop
 80075a0:	370c      	adds	r7, #12
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bc80      	pop	{r7}
 80075a6:	4770      	bx	lr

080075a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b083      	sub	sp, #12
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80075b0:	bf00      	nop
 80075b2:	370c      	adds	r7, #12
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bc80      	pop	{r7}
 80075b8:	4770      	bx	lr

080075ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80075ba:	b480      	push	{r7}
 80075bc:	b083      	sub	sp, #12
 80075be:	af00      	add	r7, sp, #0
 80075c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80075c2:	bf00      	nop
 80075c4:	370c      	adds	r7, #12
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bc80      	pop	{r7}
 80075ca:	4770      	bx	lr

080075cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b083      	sub	sp, #12
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80075d4:	bf00      	nop
 80075d6:	370c      	adds	r7, #12
 80075d8:	46bd      	mov	sp, r7
 80075da:	bc80      	pop	{r7}
 80075dc:	4770      	bx	lr
	...

080075e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b085      	sub	sp, #20
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	4a29      	ldr	r2, [pc, #164]	; (8007698 <TIM_Base_SetConfig+0xb8>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d00b      	beq.n	8007610 <TIM_Base_SetConfig+0x30>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075fe:	d007      	beq.n	8007610 <TIM_Base_SetConfig+0x30>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	4a26      	ldr	r2, [pc, #152]	; (800769c <TIM_Base_SetConfig+0xbc>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d003      	beq.n	8007610 <TIM_Base_SetConfig+0x30>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	4a25      	ldr	r2, [pc, #148]	; (80076a0 <TIM_Base_SetConfig+0xc0>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d108      	bne.n	8007622 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007616:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	68fa      	ldr	r2, [r7, #12]
 800761e:	4313      	orrs	r3, r2
 8007620:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	4a1c      	ldr	r2, [pc, #112]	; (8007698 <TIM_Base_SetConfig+0xb8>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d00b      	beq.n	8007642 <TIM_Base_SetConfig+0x62>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007630:	d007      	beq.n	8007642 <TIM_Base_SetConfig+0x62>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	4a19      	ldr	r2, [pc, #100]	; (800769c <TIM_Base_SetConfig+0xbc>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d003      	beq.n	8007642 <TIM_Base_SetConfig+0x62>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	4a18      	ldr	r2, [pc, #96]	; (80076a0 <TIM_Base_SetConfig+0xc0>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d108      	bne.n	8007654 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007648:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	68db      	ldr	r3, [r3, #12]
 800764e:	68fa      	ldr	r2, [r7, #12]
 8007650:	4313      	orrs	r3, r2
 8007652:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	695b      	ldr	r3, [r3, #20]
 800765e:	4313      	orrs	r3, r2
 8007660:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	68fa      	ldr	r2, [r7, #12]
 8007666:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	689a      	ldr	r2, [r3, #8]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	681a      	ldr	r2, [r3, #0]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	4a07      	ldr	r2, [pc, #28]	; (8007698 <TIM_Base_SetConfig+0xb8>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d103      	bne.n	8007688 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	691a      	ldr	r2, [r3, #16]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2201      	movs	r2, #1
 800768c:	615a      	str	r2, [r3, #20]
}
 800768e:	bf00      	nop
 8007690:	3714      	adds	r7, #20
 8007692:	46bd      	mov	sp, r7
 8007694:	bc80      	pop	{r7}
 8007696:	4770      	bx	lr
 8007698:	40012c00 	.word	0x40012c00
 800769c:	40000400 	.word	0x40000400
 80076a0:	40000800 	.word	0x40000800

080076a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b087      	sub	sp, #28
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6a1b      	ldr	r3, [r3, #32]
 80076b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6a1b      	ldr	r3, [r3, #32]
 80076b8:	f023 0201 	bic.w	r2, r3, #1
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	699b      	ldr	r3, [r3, #24]
 80076ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f023 0303 	bic.w	r3, r3, #3
 80076da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	68fa      	ldr	r2, [r7, #12]
 80076e2:	4313      	orrs	r3, r2
 80076e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	f023 0302 	bic.w	r3, r3, #2
 80076ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	689b      	ldr	r3, [r3, #8]
 80076f2:	697a      	ldr	r2, [r7, #20]
 80076f4:	4313      	orrs	r3, r2
 80076f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	4a1c      	ldr	r2, [pc, #112]	; (800776c <TIM_OC1_SetConfig+0xc8>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d10c      	bne.n	800771a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	f023 0308 	bic.w	r3, r3, #8
 8007706:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	68db      	ldr	r3, [r3, #12]
 800770c:	697a      	ldr	r2, [r7, #20]
 800770e:	4313      	orrs	r3, r2
 8007710:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	f023 0304 	bic.w	r3, r3, #4
 8007718:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	4a13      	ldr	r2, [pc, #76]	; (800776c <TIM_OC1_SetConfig+0xc8>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d111      	bne.n	8007746 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007728:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007730:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	695b      	ldr	r3, [r3, #20]
 8007736:	693a      	ldr	r2, [r7, #16]
 8007738:	4313      	orrs	r3, r2
 800773a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	699b      	ldr	r3, [r3, #24]
 8007740:	693a      	ldr	r2, [r7, #16]
 8007742:	4313      	orrs	r3, r2
 8007744:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	693a      	ldr	r2, [r7, #16]
 800774a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	68fa      	ldr	r2, [r7, #12]
 8007750:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	685a      	ldr	r2, [r3, #4]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	697a      	ldr	r2, [r7, #20]
 800775e:	621a      	str	r2, [r3, #32]
}
 8007760:	bf00      	nop
 8007762:	371c      	adds	r7, #28
 8007764:	46bd      	mov	sp, r7
 8007766:	bc80      	pop	{r7}
 8007768:	4770      	bx	lr
 800776a:	bf00      	nop
 800776c:	40012c00 	.word	0x40012c00

08007770 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007770:	b480      	push	{r7}
 8007772:	b087      	sub	sp, #28
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6a1b      	ldr	r3, [r3, #32]
 800777e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6a1b      	ldr	r3, [r3, #32]
 8007784:	f023 0210 	bic.w	r2, r3, #16
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	699b      	ldr	r3, [r3, #24]
 8007796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800779e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	021b      	lsls	r3, r3, #8
 80077ae:	68fa      	ldr	r2, [r7, #12]
 80077b0:	4313      	orrs	r3, r2
 80077b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	f023 0320 	bic.w	r3, r3, #32
 80077ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	689b      	ldr	r3, [r3, #8]
 80077c0:	011b      	lsls	r3, r3, #4
 80077c2:	697a      	ldr	r2, [r7, #20]
 80077c4:	4313      	orrs	r3, r2
 80077c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	4a1d      	ldr	r2, [pc, #116]	; (8007840 <TIM_OC2_SetConfig+0xd0>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d10d      	bne.n	80077ec <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	68db      	ldr	r3, [r3, #12]
 80077dc:	011b      	lsls	r3, r3, #4
 80077de:	697a      	ldr	r2, [r7, #20]
 80077e0:	4313      	orrs	r3, r2
 80077e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	4a14      	ldr	r2, [pc, #80]	; (8007840 <TIM_OC2_SetConfig+0xd0>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d113      	bne.n	800781c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80077fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007802:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	695b      	ldr	r3, [r3, #20]
 8007808:	009b      	lsls	r3, r3, #2
 800780a:	693a      	ldr	r2, [r7, #16]
 800780c:	4313      	orrs	r3, r2
 800780e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	699b      	ldr	r3, [r3, #24]
 8007814:	009b      	lsls	r3, r3, #2
 8007816:	693a      	ldr	r2, [r7, #16]
 8007818:	4313      	orrs	r3, r2
 800781a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	693a      	ldr	r2, [r7, #16]
 8007820:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	68fa      	ldr	r2, [r7, #12]
 8007826:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	685a      	ldr	r2, [r3, #4]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	697a      	ldr	r2, [r7, #20]
 8007834:	621a      	str	r2, [r3, #32]
}
 8007836:	bf00      	nop
 8007838:	371c      	adds	r7, #28
 800783a:	46bd      	mov	sp, r7
 800783c:	bc80      	pop	{r7}
 800783e:	4770      	bx	lr
 8007840:	40012c00 	.word	0x40012c00

08007844 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007844:	b480      	push	{r7}
 8007846:	b087      	sub	sp, #28
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6a1b      	ldr	r3, [r3, #32]
 8007852:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6a1b      	ldr	r3, [r3, #32]
 8007858:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	69db      	ldr	r3, [r3, #28]
 800786a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007872:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f023 0303 	bic.w	r3, r3, #3
 800787a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	68fa      	ldr	r2, [r7, #12]
 8007882:	4313      	orrs	r3, r2
 8007884:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800788c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	689b      	ldr	r3, [r3, #8]
 8007892:	021b      	lsls	r3, r3, #8
 8007894:	697a      	ldr	r2, [r7, #20]
 8007896:	4313      	orrs	r3, r2
 8007898:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	4a1d      	ldr	r2, [pc, #116]	; (8007914 <TIM_OC3_SetConfig+0xd0>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d10d      	bne.n	80078be <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80078a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	68db      	ldr	r3, [r3, #12]
 80078ae:	021b      	lsls	r3, r3, #8
 80078b0:	697a      	ldr	r2, [r7, #20]
 80078b2:	4313      	orrs	r3, r2
 80078b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80078bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	4a14      	ldr	r2, [pc, #80]	; (8007914 <TIM_OC3_SetConfig+0xd0>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d113      	bne.n	80078ee <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80078cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80078d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	695b      	ldr	r3, [r3, #20]
 80078da:	011b      	lsls	r3, r3, #4
 80078dc:	693a      	ldr	r2, [r7, #16]
 80078de:	4313      	orrs	r3, r2
 80078e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	699b      	ldr	r3, [r3, #24]
 80078e6:	011b      	lsls	r3, r3, #4
 80078e8:	693a      	ldr	r2, [r7, #16]
 80078ea:	4313      	orrs	r3, r2
 80078ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	693a      	ldr	r2, [r7, #16]
 80078f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	68fa      	ldr	r2, [r7, #12]
 80078f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	685a      	ldr	r2, [r3, #4]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	697a      	ldr	r2, [r7, #20]
 8007906:	621a      	str	r2, [r3, #32]
}
 8007908:	bf00      	nop
 800790a:	371c      	adds	r7, #28
 800790c:	46bd      	mov	sp, r7
 800790e:	bc80      	pop	{r7}
 8007910:	4770      	bx	lr
 8007912:	bf00      	nop
 8007914:	40012c00 	.word	0x40012c00

08007918 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007918:	b480      	push	{r7}
 800791a:	b087      	sub	sp, #28
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6a1b      	ldr	r3, [r3, #32]
 8007926:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6a1b      	ldr	r3, [r3, #32]
 800792c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	685b      	ldr	r3, [r3, #4]
 8007938:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	69db      	ldr	r3, [r3, #28]
 800793e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007946:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800794e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	021b      	lsls	r3, r3, #8
 8007956:	68fa      	ldr	r2, [r7, #12]
 8007958:	4313      	orrs	r3, r2
 800795a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007962:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	031b      	lsls	r3, r3, #12
 800796a:	693a      	ldr	r2, [r7, #16]
 800796c:	4313      	orrs	r3, r2
 800796e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	4a0f      	ldr	r2, [pc, #60]	; (80079b0 <TIM_OC4_SetConfig+0x98>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d109      	bne.n	800798c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800797e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	695b      	ldr	r3, [r3, #20]
 8007984:	019b      	lsls	r3, r3, #6
 8007986:	697a      	ldr	r2, [r7, #20]
 8007988:	4313      	orrs	r3, r2
 800798a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	697a      	ldr	r2, [r7, #20]
 8007990:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	68fa      	ldr	r2, [r7, #12]
 8007996:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	685a      	ldr	r2, [r3, #4]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	693a      	ldr	r2, [r7, #16]
 80079a4:	621a      	str	r2, [r3, #32]
}
 80079a6:	bf00      	nop
 80079a8:	371c      	adds	r7, #28
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bc80      	pop	{r7}
 80079ae:	4770      	bx	lr
 80079b0:	40012c00 	.word	0x40012c00

080079b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b087      	sub	sp, #28
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	60f8      	str	r0, [r7, #12]
 80079bc:	60b9      	str	r1, [r7, #8]
 80079be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	6a1b      	ldr	r3, [r3, #32]
 80079c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	6a1b      	ldr	r3, [r3, #32]
 80079ca:	f023 0201 	bic.w	r2, r3, #1
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	699b      	ldr	r3, [r3, #24]
 80079d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80079de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	011b      	lsls	r3, r3, #4
 80079e4:	693a      	ldr	r2, [r7, #16]
 80079e6:	4313      	orrs	r3, r2
 80079e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	f023 030a 	bic.w	r3, r3, #10
 80079f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80079f2:	697a      	ldr	r2, [r7, #20]
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	4313      	orrs	r3, r2
 80079f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	693a      	ldr	r2, [r7, #16]
 80079fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	697a      	ldr	r2, [r7, #20]
 8007a04:	621a      	str	r2, [r3, #32]
}
 8007a06:	bf00      	nop
 8007a08:	371c      	adds	r7, #28
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bc80      	pop	{r7}
 8007a0e:	4770      	bx	lr

08007a10 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b087      	sub	sp, #28
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	60f8      	str	r0, [r7, #12]
 8007a18:	60b9      	str	r1, [r7, #8]
 8007a1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	6a1b      	ldr	r3, [r3, #32]
 8007a20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	6a1b      	ldr	r3, [r3, #32]
 8007a26:	f023 0210 	bic.w	r2, r3, #16
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	699b      	ldr	r3, [r3, #24]
 8007a32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007a3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	031b      	lsls	r3, r3, #12
 8007a40:	693a      	ldr	r2, [r7, #16]
 8007a42:	4313      	orrs	r3, r2
 8007a44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007a4c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	011b      	lsls	r3, r3, #4
 8007a52:	697a      	ldr	r2, [r7, #20]
 8007a54:	4313      	orrs	r3, r2
 8007a56:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	693a      	ldr	r2, [r7, #16]
 8007a5c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	697a      	ldr	r2, [r7, #20]
 8007a62:	621a      	str	r2, [r3, #32]
}
 8007a64:	bf00      	nop
 8007a66:	371c      	adds	r7, #28
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bc80      	pop	{r7}
 8007a6c:	4770      	bx	lr

08007a6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007a6e:	b480      	push	{r7}
 8007a70:	b085      	sub	sp, #20
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	6078      	str	r0, [r7, #4]
 8007a76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	689b      	ldr	r3, [r3, #8]
 8007a7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007a86:	683a      	ldr	r2, [r7, #0]
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	4313      	orrs	r3, r2
 8007a8c:	f043 0307 	orr.w	r3, r3, #7
 8007a90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	68fa      	ldr	r2, [r7, #12]
 8007a96:	609a      	str	r2, [r3, #8]
}
 8007a98:	bf00      	nop
 8007a9a:	3714      	adds	r7, #20
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bc80      	pop	{r7}
 8007aa0:	4770      	bx	lr

08007aa2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007aa2:	b480      	push	{r7}
 8007aa4:	b087      	sub	sp, #28
 8007aa6:	af00      	add	r7, sp, #0
 8007aa8:	60f8      	str	r0, [r7, #12]
 8007aaa:	60b9      	str	r1, [r7, #8]
 8007aac:	607a      	str	r2, [r7, #4]
 8007aae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	689b      	ldr	r3, [r3, #8]
 8007ab4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007abc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	021a      	lsls	r2, r3, #8
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	431a      	orrs	r2, r3
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	697a      	ldr	r2, [r7, #20]
 8007acc:	4313      	orrs	r3, r2
 8007ace:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	697a      	ldr	r2, [r7, #20]
 8007ad4:	609a      	str	r2, [r3, #8]
}
 8007ad6:	bf00      	nop
 8007ad8:	371c      	adds	r7, #28
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bc80      	pop	{r7}
 8007ade:	4770      	bx	lr

08007ae0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b087      	sub	sp, #28
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	60f8      	str	r0, [r7, #12]
 8007ae8:	60b9      	str	r1, [r7, #8]
 8007aea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	f003 031f 	and.w	r3, r3, #31
 8007af2:	2201      	movs	r2, #1
 8007af4:	fa02 f303 	lsl.w	r3, r2, r3
 8007af8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	6a1a      	ldr	r2, [r3, #32]
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	43db      	mvns	r3, r3
 8007b02:	401a      	ands	r2, r3
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	6a1a      	ldr	r2, [r3, #32]
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	f003 031f 	and.w	r3, r3, #31
 8007b12:	6879      	ldr	r1, [r7, #4]
 8007b14:	fa01 f303 	lsl.w	r3, r1, r3
 8007b18:	431a      	orrs	r2, r3
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	621a      	str	r2, [r3, #32]
}
 8007b1e:	bf00      	nop
 8007b20:	371c      	adds	r7, #28
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bc80      	pop	{r7}
 8007b26:	4770      	bx	lr

08007b28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b085      	sub	sp, #20
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	d101      	bne.n	8007b40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007b3c:	2302      	movs	r3, #2
 8007b3e:	e046      	b.n	8007bce <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2201      	movs	r2, #1
 8007b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2202      	movs	r2, #2
 8007b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	685b      	ldr	r3, [r3, #4]
 8007b56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	689b      	ldr	r3, [r3, #8]
 8007b5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	68fa      	ldr	r2, [r7, #12]
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	68fa      	ldr	r2, [r7, #12]
 8007b78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4a16      	ldr	r2, [pc, #88]	; (8007bd8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d00e      	beq.n	8007ba2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b8c:	d009      	beq.n	8007ba2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4a12      	ldr	r2, [pc, #72]	; (8007bdc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d004      	beq.n	8007ba2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a10      	ldr	r2, [pc, #64]	; (8007be0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d10c      	bne.n	8007bbc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ba8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	68ba      	ldr	r2, [r7, #8]
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	68ba      	ldr	r2, [r7, #8]
 8007bba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007bcc:	2300      	movs	r3, #0
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3714      	adds	r7, #20
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bc80      	pop	{r7}
 8007bd6:	4770      	bx	lr
 8007bd8:	40012c00 	.word	0x40012c00
 8007bdc:	40000400 	.word	0x40000400
 8007be0:	40000800 	.word	0x40000800

08007be4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b083      	sub	sp, #12
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007bec:	bf00      	nop
 8007bee:	370c      	adds	r7, #12
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bc80      	pop	{r7}
 8007bf4:	4770      	bx	lr

08007bf6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007bf6:	b480      	push	{r7}
 8007bf8:	b083      	sub	sp, #12
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007bfe:	bf00      	nop
 8007c00:	370c      	adds	r7, #12
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bc80      	pop	{r7}
 8007c06:	4770      	bx	lr

08007c08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b082      	sub	sp, #8
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d101      	bne.n	8007c1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c16:	2301      	movs	r3, #1
 8007c18:	e042      	b.n	8007ca0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c20:	b2db      	uxtb	r3, r3
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d106      	bne.n	8007c34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f7fc ff72 	bl	8004b18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2224      	movs	r2, #36	; 0x24
 8007c38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	68da      	ldr	r2, [r3, #12]
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007c4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f000 fd71 	bl	8008734 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	691a      	ldr	r2, [r3, #16]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007c60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	695a      	ldr	r2, [r3, #20]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007c70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	68da      	ldr	r2, [r3, #12]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007c80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2200      	movs	r2, #0
 8007c86:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2220      	movs	r2, #32
 8007c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2220      	movs	r2, #32
 8007c94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007c9e:	2300      	movs	r3, #0
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	3708      	adds	r7, #8
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}

08007ca8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b08a      	sub	sp, #40	; 0x28
 8007cac:	af02      	add	r7, sp, #8
 8007cae:	60f8      	str	r0, [r7, #12]
 8007cb0:	60b9      	str	r1, [r7, #8]
 8007cb2:	603b      	str	r3, [r7, #0]
 8007cb4:	4613      	mov	r3, r2
 8007cb6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007cc2:	b2db      	uxtb	r3, r3
 8007cc4:	2b20      	cmp	r3, #32
 8007cc6:	d16d      	bne.n	8007da4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d002      	beq.n	8007cd4 <HAL_UART_Transmit+0x2c>
 8007cce:	88fb      	ldrh	r3, [r7, #6]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d101      	bne.n	8007cd8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	e066      	b.n	8007da6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	2221      	movs	r2, #33	; 0x21
 8007ce2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007ce6:	f7fd f861 	bl	8004dac <HAL_GetTick>
 8007cea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	88fa      	ldrh	r2, [r7, #6]
 8007cf0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	88fa      	ldrh	r2, [r7, #6]
 8007cf6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	689b      	ldr	r3, [r3, #8]
 8007cfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d00:	d108      	bne.n	8007d14 <HAL_UART_Transmit+0x6c>
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	691b      	ldr	r3, [r3, #16]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d104      	bne.n	8007d14 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	61bb      	str	r3, [r7, #24]
 8007d12:	e003      	b.n	8007d1c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007d1c:	e02a      	b.n	8007d74 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	9300      	str	r3, [sp, #0]
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	2200      	movs	r2, #0
 8007d26:	2180      	movs	r1, #128	; 0x80
 8007d28:	68f8      	ldr	r0, [r7, #12]
 8007d2a:	f000 faf9 	bl	8008320 <UART_WaitOnFlagUntilTimeout>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d001      	beq.n	8007d38 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8007d34:	2303      	movs	r3, #3
 8007d36:	e036      	b.n	8007da6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8007d38:	69fb      	ldr	r3, [r7, #28]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d10b      	bne.n	8007d56 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007d3e:	69bb      	ldr	r3, [r7, #24]
 8007d40:	881b      	ldrh	r3, [r3, #0]
 8007d42:	461a      	mov	r2, r3
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007d4c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007d4e:	69bb      	ldr	r3, [r7, #24]
 8007d50:	3302      	adds	r3, #2
 8007d52:	61bb      	str	r3, [r7, #24]
 8007d54:	e007      	b.n	8007d66 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007d56:	69fb      	ldr	r3, [r7, #28]
 8007d58:	781a      	ldrb	r2, [r3, #0]
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007d60:	69fb      	ldr	r3, [r7, #28]
 8007d62:	3301      	adds	r3, #1
 8007d64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	3b01      	subs	r3, #1
 8007d6e:	b29a      	uxth	r2, r3
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007d78:	b29b      	uxth	r3, r3
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d1cf      	bne.n	8007d1e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	9300      	str	r3, [sp, #0]
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	2200      	movs	r2, #0
 8007d86:	2140      	movs	r1, #64	; 0x40
 8007d88:	68f8      	ldr	r0, [r7, #12]
 8007d8a:	f000 fac9 	bl	8008320 <UART_WaitOnFlagUntilTimeout>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d001      	beq.n	8007d98 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8007d94:	2303      	movs	r3, #3
 8007d96:	e006      	b.n	8007da6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	2220      	movs	r2, #32
 8007d9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8007da0:	2300      	movs	r3, #0
 8007da2:	e000      	b.n	8007da6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8007da4:	2302      	movs	r3, #2
  }
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3720      	adds	r7, #32
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}
	...

08007db0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b0ba      	sub	sp, #232	; 0xe8
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	68db      	ldr	r3, [r3, #12]
 8007dc8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	695b      	ldr	r3, [r3, #20]
 8007dd2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007de6:	f003 030f 	and.w	r3, r3, #15
 8007dea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007dee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d10f      	bne.n	8007e16 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dfa:	f003 0320 	and.w	r3, r3, #32
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d009      	beq.n	8007e16 <HAL_UART_IRQHandler+0x66>
 8007e02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e06:	f003 0320 	and.w	r3, r3, #32
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d003      	beq.n	8007e16 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f000 fbd1 	bl	80085b6 <UART_Receive_IT>
      return;
 8007e14:	e25b      	b.n	80082ce <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007e16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	f000 80de 	beq.w	8007fdc <HAL_UART_IRQHandler+0x22c>
 8007e20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e24:	f003 0301 	and.w	r3, r3, #1
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d106      	bne.n	8007e3a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007e2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e30:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	f000 80d1 	beq.w	8007fdc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007e3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e3e:	f003 0301 	and.w	r3, r3, #1
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d00b      	beq.n	8007e5e <HAL_UART_IRQHandler+0xae>
 8007e46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d005      	beq.n	8007e5e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e56:	f043 0201 	orr.w	r2, r3, #1
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007e5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e62:	f003 0304 	and.w	r3, r3, #4
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d00b      	beq.n	8007e82 <HAL_UART_IRQHandler+0xd2>
 8007e6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e6e:	f003 0301 	and.w	r3, r3, #1
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d005      	beq.n	8007e82 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e7a:	f043 0202 	orr.w	r2, r3, #2
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e86:	f003 0302 	and.w	r3, r3, #2
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d00b      	beq.n	8007ea6 <HAL_UART_IRQHandler+0xf6>
 8007e8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e92:	f003 0301 	and.w	r3, r3, #1
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d005      	beq.n	8007ea6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e9e:	f043 0204 	orr.w	r2, r3, #4
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007ea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007eaa:	f003 0308 	and.w	r3, r3, #8
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d011      	beq.n	8007ed6 <HAL_UART_IRQHandler+0x126>
 8007eb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007eb6:	f003 0320 	and.w	r3, r3, #32
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d105      	bne.n	8007eca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007ebe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ec2:	f003 0301 	and.w	r3, r3, #1
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d005      	beq.n	8007ed6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ece:	f043 0208 	orr.w	r2, r3, #8
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	f000 81f2 	beq.w	80082c4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007ee0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ee4:	f003 0320 	and.w	r3, r3, #32
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d008      	beq.n	8007efe <HAL_UART_IRQHandler+0x14e>
 8007eec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ef0:	f003 0320 	and.w	r3, r3, #32
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d002      	beq.n	8007efe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f000 fb5c 	bl	80085b6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	695b      	ldr	r3, [r3, #20]
 8007f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	bf14      	ite	ne
 8007f0c:	2301      	movne	r3, #1
 8007f0e:	2300      	moveq	r3, #0
 8007f10:	b2db      	uxtb	r3, r3
 8007f12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f1a:	f003 0308 	and.w	r3, r3, #8
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d103      	bne.n	8007f2a <HAL_UART_IRQHandler+0x17a>
 8007f22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d04f      	beq.n	8007fca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f000 fa66 	bl	80083fc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	695b      	ldr	r3, [r3, #20]
 8007f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d041      	beq.n	8007fc2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	3314      	adds	r3, #20
 8007f44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007f4c:	e853 3f00 	ldrex	r3, [r3]
 8007f50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007f54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	3314      	adds	r3, #20
 8007f66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007f6a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007f6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007f76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007f7a:	e841 2300 	strex	r3, r2, [r1]
 8007f7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007f82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d1d9      	bne.n	8007f3e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d013      	beq.n	8007fba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f96:	4a7e      	ldr	r2, [pc, #504]	; (8008190 <HAL_UART_IRQHandler+0x3e0>)
 8007f98:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f7fd f856 	bl	8005050 <HAL_DMA_Abort_IT>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d016      	beq.n	8007fd8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fb0:	687a      	ldr	r2, [r7, #4]
 8007fb2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007fb4:	4610      	mov	r0, r2
 8007fb6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fb8:	e00e      	b.n	8007fd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f000 f99c 	bl	80082f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fc0:	e00a      	b.n	8007fd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f000 f998 	bl	80082f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fc8:	e006      	b.n	8007fd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f000 f994 	bl	80082f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8007fd6:	e175      	b.n	80082c4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fd8:	bf00      	nop
    return;
 8007fda:	e173      	b.n	80082c4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	f040 814f 	bne.w	8008284 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007fe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fea:	f003 0310 	and.w	r3, r3, #16
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	f000 8148 	beq.w	8008284 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007ff4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ff8:	f003 0310 	and.w	r3, r3, #16
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	f000 8141 	beq.w	8008284 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008002:	2300      	movs	r3, #0
 8008004:	60bb      	str	r3, [r7, #8]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	60bb      	str	r3, [r7, #8]
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	685b      	ldr	r3, [r3, #4]
 8008014:	60bb      	str	r3, [r7, #8]
 8008016:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	695b      	ldr	r3, [r3, #20]
 800801e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008022:	2b00      	cmp	r3, #0
 8008024:	f000 80b6 	beq.w	8008194 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008034:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008038:	2b00      	cmp	r3, #0
 800803a:	f000 8145 	beq.w	80082c8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008042:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008046:	429a      	cmp	r2, r3
 8008048:	f080 813e 	bcs.w	80082c8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008052:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008058:	699b      	ldr	r3, [r3, #24]
 800805a:	2b20      	cmp	r3, #32
 800805c:	f000 8088 	beq.w	8008170 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	330c      	adds	r3, #12
 8008066:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800806a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800806e:	e853 3f00 	ldrex	r3, [r3]
 8008072:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008076:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800807a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800807e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	330c      	adds	r3, #12
 8008088:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800808c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008090:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008094:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008098:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800809c:	e841 2300 	strex	r3, r2, [r1]
 80080a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80080a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d1d9      	bne.n	8008060 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	3314      	adds	r3, #20
 80080b2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80080b6:	e853 3f00 	ldrex	r3, [r3]
 80080ba:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80080bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80080be:	f023 0301 	bic.w	r3, r3, #1
 80080c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	3314      	adds	r3, #20
 80080cc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80080d0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80080d4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080d6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80080d8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80080dc:	e841 2300 	strex	r3, r2, [r1]
 80080e0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80080e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d1e1      	bne.n	80080ac <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	3314      	adds	r3, #20
 80080ee:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80080f2:	e853 3f00 	ldrex	r3, [r3]
 80080f6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80080f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80080fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	3314      	adds	r3, #20
 8008108:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800810c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800810e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008110:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008112:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008114:	e841 2300 	strex	r3, r2, [r1]
 8008118:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800811a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800811c:	2b00      	cmp	r3, #0
 800811e:	d1e3      	bne.n	80080e8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2220      	movs	r2, #32
 8008124:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2200      	movs	r2, #0
 800812c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	330c      	adds	r3, #12
 8008134:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008136:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008138:	e853 3f00 	ldrex	r3, [r3]
 800813c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800813e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008140:	f023 0310 	bic.w	r3, r3, #16
 8008144:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	330c      	adds	r3, #12
 800814e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008152:	65ba      	str	r2, [r7, #88]	; 0x58
 8008154:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008156:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008158:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800815a:	e841 2300 	strex	r3, r2, [r1]
 800815e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008160:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008162:	2b00      	cmp	r3, #0
 8008164:	d1e3      	bne.n	800812e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800816a:	4618      	mov	r0, r3
 800816c:	f7fc ff35 	bl	8004fda <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2202      	movs	r2, #2
 8008174:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800817e:	b29b      	uxth	r3, r3
 8008180:	1ad3      	subs	r3, r2, r3
 8008182:	b29b      	uxth	r3, r3
 8008184:	4619      	mov	r1, r3
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f000 f8bf 	bl	800830a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800818c:	e09c      	b.n	80082c8 <HAL_UART_IRQHandler+0x518>
 800818e:	bf00      	nop
 8008190:	080084c1 	.word	0x080084c1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800819c:	b29b      	uxth	r3, r3
 800819e:	1ad3      	subs	r3, r2, r3
 80081a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80081a8:	b29b      	uxth	r3, r3
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	f000 808e 	beq.w	80082cc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80081b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	f000 8089 	beq.w	80082cc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	330c      	adds	r3, #12
 80081c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081c4:	e853 3f00 	ldrex	r3, [r3]
 80081c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80081ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80081d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	330c      	adds	r3, #12
 80081da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80081de:	647a      	str	r2, [r7, #68]	; 0x44
 80081e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80081e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80081e6:	e841 2300 	strex	r3, r2, [r1]
 80081ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80081ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d1e3      	bne.n	80081ba <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	3314      	adds	r3, #20
 80081f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081fc:	e853 3f00 	ldrex	r3, [r3]
 8008200:	623b      	str	r3, [r7, #32]
   return(result);
 8008202:	6a3b      	ldr	r3, [r7, #32]
 8008204:	f023 0301 	bic.w	r3, r3, #1
 8008208:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	3314      	adds	r3, #20
 8008212:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008216:	633a      	str	r2, [r7, #48]	; 0x30
 8008218:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800821a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800821c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800821e:	e841 2300 	strex	r3, r2, [r1]
 8008222:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008226:	2b00      	cmp	r3, #0
 8008228:	d1e3      	bne.n	80081f2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2220      	movs	r2, #32
 800822e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2200      	movs	r2, #0
 8008236:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	330c      	adds	r3, #12
 800823e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	e853 3f00 	ldrex	r3, [r3]
 8008246:	60fb      	str	r3, [r7, #12]
   return(result);
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	f023 0310 	bic.w	r3, r3, #16
 800824e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	330c      	adds	r3, #12
 8008258:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800825c:	61fa      	str	r2, [r7, #28]
 800825e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008260:	69b9      	ldr	r1, [r7, #24]
 8008262:	69fa      	ldr	r2, [r7, #28]
 8008264:	e841 2300 	strex	r3, r2, [r1]
 8008268:	617b      	str	r3, [r7, #20]
   return(result);
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d1e3      	bne.n	8008238 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2202      	movs	r2, #2
 8008274:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008276:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800827a:	4619      	mov	r1, r3
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f000 f844 	bl	800830a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008282:	e023      	b.n	80082cc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008284:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008288:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800828c:	2b00      	cmp	r3, #0
 800828e:	d009      	beq.n	80082a4 <HAL_UART_IRQHandler+0x4f4>
 8008290:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008294:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008298:	2b00      	cmp	r3, #0
 800829a:	d003      	beq.n	80082a4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f000 f923 	bl	80084e8 <UART_Transmit_IT>
    return;
 80082a2:	e014      	b.n	80082ce <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80082a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d00e      	beq.n	80082ce <HAL_UART_IRQHandler+0x51e>
 80082b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d008      	beq.n	80082ce <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f000 f962 	bl	8008586 <UART_EndTransmit_IT>
    return;
 80082c2:	e004      	b.n	80082ce <HAL_UART_IRQHandler+0x51e>
    return;
 80082c4:	bf00      	nop
 80082c6:	e002      	b.n	80082ce <HAL_UART_IRQHandler+0x51e>
      return;
 80082c8:	bf00      	nop
 80082ca:	e000      	b.n	80082ce <HAL_UART_IRQHandler+0x51e>
      return;
 80082cc:	bf00      	nop
  }
}
 80082ce:	37e8      	adds	r7, #232	; 0xe8
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}

080082d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b083      	sub	sp, #12
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80082dc:	bf00      	nop
 80082de:	370c      	adds	r7, #12
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bc80      	pop	{r7}
 80082e4:	4770      	bx	lr

080082e6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80082e6:	b480      	push	{r7}
 80082e8:	b083      	sub	sp, #12
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80082ee:	bf00      	nop
 80082f0:	370c      	adds	r7, #12
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bc80      	pop	{r7}
 80082f6:	4770      	bx	lr

080082f8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80082f8:	b480      	push	{r7}
 80082fa:	b083      	sub	sp, #12
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008300:	bf00      	nop
 8008302:	370c      	adds	r7, #12
 8008304:	46bd      	mov	sp, r7
 8008306:	bc80      	pop	{r7}
 8008308:	4770      	bx	lr

0800830a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800830a:	b480      	push	{r7}
 800830c:	b083      	sub	sp, #12
 800830e:	af00      	add	r7, sp, #0
 8008310:	6078      	str	r0, [r7, #4]
 8008312:	460b      	mov	r3, r1
 8008314:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008316:	bf00      	nop
 8008318:	370c      	adds	r7, #12
 800831a:	46bd      	mov	sp, r7
 800831c:	bc80      	pop	{r7}
 800831e:	4770      	bx	lr

08008320 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b090      	sub	sp, #64	; 0x40
 8008324:	af00      	add	r7, sp, #0
 8008326:	60f8      	str	r0, [r7, #12]
 8008328:	60b9      	str	r1, [r7, #8]
 800832a:	603b      	str	r3, [r7, #0]
 800832c:	4613      	mov	r3, r2
 800832e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008330:	e050      	b.n	80083d4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008332:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008338:	d04c      	beq.n	80083d4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800833a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800833c:	2b00      	cmp	r3, #0
 800833e:	d007      	beq.n	8008350 <UART_WaitOnFlagUntilTimeout+0x30>
 8008340:	f7fc fd34 	bl	8004dac <HAL_GetTick>
 8008344:	4602      	mov	r2, r0
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	1ad3      	subs	r3, r2, r3
 800834a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800834c:	429a      	cmp	r2, r3
 800834e:	d241      	bcs.n	80083d4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	330c      	adds	r3, #12
 8008356:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800835a:	e853 3f00 	ldrex	r3, [r3]
 800835e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008362:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008366:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	330c      	adds	r3, #12
 800836e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008370:	637a      	str	r2, [r7, #52]	; 0x34
 8008372:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008374:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008376:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008378:	e841 2300 	strex	r3, r2, [r1]
 800837c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800837e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008380:	2b00      	cmp	r3, #0
 8008382:	d1e5      	bne.n	8008350 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	3314      	adds	r3, #20
 800838a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	e853 3f00 	ldrex	r3, [r3]
 8008392:	613b      	str	r3, [r7, #16]
   return(result);
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	f023 0301 	bic.w	r3, r3, #1
 800839a:	63bb      	str	r3, [r7, #56]	; 0x38
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	3314      	adds	r3, #20
 80083a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80083a4:	623a      	str	r2, [r7, #32]
 80083a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083a8:	69f9      	ldr	r1, [r7, #28]
 80083aa:	6a3a      	ldr	r2, [r7, #32]
 80083ac:	e841 2300 	strex	r3, r2, [r1]
 80083b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80083b2:	69bb      	ldr	r3, [r7, #24]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d1e5      	bne.n	8008384 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	2220      	movs	r2, #32
 80083bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	2220      	movs	r2, #32
 80083c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	2200      	movs	r2, #0
 80083cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80083d0:	2303      	movs	r3, #3
 80083d2:	e00f      	b.n	80083f4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	681a      	ldr	r2, [r3, #0]
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	4013      	ands	r3, r2
 80083de:	68ba      	ldr	r2, [r7, #8]
 80083e0:	429a      	cmp	r2, r3
 80083e2:	bf0c      	ite	eq
 80083e4:	2301      	moveq	r3, #1
 80083e6:	2300      	movne	r3, #0
 80083e8:	b2db      	uxtb	r3, r3
 80083ea:	461a      	mov	r2, r3
 80083ec:	79fb      	ldrb	r3, [r7, #7]
 80083ee:	429a      	cmp	r2, r3
 80083f0:	d09f      	beq.n	8008332 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80083f2:	2300      	movs	r3, #0
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	3740      	adds	r7, #64	; 0x40
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}

080083fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80083fc:	b480      	push	{r7}
 80083fe:	b095      	sub	sp, #84	; 0x54
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	330c      	adds	r3, #12
 800840a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800840c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800840e:	e853 3f00 	ldrex	r3, [r3]
 8008412:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008416:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800841a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	330c      	adds	r3, #12
 8008422:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008424:	643a      	str	r2, [r7, #64]	; 0x40
 8008426:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008428:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800842a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800842c:	e841 2300 	strex	r3, r2, [r1]
 8008430:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008434:	2b00      	cmp	r3, #0
 8008436:	d1e5      	bne.n	8008404 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	3314      	adds	r3, #20
 800843e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008440:	6a3b      	ldr	r3, [r7, #32]
 8008442:	e853 3f00 	ldrex	r3, [r3]
 8008446:	61fb      	str	r3, [r7, #28]
   return(result);
 8008448:	69fb      	ldr	r3, [r7, #28]
 800844a:	f023 0301 	bic.w	r3, r3, #1
 800844e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	3314      	adds	r3, #20
 8008456:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008458:	62fa      	str	r2, [r7, #44]	; 0x2c
 800845a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800845c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800845e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008460:	e841 2300 	strex	r3, r2, [r1]
 8008464:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008468:	2b00      	cmp	r3, #0
 800846a:	d1e5      	bne.n	8008438 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008470:	2b01      	cmp	r3, #1
 8008472:	d119      	bne.n	80084a8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	330c      	adds	r3, #12
 800847a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	e853 3f00 	ldrex	r3, [r3]
 8008482:	60bb      	str	r3, [r7, #8]
   return(result);
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	f023 0310 	bic.w	r3, r3, #16
 800848a:	647b      	str	r3, [r7, #68]	; 0x44
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	330c      	adds	r3, #12
 8008492:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008494:	61ba      	str	r2, [r7, #24]
 8008496:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008498:	6979      	ldr	r1, [r7, #20]
 800849a:	69ba      	ldr	r2, [r7, #24]
 800849c:	e841 2300 	strex	r3, r2, [r1]
 80084a0:	613b      	str	r3, [r7, #16]
   return(result);
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d1e5      	bne.n	8008474 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2220      	movs	r2, #32
 80084ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2200      	movs	r2, #0
 80084b4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80084b6:	bf00      	nop
 80084b8:	3754      	adds	r7, #84	; 0x54
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bc80      	pop	{r7}
 80084be:	4770      	bx	lr

080084c0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b084      	sub	sp, #16
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	2200      	movs	r2, #0
 80084d2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	2200      	movs	r2, #0
 80084d8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80084da:	68f8      	ldr	r0, [r7, #12]
 80084dc:	f7ff ff0c 	bl	80082f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80084e0:	bf00      	nop
 80084e2:	3710      	adds	r7, #16
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}

080084e8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80084e8:	b480      	push	{r7}
 80084ea:	b085      	sub	sp, #20
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80084f6:	b2db      	uxtb	r3, r3
 80084f8:	2b21      	cmp	r3, #33	; 0x21
 80084fa:	d13e      	bne.n	800857a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	689b      	ldr	r3, [r3, #8]
 8008500:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008504:	d114      	bne.n	8008530 <UART_Transmit_IT+0x48>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	691b      	ldr	r3, [r3, #16]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d110      	bne.n	8008530 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6a1b      	ldr	r3, [r3, #32]
 8008512:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	881b      	ldrh	r3, [r3, #0]
 8008518:	461a      	mov	r2, r3
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008522:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6a1b      	ldr	r3, [r3, #32]
 8008528:	1c9a      	adds	r2, r3, #2
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	621a      	str	r2, [r3, #32]
 800852e:	e008      	b.n	8008542 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6a1b      	ldr	r3, [r3, #32]
 8008534:	1c59      	adds	r1, r3, #1
 8008536:	687a      	ldr	r2, [r7, #4]
 8008538:	6211      	str	r1, [r2, #32]
 800853a:	781a      	ldrb	r2, [r3, #0]
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008546:	b29b      	uxth	r3, r3
 8008548:	3b01      	subs	r3, #1
 800854a:	b29b      	uxth	r3, r3
 800854c:	687a      	ldr	r2, [r7, #4]
 800854e:	4619      	mov	r1, r3
 8008550:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008552:	2b00      	cmp	r3, #0
 8008554:	d10f      	bne.n	8008576 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	68da      	ldr	r2, [r3, #12]
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008564:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	68da      	ldr	r2, [r3, #12]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008574:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008576:	2300      	movs	r3, #0
 8008578:	e000      	b.n	800857c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800857a:	2302      	movs	r3, #2
  }
}
 800857c:	4618      	mov	r0, r3
 800857e:	3714      	adds	r7, #20
 8008580:	46bd      	mov	sp, r7
 8008582:	bc80      	pop	{r7}
 8008584:	4770      	bx	lr

08008586 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008586:	b580      	push	{r7, lr}
 8008588:	b082      	sub	sp, #8
 800858a:	af00      	add	r7, sp, #0
 800858c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	68da      	ldr	r2, [r3, #12]
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800859c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2220      	movs	r2, #32
 80085a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f7ff fe94 	bl	80082d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80085ac:	2300      	movs	r3, #0
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3708      	adds	r7, #8
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}

080085b6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80085b6:	b580      	push	{r7, lr}
 80085b8:	b08c      	sub	sp, #48	; 0x30
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80085c4:	b2db      	uxtb	r3, r3
 80085c6:	2b22      	cmp	r3, #34	; 0x22
 80085c8:	f040 80ae 	bne.w	8008728 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	689b      	ldr	r3, [r3, #8]
 80085d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085d4:	d117      	bne.n	8008606 <UART_Receive_IT+0x50>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	691b      	ldr	r3, [r3, #16]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d113      	bne.n	8008606 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80085de:	2300      	movs	r3, #0
 80085e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085e6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	b29b      	uxth	r3, r3
 80085f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085f4:	b29a      	uxth	r2, r3
 80085f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085f8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085fe:	1c9a      	adds	r2, r3, #2
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	629a      	str	r2, [r3, #40]	; 0x28
 8008604:	e026      	b.n	8008654 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800860a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800860c:	2300      	movs	r3, #0
 800860e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	689b      	ldr	r3, [r3, #8]
 8008614:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008618:	d007      	beq.n	800862a <UART_Receive_IT+0x74>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	689b      	ldr	r3, [r3, #8]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d10a      	bne.n	8008638 <UART_Receive_IT+0x82>
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	691b      	ldr	r3, [r3, #16]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d106      	bne.n	8008638 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	b2da      	uxtb	r2, r3
 8008632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008634:	701a      	strb	r2, [r3, #0]
 8008636:	e008      	b.n	800864a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	b2db      	uxtb	r3, r3
 8008640:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008644:	b2da      	uxtb	r2, r3
 8008646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008648:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800864e:	1c5a      	adds	r2, r3, #1
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008658:	b29b      	uxth	r3, r3
 800865a:	3b01      	subs	r3, #1
 800865c:	b29b      	uxth	r3, r3
 800865e:	687a      	ldr	r2, [r7, #4]
 8008660:	4619      	mov	r1, r3
 8008662:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008664:	2b00      	cmp	r3, #0
 8008666:	d15d      	bne.n	8008724 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	68da      	ldr	r2, [r3, #12]
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f022 0220 	bic.w	r2, r2, #32
 8008676:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	68da      	ldr	r2, [r3, #12]
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008686:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	695a      	ldr	r2, [r3, #20]
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f022 0201 	bic.w	r2, r2, #1
 8008696:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2220      	movs	r2, #32
 800869c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2200      	movs	r2, #0
 80086a4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086aa:	2b01      	cmp	r3, #1
 80086ac:	d135      	bne.n	800871a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2200      	movs	r2, #0
 80086b2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	330c      	adds	r3, #12
 80086ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	e853 3f00 	ldrex	r3, [r3]
 80086c2:	613b      	str	r3, [r7, #16]
   return(result);
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	f023 0310 	bic.w	r3, r3, #16
 80086ca:	627b      	str	r3, [r7, #36]	; 0x24
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	330c      	adds	r3, #12
 80086d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086d4:	623a      	str	r2, [r7, #32]
 80086d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086d8:	69f9      	ldr	r1, [r7, #28]
 80086da:	6a3a      	ldr	r2, [r7, #32]
 80086dc:	e841 2300 	strex	r3, r2, [r1]
 80086e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80086e2:	69bb      	ldr	r3, [r7, #24]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d1e5      	bne.n	80086b4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f003 0310 	and.w	r3, r3, #16
 80086f2:	2b10      	cmp	r3, #16
 80086f4:	d10a      	bne.n	800870c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80086f6:	2300      	movs	r3, #0
 80086f8:	60fb      	str	r3, [r7, #12]
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	60fb      	str	r3, [r7, #12]
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	685b      	ldr	r3, [r3, #4]
 8008708:	60fb      	str	r3, [r7, #12]
 800870a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008710:	4619      	mov	r1, r3
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f7ff fdf9 	bl	800830a <HAL_UARTEx_RxEventCallback>
 8008718:	e002      	b.n	8008720 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f7ff fde3 	bl	80082e6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008720:	2300      	movs	r3, #0
 8008722:	e002      	b.n	800872a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008724:	2300      	movs	r3, #0
 8008726:	e000      	b.n	800872a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008728:	2302      	movs	r3, #2
  }
}
 800872a:	4618      	mov	r0, r3
 800872c:	3730      	adds	r7, #48	; 0x30
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}
	...

08008734 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b084      	sub	sp, #16
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	691b      	ldr	r3, [r3, #16]
 8008742:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	68da      	ldr	r2, [r3, #12]
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	430a      	orrs	r2, r1
 8008750:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	689a      	ldr	r2, [r3, #8]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	691b      	ldr	r3, [r3, #16]
 800875a:	431a      	orrs	r2, r3
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	695b      	ldr	r3, [r3, #20]
 8008760:	4313      	orrs	r3, r2
 8008762:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	68db      	ldr	r3, [r3, #12]
 800876a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800876e:	f023 030c 	bic.w	r3, r3, #12
 8008772:	687a      	ldr	r2, [r7, #4]
 8008774:	6812      	ldr	r2, [r2, #0]
 8008776:	68b9      	ldr	r1, [r7, #8]
 8008778:	430b      	orrs	r3, r1
 800877a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	695b      	ldr	r3, [r3, #20]
 8008782:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	699a      	ldr	r2, [r3, #24]
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	430a      	orrs	r2, r1
 8008790:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	4a2c      	ldr	r2, [pc, #176]	; (8008848 <UART_SetConfig+0x114>)
 8008798:	4293      	cmp	r3, r2
 800879a:	d103      	bne.n	80087a4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800879c:	f7fe faa4 	bl	8006ce8 <HAL_RCC_GetPCLK2Freq>
 80087a0:	60f8      	str	r0, [r7, #12]
 80087a2:	e002      	b.n	80087aa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80087a4:	f7fe fa8c 	bl	8006cc0 <HAL_RCC_GetPCLK1Freq>
 80087a8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80087aa:	68fa      	ldr	r2, [r7, #12]
 80087ac:	4613      	mov	r3, r2
 80087ae:	009b      	lsls	r3, r3, #2
 80087b0:	4413      	add	r3, r2
 80087b2:	009a      	lsls	r2, r3, #2
 80087b4:	441a      	add	r2, r3
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	685b      	ldr	r3, [r3, #4]
 80087ba:	009b      	lsls	r3, r3, #2
 80087bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80087c0:	4a22      	ldr	r2, [pc, #136]	; (800884c <UART_SetConfig+0x118>)
 80087c2:	fba2 2303 	umull	r2, r3, r2, r3
 80087c6:	095b      	lsrs	r3, r3, #5
 80087c8:	0119      	lsls	r1, r3, #4
 80087ca:	68fa      	ldr	r2, [r7, #12]
 80087cc:	4613      	mov	r3, r2
 80087ce:	009b      	lsls	r3, r3, #2
 80087d0:	4413      	add	r3, r2
 80087d2:	009a      	lsls	r2, r3, #2
 80087d4:	441a      	add	r2, r3
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	685b      	ldr	r3, [r3, #4]
 80087da:	009b      	lsls	r3, r3, #2
 80087dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80087e0:	4b1a      	ldr	r3, [pc, #104]	; (800884c <UART_SetConfig+0x118>)
 80087e2:	fba3 0302 	umull	r0, r3, r3, r2
 80087e6:	095b      	lsrs	r3, r3, #5
 80087e8:	2064      	movs	r0, #100	; 0x64
 80087ea:	fb00 f303 	mul.w	r3, r0, r3
 80087ee:	1ad3      	subs	r3, r2, r3
 80087f0:	011b      	lsls	r3, r3, #4
 80087f2:	3332      	adds	r3, #50	; 0x32
 80087f4:	4a15      	ldr	r2, [pc, #84]	; (800884c <UART_SetConfig+0x118>)
 80087f6:	fba2 2303 	umull	r2, r3, r2, r3
 80087fa:	095b      	lsrs	r3, r3, #5
 80087fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008800:	4419      	add	r1, r3
 8008802:	68fa      	ldr	r2, [r7, #12]
 8008804:	4613      	mov	r3, r2
 8008806:	009b      	lsls	r3, r3, #2
 8008808:	4413      	add	r3, r2
 800880a:	009a      	lsls	r2, r3, #2
 800880c:	441a      	add	r2, r3
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	685b      	ldr	r3, [r3, #4]
 8008812:	009b      	lsls	r3, r3, #2
 8008814:	fbb2 f2f3 	udiv	r2, r2, r3
 8008818:	4b0c      	ldr	r3, [pc, #48]	; (800884c <UART_SetConfig+0x118>)
 800881a:	fba3 0302 	umull	r0, r3, r3, r2
 800881e:	095b      	lsrs	r3, r3, #5
 8008820:	2064      	movs	r0, #100	; 0x64
 8008822:	fb00 f303 	mul.w	r3, r0, r3
 8008826:	1ad3      	subs	r3, r2, r3
 8008828:	011b      	lsls	r3, r3, #4
 800882a:	3332      	adds	r3, #50	; 0x32
 800882c:	4a07      	ldr	r2, [pc, #28]	; (800884c <UART_SetConfig+0x118>)
 800882e:	fba2 2303 	umull	r2, r3, r2, r3
 8008832:	095b      	lsrs	r3, r3, #5
 8008834:	f003 020f 	and.w	r2, r3, #15
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	440a      	add	r2, r1
 800883e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008840:	bf00      	nop
 8008842:	3710      	adds	r7, #16
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}
 8008848:	40013800 	.word	0x40013800
 800884c:	51eb851f 	.word	0x51eb851f

08008850 <siprintf>:
 8008850:	b40e      	push	{r1, r2, r3}
 8008852:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008856:	b500      	push	{lr}
 8008858:	b09c      	sub	sp, #112	; 0x70
 800885a:	ab1d      	add	r3, sp, #116	; 0x74
 800885c:	9002      	str	r0, [sp, #8]
 800885e:	9006      	str	r0, [sp, #24]
 8008860:	9107      	str	r1, [sp, #28]
 8008862:	9104      	str	r1, [sp, #16]
 8008864:	4808      	ldr	r0, [pc, #32]	; (8008888 <siprintf+0x38>)
 8008866:	4909      	ldr	r1, [pc, #36]	; (800888c <siprintf+0x3c>)
 8008868:	f853 2b04 	ldr.w	r2, [r3], #4
 800886c:	9105      	str	r1, [sp, #20]
 800886e:	6800      	ldr	r0, [r0, #0]
 8008870:	a902      	add	r1, sp, #8
 8008872:	9301      	str	r3, [sp, #4]
 8008874:	f000 f98e 	bl	8008b94 <_svfiprintf_r>
 8008878:	2200      	movs	r2, #0
 800887a:	9b02      	ldr	r3, [sp, #8]
 800887c:	701a      	strb	r2, [r3, #0]
 800887e:	b01c      	add	sp, #112	; 0x70
 8008880:	f85d eb04 	ldr.w	lr, [sp], #4
 8008884:	b003      	add	sp, #12
 8008886:	4770      	bx	lr
 8008888:	20000104 	.word	0x20000104
 800888c:	ffff0208 	.word	0xffff0208

08008890 <memset>:
 8008890:	4603      	mov	r3, r0
 8008892:	4402      	add	r2, r0
 8008894:	4293      	cmp	r3, r2
 8008896:	d100      	bne.n	800889a <memset+0xa>
 8008898:	4770      	bx	lr
 800889a:	f803 1b01 	strb.w	r1, [r3], #1
 800889e:	e7f9      	b.n	8008894 <memset+0x4>

080088a0 <__errno>:
 80088a0:	4b01      	ldr	r3, [pc, #4]	; (80088a8 <__errno+0x8>)
 80088a2:	6818      	ldr	r0, [r3, #0]
 80088a4:	4770      	bx	lr
 80088a6:	bf00      	nop
 80088a8:	20000104 	.word	0x20000104

080088ac <__libc_init_array>:
 80088ac:	b570      	push	{r4, r5, r6, lr}
 80088ae:	2600      	movs	r6, #0
 80088b0:	4d0c      	ldr	r5, [pc, #48]	; (80088e4 <__libc_init_array+0x38>)
 80088b2:	4c0d      	ldr	r4, [pc, #52]	; (80088e8 <__libc_init_array+0x3c>)
 80088b4:	1b64      	subs	r4, r4, r5
 80088b6:	10a4      	asrs	r4, r4, #2
 80088b8:	42a6      	cmp	r6, r4
 80088ba:	d109      	bne.n	80088d0 <__libc_init_array+0x24>
 80088bc:	f000 ffd6 	bl	800986c <_init>
 80088c0:	2600      	movs	r6, #0
 80088c2:	4d0a      	ldr	r5, [pc, #40]	; (80088ec <__libc_init_array+0x40>)
 80088c4:	4c0a      	ldr	r4, [pc, #40]	; (80088f0 <__libc_init_array+0x44>)
 80088c6:	1b64      	subs	r4, r4, r5
 80088c8:	10a4      	asrs	r4, r4, #2
 80088ca:	42a6      	cmp	r6, r4
 80088cc:	d105      	bne.n	80088da <__libc_init_array+0x2e>
 80088ce:	bd70      	pop	{r4, r5, r6, pc}
 80088d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80088d4:	4798      	blx	r3
 80088d6:	3601      	adds	r6, #1
 80088d8:	e7ee      	b.n	80088b8 <__libc_init_array+0xc>
 80088da:	f855 3b04 	ldr.w	r3, [r5], #4
 80088de:	4798      	blx	r3
 80088e0:	3601      	adds	r6, #1
 80088e2:	e7f2      	b.n	80088ca <__libc_init_array+0x1e>
 80088e4:	08009c38 	.word	0x08009c38
 80088e8:	08009c38 	.word	0x08009c38
 80088ec:	08009c38 	.word	0x08009c38
 80088f0:	08009c3c 	.word	0x08009c3c

080088f4 <__retarget_lock_acquire_recursive>:
 80088f4:	4770      	bx	lr

080088f6 <__retarget_lock_release_recursive>:
 80088f6:	4770      	bx	lr

080088f8 <_free_r>:
 80088f8:	b538      	push	{r3, r4, r5, lr}
 80088fa:	4605      	mov	r5, r0
 80088fc:	2900      	cmp	r1, #0
 80088fe:	d040      	beq.n	8008982 <_free_r+0x8a>
 8008900:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008904:	1f0c      	subs	r4, r1, #4
 8008906:	2b00      	cmp	r3, #0
 8008908:	bfb8      	it	lt
 800890a:	18e4      	addlt	r4, r4, r3
 800890c:	f000 f8dc 	bl	8008ac8 <__malloc_lock>
 8008910:	4a1c      	ldr	r2, [pc, #112]	; (8008984 <_free_r+0x8c>)
 8008912:	6813      	ldr	r3, [r2, #0]
 8008914:	b933      	cbnz	r3, 8008924 <_free_r+0x2c>
 8008916:	6063      	str	r3, [r4, #4]
 8008918:	6014      	str	r4, [r2, #0]
 800891a:	4628      	mov	r0, r5
 800891c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008920:	f000 b8d8 	b.w	8008ad4 <__malloc_unlock>
 8008924:	42a3      	cmp	r3, r4
 8008926:	d908      	bls.n	800893a <_free_r+0x42>
 8008928:	6820      	ldr	r0, [r4, #0]
 800892a:	1821      	adds	r1, r4, r0
 800892c:	428b      	cmp	r3, r1
 800892e:	bf01      	itttt	eq
 8008930:	6819      	ldreq	r1, [r3, #0]
 8008932:	685b      	ldreq	r3, [r3, #4]
 8008934:	1809      	addeq	r1, r1, r0
 8008936:	6021      	streq	r1, [r4, #0]
 8008938:	e7ed      	b.n	8008916 <_free_r+0x1e>
 800893a:	461a      	mov	r2, r3
 800893c:	685b      	ldr	r3, [r3, #4]
 800893e:	b10b      	cbz	r3, 8008944 <_free_r+0x4c>
 8008940:	42a3      	cmp	r3, r4
 8008942:	d9fa      	bls.n	800893a <_free_r+0x42>
 8008944:	6811      	ldr	r1, [r2, #0]
 8008946:	1850      	adds	r0, r2, r1
 8008948:	42a0      	cmp	r0, r4
 800894a:	d10b      	bne.n	8008964 <_free_r+0x6c>
 800894c:	6820      	ldr	r0, [r4, #0]
 800894e:	4401      	add	r1, r0
 8008950:	1850      	adds	r0, r2, r1
 8008952:	4283      	cmp	r3, r0
 8008954:	6011      	str	r1, [r2, #0]
 8008956:	d1e0      	bne.n	800891a <_free_r+0x22>
 8008958:	6818      	ldr	r0, [r3, #0]
 800895a:	685b      	ldr	r3, [r3, #4]
 800895c:	4408      	add	r0, r1
 800895e:	6010      	str	r0, [r2, #0]
 8008960:	6053      	str	r3, [r2, #4]
 8008962:	e7da      	b.n	800891a <_free_r+0x22>
 8008964:	d902      	bls.n	800896c <_free_r+0x74>
 8008966:	230c      	movs	r3, #12
 8008968:	602b      	str	r3, [r5, #0]
 800896a:	e7d6      	b.n	800891a <_free_r+0x22>
 800896c:	6820      	ldr	r0, [r4, #0]
 800896e:	1821      	adds	r1, r4, r0
 8008970:	428b      	cmp	r3, r1
 8008972:	bf01      	itttt	eq
 8008974:	6819      	ldreq	r1, [r3, #0]
 8008976:	685b      	ldreq	r3, [r3, #4]
 8008978:	1809      	addeq	r1, r1, r0
 800897a:	6021      	streq	r1, [r4, #0]
 800897c:	6063      	str	r3, [r4, #4]
 800897e:	6054      	str	r4, [r2, #4]
 8008980:	e7cb      	b.n	800891a <_free_r+0x22>
 8008982:	bd38      	pop	{r3, r4, r5, pc}
 8008984:	20000724 	.word	0x20000724

08008988 <sbrk_aligned>:
 8008988:	b570      	push	{r4, r5, r6, lr}
 800898a:	4e0e      	ldr	r6, [pc, #56]	; (80089c4 <sbrk_aligned+0x3c>)
 800898c:	460c      	mov	r4, r1
 800898e:	6831      	ldr	r1, [r6, #0]
 8008990:	4605      	mov	r5, r0
 8008992:	b911      	cbnz	r1, 800899a <sbrk_aligned+0x12>
 8008994:	f000 fbaa 	bl	80090ec <_sbrk_r>
 8008998:	6030      	str	r0, [r6, #0]
 800899a:	4621      	mov	r1, r4
 800899c:	4628      	mov	r0, r5
 800899e:	f000 fba5 	bl	80090ec <_sbrk_r>
 80089a2:	1c43      	adds	r3, r0, #1
 80089a4:	d00a      	beq.n	80089bc <sbrk_aligned+0x34>
 80089a6:	1cc4      	adds	r4, r0, #3
 80089a8:	f024 0403 	bic.w	r4, r4, #3
 80089ac:	42a0      	cmp	r0, r4
 80089ae:	d007      	beq.n	80089c0 <sbrk_aligned+0x38>
 80089b0:	1a21      	subs	r1, r4, r0
 80089b2:	4628      	mov	r0, r5
 80089b4:	f000 fb9a 	bl	80090ec <_sbrk_r>
 80089b8:	3001      	adds	r0, #1
 80089ba:	d101      	bne.n	80089c0 <sbrk_aligned+0x38>
 80089bc:	f04f 34ff 	mov.w	r4, #4294967295
 80089c0:	4620      	mov	r0, r4
 80089c2:	bd70      	pop	{r4, r5, r6, pc}
 80089c4:	20000728 	.word	0x20000728

080089c8 <_malloc_r>:
 80089c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089cc:	1ccd      	adds	r5, r1, #3
 80089ce:	f025 0503 	bic.w	r5, r5, #3
 80089d2:	3508      	adds	r5, #8
 80089d4:	2d0c      	cmp	r5, #12
 80089d6:	bf38      	it	cc
 80089d8:	250c      	movcc	r5, #12
 80089da:	2d00      	cmp	r5, #0
 80089dc:	4607      	mov	r7, r0
 80089de:	db01      	blt.n	80089e4 <_malloc_r+0x1c>
 80089e0:	42a9      	cmp	r1, r5
 80089e2:	d905      	bls.n	80089f0 <_malloc_r+0x28>
 80089e4:	230c      	movs	r3, #12
 80089e6:	2600      	movs	r6, #0
 80089e8:	603b      	str	r3, [r7, #0]
 80089ea:	4630      	mov	r0, r6
 80089ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089f0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008ac4 <_malloc_r+0xfc>
 80089f4:	f000 f868 	bl	8008ac8 <__malloc_lock>
 80089f8:	f8d8 3000 	ldr.w	r3, [r8]
 80089fc:	461c      	mov	r4, r3
 80089fe:	bb5c      	cbnz	r4, 8008a58 <_malloc_r+0x90>
 8008a00:	4629      	mov	r1, r5
 8008a02:	4638      	mov	r0, r7
 8008a04:	f7ff ffc0 	bl	8008988 <sbrk_aligned>
 8008a08:	1c43      	adds	r3, r0, #1
 8008a0a:	4604      	mov	r4, r0
 8008a0c:	d155      	bne.n	8008aba <_malloc_r+0xf2>
 8008a0e:	f8d8 4000 	ldr.w	r4, [r8]
 8008a12:	4626      	mov	r6, r4
 8008a14:	2e00      	cmp	r6, #0
 8008a16:	d145      	bne.n	8008aa4 <_malloc_r+0xdc>
 8008a18:	2c00      	cmp	r4, #0
 8008a1a:	d048      	beq.n	8008aae <_malloc_r+0xe6>
 8008a1c:	6823      	ldr	r3, [r4, #0]
 8008a1e:	4631      	mov	r1, r6
 8008a20:	4638      	mov	r0, r7
 8008a22:	eb04 0903 	add.w	r9, r4, r3
 8008a26:	f000 fb61 	bl	80090ec <_sbrk_r>
 8008a2a:	4581      	cmp	r9, r0
 8008a2c:	d13f      	bne.n	8008aae <_malloc_r+0xe6>
 8008a2e:	6821      	ldr	r1, [r4, #0]
 8008a30:	4638      	mov	r0, r7
 8008a32:	1a6d      	subs	r5, r5, r1
 8008a34:	4629      	mov	r1, r5
 8008a36:	f7ff ffa7 	bl	8008988 <sbrk_aligned>
 8008a3a:	3001      	adds	r0, #1
 8008a3c:	d037      	beq.n	8008aae <_malloc_r+0xe6>
 8008a3e:	6823      	ldr	r3, [r4, #0]
 8008a40:	442b      	add	r3, r5
 8008a42:	6023      	str	r3, [r4, #0]
 8008a44:	f8d8 3000 	ldr.w	r3, [r8]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d038      	beq.n	8008abe <_malloc_r+0xf6>
 8008a4c:	685a      	ldr	r2, [r3, #4]
 8008a4e:	42a2      	cmp	r2, r4
 8008a50:	d12b      	bne.n	8008aaa <_malloc_r+0xe2>
 8008a52:	2200      	movs	r2, #0
 8008a54:	605a      	str	r2, [r3, #4]
 8008a56:	e00f      	b.n	8008a78 <_malloc_r+0xb0>
 8008a58:	6822      	ldr	r2, [r4, #0]
 8008a5a:	1b52      	subs	r2, r2, r5
 8008a5c:	d41f      	bmi.n	8008a9e <_malloc_r+0xd6>
 8008a5e:	2a0b      	cmp	r2, #11
 8008a60:	d917      	bls.n	8008a92 <_malloc_r+0xca>
 8008a62:	1961      	adds	r1, r4, r5
 8008a64:	42a3      	cmp	r3, r4
 8008a66:	6025      	str	r5, [r4, #0]
 8008a68:	bf18      	it	ne
 8008a6a:	6059      	strne	r1, [r3, #4]
 8008a6c:	6863      	ldr	r3, [r4, #4]
 8008a6e:	bf08      	it	eq
 8008a70:	f8c8 1000 	streq.w	r1, [r8]
 8008a74:	5162      	str	r2, [r4, r5]
 8008a76:	604b      	str	r3, [r1, #4]
 8008a78:	4638      	mov	r0, r7
 8008a7a:	f104 060b 	add.w	r6, r4, #11
 8008a7e:	f000 f829 	bl	8008ad4 <__malloc_unlock>
 8008a82:	f026 0607 	bic.w	r6, r6, #7
 8008a86:	1d23      	adds	r3, r4, #4
 8008a88:	1af2      	subs	r2, r6, r3
 8008a8a:	d0ae      	beq.n	80089ea <_malloc_r+0x22>
 8008a8c:	1b9b      	subs	r3, r3, r6
 8008a8e:	50a3      	str	r3, [r4, r2]
 8008a90:	e7ab      	b.n	80089ea <_malloc_r+0x22>
 8008a92:	42a3      	cmp	r3, r4
 8008a94:	6862      	ldr	r2, [r4, #4]
 8008a96:	d1dd      	bne.n	8008a54 <_malloc_r+0x8c>
 8008a98:	f8c8 2000 	str.w	r2, [r8]
 8008a9c:	e7ec      	b.n	8008a78 <_malloc_r+0xb0>
 8008a9e:	4623      	mov	r3, r4
 8008aa0:	6864      	ldr	r4, [r4, #4]
 8008aa2:	e7ac      	b.n	80089fe <_malloc_r+0x36>
 8008aa4:	4634      	mov	r4, r6
 8008aa6:	6876      	ldr	r6, [r6, #4]
 8008aa8:	e7b4      	b.n	8008a14 <_malloc_r+0x4c>
 8008aaa:	4613      	mov	r3, r2
 8008aac:	e7cc      	b.n	8008a48 <_malloc_r+0x80>
 8008aae:	230c      	movs	r3, #12
 8008ab0:	4638      	mov	r0, r7
 8008ab2:	603b      	str	r3, [r7, #0]
 8008ab4:	f000 f80e 	bl	8008ad4 <__malloc_unlock>
 8008ab8:	e797      	b.n	80089ea <_malloc_r+0x22>
 8008aba:	6025      	str	r5, [r4, #0]
 8008abc:	e7dc      	b.n	8008a78 <_malloc_r+0xb0>
 8008abe:	605b      	str	r3, [r3, #4]
 8008ac0:	deff      	udf	#255	; 0xff
 8008ac2:	bf00      	nop
 8008ac4:	20000724 	.word	0x20000724

08008ac8 <__malloc_lock>:
 8008ac8:	4801      	ldr	r0, [pc, #4]	; (8008ad0 <__malloc_lock+0x8>)
 8008aca:	f7ff bf13 	b.w	80088f4 <__retarget_lock_acquire_recursive>
 8008ace:	bf00      	nop
 8008ad0:	20000720 	.word	0x20000720

08008ad4 <__malloc_unlock>:
 8008ad4:	4801      	ldr	r0, [pc, #4]	; (8008adc <__malloc_unlock+0x8>)
 8008ad6:	f7ff bf0e 	b.w	80088f6 <__retarget_lock_release_recursive>
 8008ada:	bf00      	nop
 8008adc:	20000720 	.word	0x20000720

08008ae0 <__ssputs_r>:
 8008ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ae4:	461f      	mov	r7, r3
 8008ae6:	688e      	ldr	r6, [r1, #8]
 8008ae8:	4682      	mov	sl, r0
 8008aea:	42be      	cmp	r6, r7
 8008aec:	460c      	mov	r4, r1
 8008aee:	4690      	mov	r8, r2
 8008af0:	680b      	ldr	r3, [r1, #0]
 8008af2:	d82c      	bhi.n	8008b4e <__ssputs_r+0x6e>
 8008af4:	898a      	ldrh	r2, [r1, #12]
 8008af6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008afa:	d026      	beq.n	8008b4a <__ssputs_r+0x6a>
 8008afc:	6965      	ldr	r5, [r4, #20]
 8008afe:	6909      	ldr	r1, [r1, #16]
 8008b00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008b04:	eba3 0901 	sub.w	r9, r3, r1
 8008b08:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008b0c:	1c7b      	adds	r3, r7, #1
 8008b0e:	444b      	add	r3, r9
 8008b10:	106d      	asrs	r5, r5, #1
 8008b12:	429d      	cmp	r5, r3
 8008b14:	bf38      	it	cc
 8008b16:	461d      	movcc	r5, r3
 8008b18:	0553      	lsls	r3, r2, #21
 8008b1a:	d527      	bpl.n	8008b6c <__ssputs_r+0x8c>
 8008b1c:	4629      	mov	r1, r5
 8008b1e:	f7ff ff53 	bl	80089c8 <_malloc_r>
 8008b22:	4606      	mov	r6, r0
 8008b24:	b360      	cbz	r0, 8008b80 <__ssputs_r+0xa0>
 8008b26:	464a      	mov	r2, r9
 8008b28:	6921      	ldr	r1, [r4, #16]
 8008b2a:	f000 fafd 	bl	8009128 <memcpy>
 8008b2e:	89a3      	ldrh	r3, [r4, #12]
 8008b30:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008b34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b38:	81a3      	strh	r3, [r4, #12]
 8008b3a:	6126      	str	r6, [r4, #16]
 8008b3c:	444e      	add	r6, r9
 8008b3e:	6026      	str	r6, [r4, #0]
 8008b40:	463e      	mov	r6, r7
 8008b42:	6165      	str	r5, [r4, #20]
 8008b44:	eba5 0509 	sub.w	r5, r5, r9
 8008b48:	60a5      	str	r5, [r4, #8]
 8008b4a:	42be      	cmp	r6, r7
 8008b4c:	d900      	bls.n	8008b50 <__ssputs_r+0x70>
 8008b4e:	463e      	mov	r6, r7
 8008b50:	4632      	mov	r2, r6
 8008b52:	4641      	mov	r1, r8
 8008b54:	6820      	ldr	r0, [r4, #0]
 8008b56:	f000 faaf 	bl	80090b8 <memmove>
 8008b5a:	2000      	movs	r0, #0
 8008b5c:	68a3      	ldr	r3, [r4, #8]
 8008b5e:	1b9b      	subs	r3, r3, r6
 8008b60:	60a3      	str	r3, [r4, #8]
 8008b62:	6823      	ldr	r3, [r4, #0]
 8008b64:	4433      	add	r3, r6
 8008b66:	6023      	str	r3, [r4, #0]
 8008b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b6c:	462a      	mov	r2, r5
 8008b6e:	f000 fae9 	bl	8009144 <_realloc_r>
 8008b72:	4606      	mov	r6, r0
 8008b74:	2800      	cmp	r0, #0
 8008b76:	d1e0      	bne.n	8008b3a <__ssputs_r+0x5a>
 8008b78:	4650      	mov	r0, sl
 8008b7a:	6921      	ldr	r1, [r4, #16]
 8008b7c:	f7ff febc 	bl	80088f8 <_free_r>
 8008b80:	230c      	movs	r3, #12
 8008b82:	f8ca 3000 	str.w	r3, [sl]
 8008b86:	89a3      	ldrh	r3, [r4, #12]
 8008b88:	f04f 30ff 	mov.w	r0, #4294967295
 8008b8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b90:	81a3      	strh	r3, [r4, #12]
 8008b92:	e7e9      	b.n	8008b68 <__ssputs_r+0x88>

08008b94 <_svfiprintf_r>:
 8008b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b98:	4698      	mov	r8, r3
 8008b9a:	898b      	ldrh	r3, [r1, #12]
 8008b9c:	4607      	mov	r7, r0
 8008b9e:	061b      	lsls	r3, r3, #24
 8008ba0:	460d      	mov	r5, r1
 8008ba2:	4614      	mov	r4, r2
 8008ba4:	b09d      	sub	sp, #116	; 0x74
 8008ba6:	d50e      	bpl.n	8008bc6 <_svfiprintf_r+0x32>
 8008ba8:	690b      	ldr	r3, [r1, #16]
 8008baa:	b963      	cbnz	r3, 8008bc6 <_svfiprintf_r+0x32>
 8008bac:	2140      	movs	r1, #64	; 0x40
 8008bae:	f7ff ff0b 	bl	80089c8 <_malloc_r>
 8008bb2:	6028      	str	r0, [r5, #0]
 8008bb4:	6128      	str	r0, [r5, #16]
 8008bb6:	b920      	cbnz	r0, 8008bc2 <_svfiprintf_r+0x2e>
 8008bb8:	230c      	movs	r3, #12
 8008bba:	603b      	str	r3, [r7, #0]
 8008bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8008bc0:	e0d0      	b.n	8008d64 <_svfiprintf_r+0x1d0>
 8008bc2:	2340      	movs	r3, #64	; 0x40
 8008bc4:	616b      	str	r3, [r5, #20]
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	9309      	str	r3, [sp, #36]	; 0x24
 8008bca:	2320      	movs	r3, #32
 8008bcc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008bd0:	2330      	movs	r3, #48	; 0x30
 8008bd2:	f04f 0901 	mov.w	r9, #1
 8008bd6:	f8cd 800c 	str.w	r8, [sp, #12]
 8008bda:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8008d7c <_svfiprintf_r+0x1e8>
 8008bde:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008be2:	4623      	mov	r3, r4
 8008be4:	469a      	mov	sl, r3
 8008be6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008bea:	b10a      	cbz	r2, 8008bf0 <_svfiprintf_r+0x5c>
 8008bec:	2a25      	cmp	r2, #37	; 0x25
 8008bee:	d1f9      	bne.n	8008be4 <_svfiprintf_r+0x50>
 8008bf0:	ebba 0b04 	subs.w	fp, sl, r4
 8008bf4:	d00b      	beq.n	8008c0e <_svfiprintf_r+0x7a>
 8008bf6:	465b      	mov	r3, fp
 8008bf8:	4622      	mov	r2, r4
 8008bfa:	4629      	mov	r1, r5
 8008bfc:	4638      	mov	r0, r7
 8008bfe:	f7ff ff6f 	bl	8008ae0 <__ssputs_r>
 8008c02:	3001      	adds	r0, #1
 8008c04:	f000 80a9 	beq.w	8008d5a <_svfiprintf_r+0x1c6>
 8008c08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c0a:	445a      	add	r2, fp
 8008c0c:	9209      	str	r2, [sp, #36]	; 0x24
 8008c0e:	f89a 3000 	ldrb.w	r3, [sl]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	f000 80a1 	beq.w	8008d5a <_svfiprintf_r+0x1c6>
 8008c18:	2300      	movs	r3, #0
 8008c1a:	f04f 32ff 	mov.w	r2, #4294967295
 8008c1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c22:	f10a 0a01 	add.w	sl, sl, #1
 8008c26:	9304      	str	r3, [sp, #16]
 8008c28:	9307      	str	r3, [sp, #28]
 8008c2a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c2e:	931a      	str	r3, [sp, #104]	; 0x68
 8008c30:	4654      	mov	r4, sl
 8008c32:	2205      	movs	r2, #5
 8008c34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c38:	4850      	ldr	r0, [pc, #320]	; (8008d7c <_svfiprintf_r+0x1e8>)
 8008c3a:	f000 fa67 	bl	800910c <memchr>
 8008c3e:	9a04      	ldr	r2, [sp, #16]
 8008c40:	b9d8      	cbnz	r0, 8008c7a <_svfiprintf_r+0xe6>
 8008c42:	06d0      	lsls	r0, r2, #27
 8008c44:	bf44      	itt	mi
 8008c46:	2320      	movmi	r3, #32
 8008c48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c4c:	0711      	lsls	r1, r2, #28
 8008c4e:	bf44      	itt	mi
 8008c50:	232b      	movmi	r3, #43	; 0x2b
 8008c52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c56:	f89a 3000 	ldrb.w	r3, [sl]
 8008c5a:	2b2a      	cmp	r3, #42	; 0x2a
 8008c5c:	d015      	beq.n	8008c8a <_svfiprintf_r+0xf6>
 8008c5e:	4654      	mov	r4, sl
 8008c60:	2000      	movs	r0, #0
 8008c62:	f04f 0c0a 	mov.w	ip, #10
 8008c66:	9a07      	ldr	r2, [sp, #28]
 8008c68:	4621      	mov	r1, r4
 8008c6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c6e:	3b30      	subs	r3, #48	; 0x30
 8008c70:	2b09      	cmp	r3, #9
 8008c72:	d94d      	bls.n	8008d10 <_svfiprintf_r+0x17c>
 8008c74:	b1b0      	cbz	r0, 8008ca4 <_svfiprintf_r+0x110>
 8008c76:	9207      	str	r2, [sp, #28]
 8008c78:	e014      	b.n	8008ca4 <_svfiprintf_r+0x110>
 8008c7a:	eba0 0308 	sub.w	r3, r0, r8
 8008c7e:	fa09 f303 	lsl.w	r3, r9, r3
 8008c82:	4313      	orrs	r3, r2
 8008c84:	46a2      	mov	sl, r4
 8008c86:	9304      	str	r3, [sp, #16]
 8008c88:	e7d2      	b.n	8008c30 <_svfiprintf_r+0x9c>
 8008c8a:	9b03      	ldr	r3, [sp, #12]
 8008c8c:	1d19      	adds	r1, r3, #4
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	9103      	str	r1, [sp, #12]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	bfbb      	ittet	lt
 8008c96:	425b      	neglt	r3, r3
 8008c98:	f042 0202 	orrlt.w	r2, r2, #2
 8008c9c:	9307      	strge	r3, [sp, #28]
 8008c9e:	9307      	strlt	r3, [sp, #28]
 8008ca0:	bfb8      	it	lt
 8008ca2:	9204      	strlt	r2, [sp, #16]
 8008ca4:	7823      	ldrb	r3, [r4, #0]
 8008ca6:	2b2e      	cmp	r3, #46	; 0x2e
 8008ca8:	d10c      	bne.n	8008cc4 <_svfiprintf_r+0x130>
 8008caa:	7863      	ldrb	r3, [r4, #1]
 8008cac:	2b2a      	cmp	r3, #42	; 0x2a
 8008cae:	d134      	bne.n	8008d1a <_svfiprintf_r+0x186>
 8008cb0:	9b03      	ldr	r3, [sp, #12]
 8008cb2:	3402      	adds	r4, #2
 8008cb4:	1d1a      	adds	r2, r3, #4
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	9203      	str	r2, [sp, #12]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	bfb8      	it	lt
 8008cbe:	f04f 33ff 	movlt.w	r3, #4294967295
 8008cc2:	9305      	str	r3, [sp, #20]
 8008cc4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8008d80 <_svfiprintf_r+0x1ec>
 8008cc8:	2203      	movs	r2, #3
 8008cca:	4650      	mov	r0, sl
 8008ccc:	7821      	ldrb	r1, [r4, #0]
 8008cce:	f000 fa1d 	bl	800910c <memchr>
 8008cd2:	b138      	cbz	r0, 8008ce4 <_svfiprintf_r+0x150>
 8008cd4:	2240      	movs	r2, #64	; 0x40
 8008cd6:	9b04      	ldr	r3, [sp, #16]
 8008cd8:	eba0 000a 	sub.w	r0, r0, sl
 8008cdc:	4082      	lsls	r2, r0
 8008cde:	4313      	orrs	r3, r2
 8008ce0:	3401      	adds	r4, #1
 8008ce2:	9304      	str	r3, [sp, #16]
 8008ce4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ce8:	2206      	movs	r2, #6
 8008cea:	4826      	ldr	r0, [pc, #152]	; (8008d84 <_svfiprintf_r+0x1f0>)
 8008cec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008cf0:	f000 fa0c 	bl	800910c <memchr>
 8008cf4:	2800      	cmp	r0, #0
 8008cf6:	d038      	beq.n	8008d6a <_svfiprintf_r+0x1d6>
 8008cf8:	4b23      	ldr	r3, [pc, #140]	; (8008d88 <_svfiprintf_r+0x1f4>)
 8008cfa:	bb1b      	cbnz	r3, 8008d44 <_svfiprintf_r+0x1b0>
 8008cfc:	9b03      	ldr	r3, [sp, #12]
 8008cfe:	3307      	adds	r3, #7
 8008d00:	f023 0307 	bic.w	r3, r3, #7
 8008d04:	3308      	adds	r3, #8
 8008d06:	9303      	str	r3, [sp, #12]
 8008d08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d0a:	4433      	add	r3, r6
 8008d0c:	9309      	str	r3, [sp, #36]	; 0x24
 8008d0e:	e768      	b.n	8008be2 <_svfiprintf_r+0x4e>
 8008d10:	460c      	mov	r4, r1
 8008d12:	2001      	movs	r0, #1
 8008d14:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d18:	e7a6      	b.n	8008c68 <_svfiprintf_r+0xd4>
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	f04f 0c0a 	mov.w	ip, #10
 8008d20:	4619      	mov	r1, r3
 8008d22:	3401      	adds	r4, #1
 8008d24:	9305      	str	r3, [sp, #20]
 8008d26:	4620      	mov	r0, r4
 8008d28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d2c:	3a30      	subs	r2, #48	; 0x30
 8008d2e:	2a09      	cmp	r2, #9
 8008d30:	d903      	bls.n	8008d3a <_svfiprintf_r+0x1a6>
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d0c6      	beq.n	8008cc4 <_svfiprintf_r+0x130>
 8008d36:	9105      	str	r1, [sp, #20]
 8008d38:	e7c4      	b.n	8008cc4 <_svfiprintf_r+0x130>
 8008d3a:	4604      	mov	r4, r0
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d42:	e7f0      	b.n	8008d26 <_svfiprintf_r+0x192>
 8008d44:	ab03      	add	r3, sp, #12
 8008d46:	9300      	str	r3, [sp, #0]
 8008d48:	462a      	mov	r2, r5
 8008d4a:	4638      	mov	r0, r7
 8008d4c:	4b0f      	ldr	r3, [pc, #60]	; (8008d8c <_svfiprintf_r+0x1f8>)
 8008d4e:	a904      	add	r1, sp, #16
 8008d50:	f3af 8000 	nop.w
 8008d54:	1c42      	adds	r2, r0, #1
 8008d56:	4606      	mov	r6, r0
 8008d58:	d1d6      	bne.n	8008d08 <_svfiprintf_r+0x174>
 8008d5a:	89ab      	ldrh	r3, [r5, #12]
 8008d5c:	065b      	lsls	r3, r3, #25
 8008d5e:	f53f af2d 	bmi.w	8008bbc <_svfiprintf_r+0x28>
 8008d62:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d64:	b01d      	add	sp, #116	; 0x74
 8008d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d6a:	ab03      	add	r3, sp, #12
 8008d6c:	9300      	str	r3, [sp, #0]
 8008d6e:	462a      	mov	r2, r5
 8008d70:	4638      	mov	r0, r7
 8008d72:	4b06      	ldr	r3, [pc, #24]	; (8008d8c <_svfiprintf_r+0x1f8>)
 8008d74:	a904      	add	r1, sp, #16
 8008d76:	f000 f87d 	bl	8008e74 <_printf_i>
 8008d7a:	e7eb      	b.n	8008d54 <_svfiprintf_r+0x1c0>
 8008d7c:	08009b92 	.word	0x08009b92
 8008d80:	08009b98 	.word	0x08009b98
 8008d84:	08009b9c 	.word	0x08009b9c
 8008d88:	00000000 	.word	0x00000000
 8008d8c:	08008ae1 	.word	0x08008ae1

08008d90 <_printf_common>:
 8008d90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d94:	4616      	mov	r6, r2
 8008d96:	4699      	mov	r9, r3
 8008d98:	688a      	ldr	r2, [r1, #8]
 8008d9a:	690b      	ldr	r3, [r1, #16]
 8008d9c:	4607      	mov	r7, r0
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	bfb8      	it	lt
 8008da2:	4613      	movlt	r3, r2
 8008da4:	6033      	str	r3, [r6, #0]
 8008da6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008daa:	460c      	mov	r4, r1
 8008dac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008db0:	b10a      	cbz	r2, 8008db6 <_printf_common+0x26>
 8008db2:	3301      	adds	r3, #1
 8008db4:	6033      	str	r3, [r6, #0]
 8008db6:	6823      	ldr	r3, [r4, #0]
 8008db8:	0699      	lsls	r1, r3, #26
 8008dba:	bf42      	ittt	mi
 8008dbc:	6833      	ldrmi	r3, [r6, #0]
 8008dbe:	3302      	addmi	r3, #2
 8008dc0:	6033      	strmi	r3, [r6, #0]
 8008dc2:	6825      	ldr	r5, [r4, #0]
 8008dc4:	f015 0506 	ands.w	r5, r5, #6
 8008dc8:	d106      	bne.n	8008dd8 <_printf_common+0x48>
 8008dca:	f104 0a19 	add.w	sl, r4, #25
 8008dce:	68e3      	ldr	r3, [r4, #12]
 8008dd0:	6832      	ldr	r2, [r6, #0]
 8008dd2:	1a9b      	subs	r3, r3, r2
 8008dd4:	42ab      	cmp	r3, r5
 8008dd6:	dc2b      	bgt.n	8008e30 <_printf_common+0xa0>
 8008dd8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008ddc:	1e13      	subs	r3, r2, #0
 8008dde:	6822      	ldr	r2, [r4, #0]
 8008de0:	bf18      	it	ne
 8008de2:	2301      	movne	r3, #1
 8008de4:	0692      	lsls	r2, r2, #26
 8008de6:	d430      	bmi.n	8008e4a <_printf_common+0xba>
 8008de8:	4649      	mov	r1, r9
 8008dea:	4638      	mov	r0, r7
 8008dec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008df0:	47c0      	blx	r8
 8008df2:	3001      	adds	r0, #1
 8008df4:	d023      	beq.n	8008e3e <_printf_common+0xae>
 8008df6:	6823      	ldr	r3, [r4, #0]
 8008df8:	6922      	ldr	r2, [r4, #16]
 8008dfa:	f003 0306 	and.w	r3, r3, #6
 8008dfe:	2b04      	cmp	r3, #4
 8008e00:	bf14      	ite	ne
 8008e02:	2500      	movne	r5, #0
 8008e04:	6833      	ldreq	r3, [r6, #0]
 8008e06:	f04f 0600 	mov.w	r6, #0
 8008e0a:	bf08      	it	eq
 8008e0c:	68e5      	ldreq	r5, [r4, #12]
 8008e0e:	f104 041a 	add.w	r4, r4, #26
 8008e12:	bf08      	it	eq
 8008e14:	1aed      	subeq	r5, r5, r3
 8008e16:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008e1a:	bf08      	it	eq
 8008e1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e20:	4293      	cmp	r3, r2
 8008e22:	bfc4      	itt	gt
 8008e24:	1a9b      	subgt	r3, r3, r2
 8008e26:	18ed      	addgt	r5, r5, r3
 8008e28:	42b5      	cmp	r5, r6
 8008e2a:	d11a      	bne.n	8008e62 <_printf_common+0xd2>
 8008e2c:	2000      	movs	r0, #0
 8008e2e:	e008      	b.n	8008e42 <_printf_common+0xb2>
 8008e30:	2301      	movs	r3, #1
 8008e32:	4652      	mov	r2, sl
 8008e34:	4649      	mov	r1, r9
 8008e36:	4638      	mov	r0, r7
 8008e38:	47c0      	blx	r8
 8008e3a:	3001      	adds	r0, #1
 8008e3c:	d103      	bne.n	8008e46 <_printf_common+0xb6>
 8008e3e:	f04f 30ff 	mov.w	r0, #4294967295
 8008e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e46:	3501      	adds	r5, #1
 8008e48:	e7c1      	b.n	8008dce <_printf_common+0x3e>
 8008e4a:	2030      	movs	r0, #48	; 0x30
 8008e4c:	18e1      	adds	r1, r4, r3
 8008e4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008e52:	1c5a      	adds	r2, r3, #1
 8008e54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008e58:	4422      	add	r2, r4
 8008e5a:	3302      	adds	r3, #2
 8008e5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008e60:	e7c2      	b.n	8008de8 <_printf_common+0x58>
 8008e62:	2301      	movs	r3, #1
 8008e64:	4622      	mov	r2, r4
 8008e66:	4649      	mov	r1, r9
 8008e68:	4638      	mov	r0, r7
 8008e6a:	47c0      	blx	r8
 8008e6c:	3001      	adds	r0, #1
 8008e6e:	d0e6      	beq.n	8008e3e <_printf_common+0xae>
 8008e70:	3601      	adds	r6, #1
 8008e72:	e7d9      	b.n	8008e28 <_printf_common+0x98>

08008e74 <_printf_i>:
 8008e74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e78:	7e0f      	ldrb	r7, [r1, #24]
 8008e7a:	4691      	mov	r9, r2
 8008e7c:	2f78      	cmp	r7, #120	; 0x78
 8008e7e:	4680      	mov	r8, r0
 8008e80:	460c      	mov	r4, r1
 8008e82:	469a      	mov	sl, r3
 8008e84:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008e86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008e8a:	d807      	bhi.n	8008e9c <_printf_i+0x28>
 8008e8c:	2f62      	cmp	r7, #98	; 0x62
 8008e8e:	d80a      	bhi.n	8008ea6 <_printf_i+0x32>
 8008e90:	2f00      	cmp	r7, #0
 8008e92:	f000 80d5 	beq.w	8009040 <_printf_i+0x1cc>
 8008e96:	2f58      	cmp	r7, #88	; 0x58
 8008e98:	f000 80c1 	beq.w	800901e <_printf_i+0x1aa>
 8008e9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ea0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008ea4:	e03a      	b.n	8008f1c <_printf_i+0xa8>
 8008ea6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008eaa:	2b15      	cmp	r3, #21
 8008eac:	d8f6      	bhi.n	8008e9c <_printf_i+0x28>
 8008eae:	a101      	add	r1, pc, #4	; (adr r1, 8008eb4 <_printf_i+0x40>)
 8008eb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008eb4:	08008f0d 	.word	0x08008f0d
 8008eb8:	08008f21 	.word	0x08008f21
 8008ebc:	08008e9d 	.word	0x08008e9d
 8008ec0:	08008e9d 	.word	0x08008e9d
 8008ec4:	08008e9d 	.word	0x08008e9d
 8008ec8:	08008e9d 	.word	0x08008e9d
 8008ecc:	08008f21 	.word	0x08008f21
 8008ed0:	08008e9d 	.word	0x08008e9d
 8008ed4:	08008e9d 	.word	0x08008e9d
 8008ed8:	08008e9d 	.word	0x08008e9d
 8008edc:	08008e9d 	.word	0x08008e9d
 8008ee0:	08009027 	.word	0x08009027
 8008ee4:	08008f4d 	.word	0x08008f4d
 8008ee8:	08008fe1 	.word	0x08008fe1
 8008eec:	08008e9d 	.word	0x08008e9d
 8008ef0:	08008e9d 	.word	0x08008e9d
 8008ef4:	08009049 	.word	0x08009049
 8008ef8:	08008e9d 	.word	0x08008e9d
 8008efc:	08008f4d 	.word	0x08008f4d
 8008f00:	08008e9d 	.word	0x08008e9d
 8008f04:	08008e9d 	.word	0x08008e9d
 8008f08:	08008fe9 	.word	0x08008fe9
 8008f0c:	682b      	ldr	r3, [r5, #0]
 8008f0e:	1d1a      	adds	r2, r3, #4
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	602a      	str	r2, [r5, #0]
 8008f14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	e0a0      	b.n	8009062 <_printf_i+0x1ee>
 8008f20:	6820      	ldr	r0, [r4, #0]
 8008f22:	682b      	ldr	r3, [r5, #0]
 8008f24:	0607      	lsls	r7, r0, #24
 8008f26:	f103 0104 	add.w	r1, r3, #4
 8008f2a:	6029      	str	r1, [r5, #0]
 8008f2c:	d501      	bpl.n	8008f32 <_printf_i+0xbe>
 8008f2e:	681e      	ldr	r6, [r3, #0]
 8008f30:	e003      	b.n	8008f3a <_printf_i+0xc6>
 8008f32:	0646      	lsls	r6, r0, #25
 8008f34:	d5fb      	bpl.n	8008f2e <_printf_i+0xba>
 8008f36:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008f3a:	2e00      	cmp	r6, #0
 8008f3c:	da03      	bge.n	8008f46 <_printf_i+0xd2>
 8008f3e:	232d      	movs	r3, #45	; 0x2d
 8008f40:	4276      	negs	r6, r6
 8008f42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f46:	230a      	movs	r3, #10
 8008f48:	4859      	ldr	r0, [pc, #356]	; (80090b0 <_printf_i+0x23c>)
 8008f4a:	e012      	b.n	8008f72 <_printf_i+0xfe>
 8008f4c:	682b      	ldr	r3, [r5, #0]
 8008f4e:	6820      	ldr	r0, [r4, #0]
 8008f50:	1d19      	adds	r1, r3, #4
 8008f52:	6029      	str	r1, [r5, #0]
 8008f54:	0605      	lsls	r5, r0, #24
 8008f56:	d501      	bpl.n	8008f5c <_printf_i+0xe8>
 8008f58:	681e      	ldr	r6, [r3, #0]
 8008f5a:	e002      	b.n	8008f62 <_printf_i+0xee>
 8008f5c:	0641      	lsls	r1, r0, #25
 8008f5e:	d5fb      	bpl.n	8008f58 <_printf_i+0xe4>
 8008f60:	881e      	ldrh	r6, [r3, #0]
 8008f62:	2f6f      	cmp	r7, #111	; 0x6f
 8008f64:	bf0c      	ite	eq
 8008f66:	2308      	moveq	r3, #8
 8008f68:	230a      	movne	r3, #10
 8008f6a:	4851      	ldr	r0, [pc, #324]	; (80090b0 <_printf_i+0x23c>)
 8008f6c:	2100      	movs	r1, #0
 8008f6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008f72:	6865      	ldr	r5, [r4, #4]
 8008f74:	2d00      	cmp	r5, #0
 8008f76:	bfa8      	it	ge
 8008f78:	6821      	ldrge	r1, [r4, #0]
 8008f7a:	60a5      	str	r5, [r4, #8]
 8008f7c:	bfa4      	itt	ge
 8008f7e:	f021 0104 	bicge.w	r1, r1, #4
 8008f82:	6021      	strge	r1, [r4, #0]
 8008f84:	b90e      	cbnz	r6, 8008f8a <_printf_i+0x116>
 8008f86:	2d00      	cmp	r5, #0
 8008f88:	d04b      	beq.n	8009022 <_printf_i+0x1ae>
 8008f8a:	4615      	mov	r5, r2
 8008f8c:	fbb6 f1f3 	udiv	r1, r6, r3
 8008f90:	fb03 6711 	mls	r7, r3, r1, r6
 8008f94:	5dc7      	ldrb	r7, [r0, r7]
 8008f96:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008f9a:	4637      	mov	r7, r6
 8008f9c:	42bb      	cmp	r3, r7
 8008f9e:	460e      	mov	r6, r1
 8008fa0:	d9f4      	bls.n	8008f8c <_printf_i+0x118>
 8008fa2:	2b08      	cmp	r3, #8
 8008fa4:	d10b      	bne.n	8008fbe <_printf_i+0x14a>
 8008fa6:	6823      	ldr	r3, [r4, #0]
 8008fa8:	07de      	lsls	r6, r3, #31
 8008faa:	d508      	bpl.n	8008fbe <_printf_i+0x14a>
 8008fac:	6923      	ldr	r3, [r4, #16]
 8008fae:	6861      	ldr	r1, [r4, #4]
 8008fb0:	4299      	cmp	r1, r3
 8008fb2:	bfde      	ittt	le
 8008fb4:	2330      	movle	r3, #48	; 0x30
 8008fb6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008fba:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008fbe:	1b52      	subs	r2, r2, r5
 8008fc0:	6122      	str	r2, [r4, #16]
 8008fc2:	464b      	mov	r3, r9
 8008fc4:	4621      	mov	r1, r4
 8008fc6:	4640      	mov	r0, r8
 8008fc8:	f8cd a000 	str.w	sl, [sp]
 8008fcc:	aa03      	add	r2, sp, #12
 8008fce:	f7ff fedf 	bl	8008d90 <_printf_common>
 8008fd2:	3001      	adds	r0, #1
 8008fd4:	d14a      	bne.n	800906c <_printf_i+0x1f8>
 8008fd6:	f04f 30ff 	mov.w	r0, #4294967295
 8008fda:	b004      	add	sp, #16
 8008fdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fe0:	6823      	ldr	r3, [r4, #0]
 8008fe2:	f043 0320 	orr.w	r3, r3, #32
 8008fe6:	6023      	str	r3, [r4, #0]
 8008fe8:	2778      	movs	r7, #120	; 0x78
 8008fea:	4832      	ldr	r0, [pc, #200]	; (80090b4 <_printf_i+0x240>)
 8008fec:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008ff0:	6823      	ldr	r3, [r4, #0]
 8008ff2:	6829      	ldr	r1, [r5, #0]
 8008ff4:	061f      	lsls	r7, r3, #24
 8008ff6:	f851 6b04 	ldr.w	r6, [r1], #4
 8008ffa:	d402      	bmi.n	8009002 <_printf_i+0x18e>
 8008ffc:	065f      	lsls	r7, r3, #25
 8008ffe:	bf48      	it	mi
 8009000:	b2b6      	uxthmi	r6, r6
 8009002:	07df      	lsls	r7, r3, #31
 8009004:	bf48      	it	mi
 8009006:	f043 0320 	orrmi.w	r3, r3, #32
 800900a:	6029      	str	r1, [r5, #0]
 800900c:	bf48      	it	mi
 800900e:	6023      	strmi	r3, [r4, #0]
 8009010:	b91e      	cbnz	r6, 800901a <_printf_i+0x1a6>
 8009012:	6823      	ldr	r3, [r4, #0]
 8009014:	f023 0320 	bic.w	r3, r3, #32
 8009018:	6023      	str	r3, [r4, #0]
 800901a:	2310      	movs	r3, #16
 800901c:	e7a6      	b.n	8008f6c <_printf_i+0xf8>
 800901e:	4824      	ldr	r0, [pc, #144]	; (80090b0 <_printf_i+0x23c>)
 8009020:	e7e4      	b.n	8008fec <_printf_i+0x178>
 8009022:	4615      	mov	r5, r2
 8009024:	e7bd      	b.n	8008fa2 <_printf_i+0x12e>
 8009026:	682b      	ldr	r3, [r5, #0]
 8009028:	6826      	ldr	r6, [r4, #0]
 800902a:	1d18      	adds	r0, r3, #4
 800902c:	6961      	ldr	r1, [r4, #20]
 800902e:	6028      	str	r0, [r5, #0]
 8009030:	0635      	lsls	r5, r6, #24
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	d501      	bpl.n	800903a <_printf_i+0x1c6>
 8009036:	6019      	str	r1, [r3, #0]
 8009038:	e002      	b.n	8009040 <_printf_i+0x1cc>
 800903a:	0670      	lsls	r0, r6, #25
 800903c:	d5fb      	bpl.n	8009036 <_printf_i+0x1c2>
 800903e:	8019      	strh	r1, [r3, #0]
 8009040:	2300      	movs	r3, #0
 8009042:	4615      	mov	r5, r2
 8009044:	6123      	str	r3, [r4, #16]
 8009046:	e7bc      	b.n	8008fc2 <_printf_i+0x14e>
 8009048:	682b      	ldr	r3, [r5, #0]
 800904a:	2100      	movs	r1, #0
 800904c:	1d1a      	adds	r2, r3, #4
 800904e:	602a      	str	r2, [r5, #0]
 8009050:	681d      	ldr	r5, [r3, #0]
 8009052:	6862      	ldr	r2, [r4, #4]
 8009054:	4628      	mov	r0, r5
 8009056:	f000 f859 	bl	800910c <memchr>
 800905a:	b108      	cbz	r0, 8009060 <_printf_i+0x1ec>
 800905c:	1b40      	subs	r0, r0, r5
 800905e:	6060      	str	r0, [r4, #4]
 8009060:	6863      	ldr	r3, [r4, #4]
 8009062:	6123      	str	r3, [r4, #16]
 8009064:	2300      	movs	r3, #0
 8009066:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800906a:	e7aa      	b.n	8008fc2 <_printf_i+0x14e>
 800906c:	462a      	mov	r2, r5
 800906e:	4649      	mov	r1, r9
 8009070:	4640      	mov	r0, r8
 8009072:	6923      	ldr	r3, [r4, #16]
 8009074:	47d0      	blx	sl
 8009076:	3001      	adds	r0, #1
 8009078:	d0ad      	beq.n	8008fd6 <_printf_i+0x162>
 800907a:	6823      	ldr	r3, [r4, #0]
 800907c:	079b      	lsls	r3, r3, #30
 800907e:	d413      	bmi.n	80090a8 <_printf_i+0x234>
 8009080:	68e0      	ldr	r0, [r4, #12]
 8009082:	9b03      	ldr	r3, [sp, #12]
 8009084:	4298      	cmp	r0, r3
 8009086:	bfb8      	it	lt
 8009088:	4618      	movlt	r0, r3
 800908a:	e7a6      	b.n	8008fda <_printf_i+0x166>
 800908c:	2301      	movs	r3, #1
 800908e:	4632      	mov	r2, r6
 8009090:	4649      	mov	r1, r9
 8009092:	4640      	mov	r0, r8
 8009094:	47d0      	blx	sl
 8009096:	3001      	adds	r0, #1
 8009098:	d09d      	beq.n	8008fd6 <_printf_i+0x162>
 800909a:	3501      	adds	r5, #1
 800909c:	68e3      	ldr	r3, [r4, #12]
 800909e:	9903      	ldr	r1, [sp, #12]
 80090a0:	1a5b      	subs	r3, r3, r1
 80090a2:	42ab      	cmp	r3, r5
 80090a4:	dcf2      	bgt.n	800908c <_printf_i+0x218>
 80090a6:	e7eb      	b.n	8009080 <_printf_i+0x20c>
 80090a8:	2500      	movs	r5, #0
 80090aa:	f104 0619 	add.w	r6, r4, #25
 80090ae:	e7f5      	b.n	800909c <_printf_i+0x228>
 80090b0:	08009ba3 	.word	0x08009ba3
 80090b4:	08009bb4 	.word	0x08009bb4

080090b8 <memmove>:
 80090b8:	4288      	cmp	r0, r1
 80090ba:	b510      	push	{r4, lr}
 80090bc:	eb01 0402 	add.w	r4, r1, r2
 80090c0:	d902      	bls.n	80090c8 <memmove+0x10>
 80090c2:	4284      	cmp	r4, r0
 80090c4:	4623      	mov	r3, r4
 80090c6:	d807      	bhi.n	80090d8 <memmove+0x20>
 80090c8:	1e43      	subs	r3, r0, #1
 80090ca:	42a1      	cmp	r1, r4
 80090cc:	d008      	beq.n	80090e0 <memmove+0x28>
 80090ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80090d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80090d6:	e7f8      	b.n	80090ca <memmove+0x12>
 80090d8:	4601      	mov	r1, r0
 80090da:	4402      	add	r2, r0
 80090dc:	428a      	cmp	r2, r1
 80090de:	d100      	bne.n	80090e2 <memmove+0x2a>
 80090e0:	bd10      	pop	{r4, pc}
 80090e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80090e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80090ea:	e7f7      	b.n	80090dc <memmove+0x24>

080090ec <_sbrk_r>:
 80090ec:	b538      	push	{r3, r4, r5, lr}
 80090ee:	2300      	movs	r3, #0
 80090f0:	4d05      	ldr	r5, [pc, #20]	; (8009108 <_sbrk_r+0x1c>)
 80090f2:	4604      	mov	r4, r0
 80090f4:	4608      	mov	r0, r1
 80090f6:	602b      	str	r3, [r5, #0]
 80090f8:	f7fb fd9e 	bl	8004c38 <_sbrk>
 80090fc:	1c43      	adds	r3, r0, #1
 80090fe:	d102      	bne.n	8009106 <_sbrk_r+0x1a>
 8009100:	682b      	ldr	r3, [r5, #0]
 8009102:	b103      	cbz	r3, 8009106 <_sbrk_r+0x1a>
 8009104:	6023      	str	r3, [r4, #0]
 8009106:	bd38      	pop	{r3, r4, r5, pc}
 8009108:	2000071c 	.word	0x2000071c

0800910c <memchr>:
 800910c:	4603      	mov	r3, r0
 800910e:	b510      	push	{r4, lr}
 8009110:	b2c9      	uxtb	r1, r1
 8009112:	4402      	add	r2, r0
 8009114:	4293      	cmp	r3, r2
 8009116:	4618      	mov	r0, r3
 8009118:	d101      	bne.n	800911e <memchr+0x12>
 800911a:	2000      	movs	r0, #0
 800911c:	e003      	b.n	8009126 <memchr+0x1a>
 800911e:	7804      	ldrb	r4, [r0, #0]
 8009120:	3301      	adds	r3, #1
 8009122:	428c      	cmp	r4, r1
 8009124:	d1f6      	bne.n	8009114 <memchr+0x8>
 8009126:	bd10      	pop	{r4, pc}

08009128 <memcpy>:
 8009128:	440a      	add	r2, r1
 800912a:	4291      	cmp	r1, r2
 800912c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009130:	d100      	bne.n	8009134 <memcpy+0xc>
 8009132:	4770      	bx	lr
 8009134:	b510      	push	{r4, lr}
 8009136:	f811 4b01 	ldrb.w	r4, [r1], #1
 800913a:	4291      	cmp	r1, r2
 800913c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009140:	d1f9      	bne.n	8009136 <memcpy+0xe>
 8009142:	bd10      	pop	{r4, pc}

08009144 <_realloc_r>:
 8009144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009148:	4680      	mov	r8, r0
 800914a:	4614      	mov	r4, r2
 800914c:	460e      	mov	r6, r1
 800914e:	b921      	cbnz	r1, 800915a <_realloc_r+0x16>
 8009150:	4611      	mov	r1, r2
 8009152:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009156:	f7ff bc37 	b.w	80089c8 <_malloc_r>
 800915a:	b92a      	cbnz	r2, 8009168 <_realloc_r+0x24>
 800915c:	f7ff fbcc 	bl	80088f8 <_free_r>
 8009160:	4625      	mov	r5, r4
 8009162:	4628      	mov	r0, r5
 8009164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009168:	f000 f81b 	bl	80091a2 <_malloc_usable_size_r>
 800916c:	4284      	cmp	r4, r0
 800916e:	4607      	mov	r7, r0
 8009170:	d802      	bhi.n	8009178 <_realloc_r+0x34>
 8009172:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009176:	d812      	bhi.n	800919e <_realloc_r+0x5a>
 8009178:	4621      	mov	r1, r4
 800917a:	4640      	mov	r0, r8
 800917c:	f7ff fc24 	bl	80089c8 <_malloc_r>
 8009180:	4605      	mov	r5, r0
 8009182:	2800      	cmp	r0, #0
 8009184:	d0ed      	beq.n	8009162 <_realloc_r+0x1e>
 8009186:	42bc      	cmp	r4, r7
 8009188:	4622      	mov	r2, r4
 800918a:	4631      	mov	r1, r6
 800918c:	bf28      	it	cs
 800918e:	463a      	movcs	r2, r7
 8009190:	f7ff ffca 	bl	8009128 <memcpy>
 8009194:	4631      	mov	r1, r6
 8009196:	4640      	mov	r0, r8
 8009198:	f7ff fbae 	bl	80088f8 <_free_r>
 800919c:	e7e1      	b.n	8009162 <_realloc_r+0x1e>
 800919e:	4635      	mov	r5, r6
 80091a0:	e7df      	b.n	8009162 <_realloc_r+0x1e>

080091a2 <_malloc_usable_size_r>:
 80091a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091a6:	1f18      	subs	r0, r3, #4
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	bfbc      	itt	lt
 80091ac:	580b      	ldrlt	r3, [r1, r0]
 80091ae:	18c0      	addlt	r0, r0, r3
 80091b0:	4770      	bx	lr

080091b2 <atan2>:
 80091b2:	f000 ba8d 	b.w	80096d0 <__ieee754_atan2>

080091b6 <sqrt>:
 80091b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091b8:	4606      	mov	r6, r0
 80091ba:	460f      	mov	r7, r1
 80091bc:	f000 f9ae 	bl	800951c <__ieee754_sqrt>
 80091c0:	4632      	mov	r2, r6
 80091c2:	4604      	mov	r4, r0
 80091c4:	460d      	mov	r5, r1
 80091c6:	463b      	mov	r3, r7
 80091c8:	4630      	mov	r0, r6
 80091ca:	4639      	mov	r1, r7
 80091cc:	f7f7 fc1e 	bl	8000a0c <__aeabi_dcmpun>
 80091d0:	b990      	cbnz	r0, 80091f8 <sqrt+0x42>
 80091d2:	2200      	movs	r2, #0
 80091d4:	2300      	movs	r3, #0
 80091d6:	4630      	mov	r0, r6
 80091d8:	4639      	mov	r1, r7
 80091da:	f7f7 fbef 	bl	80009bc <__aeabi_dcmplt>
 80091de:	b158      	cbz	r0, 80091f8 <sqrt+0x42>
 80091e0:	f7ff fb5e 	bl	80088a0 <__errno>
 80091e4:	2321      	movs	r3, #33	; 0x21
 80091e6:	2200      	movs	r2, #0
 80091e8:	6003      	str	r3, [r0, #0]
 80091ea:	2300      	movs	r3, #0
 80091ec:	4610      	mov	r0, r2
 80091ee:	4619      	mov	r1, r3
 80091f0:	f7f7 fa9c 	bl	800072c <__aeabi_ddiv>
 80091f4:	4604      	mov	r4, r0
 80091f6:	460d      	mov	r5, r1
 80091f8:	4620      	mov	r0, r4
 80091fa:	4629      	mov	r1, r5
 80091fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009200 <atan>:
 8009200:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009204:	4bb6      	ldr	r3, [pc, #728]	; (80094e0 <atan+0x2e0>)
 8009206:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800920a:	429e      	cmp	r6, r3
 800920c:	4604      	mov	r4, r0
 800920e:	460d      	mov	r5, r1
 8009210:	468b      	mov	fp, r1
 8009212:	dd17      	ble.n	8009244 <atan+0x44>
 8009214:	4bb3      	ldr	r3, [pc, #716]	; (80094e4 <atan+0x2e4>)
 8009216:	429e      	cmp	r6, r3
 8009218:	dc01      	bgt.n	800921e <atan+0x1e>
 800921a:	d109      	bne.n	8009230 <atan+0x30>
 800921c:	b140      	cbz	r0, 8009230 <atan+0x30>
 800921e:	4622      	mov	r2, r4
 8009220:	462b      	mov	r3, r5
 8009222:	4620      	mov	r0, r4
 8009224:	4629      	mov	r1, r5
 8009226:	f7f6 ffa1 	bl	800016c <__adddf3>
 800922a:	4604      	mov	r4, r0
 800922c:	460d      	mov	r5, r1
 800922e:	e005      	b.n	800923c <atan+0x3c>
 8009230:	f1bb 0f00 	cmp.w	fp, #0
 8009234:	4cac      	ldr	r4, [pc, #688]	; (80094e8 <atan+0x2e8>)
 8009236:	f300 8121 	bgt.w	800947c <atan+0x27c>
 800923a:	4dac      	ldr	r5, [pc, #688]	; (80094ec <atan+0x2ec>)
 800923c:	4620      	mov	r0, r4
 800923e:	4629      	mov	r1, r5
 8009240:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009244:	4baa      	ldr	r3, [pc, #680]	; (80094f0 <atan+0x2f0>)
 8009246:	429e      	cmp	r6, r3
 8009248:	dc11      	bgt.n	800926e <atan+0x6e>
 800924a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800924e:	429e      	cmp	r6, r3
 8009250:	dc0a      	bgt.n	8009268 <atan+0x68>
 8009252:	a38b      	add	r3, pc, #556	; (adr r3, 8009480 <atan+0x280>)
 8009254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009258:	f7f6 ff88 	bl	800016c <__adddf3>
 800925c:	2200      	movs	r2, #0
 800925e:	4ba5      	ldr	r3, [pc, #660]	; (80094f4 <atan+0x2f4>)
 8009260:	f7f7 fbca 	bl	80009f8 <__aeabi_dcmpgt>
 8009264:	2800      	cmp	r0, #0
 8009266:	d1e9      	bne.n	800923c <atan+0x3c>
 8009268:	f04f 3aff 	mov.w	sl, #4294967295
 800926c:	e027      	b.n	80092be <atan+0xbe>
 800926e:	f000 f951 	bl	8009514 <fabs>
 8009272:	4ba1      	ldr	r3, [pc, #644]	; (80094f8 <atan+0x2f8>)
 8009274:	4604      	mov	r4, r0
 8009276:	429e      	cmp	r6, r3
 8009278:	460d      	mov	r5, r1
 800927a:	f300 80b8 	bgt.w	80093ee <atan+0x1ee>
 800927e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8009282:	429e      	cmp	r6, r3
 8009284:	f300 809c 	bgt.w	80093c0 <atan+0x1c0>
 8009288:	4602      	mov	r2, r0
 800928a:	460b      	mov	r3, r1
 800928c:	f7f6 ff6e 	bl	800016c <__adddf3>
 8009290:	2200      	movs	r2, #0
 8009292:	4b98      	ldr	r3, [pc, #608]	; (80094f4 <atan+0x2f4>)
 8009294:	f7f6 ff68 	bl	8000168 <__aeabi_dsub>
 8009298:	2200      	movs	r2, #0
 800929a:	4606      	mov	r6, r0
 800929c:	460f      	mov	r7, r1
 800929e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80092a2:	4620      	mov	r0, r4
 80092a4:	4629      	mov	r1, r5
 80092a6:	f7f6 ff61 	bl	800016c <__adddf3>
 80092aa:	4602      	mov	r2, r0
 80092ac:	460b      	mov	r3, r1
 80092ae:	4630      	mov	r0, r6
 80092b0:	4639      	mov	r1, r7
 80092b2:	f7f7 fa3b 	bl	800072c <__aeabi_ddiv>
 80092b6:	f04f 0a00 	mov.w	sl, #0
 80092ba:	4604      	mov	r4, r0
 80092bc:	460d      	mov	r5, r1
 80092be:	4622      	mov	r2, r4
 80092c0:	462b      	mov	r3, r5
 80092c2:	4620      	mov	r0, r4
 80092c4:	4629      	mov	r1, r5
 80092c6:	f7f7 f907 	bl	80004d8 <__aeabi_dmul>
 80092ca:	4602      	mov	r2, r0
 80092cc:	460b      	mov	r3, r1
 80092ce:	4680      	mov	r8, r0
 80092d0:	4689      	mov	r9, r1
 80092d2:	f7f7 f901 	bl	80004d8 <__aeabi_dmul>
 80092d6:	a36c      	add	r3, pc, #432	; (adr r3, 8009488 <atan+0x288>)
 80092d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092dc:	4606      	mov	r6, r0
 80092de:	460f      	mov	r7, r1
 80092e0:	f7f7 f8fa 	bl	80004d8 <__aeabi_dmul>
 80092e4:	a36a      	add	r3, pc, #424	; (adr r3, 8009490 <atan+0x290>)
 80092e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ea:	f7f6 ff3f 	bl	800016c <__adddf3>
 80092ee:	4632      	mov	r2, r6
 80092f0:	463b      	mov	r3, r7
 80092f2:	f7f7 f8f1 	bl	80004d8 <__aeabi_dmul>
 80092f6:	a368      	add	r3, pc, #416	; (adr r3, 8009498 <atan+0x298>)
 80092f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092fc:	f7f6 ff36 	bl	800016c <__adddf3>
 8009300:	4632      	mov	r2, r6
 8009302:	463b      	mov	r3, r7
 8009304:	f7f7 f8e8 	bl	80004d8 <__aeabi_dmul>
 8009308:	a365      	add	r3, pc, #404	; (adr r3, 80094a0 <atan+0x2a0>)
 800930a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800930e:	f7f6 ff2d 	bl	800016c <__adddf3>
 8009312:	4632      	mov	r2, r6
 8009314:	463b      	mov	r3, r7
 8009316:	f7f7 f8df 	bl	80004d8 <__aeabi_dmul>
 800931a:	a363      	add	r3, pc, #396	; (adr r3, 80094a8 <atan+0x2a8>)
 800931c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009320:	f7f6 ff24 	bl	800016c <__adddf3>
 8009324:	4632      	mov	r2, r6
 8009326:	463b      	mov	r3, r7
 8009328:	f7f7 f8d6 	bl	80004d8 <__aeabi_dmul>
 800932c:	a360      	add	r3, pc, #384	; (adr r3, 80094b0 <atan+0x2b0>)
 800932e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009332:	f7f6 ff1b 	bl	800016c <__adddf3>
 8009336:	4642      	mov	r2, r8
 8009338:	464b      	mov	r3, r9
 800933a:	f7f7 f8cd 	bl	80004d8 <__aeabi_dmul>
 800933e:	a35e      	add	r3, pc, #376	; (adr r3, 80094b8 <atan+0x2b8>)
 8009340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009344:	4680      	mov	r8, r0
 8009346:	4689      	mov	r9, r1
 8009348:	4630      	mov	r0, r6
 800934a:	4639      	mov	r1, r7
 800934c:	f7f7 f8c4 	bl	80004d8 <__aeabi_dmul>
 8009350:	a35b      	add	r3, pc, #364	; (adr r3, 80094c0 <atan+0x2c0>)
 8009352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009356:	f7f6 ff07 	bl	8000168 <__aeabi_dsub>
 800935a:	4632      	mov	r2, r6
 800935c:	463b      	mov	r3, r7
 800935e:	f7f7 f8bb 	bl	80004d8 <__aeabi_dmul>
 8009362:	a359      	add	r3, pc, #356	; (adr r3, 80094c8 <atan+0x2c8>)
 8009364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009368:	f7f6 fefe 	bl	8000168 <__aeabi_dsub>
 800936c:	4632      	mov	r2, r6
 800936e:	463b      	mov	r3, r7
 8009370:	f7f7 f8b2 	bl	80004d8 <__aeabi_dmul>
 8009374:	a356      	add	r3, pc, #344	; (adr r3, 80094d0 <atan+0x2d0>)
 8009376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800937a:	f7f6 fef5 	bl	8000168 <__aeabi_dsub>
 800937e:	4632      	mov	r2, r6
 8009380:	463b      	mov	r3, r7
 8009382:	f7f7 f8a9 	bl	80004d8 <__aeabi_dmul>
 8009386:	a354      	add	r3, pc, #336	; (adr r3, 80094d8 <atan+0x2d8>)
 8009388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800938c:	f7f6 feec 	bl	8000168 <__aeabi_dsub>
 8009390:	4632      	mov	r2, r6
 8009392:	463b      	mov	r3, r7
 8009394:	f7f7 f8a0 	bl	80004d8 <__aeabi_dmul>
 8009398:	4602      	mov	r2, r0
 800939a:	460b      	mov	r3, r1
 800939c:	4640      	mov	r0, r8
 800939e:	4649      	mov	r1, r9
 80093a0:	f7f6 fee4 	bl	800016c <__adddf3>
 80093a4:	4622      	mov	r2, r4
 80093a6:	462b      	mov	r3, r5
 80093a8:	f7f7 f896 	bl	80004d8 <__aeabi_dmul>
 80093ac:	f1ba 3fff 	cmp.w	sl, #4294967295
 80093b0:	4602      	mov	r2, r0
 80093b2:	460b      	mov	r3, r1
 80093b4:	d144      	bne.n	8009440 <atan+0x240>
 80093b6:	4620      	mov	r0, r4
 80093b8:	4629      	mov	r1, r5
 80093ba:	f7f6 fed5 	bl	8000168 <__aeabi_dsub>
 80093be:	e734      	b.n	800922a <atan+0x2a>
 80093c0:	2200      	movs	r2, #0
 80093c2:	4b4c      	ldr	r3, [pc, #304]	; (80094f4 <atan+0x2f4>)
 80093c4:	f7f6 fed0 	bl	8000168 <__aeabi_dsub>
 80093c8:	2200      	movs	r2, #0
 80093ca:	4606      	mov	r6, r0
 80093cc:	460f      	mov	r7, r1
 80093ce:	4620      	mov	r0, r4
 80093d0:	4629      	mov	r1, r5
 80093d2:	4b48      	ldr	r3, [pc, #288]	; (80094f4 <atan+0x2f4>)
 80093d4:	f7f6 feca 	bl	800016c <__adddf3>
 80093d8:	4602      	mov	r2, r0
 80093da:	460b      	mov	r3, r1
 80093dc:	4630      	mov	r0, r6
 80093de:	4639      	mov	r1, r7
 80093e0:	f7f7 f9a4 	bl	800072c <__aeabi_ddiv>
 80093e4:	f04f 0a01 	mov.w	sl, #1
 80093e8:	4604      	mov	r4, r0
 80093ea:	460d      	mov	r5, r1
 80093ec:	e767      	b.n	80092be <atan+0xbe>
 80093ee:	4b43      	ldr	r3, [pc, #268]	; (80094fc <atan+0x2fc>)
 80093f0:	429e      	cmp	r6, r3
 80093f2:	da1a      	bge.n	800942a <atan+0x22a>
 80093f4:	2200      	movs	r2, #0
 80093f6:	4b42      	ldr	r3, [pc, #264]	; (8009500 <atan+0x300>)
 80093f8:	f7f6 feb6 	bl	8000168 <__aeabi_dsub>
 80093fc:	2200      	movs	r2, #0
 80093fe:	4606      	mov	r6, r0
 8009400:	460f      	mov	r7, r1
 8009402:	4620      	mov	r0, r4
 8009404:	4629      	mov	r1, r5
 8009406:	4b3e      	ldr	r3, [pc, #248]	; (8009500 <atan+0x300>)
 8009408:	f7f7 f866 	bl	80004d8 <__aeabi_dmul>
 800940c:	2200      	movs	r2, #0
 800940e:	4b39      	ldr	r3, [pc, #228]	; (80094f4 <atan+0x2f4>)
 8009410:	f7f6 feac 	bl	800016c <__adddf3>
 8009414:	4602      	mov	r2, r0
 8009416:	460b      	mov	r3, r1
 8009418:	4630      	mov	r0, r6
 800941a:	4639      	mov	r1, r7
 800941c:	f7f7 f986 	bl	800072c <__aeabi_ddiv>
 8009420:	f04f 0a02 	mov.w	sl, #2
 8009424:	4604      	mov	r4, r0
 8009426:	460d      	mov	r5, r1
 8009428:	e749      	b.n	80092be <atan+0xbe>
 800942a:	4602      	mov	r2, r0
 800942c:	460b      	mov	r3, r1
 800942e:	2000      	movs	r0, #0
 8009430:	4934      	ldr	r1, [pc, #208]	; (8009504 <atan+0x304>)
 8009432:	f7f7 f97b 	bl	800072c <__aeabi_ddiv>
 8009436:	f04f 0a03 	mov.w	sl, #3
 800943a:	4604      	mov	r4, r0
 800943c:	460d      	mov	r5, r1
 800943e:	e73e      	b.n	80092be <atan+0xbe>
 8009440:	4b31      	ldr	r3, [pc, #196]	; (8009508 <atan+0x308>)
 8009442:	4e32      	ldr	r6, [pc, #200]	; (800950c <atan+0x30c>)
 8009444:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800944c:	f7f6 fe8c 	bl	8000168 <__aeabi_dsub>
 8009450:	4622      	mov	r2, r4
 8009452:	462b      	mov	r3, r5
 8009454:	f7f6 fe88 	bl	8000168 <__aeabi_dsub>
 8009458:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800945c:	4602      	mov	r2, r0
 800945e:	460b      	mov	r3, r1
 8009460:	e9d6 0100 	ldrd	r0, r1, [r6]
 8009464:	f7f6 fe80 	bl	8000168 <__aeabi_dsub>
 8009468:	f1bb 0f00 	cmp.w	fp, #0
 800946c:	4604      	mov	r4, r0
 800946e:	460d      	mov	r5, r1
 8009470:	f6bf aee4 	bge.w	800923c <atan+0x3c>
 8009474:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009478:	461d      	mov	r5, r3
 800947a:	e6df      	b.n	800923c <atan+0x3c>
 800947c:	4d24      	ldr	r5, [pc, #144]	; (8009510 <atan+0x310>)
 800947e:	e6dd      	b.n	800923c <atan+0x3c>
 8009480:	8800759c 	.word	0x8800759c
 8009484:	7e37e43c 	.word	0x7e37e43c
 8009488:	e322da11 	.word	0xe322da11
 800948c:	3f90ad3a 	.word	0x3f90ad3a
 8009490:	24760deb 	.word	0x24760deb
 8009494:	3fa97b4b 	.word	0x3fa97b4b
 8009498:	a0d03d51 	.word	0xa0d03d51
 800949c:	3fb10d66 	.word	0x3fb10d66
 80094a0:	c54c206e 	.word	0xc54c206e
 80094a4:	3fb745cd 	.word	0x3fb745cd
 80094a8:	920083ff 	.word	0x920083ff
 80094ac:	3fc24924 	.word	0x3fc24924
 80094b0:	5555550d 	.word	0x5555550d
 80094b4:	3fd55555 	.word	0x3fd55555
 80094b8:	2c6a6c2f 	.word	0x2c6a6c2f
 80094bc:	bfa2b444 	.word	0xbfa2b444
 80094c0:	52defd9a 	.word	0x52defd9a
 80094c4:	3fadde2d 	.word	0x3fadde2d
 80094c8:	af749a6d 	.word	0xaf749a6d
 80094cc:	3fb3b0f2 	.word	0x3fb3b0f2
 80094d0:	fe231671 	.word	0xfe231671
 80094d4:	3fbc71c6 	.word	0x3fbc71c6
 80094d8:	9998ebc4 	.word	0x9998ebc4
 80094dc:	3fc99999 	.word	0x3fc99999
 80094e0:	440fffff 	.word	0x440fffff
 80094e4:	7ff00000 	.word	0x7ff00000
 80094e8:	54442d18 	.word	0x54442d18
 80094ec:	bff921fb 	.word	0xbff921fb
 80094f0:	3fdbffff 	.word	0x3fdbffff
 80094f4:	3ff00000 	.word	0x3ff00000
 80094f8:	3ff2ffff 	.word	0x3ff2ffff
 80094fc:	40038000 	.word	0x40038000
 8009500:	3ff80000 	.word	0x3ff80000
 8009504:	bff00000 	.word	0xbff00000
 8009508:	08009be8 	.word	0x08009be8
 800950c:	08009bc8 	.word	0x08009bc8
 8009510:	3ff921fb 	.word	0x3ff921fb

08009514 <fabs>:
 8009514:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009518:	4619      	mov	r1, r3
 800951a:	4770      	bx	lr

0800951c <__ieee754_sqrt>:
 800951c:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 80096c0 <__ieee754_sqrt+0x1a4>
 8009520:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009524:	ea3c 0c01 	bics.w	ip, ip, r1
 8009528:	460b      	mov	r3, r1
 800952a:	4606      	mov	r6, r0
 800952c:	460d      	mov	r5, r1
 800952e:	460a      	mov	r2, r1
 8009530:	4604      	mov	r4, r0
 8009532:	d10e      	bne.n	8009552 <__ieee754_sqrt+0x36>
 8009534:	4602      	mov	r2, r0
 8009536:	f7f6 ffcf 	bl	80004d8 <__aeabi_dmul>
 800953a:	4602      	mov	r2, r0
 800953c:	460b      	mov	r3, r1
 800953e:	4630      	mov	r0, r6
 8009540:	4629      	mov	r1, r5
 8009542:	f7f6 fe13 	bl	800016c <__adddf3>
 8009546:	4606      	mov	r6, r0
 8009548:	460d      	mov	r5, r1
 800954a:	4630      	mov	r0, r6
 800954c:	4629      	mov	r1, r5
 800954e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009552:	2900      	cmp	r1, #0
 8009554:	dc0d      	bgt.n	8009572 <__ieee754_sqrt+0x56>
 8009556:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800955a:	ea5c 0c00 	orrs.w	ip, ip, r0
 800955e:	d0f4      	beq.n	800954a <__ieee754_sqrt+0x2e>
 8009560:	b139      	cbz	r1, 8009572 <__ieee754_sqrt+0x56>
 8009562:	4602      	mov	r2, r0
 8009564:	f7f6 fe00 	bl	8000168 <__aeabi_dsub>
 8009568:	4602      	mov	r2, r0
 800956a:	460b      	mov	r3, r1
 800956c:	f7f7 f8de 	bl	800072c <__aeabi_ddiv>
 8009570:	e7e9      	b.n	8009546 <__ieee754_sqrt+0x2a>
 8009572:	1512      	asrs	r2, r2, #20
 8009574:	f000 8089 	beq.w	800968a <__ieee754_sqrt+0x16e>
 8009578:	2500      	movs	r5, #0
 800957a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800957e:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8009582:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009586:	07d2      	lsls	r2, r2, #31
 8009588:	bf5c      	itt	pl
 800958a:	005b      	lslpl	r3, r3, #1
 800958c:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8009590:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009594:	bf58      	it	pl
 8009596:	0064      	lslpl	r4, r4, #1
 8009598:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800959c:	0062      	lsls	r2, r4, #1
 800959e:	2016      	movs	r0, #22
 80095a0:	4629      	mov	r1, r5
 80095a2:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 80095a6:	1076      	asrs	r6, r6, #1
 80095a8:	190f      	adds	r7, r1, r4
 80095aa:	429f      	cmp	r7, r3
 80095ac:	bfde      	ittt	le
 80095ae:	1bdb      	suble	r3, r3, r7
 80095b0:	1939      	addle	r1, r7, r4
 80095b2:	192d      	addle	r5, r5, r4
 80095b4:	005b      	lsls	r3, r3, #1
 80095b6:	3801      	subs	r0, #1
 80095b8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80095bc:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80095c0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80095c4:	d1f0      	bne.n	80095a8 <__ieee754_sqrt+0x8c>
 80095c6:	4604      	mov	r4, r0
 80095c8:	2720      	movs	r7, #32
 80095ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80095ce:	428b      	cmp	r3, r1
 80095d0:	eb0c 0e00 	add.w	lr, ip, r0
 80095d4:	dc02      	bgt.n	80095dc <__ieee754_sqrt+0xc0>
 80095d6:	d113      	bne.n	8009600 <__ieee754_sqrt+0xe4>
 80095d8:	4596      	cmp	lr, r2
 80095da:	d811      	bhi.n	8009600 <__ieee754_sqrt+0xe4>
 80095dc:	f1be 0f00 	cmp.w	lr, #0
 80095e0:	eb0e 000c 	add.w	r0, lr, ip
 80095e4:	da56      	bge.n	8009694 <__ieee754_sqrt+0x178>
 80095e6:	2800      	cmp	r0, #0
 80095e8:	db54      	blt.n	8009694 <__ieee754_sqrt+0x178>
 80095ea:	f101 0801 	add.w	r8, r1, #1
 80095ee:	1a5b      	subs	r3, r3, r1
 80095f0:	4641      	mov	r1, r8
 80095f2:	4596      	cmp	lr, r2
 80095f4:	bf88      	it	hi
 80095f6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80095fa:	eba2 020e 	sub.w	r2, r2, lr
 80095fe:	4464      	add	r4, ip
 8009600:	005b      	lsls	r3, r3, #1
 8009602:	3f01      	subs	r7, #1
 8009604:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009608:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800960c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8009610:	d1dd      	bne.n	80095ce <__ieee754_sqrt+0xb2>
 8009612:	4313      	orrs	r3, r2
 8009614:	d01b      	beq.n	800964e <__ieee754_sqrt+0x132>
 8009616:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 80096c4 <__ieee754_sqrt+0x1a8>
 800961a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80096c8 <__ieee754_sqrt+0x1ac>
 800961e:	e9da 0100 	ldrd	r0, r1, [sl]
 8009622:	e9db 2300 	ldrd	r2, r3, [fp]
 8009626:	f7f6 fd9f 	bl	8000168 <__aeabi_dsub>
 800962a:	e9da 8900 	ldrd	r8, r9, [sl]
 800962e:	4602      	mov	r2, r0
 8009630:	460b      	mov	r3, r1
 8009632:	4640      	mov	r0, r8
 8009634:	4649      	mov	r1, r9
 8009636:	f7f7 f9cb 	bl	80009d0 <__aeabi_dcmple>
 800963a:	b140      	cbz	r0, 800964e <__ieee754_sqrt+0x132>
 800963c:	e9da 0100 	ldrd	r0, r1, [sl]
 8009640:	e9db 2300 	ldrd	r2, r3, [fp]
 8009644:	f1b4 3fff 	cmp.w	r4, #4294967295
 8009648:	d126      	bne.n	8009698 <__ieee754_sqrt+0x17c>
 800964a:	463c      	mov	r4, r7
 800964c:	3501      	adds	r5, #1
 800964e:	106b      	asrs	r3, r5, #1
 8009650:	0864      	lsrs	r4, r4, #1
 8009652:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009656:	07ea      	lsls	r2, r5, #31
 8009658:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800965c:	bf48      	it	mi
 800965e:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 8009662:	4620      	mov	r0, r4
 8009664:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8009668:	e76d      	b.n	8009546 <__ieee754_sqrt+0x2a>
 800966a:	0ae3      	lsrs	r3, r4, #11
 800966c:	3915      	subs	r1, #21
 800966e:	0564      	lsls	r4, r4, #21
 8009670:	2b00      	cmp	r3, #0
 8009672:	d0fa      	beq.n	800966a <__ieee754_sqrt+0x14e>
 8009674:	02d8      	lsls	r0, r3, #11
 8009676:	d50a      	bpl.n	800968e <__ieee754_sqrt+0x172>
 8009678:	f1c2 0020 	rsb	r0, r2, #32
 800967c:	fa24 f000 	lsr.w	r0, r4, r0
 8009680:	1e55      	subs	r5, r2, #1
 8009682:	4094      	lsls	r4, r2
 8009684:	4303      	orrs	r3, r0
 8009686:	1b4a      	subs	r2, r1, r5
 8009688:	e776      	b.n	8009578 <__ieee754_sqrt+0x5c>
 800968a:	4611      	mov	r1, r2
 800968c:	e7f0      	b.n	8009670 <__ieee754_sqrt+0x154>
 800968e:	005b      	lsls	r3, r3, #1
 8009690:	3201      	adds	r2, #1
 8009692:	e7ef      	b.n	8009674 <__ieee754_sqrt+0x158>
 8009694:	4688      	mov	r8, r1
 8009696:	e7aa      	b.n	80095ee <__ieee754_sqrt+0xd2>
 8009698:	f7f6 fd68 	bl	800016c <__adddf3>
 800969c:	e9da 8900 	ldrd	r8, r9, [sl]
 80096a0:	4602      	mov	r2, r0
 80096a2:	460b      	mov	r3, r1
 80096a4:	4640      	mov	r0, r8
 80096a6:	4649      	mov	r1, r9
 80096a8:	f7f7 f988 	bl	80009bc <__aeabi_dcmplt>
 80096ac:	b120      	cbz	r0, 80096b8 <__ieee754_sqrt+0x19c>
 80096ae:	1ca1      	adds	r1, r4, #2
 80096b0:	bf08      	it	eq
 80096b2:	3501      	addeq	r5, #1
 80096b4:	3402      	adds	r4, #2
 80096b6:	e7ca      	b.n	800964e <__ieee754_sqrt+0x132>
 80096b8:	3401      	adds	r4, #1
 80096ba:	f024 0401 	bic.w	r4, r4, #1
 80096be:	e7c6      	b.n	800964e <__ieee754_sqrt+0x132>
 80096c0:	7ff00000 	.word	0x7ff00000
 80096c4:	20000108 	.word	0x20000108
 80096c8:	20000110 	.word	0x20000110
 80096cc:	00000000 	.word	0x00000000

080096d0 <__ieee754_atan2>:
 80096d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096d4:	4617      	mov	r7, r2
 80096d6:	4692      	mov	sl, r2
 80096d8:	4699      	mov	r9, r3
 80096da:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80096de:	427b      	negs	r3, r7
 80096e0:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8009860 <__ieee754_atan2+0x190>
 80096e4:	433b      	orrs	r3, r7
 80096e6:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80096ea:	4543      	cmp	r3, r8
 80096ec:	4604      	mov	r4, r0
 80096ee:	460d      	mov	r5, r1
 80096f0:	d809      	bhi.n	8009706 <__ieee754_atan2+0x36>
 80096f2:	4246      	negs	r6, r0
 80096f4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80096f8:	4306      	orrs	r6, r0
 80096fa:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 80096fe:	4546      	cmp	r6, r8
 8009700:	468e      	mov	lr, r1
 8009702:	4683      	mov	fp, r0
 8009704:	d908      	bls.n	8009718 <__ieee754_atan2+0x48>
 8009706:	4652      	mov	r2, sl
 8009708:	464b      	mov	r3, r9
 800970a:	4620      	mov	r0, r4
 800970c:	4629      	mov	r1, r5
 800970e:	f7f6 fd2d 	bl	800016c <__adddf3>
 8009712:	4604      	mov	r4, r0
 8009714:	460d      	mov	r5, r1
 8009716:	e019      	b.n	800974c <__ieee754_atan2+0x7c>
 8009718:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 800971c:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8009720:	433e      	orrs	r6, r7
 8009722:	d103      	bne.n	800972c <__ieee754_atan2+0x5c>
 8009724:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009728:	f7ff bd6a 	b.w	8009200 <atan>
 800972c:	ea4f 76a9 	mov.w	r6, r9, asr #30
 8009730:	f006 0602 	and.w	r6, r6, #2
 8009734:	ea53 0b0b 	orrs.w	fp, r3, fp
 8009738:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800973c:	d10a      	bne.n	8009754 <__ieee754_atan2+0x84>
 800973e:	2e02      	cmp	r6, #2
 8009740:	d067      	beq.n	8009812 <__ieee754_atan2+0x142>
 8009742:	2e03      	cmp	r6, #3
 8009744:	d102      	bne.n	800974c <__ieee754_atan2+0x7c>
 8009746:	a53a      	add	r5, pc, #232	; (adr r5, 8009830 <__ieee754_atan2+0x160>)
 8009748:	e9d5 4500 	ldrd	r4, r5, [r5]
 800974c:	4620      	mov	r0, r4
 800974e:	4629      	mov	r1, r5
 8009750:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009754:	4317      	orrs	r7, r2
 8009756:	d106      	bne.n	8009766 <__ieee754_atan2+0x96>
 8009758:	f1be 0f00 	cmp.w	lr, #0
 800975c:	da64      	bge.n	8009828 <__ieee754_atan2+0x158>
 800975e:	a536      	add	r5, pc, #216	; (adr r5, 8009838 <__ieee754_atan2+0x168>)
 8009760:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009764:	e7f2      	b.n	800974c <__ieee754_atan2+0x7c>
 8009766:	4542      	cmp	r2, r8
 8009768:	d10f      	bne.n	800978a <__ieee754_atan2+0xba>
 800976a:	4293      	cmp	r3, r2
 800976c:	f106 36ff 	add.w	r6, r6, #4294967295
 8009770:	d107      	bne.n	8009782 <__ieee754_atan2+0xb2>
 8009772:	2e02      	cmp	r6, #2
 8009774:	d851      	bhi.n	800981a <__ieee754_atan2+0x14a>
 8009776:	4b3b      	ldr	r3, [pc, #236]	; (8009864 <__ieee754_atan2+0x194>)
 8009778:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800977c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009780:	e7e4      	b.n	800974c <__ieee754_atan2+0x7c>
 8009782:	2e02      	cmp	r6, #2
 8009784:	d84d      	bhi.n	8009822 <__ieee754_atan2+0x152>
 8009786:	4b38      	ldr	r3, [pc, #224]	; (8009868 <__ieee754_atan2+0x198>)
 8009788:	e7f6      	b.n	8009778 <__ieee754_atan2+0xa8>
 800978a:	4543      	cmp	r3, r8
 800978c:	d0e4      	beq.n	8009758 <__ieee754_atan2+0x88>
 800978e:	1a9b      	subs	r3, r3, r2
 8009790:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8009794:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009798:	da21      	bge.n	80097de <__ieee754_atan2+0x10e>
 800979a:	f1b9 0f00 	cmp.w	r9, #0
 800979e:	da01      	bge.n	80097a4 <__ieee754_atan2+0xd4>
 80097a0:	323c      	adds	r2, #60	; 0x3c
 80097a2:	db20      	blt.n	80097e6 <__ieee754_atan2+0x116>
 80097a4:	4652      	mov	r2, sl
 80097a6:	464b      	mov	r3, r9
 80097a8:	4620      	mov	r0, r4
 80097aa:	4629      	mov	r1, r5
 80097ac:	f7f6 ffbe 	bl	800072c <__aeabi_ddiv>
 80097b0:	f7ff feb0 	bl	8009514 <fabs>
 80097b4:	f7ff fd24 	bl	8009200 <atan>
 80097b8:	4604      	mov	r4, r0
 80097ba:	460d      	mov	r5, r1
 80097bc:	2e01      	cmp	r6, #1
 80097be:	d015      	beq.n	80097ec <__ieee754_atan2+0x11c>
 80097c0:	2e02      	cmp	r6, #2
 80097c2:	d017      	beq.n	80097f4 <__ieee754_atan2+0x124>
 80097c4:	2e00      	cmp	r6, #0
 80097c6:	d0c1      	beq.n	800974c <__ieee754_atan2+0x7c>
 80097c8:	a31d      	add	r3, pc, #116	; (adr r3, 8009840 <__ieee754_atan2+0x170>)
 80097ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ce:	4620      	mov	r0, r4
 80097d0:	4629      	mov	r1, r5
 80097d2:	f7f6 fcc9 	bl	8000168 <__aeabi_dsub>
 80097d6:	a31c      	add	r3, pc, #112	; (adr r3, 8009848 <__ieee754_atan2+0x178>)
 80097d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097dc:	e016      	b.n	800980c <__ieee754_atan2+0x13c>
 80097de:	a51c      	add	r5, pc, #112	; (adr r5, 8009850 <__ieee754_atan2+0x180>)
 80097e0:	e9d5 4500 	ldrd	r4, r5, [r5]
 80097e4:	e7ea      	b.n	80097bc <__ieee754_atan2+0xec>
 80097e6:	2400      	movs	r4, #0
 80097e8:	2500      	movs	r5, #0
 80097ea:	e7e7      	b.n	80097bc <__ieee754_atan2+0xec>
 80097ec:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80097f0:	461d      	mov	r5, r3
 80097f2:	e7ab      	b.n	800974c <__ieee754_atan2+0x7c>
 80097f4:	a312      	add	r3, pc, #72	; (adr r3, 8009840 <__ieee754_atan2+0x170>)
 80097f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097fa:	4620      	mov	r0, r4
 80097fc:	4629      	mov	r1, r5
 80097fe:	f7f6 fcb3 	bl	8000168 <__aeabi_dsub>
 8009802:	4602      	mov	r2, r0
 8009804:	460b      	mov	r3, r1
 8009806:	a110      	add	r1, pc, #64	; (adr r1, 8009848 <__ieee754_atan2+0x178>)
 8009808:	e9d1 0100 	ldrd	r0, r1, [r1]
 800980c:	f7f6 fcac 	bl	8000168 <__aeabi_dsub>
 8009810:	e77f      	b.n	8009712 <__ieee754_atan2+0x42>
 8009812:	a50d      	add	r5, pc, #52	; (adr r5, 8009848 <__ieee754_atan2+0x178>)
 8009814:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009818:	e798      	b.n	800974c <__ieee754_atan2+0x7c>
 800981a:	a50f      	add	r5, pc, #60	; (adr r5, 8009858 <__ieee754_atan2+0x188>)
 800981c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009820:	e794      	b.n	800974c <__ieee754_atan2+0x7c>
 8009822:	2400      	movs	r4, #0
 8009824:	2500      	movs	r5, #0
 8009826:	e791      	b.n	800974c <__ieee754_atan2+0x7c>
 8009828:	a509      	add	r5, pc, #36	; (adr r5, 8009850 <__ieee754_atan2+0x180>)
 800982a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800982e:	e78d      	b.n	800974c <__ieee754_atan2+0x7c>
 8009830:	54442d18 	.word	0x54442d18
 8009834:	c00921fb 	.word	0xc00921fb
 8009838:	54442d18 	.word	0x54442d18
 800983c:	bff921fb 	.word	0xbff921fb
 8009840:	33145c07 	.word	0x33145c07
 8009844:	3ca1a626 	.word	0x3ca1a626
 8009848:	54442d18 	.word	0x54442d18
 800984c:	400921fb 	.word	0x400921fb
 8009850:	54442d18 	.word	0x54442d18
 8009854:	3ff921fb 	.word	0x3ff921fb
 8009858:	54442d18 	.word	0x54442d18
 800985c:	3fe921fb 	.word	0x3fe921fb
 8009860:	7ff00000 	.word	0x7ff00000
 8009864:	08009c08 	.word	0x08009c08
 8009868:	08009c20 	.word	0x08009c20

0800986c <_init>:
 800986c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800986e:	bf00      	nop
 8009870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009872:	bc08      	pop	{r3}
 8009874:	469e      	mov	lr, r3
 8009876:	4770      	bx	lr

08009878 <_fini>:
 8009878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800987a:	bf00      	nop
 800987c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800987e:	bc08      	pop	{r3}
 8009880:	469e      	mov	lr, r3
 8009882:	4770      	bx	lr
