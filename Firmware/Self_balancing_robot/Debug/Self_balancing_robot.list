
Self_balancing_robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000963c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b0  08009750  08009750  00019750  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b00  08009b00  00020118  2**0
                  CONTENTS
  4 .ARM          00000000  08009b00  08009b00  00020118  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009b00  08009b00  00020118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b00  08009b00  00019b00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b04  08009b04  00019b04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000118  20000000  08009b08  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000620  20000118  08009c20  00020118  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000738  08009c20  00020738  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020118  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020141  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001375c  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029fa  00000000  00000000  000338e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001390  00000000  00000000  000362e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f6f  00000000  00000000  00037670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019533  00000000  00000000  000385df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016609  00000000  00000000  00051b12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f53b  00000000  00000000  0006811b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005db0  00000000  00000000  000f7658  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009b  00000000  00000000  000fd408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000118 	.word	0x20000118
 800012c:	00000000 	.word	0x00000000
 8000130:	08009734 	.word	0x08009734

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000011c 	.word	0x2000011c
 800014c:	08009734 	.word	0x08009734

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2iz>:
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d8:	d30f      	bcc.n	80010fa <__aeabi_f2iz+0x2a>
 80010da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d90d      	bls.n	8001100 <__aeabi_f2iz+0x30>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ec:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010f0:	fa23 f002 	lsr.w	r0, r3, r2
 80010f4:	bf18      	it	ne
 80010f6:	4240      	negne	r0, r0
 80010f8:	4770      	bx	lr
 80010fa:	f04f 0000 	mov.w	r0, #0
 80010fe:	4770      	bx	lr
 8001100:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001104:	d101      	bne.n	800110a <__aeabi_f2iz+0x3a>
 8001106:	0242      	lsls	r2, r0, #9
 8001108:	d105      	bne.n	8001116 <__aeabi_f2iz+0x46>
 800110a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800110e:	bf08      	it	eq
 8001110:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001114:	4770      	bx	lr
 8001116:	f04f 0000 	mov.w	r0, #0
 800111a:	4770      	bx	lr

0800111c <__aeabi_f2uiz>:
 800111c:	0042      	lsls	r2, r0, #1
 800111e:	d20e      	bcs.n	800113e <__aeabi_f2uiz+0x22>
 8001120:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001124:	d30b      	bcc.n	800113e <__aeabi_f2uiz+0x22>
 8001126:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800112a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800112e:	d409      	bmi.n	8001144 <__aeabi_f2uiz+0x28>
 8001130:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001134:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001138:	fa23 f002 	lsr.w	r0, r3, r2
 800113c:	4770      	bx	lr
 800113e:	f04f 0000 	mov.w	r0, #0
 8001142:	4770      	bx	lr
 8001144:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001148:	d101      	bne.n	800114e <__aeabi_f2uiz+0x32>
 800114a:	0242      	lsls	r2, r0, #9
 800114c:	d102      	bne.n	8001154 <__aeabi_f2uiz+0x38>
 800114e:	f04f 30ff 	mov.w	r0, #4294967295
 8001152:	4770      	bx	lr
 8001154:	f04f 0000 	mov.w	r0, #0
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop

0800115c <SBR1_init>:
static const float u_PS_p[] = { 0.2500f };
static const float u_PM_p[] = { 0.3500f };//0.6670
static const float u_PB_p[] = { 0.51900f };


void SBR1_init( void ){
 800115c:	b580      	push	{r7, lr}
 800115e:	b08a      	sub	sp, #40	; 0x28
 8001160:	af0a      	add	r7, sp, #40	; 0x28
    /* Set inputs */
    qFIS_InputSetup( SBR1_inputs, theta, -1.0000f, 1.0000f );
 8001162:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001166:	4a8d      	ldr	r2, [pc, #564]	; (800139c <SBR1_init+0x240>)
 8001168:	2100      	movs	r1, #0
 800116a:	488d      	ldr	r0, [pc, #564]	; (80013a0 <SBR1_init+0x244>)
 800116c:	f001 fd1e 	bl	8002bac <qFIS_InputSetup>
    qFIS_InputSetup( SBR1_inputs, thetadot, -1.0000f, 1.0000f );
 8001170:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001174:	4a89      	ldr	r2, [pc, #548]	; (800139c <SBR1_init+0x240>)
 8001176:	2101      	movs	r1, #1
 8001178:	4889      	ldr	r0, [pc, #548]	; (80013a0 <SBR1_init+0x244>)
 800117a:	f001 fd17 	bl	8002bac <qFIS_InputSetup>
    /* Set outputs */
    qFIS_OutputSetup( SBR1_outputs, u, -1.0000f, 1.0000f );
 800117e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001182:	4a86      	ldr	r2, [pc, #536]	; (800139c <SBR1_init+0x240>)
 8001184:	2100      	movs	r1, #0
 8001186:	4887      	ldr	r0, [pc, #540]	; (80013a4 <SBR1_init+0x248>)
 8001188:	f001 fd3b 	bl	8002c02 <qFIS_OutputSetup>
    /* Set membership functions for the inputs */
    qFIS_SetMF( MFin, theta, theta_NB, trapmf, NULL, theta_NB_p, 1.0f );
 800118c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001190:	9302      	str	r3, [sp, #8]
 8001192:	4b85      	ldr	r3, [pc, #532]	; (80013a8 <SBR1_init+0x24c>)
 8001194:	9301      	str	r3, [sp, #4]
 8001196:	2300      	movs	r3, #0
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	2302      	movs	r3, #2
 800119c:	2200      	movs	r2, #0
 800119e:	2100      	movs	r1, #0
 80011a0:	4882      	ldr	r0, [pc, #520]	; (80013ac <SBR1_init+0x250>)
 80011a2:	f001 fdd7 	bl	8002d54 <qFIS_SetMF>
    qFIS_SetMF( MFin, theta, theta_NS, trapmf, NULL, theta_NS_p, 1.0f );
 80011a6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80011aa:	9302      	str	r3, [sp, #8]
 80011ac:	4b80      	ldr	r3, [pc, #512]	; (80013b0 <SBR1_init+0x254>)
 80011ae:	9301      	str	r3, [sp, #4]
 80011b0:	2300      	movs	r3, #0
 80011b2:	9300      	str	r3, [sp, #0]
 80011b4:	2302      	movs	r3, #2
 80011b6:	2201      	movs	r2, #1
 80011b8:	2100      	movs	r1, #0
 80011ba:	487c      	ldr	r0, [pc, #496]	; (80013ac <SBR1_init+0x250>)
 80011bc:	f001 fdca 	bl	8002d54 <qFIS_SetMF>
    qFIS_SetMF( MFin, theta, theta_ZE, trimf, NULL, theta_ZE_p, 1.0f );
 80011c0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80011c4:	9302      	str	r3, [sp, #8]
 80011c6:	4b7b      	ldr	r3, [pc, #492]	; (80013b4 <SBR1_init+0x258>)
 80011c8:	9301      	str	r3, [sp, #4]
 80011ca:	2300      	movs	r3, #0
 80011cc:	9300      	str	r3, [sp, #0]
 80011ce:	2301      	movs	r3, #1
 80011d0:	2202      	movs	r2, #2
 80011d2:	2100      	movs	r1, #0
 80011d4:	4875      	ldr	r0, [pc, #468]	; (80013ac <SBR1_init+0x250>)
 80011d6:	f001 fdbd 	bl	8002d54 <qFIS_SetMF>
    qFIS_SetMF( MFin, theta, theta_PS, trapmf, NULL, theta_PS_p, 1.0f );
 80011da:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80011de:	9302      	str	r3, [sp, #8]
 80011e0:	4b75      	ldr	r3, [pc, #468]	; (80013b8 <SBR1_init+0x25c>)
 80011e2:	9301      	str	r3, [sp, #4]
 80011e4:	2300      	movs	r3, #0
 80011e6:	9300      	str	r3, [sp, #0]
 80011e8:	2302      	movs	r3, #2
 80011ea:	2203      	movs	r2, #3
 80011ec:	2100      	movs	r1, #0
 80011ee:	486f      	ldr	r0, [pc, #444]	; (80013ac <SBR1_init+0x250>)
 80011f0:	f001 fdb0 	bl	8002d54 <qFIS_SetMF>
    qFIS_SetMF( MFin, theta, theta_PB, trapmf, NULL, theta_PB_p, 1.0f );
 80011f4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80011f8:	9302      	str	r3, [sp, #8]
 80011fa:	4b70      	ldr	r3, [pc, #448]	; (80013bc <SBR1_init+0x260>)
 80011fc:	9301      	str	r3, [sp, #4]
 80011fe:	2300      	movs	r3, #0
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	2302      	movs	r3, #2
 8001204:	2204      	movs	r2, #4
 8001206:	2100      	movs	r1, #0
 8001208:	4868      	ldr	r0, [pc, #416]	; (80013ac <SBR1_init+0x250>)
 800120a:	f001 fda3 	bl	8002d54 <qFIS_SetMF>
    qFIS_SetMF( MFin, thetadot, thetadot_NB, trimf, NULL, thetadot_NB_p, 1.0f );
 800120e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001212:	9302      	str	r3, [sp, #8]
 8001214:	4b6a      	ldr	r3, [pc, #424]	; (80013c0 <SBR1_init+0x264>)
 8001216:	9301      	str	r3, [sp, #4]
 8001218:	2300      	movs	r3, #0
 800121a:	9300      	str	r3, [sp, #0]
 800121c:	2301      	movs	r3, #1
 800121e:	2205      	movs	r2, #5
 8001220:	2101      	movs	r1, #1
 8001222:	4862      	ldr	r0, [pc, #392]	; (80013ac <SBR1_init+0x250>)
 8001224:	f001 fd96 	bl	8002d54 <qFIS_SetMF>
    qFIS_SetMF( MFin, thetadot, thetadot_NS, trimf, NULL, thetadot_NS_p, 1.0f );
 8001228:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800122c:	9302      	str	r3, [sp, #8]
 800122e:	4b65      	ldr	r3, [pc, #404]	; (80013c4 <SBR1_init+0x268>)
 8001230:	9301      	str	r3, [sp, #4]
 8001232:	2300      	movs	r3, #0
 8001234:	9300      	str	r3, [sp, #0]
 8001236:	2301      	movs	r3, #1
 8001238:	2206      	movs	r2, #6
 800123a:	2101      	movs	r1, #1
 800123c:	485b      	ldr	r0, [pc, #364]	; (80013ac <SBR1_init+0x250>)
 800123e:	f001 fd89 	bl	8002d54 <qFIS_SetMF>
    qFIS_SetMF( MFin, thetadot, thetadot_ZE, trimf, NULL, thetadot_ZE_p, 1.0f );
 8001242:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001246:	9302      	str	r3, [sp, #8]
 8001248:	4b5f      	ldr	r3, [pc, #380]	; (80013c8 <SBR1_init+0x26c>)
 800124a:	9301      	str	r3, [sp, #4]
 800124c:	2300      	movs	r3, #0
 800124e:	9300      	str	r3, [sp, #0]
 8001250:	2301      	movs	r3, #1
 8001252:	2207      	movs	r2, #7
 8001254:	2101      	movs	r1, #1
 8001256:	4855      	ldr	r0, [pc, #340]	; (80013ac <SBR1_init+0x250>)
 8001258:	f001 fd7c 	bl	8002d54 <qFIS_SetMF>
    qFIS_SetMF( MFin, thetadot, thetadot_PS, trimf, NULL, thetadot_PS_p, 1.0f );
 800125c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001260:	9302      	str	r3, [sp, #8]
 8001262:	4b5a      	ldr	r3, [pc, #360]	; (80013cc <SBR1_init+0x270>)
 8001264:	9301      	str	r3, [sp, #4]
 8001266:	2300      	movs	r3, #0
 8001268:	9300      	str	r3, [sp, #0]
 800126a:	2301      	movs	r3, #1
 800126c:	2208      	movs	r2, #8
 800126e:	2101      	movs	r1, #1
 8001270:	484e      	ldr	r0, [pc, #312]	; (80013ac <SBR1_init+0x250>)
 8001272:	f001 fd6f 	bl	8002d54 <qFIS_SetMF>
    qFIS_SetMF( MFin, thetadot, thetadot_PB, trimf, NULL, thetadot_PB_p, 1.0f );
 8001276:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800127a:	9302      	str	r3, [sp, #8]
 800127c:	4b54      	ldr	r3, [pc, #336]	; (80013d0 <SBR1_init+0x274>)
 800127e:	9301      	str	r3, [sp, #4]
 8001280:	2300      	movs	r3, #0
 8001282:	9300      	str	r3, [sp, #0]
 8001284:	2301      	movs	r3, #1
 8001286:	2209      	movs	r2, #9
 8001288:	2101      	movs	r1, #1
 800128a:	4848      	ldr	r0, [pc, #288]	; (80013ac <SBR1_init+0x250>)
 800128c:	f001 fd62 	bl	8002d54 <qFIS_SetMF>
    /* Set membership functions for the outputs */
    qFIS_SetMF( MFout, u, u_NB, constantmf, NULL, u_NB_p, 1.0f );
 8001290:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001294:	9302      	str	r3, [sp, #8]
 8001296:	4b4f      	ldr	r3, [pc, #316]	; (80013d4 <SBR1_init+0x278>)
 8001298:	9301      	str	r3, [sp, #4]
 800129a:	2300      	movs	r3, #0
 800129c:	9300      	str	r3, [sp, #0]
 800129e:	2313      	movs	r3, #19
 80012a0:	2200      	movs	r2, #0
 80012a2:	2100      	movs	r1, #0
 80012a4:	484c      	ldr	r0, [pc, #304]	; (80013d8 <SBR1_init+0x27c>)
 80012a6:	f001 fd55 	bl	8002d54 <qFIS_SetMF>
    qFIS_SetMF( MFout, u, u_NM, constantmf, NULL, u_NM_p, 1.0f );
 80012aa:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012ae:	9302      	str	r3, [sp, #8]
 80012b0:	4b4a      	ldr	r3, [pc, #296]	; (80013dc <SBR1_init+0x280>)
 80012b2:	9301      	str	r3, [sp, #4]
 80012b4:	2300      	movs	r3, #0
 80012b6:	9300      	str	r3, [sp, #0]
 80012b8:	2313      	movs	r3, #19
 80012ba:	2201      	movs	r2, #1
 80012bc:	2100      	movs	r1, #0
 80012be:	4846      	ldr	r0, [pc, #280]	; (80013d8 <SBR1_init+0x27c>)
 80012c0:	f001 fd48 	bl	8002d54 <qFIS_SetMF>
    qFIS_SetMF( MFout, u, u_NS, constantmf, NULL, u_NS_p, 1.0f );
 80012c4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012c8:	9302      	str	r3, [sp, #8]
 80012ca:	4b45      	ldr	r3, [pc, #276]	; (80013e0 <SBR1_init+0x284>)
 80012cc:	9301      	str	r3, [sp, #4]
 80012ce:	2300      	movs	r3, #0
 80012d0:	9300      	str	r3, [sp, #0]
 80012d2:	2313      	movs	r3, #19
 80012d4:	2202      	movs	r2, #2
 80012d6:	2100      	movs	r1, #0
 80012d8:	483f      	ldr	r0, [pc, #252]	; (80013d8 <SBR1_init+0x27c>)
 80012da:	f001 fd3b 	bl	8002d54 <qFIS_SetMF>
    qFIS_SetMF( MFout, u, u_ZE, constantmf, NULL, u_ZE_p, 1.0f );
 80012de:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012e2:	9302      	str	r3, [sp, #8]
 80012e4:	4b3f      	ldr	r3, [pc, #252]	; (80013e4 <SBR1_init+0x288>)
 80012e6:	9301      	str	r3, [sp, #4]
 80012e8:	2300      	movs	r3, #0
 80012ea:	9300      	str	r3, [sp, #0]
 80012ec:	2313      	movs	r3, #19
 80012ee:	2203      	movs	r2, #3
 80012f0:	2100      	movs	r1, #0
 80012f2:	4839      	ldr	r0, [pc, #228]	; (80013d8 <SBR1_init+0x27c>)
 80012f4:	f001 fd2e 	bl	8002d54 <qFIS_SetMF>
    qFIS_SetMF( MFout, u, u_PS, constantmf, NULL, u_PS_p, 1.0f );
 80012f8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012fc:	9302      	str	r3, [sp, #8]
 80012fe:	4b3a      	ldr	r3, [pc, #232]	; (80013e8 <SBR1_init+0x28c>)
 8001300:	9301      	str	r3, [sp, #4]
 8001302:	2300      	movs	r3, #0
 8001304:	9300      	str	r3, [sp, #0]
 8001306:	2313      	movs	r3, #19
 8001308:	2204      	movs	r2, #4
 800130a:	2100      	movs	r1, #0
 800130c:	4832      	ldr	r0, [pc, #200]	; (80013d8 <SBR1_init+0x27c>)
 800130e:	f001 fd21 	bl	8002d54 <qFIS_SetMF>
    qFIS_SetMF( MFout, u, u_PM, constantmf, NULL, u_PM_p, 1.0f );
 8001312:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001316:	9302      	str	r3, [sp, #8]
 8001318:	4b34      	ldr	r3, [pc, #208]	; (80013ec <SBR1_init+0x290>)
 800131a:	9301      	str	r3, [sp, #4]
 800131c:	2300      	movs	r3, #0
 800131e:	9300      	str	r3, [sp, #0]
 8001320:	2313      	movs	r3, #19
 8001322:	2205      	movs	r2, #5
 8001324:	2100      	movs	r1, #0
 8001326:	482c      	ldr	r0, [pc, #176]	; (80013d8 <SBR1_init+0x27c>)
 8001328:	f001 fd14 	bl	8002d54 <qFIS_SetMF>
    qFIS_SetMF( MFout, u, u_PB, constantmf, NULL, u_PB_p, 1.0f );
 800132c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001330:	9302      	str	r3, [sp, #8]
 8001332:	4b2f      	ldr	r3, [pc, #188]	; (80013f0 <SBR1_init+0x294>)
 8001334:	9301      	str	r3, [sp, #4]
 8001336:	2300      	movs	r3, #0
 8001338:	9300      	str	r3, [sp, #0]
 800133a:	2313      	movs	r3, #19
 800133c:	2206      	movs	r2, #6
 800133e:	2100      	movs	r1, #0
 8001340:	4825      	ldr	r0, [pc, #148]	; (80013d8 <SBR1_init+0x27c>)
 8001342:	f001 fd07 	bl	8002d54 <qFIS_SetMF>

    /* Configure the Inference System */
    qFIS_Setup( &SBR1, Sugeno,
 8001346:	2319      	movs	r3, #25
 8001348:	9308      	str	r3, [sp, #32]
 800134a:	4b2a      	ldr	r3, [pc, #168]	; (80013f4 <SBR1_init+0x298>)
 800134c:	9307      	str	r3, [sp, #28]
 800134e:	4b2a      	ldr	r3, [pc, #168]	; (80013f8 <SBR1_init+0x29c>)
 8001350:	9306      	str	r3, [sp, #24]
 8001352:	238c      	movs	r3, #140	; 0x8c
 8001354:	9305      	str	r3, [sp, #20]
 8001356:	4b20      	ldr	r3, [pc, #128]	; (80013d8 <SBR1_init+0x27c>)
 8001358:	9304      	str	r3, [sp, #16]
 800135a:	23c8      	movs	r3, #200	; 0xc8
 800135c:	9303      	str	r3, [sp, #12]
 800135e:	4b13      	ldr	r3, [pc, #76]	; (80013ac <SBR1_init+0x250>)
 8001360:	9302      	str	r3, [sp, #8]
 8001362:	2334      	movs	r3, #52	; 0x34
 8001364:	9301      	str	r3, [sp, #4]
 8001366:	4b0f      	ldr	r3, [pc, #60]	; (80013a4 <SBR1_init+0x248>)
 8001368:	9300      	str	r3, [sp, #0]
 800136a:	2318      	movs	r3, #24
 800136c:	4a0c      	ldr	r2, [pc, #48]	; (80013a0 <SBR1_init+0x244>)
 800136e:	2101      	movs	r1, #1
 8001370:	4822      	ldr	r0, [pc, #136]	; (80013fc <SBR1_init+0x2a0>)
 8001372:	f001 fb43 	bl	80029fc <qFIS_Setup>
                SBR1_inputs, sizeof(SBR1_inputs),
                SBR1_outputs, sizeof(SBR1_outputs),
                MFin, sizeof(MFin), MFout, sizeof(MFout),
                rules, rStrength, 25u );
    qFIS_SetParameter( &SBR1, qFIS_AND, qFIS_PROD );
 8001376:	2201      	movs	r2, #1
 8001378:	2102      	movs	r1, #2
 800137a:	4820      	ldr	r0, [pc, #128]	; (80013fc <SBR1_init+0x2a0>)
 800137c:	f001 face 	bl	800291c <qFIS_SetParameter>
    qFIS_SetParameter( &SBR1, qFIS_Implication, qFIS_PROD );
 8001380:	2201      	movs	r2, #1
 8001382:	2100      	movs	r1, #0
 8001384:	481d      	ldr	r0, [pc, #116]	; (80013fc <SBR1_init+0x2a0>)
 8001386:	f001 fac9 	bl	800291c <qFIS_SetParameter>
    qFIS_SetParameter( &SBR1, qFIS_Aggregation, qFIS_SUM );
 800138a:	2204      	movs	r2, #4
 800138c:	2101      	movs	r1, #1
 800138e:	481b      	ldr	r0, [pc, #108]	; (80013fc <SBR1_init+0x2a0>)
 8001390:	f001 fac4 	bl	800291c <qFIS_SetParameter>
}
 8001394:	bf00      	nop
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	bf800000 	.word	0xbf800000
 80013a0:	20000194 	.word	0x20000194
 80013a4:	200001ac 	.word	0x200001ac
 80013a8:	08009904 	.word	0x08009904
 80013ac:	200001e0 	.word	0x200001e0
 80013b0:	08009914 	.word	0x08009914
 80013b4:	08009924 	.word	0x08009924
 80013b8:	08009930 	.word	0x08009930
 80013bc:	08009940 	.word	0x08009940
 80013c0:	08009950 	.word	0x08009950
 80013c4:	0800995c 	.word	0x0800995c
 80013c8:	08009968 	.word	0x08009968
 80013cc:	08009974 	.word	0x08009974
 80013d0:	08009980 	.word	0x08009980
 80013d4:	0800998c 	.word	0x0800998c
 80013d8:	200002a8 	.word	0x200002a8
 80013dc:	08009990 	.word	0x08009990
 80013e0:	08009994 	.word	0x08009994
 80013e4:	08009998 	.word	0x08009998
 80013e8:	0800999c 	.word	0x0800999c
 80013ec:	080099a0 	.word	0x080099a0
 80013f0:	080099a4 	.word	0x080099a4
 80013f4:	20000334 	.word	0x20000334
 80013f8:	08009770 	.word	0x08009770
 80013fc:	20000134 	.word	0x20000134

08001400 <SBR1_run>:

void SBR1_run( float *inputs, float *outputs ) {
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]
    /* Set the crips inputs */
    qFIS_SetInput( SBR1_inputs, theta, inputs[ theta ] );
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	461a      	mov	r2, r3
 8001410:	2100      	movs	r1, #0
 8001412:	4811      	ldr	r0, [pc, #68]	; (8001458 <SBR1_run+0x58>)
 8001414:	f001 fc62 	bl	8002cdc <qFIS_SetInput>
    qFIS_SetInput( SBR1_inputs, thetadot, inputs[ thetadot ] );
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	3304      	adds	r3, #4
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	461a      	mov	r2, r3
 8001420:	2101      	movs	r1, #1
 8001422:	480d      	ldr	r0, [pc, #52]	; (8001458 <SBR1_run+0x58>)
 8001424:	f001 fc5a 	bl	8002cdc <qFIS_SetInput>

    qFIS_Fuzzify( &SBR1 );
 8001428:	480c      	ldr	r0, [pc, #48]	; (800145c <SBR1_run+0x5c>)
 800142a:	f001 fd72 	bl	8002f12 <qFIS_Fuzzify>
    if ( qFIS_Inference( &SBR1 ) > 0 ) {
 800142e:	480b      	ldr	r0, [pc, #44]	; (800145c <SBR1_run+0x5c>)
 8001430:	f002 f99e 	bl	8003770 <qFIS_Inference>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	dd02      	ble.n	8001440 <SBR1_run+0x40>
        qFIS_DeFuzzify( &SBR1 );
 800143a:	4808      	ldr	r0, [pc, #32]	; (800145c <SBR1_run+0x5c>)
 800143c:	f002 f855 	bl	80034ea <qFIS_DeFuzzify>
    else {
        /* Error! */
    }

    /* Get the crips outputs */
    outputs[ u ] = qFIS_GetOutput( SBR1_outputs, u );
 8001440:	2100      	movs	r1, #0
 8001442:	4807      	ldr	r0, [pc, #28]	; (8001460 <SBR1_run+0x60>)
 8001444:	f001 fc6a 	bl	8002d1c <qFIS_GetOutput>
 8001448:	4602      	mov	r2, r0
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	601a      	str	r2, [r3, #0]
}
 800144e:	bf00      	nop
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20000194 	.word	0x20000194
 800145c:	20000134 	.word	0x20000134
 8001460:	200001ac 	.word	0x200001ac

08001464 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) // timer1 interrupted 10 ms
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM1)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a05      	ldr	r2, [pc, #20]	; (8001488 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d102      	bne.n	800147c <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		u8_flag_10ms = 1;
 8001476:	4b05      	ldr	r3, [pc, #20]	; (800148c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001478:	2201      	movs	r2, #1
 800147a:	701a      	strb	r2, [r3, #0]
	}
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	bc80      	pop	{r7}
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	40012c00 	.word	0x40012c00
 800148c:	20000568 	.word	0x20000568

08001490 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001490:	b5b0      	push	{r4, r5, r7, lr}
 8001492:	b088      	sub	sp, #32
 8001494:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001496:	f003 fc59 	bl	8004d4c <HAL_Init>

  /* USER CODE BEGIN Init */
	 SBR1_init();
 800149a:	f7ff fe5f 	bl	800115c <SBR1_init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800149e:	f000 f8c9 	bl	8001634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014a2:	f000 fa73 	bl	800198c <MX_GPIO_Init>
  MX_I2C1_Init();
 80014a6:	f000 f901 	bl	80016ac <MX_I2C1_Init>
  MX_TIM1_Init();
 80014aa:	f000 f92d 	bl	8001708 <MX_TIM1_Init>
  MX_TIM3_Init();
 80014ae:	f000 f97b 	bl	80017a8 <MX_TIM3_Init>
  MX_TIM4_Init();
 80014b2:	f000 f9dd 	bl	8001870 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 80014b6:	f000 fa3f 	bl	8001938 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 80014ba:	4851      	ldr	r0, [pc, #324]	; (8001600 <main+0x170>)
 80014bc:	f005 fcbe 	bl	8006e3c <HAL_TIM_Base_Start_IT>
  Init_tim_pwm();
 80014c0:	f000 fb4a 	bl	8001b58 <Init_tim_pwm>

  while (MPU6050_Init(&hi2c1) == 1); // if mpu6050 identified, mcu will escape while loop
 80014c4:	bf00      	nop
 80014c6:	484f      	ldr	r0, [pc, #316]	; (8001604 <main+0x174>)
 80014c8:	f000 fc74 	bl	8001db4 <MPU6050_Init>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d0f9      	beq.n	80014c6 <main+0x36>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //These parameters in motor.h and SBR1_fis.c need to be tuned belong to your robot
	  if (u8_flag_10ms)
 80014d2:	4b4d      	ldr	r3, [pc, #308]	; (8001608 <main+0x178>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d0fb      	beq.n	80014d2 <main+0x42>
	  {
		  u8_flag_10ms = 0;
 80014da:	4b4b      	ldr	r3, [pc, #300]	; (8001608 <main+0x178>)
 80014dc:	2200      	movs	r2, #0
 80014de:	701a      	strb	r2, [r3, #0]
		  //parameters after Kalman filter
		  MPU6050_Read_All(&hi2c1,&t_MPU6050);
 80014e0:	494a      	ldr	r1, [pc, #296]	; (800160c <main+0x17c>)
 80014e2:	4848      	ldr	r0, [pc, #288]	; (8001604 <main+0x174>)
 80014e4:	f000 fcc0 	bl	8001e68 <MPU6050_Read_All>
		  // variable_view is used to see value in debug process
		  variable_view_theta = t_MPU6050.KalmanAngleY;
 80014e8:	4b48      	ldr	r3, [pc, #288]	; (800160c <main+0x17c>)
 80014ea:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80014ee:	4610      	mov	r0, r2
 80014f0:	4619      	mov	r1, r3
 80014f2:	f7ff fac9 	bl	8000a88 <__aeabi_d2f>
 80014f6:	4603      	mov	r3, r0
 80014f8:	4a45      	ldr	r2, [pc, #276]	; (8001610 <main+0x180>)
 80014fa:	6013      	str	r3, [r2, #0]
		  variable_view_theta_dot =  t_MPU6050.Gy;
 80014fc:	4b43      	ldr	r3, [pc, #268]	; (800160c <main+0x17c>)
 80014fe:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001502:	4610      	mov	r0, r2
 8001504:	4619      	mov	r1, r3
 8001506:	f7ff fabf 	bl	8000a88 <__aeabi_d2f>
 800150a:	4603      	mov	r3, r0
 800150c:	4a41      	ldr	r2, [pc, #260]	; (8001614 <main+0x184>)
 800150e:	6013      	str	r3, [r2, #0]
		  Controller (t_MPU6050.KalmanAngleY, t_MPU6050.Gy* RAD_TO_DEG, &t_fuzzy);
 8001510:	4b3e      	ldr	r3, [pc, #248]	; (800160c <main+0x17c>)
 8001512:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8001516:	4b3d      	ldr	r3, [pc, #244]	; (800160c <main+0x17c>)
 8001518:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800151c:	a336      	add	r3, pc, #216	; (adr r3, 80015f8 <main+0x168>)
 800151e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001522:	f7fe ffd9 	bl	80004d8 <__aeabi_dmul>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	493b      	ldr	r1, [pc, #236]	; (8001618 <main+0x188>)
 800152c:	9100      	str	r1, [sp, #0]
 800152e:	4620      	mov	r0, r4
 8001530:	4629      	mov	r1, r5
 8001532:	f000 fb8d 	bl	8001c50 <Controller>
		  variavle_view_output = t_fuzzy.f_out_fuzzy;
 8001536:	4b38      	ldr	r3, [pc, #224]	; (8001618 <main+0x188>)
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	4a38      	ldr	r2, [pc, #224]	; (800161c <main+0x18c>)
 800153c:	6013      	str	r3, [r2, #0]
		  int theta = t_MPU6050.KalmanAngleY*1000.0;
 800153e:	4b33      	ldr	r3, [pc, #204]	; (800160c <main+0x17c>)
 8001540:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001544:	f04f 0200 	mov.w	r2, #0
 8001548:	4b35      	ldr	r3, [pc, #212]	; (8001620 <main+0x190>)
 800154a:	f7fe ffc5 	bl	80004d8 <__aeabi_dmul>
 800154e:	4602      	mov	r2, r0
 8001550:	460b      	mov	r3, r1
 8001552:	4610      	mov	r0, r2
 8001554:	4619      	mov	r1, r3
 8001556:	f7ff fa6f 	bl	8000a38 <__aeabi_d2iz>
 800155a:	4603      	mov	r3, r0
 800155c:	60fb      	str	r3, [r7, #12]
		  int theta_dot = t_MPU6050.Gy* RAD_TO_DEG*1000.0;
 800155e:	4b2b      	ldr	r3, [pc, #172]	; (800160c <main+0x17c>)
 8001560:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8001564:	a324      	add	r3, pc, #144	; (adr r3, 80015f8 <main+0x168>)
 8001566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800156a:	f7fe ffb5 	bl	80004d8 <__aeabi_dmul>
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
 8001572:	4610      	mov	r0, r2
 8001574:	4619      	mov	r1, r3
 8001576:	f04f 0200 	mov.w	r2, #0
 800157a:	4b29      	ldr	r3, [pc, #164]	; (8001620 <main+0x190>)
 800157c:	f7fe ffac 	bl	80004d8 <__aeabi_dmul>
 8001580:	4602      	mov	r2, r0
 8001582:	460b      	mov	r3, r1
 8001584:	4610      	mov	r0, r2
 8001586:	4619      	mov	r1, r3
 8001588:	f7ff fa56 	bl	8000a38 <__aeabi_d2iz>
 800158c:	4603      	mov	r3, r0
 800158e:	60bb      	str	r3, [r7, #8]
		  int uk = t_fuzzy.f_out_fuzzy;
 8001590:	4b21      	ldr	r3, [pc, #132]	; (8001618 <main+0x188>)
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff fd9b 	bl	80010d0 <__aeabi_f2iz>
 800159a:	4603      	mov	r3, r0
 800159c:	607b      	str	r3, [r7, #4]
		  sprintf(data,FRAME,SIGN(theta),ABS(theta),SIGN(theta_dot),ABS(theta_dot),SIGN(uk),ABS(uk));
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	db01      	blt.n	80015a8 <main+0x118>
 80015a4:	4c1f      	ldr	r4, [pc, #124]	; (8001624 <main+0x194>)
 80015a6:	e000      	b.n	80015aa <main+0x11a>
 80015a8:	4c1f      	ldr	r4, [pc, #124]	; (8001628 <main+0x198>)
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	ea83 75e3 	eor.w	r5, r3, r3, asr #31
 80015b0:	eba5 75e3 	sub.w	r5, r5, r3, asr #31
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	db01      	blt.n	80015be <main+0x12e>
 80015ba:	4b1a      	ldr	r3, [pc, #104]	; (8001624 <main+0x194>)
 80015bc:	e000      	b.n	80015c0 <main+0x130>
 80015be:	4b1a      	ldr	r3, [pc, #104]	; (8001628 <main+0x198>)
 80015c0:	68ba      	ldr	r2, [r7, #8]
 80015c2:	2a00      	cmp	r2, #0
 80015c4:	bfb8      	it	lt
 80015c6:	4252      	neglt	r2, r2
 80015c8:	6879      	ldr	r1, [r7, #4]
 80015ca:	2900      	cmp	r1, #0
 80015cc:	db01      	blt.n	80015d2 <main+0x142>
 80015ce:	4915      	ldr	r1, [pc, #84]	; (8001624 <main+0x194>)
 80015d0:	e000      	b.n	80015d4 <main+0x144>
 80015d2:	4915      	ldr	r1, [pc, #84]	; (8001628 <main+0x198>)
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	2800      	cmp	r0, #0
 80015d8:	bfb8      	it	lt
 80015da:	4240      	neglt	r0, r0
 80015dc:	9003      	str	r0, [sp, #12]
 80015de:	9102      	str	r1, [sp, #8]
 80015e0:	9201      	str	r2, [sp, #4]
 80015e2:	9300      	str	r3, [sp, #0]
 80015e4:	462b      	mov	r3, r5
 80015e6:	4622      	mov	r2, r4
 80015e8:	4910      	ldr	r1, [pc, #64]	; (800162c <main+0x19c>)
 80015ea:	4811      	ldr	r0, [pc, #68]	; (8001630 <main+0x1a0>)
 80015ec:	f007 f892 	bl	8008714 <siprintf>
	  if (u8_flag_10ms)
 80015f0:	e76f      	b.n	80014d2 <main+0x42>
 80015f2:	bf00      	nop
 80015f4:	f3af 8000 	nop.w
 80015f8:	1a63c1f8 	.word	0x1a63c1f8
 80015fc:	404ca5dc 	.word	0x404ca5dc
 8001600:	200003ec 	.word	0x200003ec
 8001604:	20000398 	.word	0x20000398
 8001608:	20000568 	.word	0x20000568
 800160c:	20000510 	.word	0x20000510
 8001610:	200005d0 	.word	0x200005d0
 8001614:	200005d4 	.word	0x200005d4
 8001618:	20000000 	.word	0x20000000
 800161c:	200005d8 	.word	0x200005d8
 8001620:	408f4000 	.word	0x408f4000
 8001624:	08009750 	.word	0x08009750
 8001628:	08009754 	.word	0x08009754
 800162c:	08009758 	.word	0x08009758
 8001630:	2000056c 	.word	0x2000056c

08001634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b090      	sub	sp, #64	; 0x40
 8001638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800163a:	f107 0318 	add.w	r3, r7, #24
 800163e:	2228      	movs	r2, #40	; 0x28
 8001640:	2100      	movs	r1, #0
 8001642:	4618      	mov	r0, r3
 8001644:	f007 f886 	bl	8008754 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001648:	1d3b      	adds	r3, r7, #4
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	605a      	str	r2, [r3, #4]
 8001650:	609a      	str	r2, [r3, #8]
 8001652:	60da      	str	r2, [r3, #12]
 8001654:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001656:	2302      	movs	r3, #2
 8001658:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800165a:	2301      	movs	r3, #1
 800165c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800165e:	2310      	movs	r3, #16
 8001660:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001662:	2300      	movs	r3, #0
 8001664:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001666:	f107 0318 	add.w	r3, r7, #24
 800166a:	4618      	mov	r0, r3
 800166c:	f004 ff86 	bl	800657c <HAL_RCC_OscConfig>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001676:	f000 fa0b 	bl	8001a90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800167a:	230f      	movs	r3, #15
 800167c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800167e:	2300      	movs	r3, #0
 8001680:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001682:	2300      	movs	r3, #0
 8001684:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001686:	2300      	movs	r3, #0
 8001688:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800168a:	2300      	movs	r3, #0
 800168c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800168e:	1d3b      	adds	r3, r7, #4
 8001690:	2100      	movs	r1, #0
 8001692:	4618      	mov	r0, r3
 8001694:	f005 f9f4 	bl	8006a80 <HAL_RCC_ClockConfig>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800169e:	f000 f9f7 	bl	8001a90 <Error_Handler>
  }
}
 80016a2:	bf00      	nop
 80016a4:	3740      	adds	r7, #64	; 0x40
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
	...

080016ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016b0:	4b12      	ldr	r3, [pc, #72]	; (80016fc <MX_I2C1_Init+0x50>)
 80016b2:	4a13      	ldr	r2, [pc, #76]	; (8001700 <MX_I2C1_Init+0x54>)
 80016b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80016b6:	4b11      	ldr	r3, [pc, #68]	; (80016fc <MX_I2C1_Init+0x50>)
 80016b8:	4a12      	ldr	r2, [pc, #72]	; (8001704 <MX_I2C1_Init+0x58>)
 80016ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016bc:	4b0f      	ldr	r3, [pc, #60]	; (80016fc <MX_I2C1_Init+0x50>)
 80016be:	2200      	movs	r2, #0
 80016c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016c2:	4b0e      	ldr	r3, [pc, #56]	; (80016fc <MX_I2C1_Init+0x50>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016c8:	4b0c      	ldr	r3, [pc, #48]	; (80016fc <MX_I2C1_Init+0x50>)
 80016ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016d0:	4b0a      	ldr	r3, [pc, #40]	; (80016fc <MX_I2C1_Init+0x50>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80016d6:	4b09      	ldr	r3, [pc, #36]	; (80016fc <MX_I2C1_Init+0x50>)
 80016d8:	2200      	movs	r2, #0
 80016da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016dc:	4b07      	ldr	r3, [pc, #28]	; (80016fc <MX_I2C1_Init+0x50>)
 80016de:	2200      	movs	r2, #0
 80016e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016e2:	4b06      	ldr	r3, [pc, #24]	; (80016fc <MX_I2C1_Init+0x50>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016e8:	4804      	ldr	r0, [pc, #16]	; (80016fc <MX_I2C1_Init+0x50>)
 80016ea:	f003 feed 	bl	80054c8 <HAL_I2C_Init>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016f4:	f000 f9cc 	bl	8001a90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016f8:	bf00      	nop
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	20000398 	.word	0x20000398
 8001700:	40005400 	.word	0x40005400
 8001704:	000186a0 	.word	0x000186a0

08001708 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800170e:	f107 0308 	add.w	r3, r7, #8
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	605a      	str	r2, [r3, #4]
 8001718:	609a      	str	r2, [r3, #8]
 800171a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800171c:	463b      	mov	r3, r7
 800171e:	2200      	movs	r2, #0
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001724:	4b1e      	ldr	r3, [pc, #120]	; (80017a0 <MX_TIM1_Init+0x98>)
 8001726:	4a1f      	ldr	r2, [pc, #124]	; (80017a4 <MX_TIM1_Init+0x9c>)
 8001728:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 799;
 800172a:	4b1d      	ldr	r3, [pc, #116]	; (80017a0 <MX_TIM1_Init+0x98>)
 800172c:	f240 321f 	movw	r2, #799	; 0x31f
 8001730:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001732:	4b1b      	ldr	r3, [pc, #108]	; (80017a0 <MX_TIM1_Init+0x98>)
 8001734:	2200      	movs	r2, #0
 8001736:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8001738:	4b19      	ldr	r3, [pc, #100]	; (80017a0 <MX_TIM1_Init+0x98>)
 800173a:	2263      	movs	r2, #99	; 0x63
 800173c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800173e:	4b18      	ldr	r3, [pc, #96]	; (80017a0 <MX_TIM1_Init+0x98>)
 8001740:	2200      	movs	r2, #0
 8001742:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001744:	4b16      	ldr	r3, [pc, #88]	; (80017a0 <MX_TIM1_Init+0x98>)
 8001746:	2200      	movs	r2, #0
 8001748:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800174a:	4b15      	ldr	r3, [pc, #84]	; (80017a0 <MX_TIM1_Init+0x98>)
 800174c:	2200      	movs	r2, #0
 800174e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001750:	4813      	ldr	r0, [pc, #76]	; (80017a0 <MX_TIM1_Init+0x98>)
 8001752:	f005 fb23 	bl	8006d9c <HAL_TIM_Base_Init>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800175c:	f000 f998 	bl	8001a90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001760:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001764:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001766:	f107 0308 	add.w	r3, r7, #8
 800176a:	4619      	mov	r1, r3
 800176c:	480c      	ldr	r0, [pc, #48]	; (80017a0 <MX_TIM1_Init+0x98>)
 800176e:	f005 fe73 	bl	8007458 <HAL_TIM_ConfigClockSource>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001778:	f000 f98a 	bl	8001a90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800177c:	2300      	movs	r3, #0
 800177e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001780:	2300      	movs	r3, #0
 8001782:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001784:	463b      	mov	r3, r7
 8001786:	4619      	mov	r1, r3
 8001788:	4805      	ldr	r0, [pc, #20]	; (80017a0 <MX_TIM1_Init+0x98>)
 800178a:	f006 f9f5 	bl	8007b78 <HAL_TIMEx_MasterConfigSynchronization>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001794:	f000 f97c 	bl	8001a90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001798:	bf00      	nop
 800179a:	3718      	adds	r7, #24
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	200003ec 	.word	0x200003ec
 80017a4:	40012c00 	.word	0x40012c00

080017a8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b08a      	sub	sp, #40	; 0x28
 80017ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017ae:	f107 0320 	add.w	r3, r7, #32
 80017b2:	2200      	movs	r2, #0
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017b8:	1d3b      	adds	r3, r7, #4
 80017ba:	2200      	movs	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	605a      	str	r2, [r3, #4]
 80017c0:	609a      	str	r2, [r3, #8]
 80017c2:	60da      	str	r2, [r3, #12]
 80017c4:	611a      	str	r2, [r3, #16]
 80017c6:	615a      	str	r2, [r3, #20]
 80017c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017ca:	4b27      	ldr	r3, [pc, #156]	; (8001868 <MX_TIM3_Init+0xc0>)
 80017cc:	4a27      	ldr	r2, [pc, #156]	; (800186c <MX_TIM3_Init+0xc4>)
 80017ce:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 80017d0:	4b25      	ldr	r3, [pc, #148]	; (8001868 <MX_TIM3_Init+0xc0>)
 80017d2:	224f      	movs	r2, #79	; 0x4f
 80017d4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017d6:	4b24      	ldr	r3, [pc, #144]	; (8001868 <MX_TIM3_Init+0xc0>)
 80017d8:	2200      	movs	r2, #0
 80017da:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1999;
 80017dc:	4b22      	ldr	r3, [pc, #136]	; (8001868 <MX_TIM3_Init+0xc0>)
 80017de:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80017e2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017e4:	4b20      	ldr	r3, [pc, #128]	; (8001868 <MX_TIM3_Init+0xc0>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ea:	4b1f      	ldr	r3, [pc, #124]	; (8001868 <MX_TIM3_Init+0xc0>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80017f0:	481d      	ldr	r0, [pc, #116]	; (8001868 <MX_TIM3_Init+0xc0>)
 80017f2:	f005 fb75 	bl	8006ee0 <HAL_TIM_PWM_Init>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80017fc:	f000 f948 	bl	8001a90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001800:	2300      	movs	r3, #0
 8001802:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001804:	2300      	movs	r3, #0
 8001806:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001808:	f107 0320 	add.w	r3, r7, #32
 800180c:	4619      	mov	r1, r3
 800180e:	4816      	ldr	r0, [pc, #88]	; (8001868 <MX_TIM3_Init+0xc0>)
 8001810:	f006 f9b2 	bl	8007b78 <HAL_TIMEx_MasterConfigSynchronization>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800181a:	f000 f939 	bl	8001a90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800181e:	2360      	movs	r3, #96	; 0x60
 8001820:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001822:	2300      	movs	r3, #0
 8001824:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001826:	2300      	movs	r3, #0
 8001828:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800182a:	2300      	movs	r3, #0
 800182c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800182e:	1d3b      	adds	r3, r7, #4
 8001830:	2200      	movs	r2, #0
 8001832:	4619      	mov	r1, r3
 8001834:	480c      	ldr	r0, [pc, #48]	; (8001868 <MX_TIM3_Init+0xc0>)
 8001836:	f005 fd4d 	bl	80072d4 <HAL_TIM_PWM_ConfigChannel>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001840:	f000 f926 	bl	8001a90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001844:	1d3b      	adds	r3, r7, #4
 8001846:	2204      	movs	r2, #4
 8001848:	4619      	mov	r1, r3
 800184a:	4807      	ldr	r0, [pc, #28]	; (8001868 <MX_TIM3_Init+0xc0>)
 800184c:	f005 fd42 	bl	80072d4 <HAL_TIM_PWM_ConfigChannel>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001856:	f000 f91b 	bl	8001a90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800185a:	4803      	ldr	r0, [pc, #12]	; (8001868 <MX_TIM3_Init+0xc0>)
 800185c:	f003 f91e 	bl	8004a9c <HAL_TIM_MspPostInit>

}
 8001860:	bf00      	nop
 8001862:	3728      	adds	r7, #40	; 0x28
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	20000434 	.word	0x20000434
 800186c:	40000400 	.word	0x40000400

08001870 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b08a      	sub	sp, #40	; 0x28
 8001874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001876:	f107 0320 	add.w	r3, r7, #32
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001880:	1d3b      	adds	r3, r7, #4
 8001882:	2200      	movs	r2, #0
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	605a      	str	r2, [r3, #4]
 8001888:	609a      	str	r2, [r3, #8]
 800188a:	60da      	str	r2, [r3, #12]
 800188c:	611a      	str	r2, [r3, #16]
 800188e:	615a      	str	r2, [r3, #20]
 8001890:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001892:	4b27      	ldr	r3, [pc, #156]	; (8001930 <MX_TIM4_Init+0xc0>)
 8001894:	4a27      	ldr	r2, [pc, #156]	; (8001934 <MX_TIM4_Init+0xc4>)
 8001896:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 79;
 8001898:	4b25      	ldr	r3, [pc, #148]	; (8001930 <MX_TIM4_Init+0xc0>)
 800189a:	224f      	movs	r2, #79	; 0x4f
 800189c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800189e:	4b24      	ldr	r3, [pc, #144]	; (8001930 <MX_TIM4_Init+0xc0>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1999;
 80018a4:	4b22      	ldr	r3, [pc, #136]	; (8001930 <MX_TIM4_Init+0xc0>)
 80018a6:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80018aa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ac:	4b20      	ldr	r3, [pc, #128]	; (8001930 <MX_TIM4_Init+0xc0>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018b2:	4b1f      	ldr	r3, [pc, #124]	; (8001930 <MX_TIM4_Init+0xc0>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80018b8:	481d      	ldr	r0, [pc, #116]	; (8001930 <MX_TIM4_Init+0xc0>)
 80018ba:	f005 fb11 	bl	8006ee0 <HAL_TIM_PWM_Init>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80018c4:	f000 f8e4 	bl	8001a90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018c8:	2300      	movs	r3, #0
 80018ca:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018cc:	2300      	movs	r3, #0
 80018ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80018d0:	f107 0320 	add.w	r3, r7, #32
 80018d4:	4619      	mov	r1, r3
 80018d6:	4816      	ldr	r0, [pc, #88]	; (8001930 <MX_TIM4_Init+0xc0>)
 80018d8:	f006 f94e 	bl	8007b78 <HAL_TIMEx_MasterConfigSynchronization>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80018e2:	f000 f8d5 	bl	8001a90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018e6:	2360      	movs	r3, #96	; 0x60
 80018e8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80018ea:	2300      	movs	r3, #0
 80018ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018ee:	2300      	movs	r3, #0
 80018f0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018f2:	2300      	movs	r3, #0
 80018f4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018f6:	1d3b      	adds	r3, r7, #4
 80018f8:	2200      	movs	r2, #0
 80018fa:	4619      	mov	r1, r3
 80018fc:	480c      	ldr	r0, [pc, #48]	; (8001930 <MX_TIM4_Init+0xc0>)
 80018fe:	f005 fce9 	bl	80072d4 <HAL_TIM_PWM_ConfigChannel>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001908:	f000 f8c2 	bl	8001a90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800190c:	1d3b      	adds	r3, r7, #4
 800190e:	2204      	movs	r2, #4
 8001910:	4619      	mov	r1, r3
 8001912:	4807      	ldr	r0, [pc, #28]	; (8001930 <MX_TIM4_Init+0xc0>)
 8001914:	f005 fcde 	bl	80072d4 <HAL_TIM_PWM_ConfigChannel>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800191e:	f000 f8b7 	bl	8001a90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001922:	4803      	ldr	r0, [pc, #12]	; (8001930 <MX_TIM4_Init+0xc0>)
 8001924:	f003 f8ba 	bl	8004a9c <HAL_TIM_MspPostInit>

}
 8001928:	bf00      	nop
 800192a:	3728      	adds	r7, #40	; 0x28
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	2000047c 	.word	0x2000047c
 8001934:	40000800 	.word	0x40000800

08001938 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800193c:	4b11      	ldr	r3, [pc, #68]	; (8001984 <MX_USART1_UART_Init+0x4c>)
 800193e:	4a12      	ldr	r2, [pc, #72]	; (8001988 <MX_USART1_UART_Init+0x50>)
 8001940:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001942:	4b10      	ldr	r3, [pc, #64]	; (8001984 <MX_USART1_UART_Init+0x4c>)
 8001944:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001948:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800194a:	4b0e      	ldr	r3, [pc, #56]	; (8001984 <MX_USART1_UART_Init+0x4c>)
 800194c:	2200      	movs	r2, #0
 800194e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001950:	4b0c      	ldr	r3, [pc, #48]	; (8001984 <MX_USART1_UART_Init+0x4c>)
 8001952:	2200      	movs	r2, #0
 8001954:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001956:	4b0b      	ldr	r3, [pc, #44]	; (8001984 <MX_USART1_UART_Init+0x4c>)
 8001958:	2200      	movs	r2, #0
 800195a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800195c:	4b09      	ldr	r3, [pc, #36]	; (8001984 <MX_USART1_UART_Init+0x4c>)
 800195e:	220c      	movs	r2, #12
 8001960:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001962:	4b08      	ldr	r3, [pc, #32]	; (8001984 <MX_USART1_UART_Init+0x4c>)
 8001964:	2200      	movs	r2, #0
 8001966:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001968:	4b06      	ldr	r3, [pc, #24]	; (8001984 <MX_USART1_UART_Init+0x4c>)
 800196a:	2200      	movs	r2, #0
 800196c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800196e:	4805      	ldr	r0, [pc, #20]	; (8001984 <MX_USART1_UART_Init+0x4c>)
 8001970:	f006 f972 	bl	8007c58 <HAL_UART_Init>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800197a:	f000 f889 	bl	8001a90 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800197e:	bf00      	nop
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	200004c4 	.word	0x200004c4
 8001988:	40013800 	.word	0x40013800

0800198c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b088      	sub	sp, #32
 8001990:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001992:	f107 0310 	add.w	r3, r7, #16
 8001996:	2200      	movs	r2, #0
 8001998:	601a      	str	r2, [r3, #0]
 800199a:	605a      	str	r2, [r3, #4]
 800199c:	609a      	str	r2, [r3, #8]
 800199e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019a0:	4b2d      	ldr	r3, [pc, #180]	; (8001a58 <MX_GPIO_Init+0xcc>)
 80019a2:	699b      	ldr	r3, [r3, #24]
 80019a4:	4a2c      	ldr	r2, [pc, #176]	; (8001a58 <MX_GPIO_Init+0xcc>)
 80019a6:	f043 0310 	orr.w	r3, r3, #16
 80019aa:	6193      	str	r3, [r2, #24]
 80019ac:	4b2a      	ldr	r3, [pc, #168]	; (8001a58 <MX_GPIO_Init+0xcc>)
 80019ae:	699b      	ldr	r3, [r3, #24]
 80019b0:	f003 0310 	and.w	r3, r3, #16
 80019b4:	60fb      	str	r3, [r7, #12]
 80019b6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019b8:	4b27      	ldr	r3, [pc, #156]	; (8001a58 <MX_GPIO_Init+0xcc>)
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	4a26      	ldr	r2, [pc, #152]	; (8001a58 <MX_GPIO_Init+0xcc>)
 80019be:	f043 0320 	orr.w	r3, r3, #32
 80019c2:	6193      	str	r3, [r2, #24]
 80019c4:	4b24      	ldr	r3, [pc, #144]	; (8001a58 <MX_GPIO_Init+0xcc>)
 80019c6:	699b      	ldr	r3, [r3, #24]
 80019c8:	f003 0320 	and.w	r3, r3, #32
 80019cc:	60bb      	str	r3, [r7, #8]
 80019ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d0:	4b21      	ldr	r3, [pc, #132]	; (8001a58 <MX_GPIO_Init+0xcc>)
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	4a20      	ldr	r2, [pc, #128]	; (8001a58 <MX_GPIO_Init+0xcc>)
 80019d6:	f043 0304 	orr.w	r3, r3, #4
 80019da:	6193      	str	r3, [r2, #24]
 80019dc:	4b1e      	ldr	r3, [pc, #120]	; (8001a58 <MX_GPIO_Init+0xcc>)
 80019de:	699b      	ldr	r3, [r3, #24]
 80019e0:	f003 0304 	and.w	r3, r3, #4
 80019e4:	607b      	str	r3, [r7, #4]
 80019e6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019e8:	4b1b      	ldr	r3, [pc, #108]	; (8001a58 <MX_GPIO_Init+0xcc>)
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	4a1a      	ldr	r2, [pc, #104]	; (8001a58 <MX_GPIO_Init+0xcc>)
 80019ee:	f043 0308 	orr.w	r3, r3, #8
 80019f2:	6193      	str	r3, [r2, #24]
 80019f4:	4b18      	ldr	r3, [pc, #96]	; (8001a58 <MX_GPIO_Init+0xcc>)
 80019f6:	699b      	ldr	r3, [r3, #24]
 80019f8:	f003 0308 	and.w	r3, r3, #8
 80019fc:	603b      	str	r3, [r7, #0]
 80019fe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001a00:	2200      	movs	r2, #0
 8001a02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a06:	4815      	ldr	r0, [pc, #84]	; (8001a5c <MX_GPIO_Init+0xd0>)
 8001a08:	f003 fd46 	bl	8005498 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_5, GPIO_PIN_RESET);
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	2128      	movs	r1, #40	; 0x28
 8001a10:	4813      	ldr	r0, [pc, #76]	; (8001a60 <MX_GPIO_Init+0xd4>)
 8001a12:	f003 fd41 	bl	8005498 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001a16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a20:	2300      	movs	r3, #0
 8001a22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a24:	2302      	movs	r3, #2
 8001a26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a28:	f107 0310 	add.w	r3, r7, #16
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	480b      	ldr	r0, [pc, #44]	; (8001a5c <MX_GPIO_Init+0xd0>)
 8001a30:	f003 fbae 	bl	8005190 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001a34:	2328      	movs	r3, #40	; 0x28
 8001a36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a40:	2302      	movs	r3, #2
 8001a42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a44:	f107 0310 	add.w	r3, r7, #16
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4805      	ldr	r0, [pc, #20]	; (8001a60 <MX_GPIO_Init+0xd4>)
 8001a4c:	f003 fba0 	bl	8005190 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a50:	bf00      	nop
 8001a52:	3720      	adds	r7, #32
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	40011000 	.word	0x40011000
 8001a60:	40010800 	.word	0x40010800

08001a64 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
	  HAL_UART_Transmit_IT(&huart1,(uint8_t*)data, strlen(data));
 8001a6c:	4806      	ldr	r0, [pc, #24]	; (8001a88 <HAL_UART_RxCpltCallback+0x24>)
 8001a6e:	f7fe fb6f 	bl	8000150 <strlen>
 8001a72:	4603      	mov	r3, r0
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	461a      	mov	r2, r3
 8001a78:	4903      	ldr	r1, [pc, #12]	; (8001a88 <HAL_UART_RxCpltCallback+0x24>)
 8001a7a:	4804      	ldr	r0, [pc, #16]	; (8001a8c <HAL_UART_RxCpltCallback+0x28>)
 8001a7c:	f006 f93c 	bl	8007cf8 <HAL_UART_Transmit_IT>
}
 8001a80:	bf00      	nop
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	2000056c 	.word	0x2000056c
 8001a8c:	200004c4 	.word	0x200004c4

08001a90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a94:	b672      	cpsid	i
}
 8001a96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a98:	e7fe      	b.n	8001a98 <Error_Handler+0x8>
	...

08001a9c <Limit_val>:
 *      Author: NGOC HOAN && Hien Nguyen
 */

#include "motor.h"

static void Limit_val(float *value){
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
	if(*value> VAL_MAX)  *value = VAL_MAX;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff fb05 	bl	80010bc <__aeabi_fcmpgt>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d003      	beq.n	8001ac0 <Limit_val+0x24>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001abe:	601a      	str	r2, [r3, #0]
	if(*value<-VAL_MAX) *value = -VAL_MAX;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4907      	ldr	r1, [pc, #28]	; (8001ae4 <Limit_val+0x48>)
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff fada 	bl	8001080 <__aeabi_fcmplt>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d100      	bne.n	8001ad4 <Limit_val+0x38>
}
 8001ad2:	e002      	b.n	8001ada <Limit_val+0x3e>
	if(*value<-VAL_MAX) *value = -VAL_MAX;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	4a03      	ldr	r2, [pc, #12]	; (8001ae4 <Limit_val+0x48>)
 8001ad8:	601a      	str	r2, [r3, #0]
}
 8001ada:	bf00      	nop
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	bf800000 	.word	0xbf800000

08001ae8 <Set_duty>:

static void Set_duty(float duty, TIM_HandleTypeDef *htim, int channel){
 8001ae8:	b590      	push	{r4, r7, lr}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
	if (channel == 1){
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d111      	bne.n	8001b1e <Set_duty+0x36>
		htim->Instance->CCR1 =  (duty*MAX_CNT) + MIN_CNT;
 8001afa:	4915      	ldr	r1, [pc, #84]	; (8001b50 <Set_duty+0x68>)
 8001afc:	68f8      	ldr	r0, [r7, #12]
 8001afe:	f7ff f921 	bl	8000d44 <__aeabi_fmul>
 8001b02:	4603      	mov	r3, r0
 8001b04:	4913      	ldr	r1, [pc, #76]	; (8001b54 <Set_duty+0x6c>)
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7ff f814 	bl	8000b34 <__addsf3>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	461a      	mov	r2, r3
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	681c      	ldr	r4, [r3, #0]
 8001b14:	4610      	mov	r0, r2
 8001b16:	f7ff fb01 	bl	800111c <__aeabi_f2uiz>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	6363      	str	r3, [r4, #52]	; 0x34
	}
	if (channel == 2){
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d111      	bne.n	8001b48 <Set_duty+0x60>
		htim->Instance->CCR2 =  (duty*MAX_CNT) + MIN_CNT;
 8001b24:	490a      	ldr	r1, [pc, #40]	; (8001b50 <Set_duty+0x68>)
 8001b26:	68f8      	ldr	r0, [r7, #12]
 8001b28:	f7ff f90c 	bl	8000d44 <__aeabi_fmul>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	4909      	ldr	r1, [pc, #36]	; (8001b54 <Set_duty+0x6c>)
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7fe ffff 	bl	8000b34 <__addsf3>
 8001b36:	4603      	mov	r3, r0
 8001b38:	461a      	mov	r2, r3
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	681c      	ldr	r4, [r3, #0]
 8001b3e:	4610      	mov	r0, r2
 8001b40:	f7ff faec 	bl	800111c <__aeabi_f2uiz>
 8001b44:	4603      	mov	r3, r0
 8001b46:	63a3      	str	r3, [r4, #56]	; 0x38
	}
}
 8001b48:	bf00      	nop
 8001b4a:	3714      	adds	r7, #20
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd90      	pop	{r4, r7, pc}
 8001b50:	44896000 	.word	0x44896000
 8001b54:	42200000 	.word	0x42200000

08001b58 <Init_tim_pwm>:

void Init_tim_pwm(){
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	4808      	ldr	r0, [pc, #32]	; (8001b80 <Init_tim_pwm+0x28>)
 8001b60:	f005 fa0e 	bl	8006f80 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001b64:	2104      	movs	r1, #4
 8001b66:	4806      	ldr	r0, [pc, #24]	; (8001b80 <Init_tim_pwm+0x28>)
 8001b68:	f005 fa0a 	bl	8006f80 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	4805      	ldr	r0, [pc, #20]	; (8001b84 <Init_tim_pwm+0x2c>)
 8001b70:	f005 fa06 	bl	8006f80 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001b74:	2104      	movs	r1, #4
 8001b76:	4803      	ldr	r0, [pc, #12]	; (8001b84 <Init_tim_pwm+0x2c>)
 8001b78:	f005 fa02 	bl	8006f80 <HAL_TIM_PWM_Start>
}
 8001b7c:	bf00      	nop
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	20000434 	.word	0x20000434
 8001b84:	2000047c 	.word	0x2000047c

08001b88 <Stop_motor>:

static void Stop_motor(){
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
	Set_duty(0, &htim3, 1);
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	490c      	ldr	r1, [pc, #48]	; (8001bc0 <Stop_motor+0x38>)
 8001b90:	f04f 0000 	mov.w	r0, #0
 8001b94:	f7ff ffa8 	bl	8001ae8 <Set_duty>
	Set_duty(0, &htim3, 2);
 8001b98:	2202      	movs	r2, #2
 8001b9a:	4909      	ldr	r1, [pc, #36]	; (8001bc0 <Stop_motor+0x38>)
 8001b9c:	f04f 0000 	mov.w	r0, #0
 8001ba0:	f7ff ffa2 	bl	8001ae8 <Set_duty>
	Set_duty(0, &htim4, 1);
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	4907      	ldr	r1, [pc, #28]	; (8001bc4 <Stop_motor+0x3c>)
 8001ba8:	f04f 0000 	mov.w	r0, #0
 8001bac:	f7ff ff9c 	bl	8001ae8 <Set_duty>
	Set_duty(0, &htim4, 2);
 8001bb0:	2202      	movs	r2, #2
 8001bb2:	4904      	ldr	r1, [pc, #16]	; (8001bc4 <Stop_motor+0x3c>)
 8001bb4:	f04f 0000 	mov.w	r0, #0
 8001bb8:	f7ff ff96 	bl	8001ae8 <Set_duty>
}
 8001bbc:	bf00      	nop
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	20000434 	.word	0x20000434
 8001bc4:	2000047c 	.word	0x2000047c

08001bc8 <Forward>:

void Forward (float duty){
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
	Set_duty(0, &htim3, 1);
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	490c      	ldr	r1, [pc, #48]	; (8001c04 <Forward+0x3c>)
 8001bd4:	f04f 0000 	mov.w	r0, #0
 8001bd8:	f7ff ff86 	bl	8001ae8 <Set_duty>
	Set_duty(duty, &htim3, 2);
 8001bdc:	2202      	movs	r2, #2
 8001bde:	4909      	ldr	r1, [pc, #36]	; (8001c04 <Forward+0x3c>)
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f7ff ff81 	bl	8001ae8 <Set_duty>
	Set_duty(0, &htim4, 1);
 8001be6:	2201      	movs	r2, #1
 8001be8:	4907      	ldr	r1, [pc, #28]	; (8001c08 <Forward+0x40>)
 8001bea:	f04f 0000 	mov.w	r0, #0
 8001bee:	f7ff ff7b 	bl	8001ae8 <Set_duty>
	Set_duty(duty, &htim4, 2);
 8001bf2:	2202      	movs	r2, #2
 8001bf4:	4904      	ldr	r1, [pc, #16]	; (8001c08 <Forward+0x40>)
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f7ff ff76 	bl	8001ae8 <Set_duty>
}
 8001bfc:	bf00      	nop
 8001bfe:	3708      	adds	r7, #8
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	20000434 	.word	0x20000434
 8001c08:	2000047c 	.word	0x2000047c

08001c0c <Reverse>:

void Reverse (float duty){
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
	Set_duty(duty, &htim3, 1);
 8001c14:	2201      	movs	r2, #1
 8001c16:	490c      	ldr	r1, [pc, #48]	; (8001c48 <Reverse+0x3c>)
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f7ff ff65 	bl	8001ae8 <Set_duty>
	Set_duty(0, &htim3, 2);
 8001c1e:	2202      	movs	r2, #2
 8001c20:	4909      	ldr	r1, [pc, #36]	; (8001c48 <Reverse+0x3c>)
 8001c22:	f04f 0000 	mov.w	r0, #0
 8001c26:	f7ff ff5f 	bl	8001ae8 <Set_duty>
	Set_duty(duty, &htim4, 1);
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	4907      	ldr	r1, [pc, #28]	; (8001c4c <Reverse+0x40>)
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f7ff ff5a 	bl	8001ae8 <Set_duty>
	Set_duty(0, &htim4, 2);
 8001c34:	2202      	movs	r2, #2
 8001c36:	4905      	ldr	r1, [pc, #20]	; (8001c4c <Reverse+0x40>)
 8001c38:	f04f 0000 	mov.w	r0, #0
 8001c3c:	f7ff ff54 	bl	8001ae8 <Set_duty>
}
 8001c40:	bf00      	nop
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	20000434 	.word	0x20000434
 8001c4c:	2000047c 	.word	0x2000047c

08001c50 <Controller>:

void Controller (double new_angle, double vec_angle, Fuzzy_t *fuzzy){
 8001c50:	b5b0      	push	{r4, r5, r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001c5a:	e9c7 2300 	strd	r2, r3, [r7]
	if((new_angle>ANGLE_THRESHOLD)|(new_angle<(-1)*ANGLE_THRESHOLD)){
 8001c5e:	2301      	movs	r3, #1
 8001c60:	461c      	mov	r4, r3
 8001c62:	f04f 0200 	mov.w	r2, #0
 8001c66:	4b50      	ldr	r3, [pc, #320]	; (8001da8 <Controller+0x158>)
 8001c68:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c6c:	f7fe fec4 	bl	80009f8 <__aeabi_dcmpgt>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d101      	bne.n	8001c7a <Controller+0x2a>
 8001c76:	2300      	movs	r3, #0
 8001c78:	461c      	mov	r4, r3
 8001c7a:	b2e4      	uxtb	r4, r4
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	461d      	mov	r5, r3
 8001c80:	f04f 0200 	mov.w	r2, #0
 8001c84:	4b49      	ldr	r3, [pc, #292]	; (8001dac <Controller+0x15c>)
 8001c86:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c8a:	f7fe fe97 	bl	80009bc <__aeabi_dcmplt>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d101      	bne.n	8001c98 <Controller+0x48>
 8001c94:	2300      	movs	r3, #0
 8001c96:	461d      	mov	r5, r3
 8001c98:	b2eb      	uxtb	r3, r5
 8001c9a:	4323      	orrs	r3, r4
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d002      	beq.n	8001ca8 <Controller+0x58>
			Stop_motor();
 8001ca2:	f7ff ff71 	bl	8001b88 <Stop_motor>
			return;
 8001ca6:	e071      	b.n	8001d8c <Controller+0x13c>
		}

	fuzzy->f_inp_fuzzy[0] = (new_angle- OFFSET)/fuzzy->f_K_theta; //normalize value
 8001ca8:	f04f 0200 	mov.w	r2, #0
 8001cac:	4b40      	ldr	r3, [pc, #256]	; (8001db0 <Controller+0x160>)
 8001cae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001cb2:	f7fe fa5b 	bl	800016c <__adddf3>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	460b      	mov	r3, r1
 8001cba:	4614      	mov	r4, r2
 8001cbc:	461d      	mov	r5, r3
 8001cbe:	6a3b      	ldr	r3, [r7, #32]
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7fe fbb0 	bl	8000428 <__aeabi_f2d>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	460b      	mov	r3, r1
 8001ccc:	4620      	mov	r0, r4
 8001cce:	4629      	mov	r1, r5
 8001cd0:	f7fe fd2c 	bl	800072c <__aeabi_ddiv>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	4610      	mov	r0, r2
 8001cda:	4619      	mov	r1, r3
 8001cdc:	f7fe fed4 	bl	8000a88 <__aeabi_d2f>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	6a3b      	ldr	r3, [r7, #32]
 8001ce4:	601a      	str	r2, [r3, #0]
	Limit_val(&fuzzy->f_inp_fuzzy[0]);
 8001ce6:	6a3b      	ldr	r3, [r7, #32]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff fed7 	bl	8001a9c <Limit_val>
	fuzzy->f_inp_fuzzy[1] = vec_angle/fuzzy->f_K_theta_dot;  //normalize value
 8001cee:	6a3b      	ldr	r3, [r7, #32]
 8001cf0:	691b      	ldr	r3, [r3, #16]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7fe fb98 	bl	8000428 <__aeabi_f2d>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d00:	f7fe fd14 	bl	800072c <__aeabi_ddiv>
 8001d04:	4602      	mov	r2, r0
 8001d06:	460b      	mov	r3, r1
 8001d08:	4610      	mov	r0, r2
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	f7fe febc 	bl	8000a88 <__aeabi_d2f>
 8001d10:	4602      	mov	r2, r0
 8001d12:	6a3b      	ldr	r3, [r7, #32]
 8001d14:	605a      	str	r2, [r3, #4]
	Limit_val(&fuzzy->f_inp_fuzzy[1]);
 8001d16:	6a3b      	ldr	r3, [r7, #32]
 8001d18:	3304      	adds	r3, #4
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7ff febe 	bl	8001a9c <Limit_val>
	SBR1_run(fuzzy->f_inp_fuzzy, &fuzzy->f_out_fuzzy);
 8001d20:	6a3a      	ldr	r2, [r7, #32]
 8001d22:	6a3b      	ldr	r3, [r7, #32]
 8001d24:	3308      	adds	r3, #8
 8001d26:	4619      	mov	r1, r3
 8001d28:	4610      	mov	r0, r2
 8001d2a:	f7ff fb69 	bl	8001400 <SBR1_run>
	Limit_val(&fuzzy->f_out_fuzzy);
 8001d2e:	6a3b      	ldr	r3, [r7, #32]
 8001d30:	3308      	adds	r3, #8
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7ff feb2 	bl	8001a9c <Limit_val>

	if (fuzzy->f_out_fuzzy > 0.4){
 8001d38:	6a3b      	ldr	r3, [r7, #32]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7fe fb73 	bl	8000428 <__aeabi_f2d>
 8001d42:	a315      	add	r3, pc, #84	; (adr r3, 8001d98 <Controller+0x148>)
 8001d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d48:	f7fe fe56 	bl	80009f8 <__aeabi_dcmpgt>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d005      	beq.n	8001d5e <Controller+0x10e>
		Reverse (fuzzy->f_out_fuzzy);
 8001d52:	6a3b      	ldr	r3, [r7, #32]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7ff ff58 	bl	8001c0c <Reverse>
		// Reverse of forward belongs to you hardware structure
		return;
 8001d5c:	e016      	b.n	8001d8c <Controller+0x13c>
	    }
	   else if  (fuzzy->f_out_fuzzy < -0.4)
 8001d5e:	6a3b      	ldr	r3, [r7, #32]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7fe fb60 	bl	8000428 <__aeabi_f2d>
 8001d68:	a30d      	add	r3, pc, #52	; (adr r3, 8001da0 <Controller+0x150>)
 8001d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d6e:	f7fe fe25 	bl	80009bc <__aeabi_dcmplt>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d007      	beq.n	8001d88 <Controller+0x138>
	    {
		Forward ((-1)*fuzzy->f_out_fuzzy);
 8001d78:	6a3b      	ldr	r3, [r7, #32]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff ff21 	bl	8001bc8 <Forward>
		return;
 8001d86:	e001      	b.n	8001d8c <Controller+0x13c>
	    }
	else {
		Stop_motor();
 8001d88:	f7ff fefe 	bl	8001b88 <Stop_motor>
	     }
	}
 8001d8c:	3710      	adds	r7, #16
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bdb0      	pop	{r4, r5, r7, pc}
 8001d92:	bf00      	nop
 8001d94:	f3af 8000 	nop.w
 8001d98:	9999999a 	.word	0x9999999a
 8001d9c:	3fd99999 	.word	0x3fd99999
 8001da0:	9999999a 	.word	0x9999999a
 8001da4:	bfd99999 	.word	0xbfd99999
 8001da8:	404e0000 	.word	0x404e0000
 8001dac:	c04e0000 	.word	0xc04e0000
 8001db0:	40040000 	.word	0x40040000

08001db4 <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b088      	sub	sp, #32
 8001db8:	af04      	add	r7, sp, #16
 8001dba:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8001dbc:	2364      	movs	r3, #100	; 0x64
 8001dbe:	9302      	str	r3, [sp, #8]
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	9301      	str	r3, [sp, #4]
 8001dc4:	f107 030f 	add.w	r3, r7, #15
 8001dc8:	9300      	str	r3, [sp, #0]
 8001dca:	2301      	movs	r3, #1
 8001dcc:	2275      	movs	r2, #117	; 0x75
 8001dce:	21d0      	movs	r1, #208	; 0xd0
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f003 fdb7 	bl	8005944 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8001dd6:	7bfb      	ldrb	r3, [r7, #15]
 8001dd8:	2b68      	cmp	r3, #104	; 0x68
 8001dda:	d13d      	bne.n	8001e58 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8001de0:	2364      	movs	r3, #100	; 0x64
 8001de2:	9302      	str	r3, [sp, #8]
 8001de4:	2301      	movs	r3, #1
 8001de6:	9301      	str	r3, [sp, #4]
 8001de8:	f107 030e 	add.w	r3, r7, #14
 8001dec:	9300      	str	r3, [sp, #0]
 8001dee:	2301      	movs	r3, #1
 8001df0:	226b      	movs	r2, #107	; 0x6b
 8001df2:	21d0      	movs	r1, #208	; 0xd0
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f003 fcab 	bl	8005750 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8001dfa:	2307      	movs	r3, #7
 8001dfc:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8001dfe:	2364      	movs	r3, #100	; 0x64
 8001e00:	9302      	str	r3, [sp, #8]
 8001e02:	2301      	movs	r3, #1
 8001e04:	9301      	str	r3, [sp, #4]
 8001e06:	f107 030e 	add.w	r3, r7, #14
 8001e0a:	9300      	str	r3, [sp, #0]
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	2219      	movs	r2, #25
 8001e10:	21d0      	movs	r1, #208	; 0xd0
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f003 fc9c 	bl	8005750 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> ï¿½ 2g
        Data = 0x00;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001e1c:	2364      	movs	r3, #100	; 0x64
 8001e1e:	9302      	str	r3, [sp, #8]
 8001e20:	2301      	movs	r3, #1
 8001e22:	9301      	str	r3, [sp, #4]
 8001e24:	f107 030e 	add.w	r3, r7, #14
 8001e28:	9300      	str	r3, [sp, #0]
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	221c      	movs	r2, #28
 8001e2e:	21d0      	movs	r1, #208	; 0xd0
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f003 fc8d 	bl	8005750 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> ï¿½ 250 ï¿½/s
        Data = 0x00;
 8001e36:	2300      	movs	r3, #0
 8001e38:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001e3a:	2364      	movs	r3, #100	; 0x64
 8001e3c:	9302      	str	r3, [sp, #8]
 8001e3e:	2301      	movs	r3, #1
 8001e40:	9301      	str	r3, [sp, #4]
 8001e42:	f107 030e 	add.w	r3, r7, #14
 8001e46:	9300      	str	r3, [sp, #0]
 8001e48:	2301      	movs	r3, #1
 8001e4a:	221b      	movs	r2, #27
 8001e4c:	21d0      	movs	r1, #208	; 0xd0
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f003 fc7e 	bl	8005750 <HAL_I2C_Mem_Write>
        return 0;
 8001e54:	2300      	movs	r3, #0
 8001e56:	e000      	b.n	8001e5a <MPU6050_Init+0xa6>
    }
    return 1;
 8001e58:	2301      	movs	r3, #1
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3710      	adds	r7, #16
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	0000      	movs	r0, r0
 8001e64:	0000      	movs	r0, r0
	...

08001e68 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8001e68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e6c:	b094      	sub	sp, #80	; 0x50
 8001e6e:	af04      	add	r7, sp, #16
 8001e70:	6078      	str	r0, [r7, #4]
 8001e72:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8001e74:	2364      	movs	r3, #100	; 0x64
 8001e76:	9302      	str	r3, [sp, #8]
 8001e78:	230e      	movs	r3, #14
 8001e7a:	9301      	str	r3, [sp, #4]
 8001e7c:	f107 0308 	add.w	r3, r7, #8
 8001e80:	9300      	str	r3, [sp, #0]
 8001e82:	2301      	movs	r3, #1
 8001e84:	223b      	movs	r2, #59	; 0x3b
 8001e86:	21d0      	movs	r1, #208	; 0xd0
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f003 fd5b 	bl	8005944 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8001e8e:	7a3b      	ldrb	r3, [r7, #8]
 8001e90:	021b      	lsls	r3, r3, #8
 8001e92:	b21a      	sxth	r2, r3
 8001e94:	7a7b      	ldrb	r3, [r7, #9]
 8001e96:	b21b      	sxth	r3, r3
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	b21a      	sxth	r2, r3
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8001ea0:	7abb      	ldrb	r3, [r7, #10]
 8001ea2:	021b      	lsls	r3, r3, #8
 8001ea4:	b21a      	sxth	r2, r3
 8001ea6:	7afb      	ldrb	r3, [r7, #11]
 8001ea8:	b21b      	sxth	r3, r3
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	b21a      	sxth	r2, r3
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8001eb2:	7b3b      	ldrb	r3, [r7, #12]
 8001eb4:	021b      	lsls	r3, r3, #8
 8001eb6:	b21a      	sxth	r2, r3
 8001eb8:	7b7b      	ldrb	r3, [r7, #13]
 8001eba:	b21b      	sxth	r3, r3
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	b21a      	sxth	r2, r3
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8001ec4:	7bbb      	ldrb	r3, [r7, #14]
 8001ec6:	021b      	lsls	r3, r3, #8
 8001ec8:	b21a      	sxth	r2, r3
 8001eca:	7bfb      	ldrb	r3, [r7, #15]
 8001ecc:	b21b      	sxth	r3, r3
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8001ed2:	7c3b      	ldrb	r3, [r7, #16]
 8001ed4:	021b      	lsls	r3, r3, #8
 8001ed6:	b21a      	sxth	r2, r3
 8001ed8:	7c7b      	ldrb	r3, [r7, #17]
 8001eda:	b21b      	sxth	r3, r3
 8001edc:	4313      	orrs	r3, r2
 8001ede:	b21a      	sxth	r2, r3
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8001ee4:	7cbb      	ldrb	r3, [r7, #18]
 8001ee6:	021b      	lsls	r3, r3, #8
 8001ee8:	b21a      	sxth	r2, r3
 8001eea:	7cfb      	ldrb	r3, [r7, #19]
 8001eec:	b21b      	sxth	r3, r3
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	b21a      	sxth	r2, r3
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8001ef6:	7d3b      	ldrb	r3, [r7, #20]
 8001ef8:	021b      	lsls	r3, r3, #8
 8001efa:	b21a      	sxth	r2, r3
 8001efc:	7d7b      	ldrb	r3, [r7, #21]
 8001efe:	b21b      	sxth	r3, r3
 8001f00:	4313      	orrs	r3, r2
 8001f02:	b21a      	sxth	r2, r3
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7fe fa78 	bl	8000404 <__aeabi_i2d>
 8001f14:	f04f 0200 	mov.w	r2, #0
 8001f18:	4b95      	ldr	r3, [pc, #596]	; (8002170 <MPU6050_Read_All+0x308>)
 8001f1a:	f7fe fc07 	bl	800072c <__aeabi_ddiv>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	460b      	mov	r3, r1
 8001f22:	6839      	ldr	r1, [r7, #0]
 8001f24:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7fe fa68 	bl	8000404 <__aeabi_i2d>
 8001f34:	f04f 0200 	mov.w	r2, #0
 8001f38:	4b8d      	ldr	r3, [pc, #564]	; (8002170 <MPU6050_Read_All+0x308>)
 8001f3a:	f7fe fbf7 	bl	800072c <__aeabi_ddiv>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	460b      	mov	r3, r1
 8001f42:	6839      	ldr	r1, [r7, #0]
 8001f44:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7fe fa58 	bl	8000404 <__aeabi_i2d>
 8001f54:	a380      	add	r3, pc, #512	; (adr r3, 8002158 <MPU6050_Read_All+0x2f0>)
 8001f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f5a:	f7fe fbe7 	bl	800072c <__aeabi_ddiv>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	460b      	mov	r3, r1
 8001f62:	6839      	ldr	r1, [r7, #0]
 8001f64:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8001f68:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7fe fe95 	bl	8000c9c <__aeabi_i2f>
 8001f72:	4603      	mov	r3, r0
 8001f74:	497f      	ldr	r1, [pc, #508]	; (8002174 <MPU6050_Read_All+0x30c>)
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7fe ff98 	bl	8000eac <__aeabi_fdiv>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	497e      	ldr	r1, [pc, #504]	; (8002178 <MPU6050_Read_All+0x310>)
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7fe fdd7 	bl	8000b34 <__addsf3>
 8001f86:	4603      	mov	r3, r0
 8001f88:	461a      	mov	r2, r3
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	641a      	str	r2, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7fe fa35 	bl	8000404 <__aeabi_i2d>
 8001f9a:	a371      	add	r3, pc, #452	; (adr r3, 8002160 <MPU6050_Read_All+0x2f8>)
 8001f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa0:	f7fe fbc4 	bl	800072c <__aeabi_ddiv>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	6839      	ldr	r1, [r7, #0]
 8001faa:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7fe fa25 	bl	8000404 <__aeabi_i2d>
 8001fba:	a369      	add	r3, pc, #420	; (adr r3, 8002160 <MPU6050_Read_All+0x2f8>)
 8001fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc0:	f7fe fbb4 	bl	800072c <__aeabi_ddiv>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	6839      	ldr	r1, [r7, #0]
 8001fca:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7fe fa15 	bl	8000404 <__aeabi_i2d>
 8001fda:	a361      	add	r3, pc, #388	; (adr r3, 8002160 <MPU6050_Read_All+0x2f8>)
 8001fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe0:	f7fe fba4 	bl	800072c <__aeabi_ddiv>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	6839      	ldr	r1, [r7, #0]
 8001fea:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 8001fee:	f002 ff05 	bl	8004dfc <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	4b61      	ldr	r3, [pc, #388]	; (800217c <MPU6050_Read_All+0x314>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7fe f9f2 	bl	80003e4 <__aeabi_ui2d>
 8002000:	f04f 0200 	mov.w	r2, #0
 8002004:	4b5e      	ldr	r3, [pc, #376]	; (8002180 <MPU6050_Read_All+0x318>)
 8002006:	f7fe fb91 	bl	800072c <__aeabi_ddiv>
 800200a:	4602      	mov	r2, r0
 800200c:	460b      	mov	r3, r1
 800200e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 8002012:	f002 fef3 	bl	8004dfc <HAL_GetTick>
 8002016:	4603      	mov	r3, r0
 8002018:	4a58      	ldr	r2, [pc, #352]	; (800217c <MPU6050_Read_All+0x314>)
 800201a:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002022:	461a      	mov	r2, r3
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	f9b3 3000 	ldrsh.w	r3, [r3]
 800202a:	fb03 f202 	mul.w	r2, r3, r2
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002034:	4619      	mov	r1, r3
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800203c:	fb01 f303 	mul.w	r3, r1, r3
 8002040:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8002042:	4618      	mov	r0, r3
 8002044:	f7fe f9de 	bl	8000404 <__aeabi_i2d>
 8002048:	4602      	mov	r2, r0
 800204a:	460b      	mov	r3, r1
 800204c:	4610      	mov	r0, r2
 800204e:	4619      	mov	r1, r3
 8002050:	f007 f813 	bl	800907a <sqrt>
 8002054:	e9c7 0108 	strd	r0, r1, [r7, #32]
    if (roll_sqrt != 0.0)
 8002058:	f04f 0200 	mov.w	r2, #0
 800205c:	f04f 0300 	mov.w	r3, #0
 8002060:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002064:	f7fe fca0 	bl	80009a8 <__aeabi_dcmpeq>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d119      	bne.n	80020a2 <MPU6050_Read_All+0x23a>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002074:	4618      	mov	r0, r3
 8002076:	f7fe f9c5 	bl	8000404 <__aeabi_i2d>
 800207a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800207e:	f7fe fb55 	bl	800072c <__aeabi_ddiv>
 8002082:	4602      	mov	r2, r0
 8002084:	460b      	mov	r3, r1
 8002086:	4610      	mov	r0, r2
 8002088:	4619      	mov	r1, r3
 800208a:	f007 f81d 	bl	80090c8 <atan>
 800208e:	a336      	add	r3, pc, #216	; (adr r3, 8002168 <MPU6050_Read_All+0x300>)
 8002090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002094:	f7fe fa20 	bl	80004d8 <__aeabi_dmul>
 8002098:	4602      	mov	r2, r0
 800209a:	460b      	mov	r3, r1
 800209c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80020a0:	e005      	b.n	80020ae <MPU6050_Read_All+0x246>
    }
    else
    {
        roll = 0.0;
 80020a2:	f04f 0200 	mov.w	r2, #0
 80020a6:	f04f 0300 	mov.w	r3, #0
 80020aa:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020b4:	425b      	negs	r3, r3
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7fe f9a4 	bl	8000404 <__aeabi_i2d>
 80020bc:	4682      	mov	sl, r0
 80020be:	468b      	mov	fp, r1
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7fe f99c 	bl	8000404 <__aeabi_i2d>
 80020cc:	4602      	mov	r2, r0
 80020ce:	460b      	mov	r3, r1
 80020d0:	4650      	mov	r0, sl
 80020d2:	4659      	mov	r1, fp
 80020d4:	f006 ffcf 	bl	8009076 <atan2>
 80020d8:	a323      	add	r3, pc, #140	; (adr r3, 8002168 <MPU6050_Read_All+0x300>)
 80020da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020de:	f7fe f9fb 	bl	80004d8 <__aeabi_dmul>
 80020e2:	4602      	mov	r2, r0
 80020e4:	460b      	mov	r3, r1
 80020e6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 80020ea:	f04f 0200 	mov.w	r2, #0
 80020ee:	4b25      	ldr	r3, [pc, #148]	; (8002184 <MPU6050_Read_All+0x31c>)
 80020f0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80020f4:	f7fe fc62 	bl	80009bc <__aeabi_dcmplt>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d00a      	beq.n	8002114 <MPU6050_Read_All+0x2ac>
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002104:	f04f 0200 	mov.w	r2, #0
 8002108:	4b1f      	ldr	r3, [pc, #124]	; (8002188 <MPU6050_Read_All+0x320>)
 800210a:	f7fe fc75 	bl	80009f8 <__aeabi_dcmpgt>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d114      	bne.n	800213e <MPU6050_Read_All+0x2d6>
 8002114:	f04f 0200 	mov.w	r2, #0
 8002118:	4b1b      	ldr	r3, [pc, #108]	; (8002188 <MPU6050_Read_All+0x320>)
 800211a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800211e:	f7fe fc6b 	bl	80009f8 <__aeabi_dcmpgt>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d033      	beq.n	8002190 <MPU6050_Read_All+0x328>
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800212e:	f04f 0200 	mov.w	r2, #0
 8002132:	4b14      	ldr	r3, [pc, #80]	; (8002184 <MPU6050_Read_All+0x31c>)
 8002134:	f7fe fc42 	bl	80009bc <__aeabi_dcmplt>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d028      	beq.n	8002190 <MPU6050_Read_All+0x328>
    {
        KalmanY.angle = pitch;
 800213e:	4913      	ldr	r1, [pc, #76]	; (800218c <MPU6050_Read_All+0x324>)
 8002140:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002144:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8002148:	6839      	ldr	r1, [r7, #0]
 800214a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800214e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8002152:	e030      	b.n	80021b6 <MPU6050_Read_All+0x34e>
 8002154:	f3af 8000 	nop.w
 8002158:	00000000 	.word	0x00000000
 800215c:	40cc2900 	.word	0x40cc2900
 8002160:	00000000 	.word	0x00000000
 8002164:	40606000 	.word	0x40606000
 8002168:	1a63c1f8 	.word	0x1a63c1f8
 800216c:	404ca5dc 	.word	0x404ca5dc
 8002170:	40d00000 	.word	0x40d00000
 8002174:	43aa0000 	.word	0x43aa0000
 8002178:	42121eb8 	.word	0x42121eb8
 800217c:	200005dc 	.word	0x200005dc
 8002180:	408f4000 	.word	0x408f4000
 8002184:	c0568000 	.word	0xc0568000
 8002188:	40568000 	.word	0x40568000
 800218c:	20000060 	.word	0x20000060
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002196:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800219a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800219e:	e9cd 2300 	strd	r2, r3, [sp]
 80021a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021a6:	481c      	ldr	r0, [pc, #112]	; (8002218 <MPU6050_Read_All+0x3b0>)
 80021a8:	f000 f83c 	bl	8002224 <Kalman_getAngle>
 80021ac:	4602      	mov	r2, r0
 80021ae:	460b      	mov	r3, r1
 80021b0:	6839      	ldr	r1, [r7, #0]
 80021b2:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80021bc:	4690      	mov	r8, r2
 80021be:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80021c2:	f04f 0200 	mov.w	r2, #0
 80021c6:	4b15      	ldr	r3, [pc, #84]	; (800221c <MPU6050_Read_All+0x3b4>)
 80021c8:	4640      	mov	r0, r8
 80021ca:	4649      	mov	r1, r9
 80021cc:	f7fe fc14 	bl	80009f8 <__aeabi_dcmpgt>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d008      	beq.n	80021e8 <MPU6050_Read_All+0x380>
        DataStruct->Gx = -DataStruct->Gx;
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80021dc:	4614      	mov	r4, r2
 80021de:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80021ee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80021f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80021f6:	e9cd 2300 	strd	r2, r3, [sp]
 80021fa:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80021fe:	4808      	ldr	r0, [pc, #32]	; (8002220 <MPU6050_Read_All+0x3b8>)
 8002200:	f000 f810 	bl	8002224 <Kalman_getAngle>
 8002204:	4602      	mov	r2, r0
 8002206:	460b      	mov	r3, r1
 8002208:	6839      	ldr	r1, [r7, #0]
 800220a:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
 800220e:	bf00      	nop
 8002210:	3740      	adds	r7, #64	; 0x40
 8002212:	46bd      	mov	sp, r7
 8002214:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002218:	20000060 	.word	0x20000060
 800221c:	40568000 	.word	0x40568000
 8002220:	20000018 	.word	0x20000018

08002224 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 8002224:	b5b0      	push	{r4, r5, r7, lr}
 8002226:	b092      	sub	sp, #72	; 0x48
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	e9c7 2300 	strd	r2, r3, [r7]
    double rate = newRate - Kalman->bias;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002236:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800223a:	f7fd ff95 	bl	8000168 <__aeabi_dsub>
 800223e:	4602      	mov	r2, r0
 8002240:	460b      	mov	r3, r1
 8002242:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += dt * rate;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800224c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002250:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002254:	f7fe f940 	bl	80004d8 <__aeabi_dmul>
 8002258:	4602      	mov	r2, r0
 800225a:	460b      	mov	r3, r1
 800225c:	4620      	mov	r0, r4
 800225e:	4629      	mov	r1, r5
 8002260:	f7fd ff84 	bl	800016c <__adddf3>
 8002264:	4602      	mov	r2, r0
 8002266:	460b      	mov	r3, r1
 8002268:	68f9      	ldr	r1, [r7, #12]
 800226a:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800227a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800227e:	f7fe f92b 	bl	80004d8 <__aeabi_dmul>
 8002282:	4602      	mov	r2, r0
 8002284:	460b      	mov	r3, r1
 8002286:	4610      	mov	r0, r2
 8002288:	4619      	mov	r1, r3
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002290:	f7fd ff6a 	bl	8000168 <__aeabi_dsub>
 8002294:	4602      	mov	r2, r0
 8002296:	460b      	mov	r3, r1
 8002298:	4610      	mov	r0, r2
 800229a:	4619      	mov	r1, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80022a2:	f7fd ff61 	bl	8000168 <__aeabi_dsub>
 80022a6:	4602      	mov	r2, r0
 80022a8:	460b      	mov	r3, r1
 80022aa:	4610      	mov	r0, r2
 80022ac:	4619      	mov	r1, r3
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022b4:	f7fd ff5a 	bl	800016c <__adddf3>
 80022b8:	4602      	mov	r2, r0
 80022ba:	460b      	mov	r3, r1
 80022bc:	4610      	mov	r0, r2
 80022be:	4619      	mov	r1, r3
 80022c0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80022c4:	f7fe f908 	bl	80004d8 <__aeabi_dmul>
 80022c8:	4602      	mov	r2, r0
 80022ca:	460b      	mov	r3, r1
 80022cc:	4620      	mov	r0, r4
 80022ce:	4629      	mov	r1, r5
 80022d0:	f7fd ff4c 	bl	800016c <__adddf3>
 80022d4:	4602      	mov	r2, r0
 80022d6:	460b      	mov	r3, r1
 80022d8:	68f9      	ldr	r1, [r7, #12]
 80022da:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80022ea:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80022ee:	f7fe f8f3 	bl	80004d8 <__aeabi_dmul>
 80022f2:	4602      	mov	r2, r0
 80022f4:	460b      	mov	r3, r1
 80022f6:	4620      	mov	r0, r4
 80022f8:	4629      	mov	r1, r5
 80022fa:	f7fd ff35 	bl	8000168 <__aeabi_dsub>
 80022fe:	4602      	mov	r2, r0
 8002300:	460b      	mov	r3, r1
 8002302:	68f9      	ldr	r1, [r7, #12]
 8002304:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002314:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002318:	f7fe f8de 	bl	80004d8 <__aeabi_dmul>
 800231c:	4602      	mov	r2, r0
 800231e:	460b      	mov	r3, r1
 8002320:	4620      	mov	r0, r4
 8002322:	4629      	mov	r1, r5
 8002324:	f7fd ff20 	bl	8000168 <__aeabi_dsub>
 8002328:	4602      	mov	r2, r0
 800232a:	460b      	mov	r3, r1
 800232c:	68f9      	ldr	r1, [r7, #12]
 800232e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800233e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002342:	f7fe f8c9 	bl	80004d8 <__aeabi_dmul>
 8002346:	4602      	mov	r2, r0
 8002348:	460b      	mov	r3, r1
 800234a:	4620      	mov	r0, r4
 800234c:	4629      	mov	r1, r5
 800234e:	f7fd ff0d 	bl	800016c <__adddf3>
 8002352:	4602      	mov	r2, r0
 8002354:	460b      	mov	r3, r1
 8002356:	68f9      	ldr	r1, [r7, #12]
 8002358:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002368:	f7fd ff00 	bl	800016c <__adddf3>
 800236c:	4602      	mov	r2, r0
 800236e:	460b      	mov	r3, r1
 8002370:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800237a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800237e:	f7fe f9d5 	bl	800072c <__aeabi_ddiv>
 8002382:	4602      	mov	r2, r0
 8002384:	460b      	mov	r3, r1
 8002386:	e9c7 2304 	strd	r2, r3, [r7, #16]
    K[1] = Kalman->P[1][0] / S;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002390:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002394:	f7fe f9ca 	bl	800072c <__aeabi_ddiv>
 8002398:	4602      	mov	r2, r0
 800239a:	460b      	mov	r3, r1
 800239c:	e9c7 2306 	strd	r2, r3, [r7, #24]

    double y = newAngle - Kalman->angle;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80023a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80023aa:	f7fd fedd 	bl	8000168 <__aeabi_dsub>
 80023ae:	4602      	mov	r2, r0
 80023b0:	460b      	mov	r3, r1
 80023b2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    Kalman->angle += K[0] * y;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80023bc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80023c0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80023c4:	f7fe f888 	bl	80004d8 <__aeabi_dmul>
 80023c8:	4602      	mov	r2, r0
 80023ca:	460b      	mov	r3, r1
 80023cc:	4620      	mov	r0, r4
 80023ce:	4629      	mov	r1, r5
 80023d0:	f7fd fecc 	bl	800016c <__adddf3>
 80023d4:	4602      	mov	r2, r0
 80023d6:	460b      	mov	r3, r1
 80023d8:	68f9      	ldr	r1, [r7, #12]
 80023da:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80023e4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80023e8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80023ec:	f7fe f874 	bl	80004d8 <__aeabi_dmul>
 80023f0:	4602      	mov	r2, r0
 80023f2:	460b      	mov	r3, r1
 80023f4:	4620      	mov	r0, r4
 80023f6:	4629      	mov	r1, r5
 80023f8:	f7fd feb8 	bl	800016c <__adddf3>
 80023fc:	4602      	mov	r2, r0
 80023fe:	460b      	mov	r3, r1
 8002400:	68f9      	ldr	r1, [r7, #12]
 8002402:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800240c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double P01_temp = Kalman->P[0][1];
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002416:	e9c7 2308 	strd	r2, r3, [r7, #32]

    Kalman->P[0][0] -= K[0] * P00_temp;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002420:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002424:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002428:	f7fe f856 	bl	80004d8 <__aeabi_dmul>
 800242c:	4602      	mov	r2, r0
 800242e:	460b      	mov	r3, r1
 8002430:	4620      	mov	r0, r4
 8002432:	4629      	mov	r1, r5
 8002434:	f7fd fe98 	bl	8000168 <__aeabi_dsub>
 8002438:	4602      	mov	r2, r0
 800243a:	460b      	mov	r3, r1
 800243c:	68f9      	ldr	r1, [r7, #12]
 800243e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8002448:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800244c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002450:	f7fe f842 	bl	80004d8 <__aeabi_dmul>
 8002454:	4602      	mov	r2, r0
 8002456:	460b      	mov	r3, r1
 8002458:	4620      	mov	r0, r4
 800245a:	4629      	mov	r1, r5
 800245c:	f7fd fe84 	bl	8000168 <__aeabi_dsub>
 8002460:	4602      	mov	r2, r0
 8002462:	460b      	mov	r3, r1
 8002464:	68f9      	ldr	r1, [r7, #12]
 8002466:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8002470:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002474:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002478:	f7fe f82e 	bl	80004d8 <__aeabi_dmul>
 800247c:	4602      	mov	r2, r0
 800247e:	460b      	mov	r3, r1
 8002480:	4620      	mov	r0, r4
 8002482:	4629      	mov	r1, r5
 8002484:	f7fd fe70 	bl	8000168 <__aeabi_dsub>
 8002488:	4602      	mov	r2, r0
 800248a:	460b      	mov	r3, r1
 800248c:	68f9      	ldr	r1, [r7, #12]
 800248e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8002498:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800249c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80024a0:	f7fe f81a 	bl	80004d8 <__aeabi_dmul>
 80024a4:	4602      	mov	r2, r0
 80024a6:	460b      	mov	r3, r1
 80024a8:	4620      	mov	r0, r4
 80024aa:	4629      	mov	r1, r5
 80024ac:	f7fd fe5c 	bl	8000168 <__aeabi_dsub>
 80024b0:	4602      	mov	r2, r0
 80024b2:	460b      	mov	r3, r1
 80024b4:	68f9      	ldr	r1, [r7, #12]
 80024b6:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
};
 80024c0:	4610      	mov	r0, r2
 80024c2:	4619      	mov	r1, r3
 80024c4:	3748      	adds	r7, #72	; 0x48
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080024cc <_qFFMath_GetAbnormal>:
#define cast_reinterpret( dst, src, dst_type )                              \
(void)memcpy( &dst, &src, sizeof(dst_type) )                                \

/*============================================================================*/
float _qFFMath_GetAbnormal( const int i )
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
    static const uint32_t u_ab[ 2 ] = { 0x7F800000u, 0x7FBFFFFFu };
    static float f_ab[ 2 ] = { 0.0f, 0.0f };
    static bool init = true;

    if ( init ) {
 80024d4:	4b0a      	ldr	r3, [pc, #40]	; (8002500 <_qFFMath_GetAbnormal+0x34>)
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d008      	beq.n	80024ee <_qFFMath_GetAbnormal+0x22>
        (void)memcpy( f_ab, u_ab, sizeof(f_ab) );
 80024dc:	4b09      	ldr	r3, [pc, #36]	; (8002504 <_qFFMath_GetAbnormal+0x38>)
 80024de:	4a0a      	ldr	r2, [pc, #40]	; (8002508 <_qFFMath_GetAbnormal+0x3c>)
 80024e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80024e4:	e883 0003 	stmia.w	r3, {r0, r1}
        init = false;
 80024e8:	4b05      	ldr	r3, [pc, #20]	; (8002500 <_qFFMath_GetAbnormal+0x34>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	701a      	strb	r2, [r3, #0]
    }

    return f_ab[ i ];
 80024ee:	4a05      	ldr	r2, [pc, #20]	; (8002504 <_qFFMath_GetAbnormal+0x38>)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bc80      	pop	{r7}
 80024fe:	4770      	bx	lr
 8002500:	200000a8 	.word	0x200000a8
 8002504:	200005e0 	.word	0x200005e0
 8002508:	080099a8 	.word	0x080099a8

0800250c <qFFMath_FPClassify>:
/*============================================================================*/
int qFFMath_FPClassify( const float f )
{
 800250c:	b480      	push	{r7}
 800250e:	b085      	sub	sp, #20
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
    uint32_t u = 0u;
 8002514:	2300      	movs	r3, #0
 8002516:	60bb      	str	r3, [r7, #8]
 8002518:	687b      	ldr	r3, [r7, #4]
    int retVal;

    cast_reinterpret( u, f, uint32_t );
 800251a:	60bb      	str	r3, [r7, #8]
    u &= 0x7FFFFFFFu;
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002522:	60bb      	str	r3, [r7, #8]

    if ( 0u == u ) {
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d102      	bne.n	8002530 <qFFMath_FPClassify+0x24>
        retVal = QFFM_FP_ZERO;
 800252a:	2300      	movs	r3, #0
 800252c:	60fb      	str	r3, [r7, #12]
 800252e:	e016      	b.n	800255e <qFFMath_FPClassify+0x52>
    }
    else if ( u < 0x00800000u ) {
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002536:	d202      	bcs.n	800253e <qFFMath_FPClassify+0x32>
        retVal = QFFM_FP_SUBNORMAL;
 8002538:	2301      	movs	r3, #1
 800253a:	60fb      	str	r3, [r7, #12]
 800253c:	e00f      	b.n	800255e <qFFMath_FPClassify+0x52>
    }
    else if ( u < 0x7F800000u ) {
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8002544:	d202      	bcs.n	800254c <qFFMath_FPClassify+0x40>
        retVal = QFFM_FP_NORMAL;
 8002546:	2302      	movs	r3, #2
 8002548:	60fb      	str	r3, [r7, #12]
 800254a:	e008      	b.n	800255e <qFFMath_FPClassify+0x52>
    }
    else if ( 0x7F800000U == u ) {
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8002552:	d102      	bne.n	800255a <qFFMath_FPClassify+0x4e>
        retVal = QFFM_FP_INFINITE;
 8002554:	2303      	movs	r3, #3
 8002556:	60fb      	str	r3, [r7, #12]
 8002558:	e001      	b.n	800255e <qFFMath_FPClassify+0x52>
    }
    else {
        retVal = QFFM_FP_NAN;
 800255a:	2304      	movs	r3, #4
 800255c:	60fb      	str	r3, [r7, #12]
    }

    return retVal;
 800255e:	68fb      	ldr	r3, [r7, #12]
}
 8002560:	4618      	mov	r0, r3
 8002562:	3714      	adds	r7, #20
 8002564:	46bd      	mov	sp, r7
 8002566:	bc80      	pop	{r7}
 8002568:	4770      	bx	lr

0800256a <qFFMath_IsNaN>:
/*============================================================================*/
bool qFFMath_IsNaN( const float x )
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b082      	sub	sp, #8
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
    return ( QFFM_FP_NAN == qFFMath_FPClassify( x ) );
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f7ff ffca 	bl	800250c <qFFMath_FPClassify>
 8002578:	4603      	mov	r3, r0
 800257a:	2b04      	cmp	r3, #4
 800257c:	bf0c      	ite	eq
 800257e:	2301      	moveq	r3, #1
 8002580:	2300      	movne	r3, #0
 8002582:	b2db      	uxtb	r3, r3
}
 8002584:	4618      	mov	r0, r3
 8002586:	3708      	adds	r7, #8
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}

0800258c <qFFMath_Abs>:
{
    return ( qFFMath_FPClassify( x ) == QFFM_FP_NORMAL );
}
/*============================================================================*/
float qFFMath_Abs( float x )
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
    return ( x < 0.0f ) ? -x : x;
 8002594:	f04f 0100 	mov.w	r1, #0
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f7fe fd71 	bl	8001080 <__aeabi_fcmplt>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d003      	beq.n	80025ac <qFFMath_Abs+0x20>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80025aa:	e000      	b.n	80025ae <qFFMath_Abs+0x22>
 80025ac:	687b      	ldr	r3, [r7, #4]
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <qFFMath_Sqrt>:

    return z*( 2.0f - ( x*z ) );
}
/*============================================================================*/
float qFFMath_Sqrt( float x )
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b086      	sub	sp, #24
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
    float retVal;

    if ( x < 0.0f ) {
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f04f 0100 	mov.w	r1, #0
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7fe fd5b 	bl	8001080 <__aeabi_fcmplt>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d004      	beq.n	80025da <qFFMath_Sqrt+0x24>
        retVal = QFFM_NAN;
 80025d0:	2001      	movs	r0, #1
 80025d2:	f7ff ff7b 	bl	80024cc <_qFFMath_GetAbnormal>
 80025d6:	6178      	str	r0, [r7, #20]
 80025d8:	e02f      	b.n	800263a <qFFMath_Sqrt+0x84>
    }
    else if ( QFFM_FP_ZERO == qFFMath_FPClassify( x ) ) {
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4618      	mov	r0, r3
 80025de:	f7ff ff95 	bl	800250c <qFFMath_FPClassify>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d103      	bne.n	80025f0 <qFFMath_Sqrt+0x3a>
        retVal = 0.0f;
 80025e8:	f04f 0300 	mov.w	r3, #0
 80025ec:	617b      	str	r3, [r7, #20]
 80025ee:	e024      	b.n	800263a <qFFMath_Sqrt+0x84>
    }
    else {
        uint32_t y = 0u;
 80025f0:	2300      	movs	r3, #0
 80025f2:	613b      	str	r3, [r7, #16]
        float z = 0.0f;
 80025f4:	f04f 0300 	mov.w	r3, #0
 80025f8:	60fb      	str	r3, [r7, #12]
 80025fa:	687b      	ldr	r3, [r7, #4]

        cast_reinterpret( y, x, uint32_t );
 80025fc:	613b      	str	r3, [r7, #16]
        y = ( ( y - 0x00800000u ) >> 1u ) + 0x20000000u;
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8002604:	085b      	lsrs	r3, r3, #1
 8002606:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800260a:	613b      	str	r3, [r7, #16]
 800260c:	693b      	ldr	r3, [r7, #16]
        cast_reinterpret( z, y, float );
 800260e:	60fb      	str	r3, [r7, #12]
        retVal = ( ( x/z ) + z ) * 0.5f;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	4611      	mov	r1, r2
 8002616:	4618      	mov	r0, r3
 8002618:	f7fe fc48 	bl	8000eac <__aeabi_fdiv>
 800261c:	4603      	mov	r3, r0
 800261e:	461a      	mov	r2, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	4619      	mov	r1, r3
 8002624:	4610      	mov	r0, r2
 8002626:	f7fe fa85 	bl	8000b34 <__addsf3>
 800262a:	4603      	mov	r3, r0
 800262c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002630:	4618      	mov	r0, r3
 8002632:	f7fe fb87 	bl	8000d44 <__aeabi_fmul>
 8002636:	4603      	mov	r3, r0
 8002638:	617b      	str	r3, [r7, #20]
    }

    return retVal;
 800263a:	697b      	ldr	r3, [r7, #20]
}
 800263c:	4618      	mov	r0, r3
 800263e:	3718      	adds	r7, #24
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <qFFMath_Sin>:
    return ( QFFM_FP_ZERO == qFFMath_FPClassify( x )) ? QFFM_NAN
                                                      : ( x - ( y*qFFMath_Trunc( x/y ) ) );
}
/*============================================================================*/
float qFFMath_Sin( float x )
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
    float y;
    x *= -0.318309886f;
 800264c:	491e      	ldr	r1, [pc, #120]	; (80026c8 <qFFMath_Sin+0x84>)
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f7fe fb78 	bl	8000d44 <__aeabi_fmul>
 8002654:	4603      	mov	r3, r0
 8002656:	607b      	str	r3, [r7, #4]
    y = x + 25165824.0f;
 8002658:	491c      	ldr	r1, [pc, #112]	; (80026cc <qFFMath_Sin+0x88>)
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f7fe fa6a 	bl	8000b34 <__addsf3>
 8002660:	4603      	mov	r3, r0
 8002662:	60fb      	str	r3, [r7, #12]
    x -= y - 25165824.0f;
 8002664:	4919      	ldr	r1, [pc, #100]	; (80026cc <qFFMath_Sin+0x88>)
 8002666:	68f8      	ldr	r0, [r7, #12]
 8002668:	f7fe fa62 	bl	8000b30 <__aeabi_fsub>
 800266c:	4603      	mov	r3, r0
 800266e:	4619      	mov	r1, r3
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f7fe fa5d 	bl	8000b30 <__aeabi_fsub>
 8002676:	4603      	mov	r3, r0
 8002678:	607b      	str	r3, [r7, #4]
    x *= qFFMath_Abs( x ) - 1.0f;
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f7ff ff86 	bl	800258c <qFFMath_Abs>
 8002680:	4603      	mov	r3, r0
 8002682:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002686:	4618      	mov	r0, r3
 8002688:	f7fe fa52 	bl	8000b30 <__aeabi_fsub>
 800268c:	4603      	mov	r3, r0
 800268e:	4619      	mov	r1, r3
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f7fe fb57 	bl	8000d44 <__aeabi_fmul>
 8002696:	4603      	mov	r3, r0
 8002698:	607b      	str	r3, [r7, #4]
    return x*( ( 3.5841304553896f*qFFMath_Abs( x ) ) + 3.1039673861526f );
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f7ff ff76 	bl	800258c <qFFMath_Abs>
 80026a0:	4603      	mov	r3, r0
 80026a2:	490b      	ldr	r1, [pc, #44]	; (80026d0 <qFFMath_Sin+0x8c>)
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7fe fb4d 	bl	8000d44 <__aeabi_fmul>
 80026aa:	4603      	mov	r3, r0
 80026ac:	4909      	ldr	r1, [pc, #36]	; (80026d4 <qFFMath_Sin+0x90>)
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7fe fa40 	bl	8000b34 <__addsf3>
 80026b4:	4603      	mov	r3, r0
 80026b6:	6879      	ldr	r1, [r7, #4]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7fe fb43 	bl	8000d44 <__aeabi_fmul>
 80026be:	4603      	mov	r3, r0
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3710      	adds	r7, #16
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	bea2f983 	.word	0xbea2f983
 80026cc:	4bc00000 	.word	0x4bc00000
 80026d0:	40656265 	.word	0x40656265
 80026d4:	4046a767 	.word	0x4046a767

080026d8 <qFFMath_Cos>:
/*============================================================================*/
float qFFMath_Cos( float x )
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
    return qFFMath_Sin( x + 1.570796327f );
 80026e0:	4906      	ldr	r1, [pc, #24]	; (80026fc <qFFMath_Cos+0x24>)
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f7fe fa26 	bl	8000b34 <__addsf3>
 80026e8:	4603      	mov	r3, r0
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7ff ffaa 	bl	8002644 <qFFMath_Sin>
 80026f0:	4603      	mov	r3, r0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	3fc90fdb 	.word	0x3fc90fdb

08002700 <qFFMath_Exp2>:
    y = qFFMath_ATan( y/( x + f ) ) + ( ( x < 0.0f ) ? t : 0.0f );
    return y + ( f*( ( 0.5f*t ) - y ) );
}
/*============================================================================*/
float qFFMath_Exp2( float x )
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b086      	sub	sp, #24
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
    float retVal;

    if ( x <= -126.0f ) {
 8002708:	492e      	ldr	r1, [pc, #184]	; (80027c4 <qFFMath_Exp2+0xc4>)
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f7fe fcc2 	bl	8001094 <__aeabi_fcmple>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d003      	beq.n	800271e <qFFMath_Exp2+0x1e>
        retVal = 0.0f;
 8002716:	f04f 0300 	mov.w	r3, #0
 800271a:	617b      	str	r3, [r7, #20]
 800271c:	e04c      	b.n	80027b8 <qFFMath_Exp2+0xb8>
    }
    else if ( x > 128.0f ) {
 800271e:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f7fe fcca 	bl	80010bc <__aeabi_fcmpgt>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d004      	beq.n	8002738 <qFFMath_Exp2+0x38>
        retVal = QFFM_INFINITY;
 800272e:	2000      	movs	r0, #0
 8002730:	f7ff fecc 	bl	80024cc <_qFFMath_GetAbnormal>
 8002734:	6178      	str	r0, [r7, #20]
 8002736:	e03f      	b.n	80027b8 <qFFMath_Exp2+0xb8>
    }
    else {
        float y = 0.0f;
 8002738:	f04f 0300 	mov.w	r3, #0
 800273c:	613b      	str	r3, [r7, #16]
        uint32_t exponent;
        /*cstat -CERT-FLP34-C -MISRAC2012-Rule-10.8*/
        exponent = (uint32_t)( x + 127.0f );
 800273e:	4922      	ldr	r1, [pc, #136]	; (80027c8 <qFFMath_Exp2+0xc8>)
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f7fe f9f7 	bl	8000b34 <__addsf3>
 8002746:	4603      	mov	r3, r0
 8002748:	4618      	mov	r0, r3
 800274a:	f7fe fce7 	bl	800111c <__aeabi_f2uiz>
 800274e:	4603      	mov	r3, r0
 8002750:	60fb      	str	r3, [r7, #12]
        /*cstat +CERT-FLP34-C +MISRAC2012-Rule-10.8 -CERT-FLP36-C*/
        x += 127.0f - (float)exponent;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	4618      	mov	r0, r3
 8002756:	f7fe fa9d 	bl	8000c94 <__aeabi_ui2f>
 800275a:	4603      	mov	r3, r0
 800275c:	4619      	mov	r1, r3
 800275e:	481a      	ldr	r0, [pc, #104]	; (80027c8 <qFFMath_Exp2+0xc8>)
 8002760:	f7fe f9e6 	bl	8000b30 <__aeabi_fsub>
 8002764:	4603      	mov	r3, r0
 8002766:	4619      	mov	r1, r3
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f7fe f9e3 	bl	8000b34 <__addsf3>
 800276e:	4603      	mov	r3, r0
 8002770:	607b      	str	r3, [r7, #4]
        /*cstat +CERT-FLP36-C*/
        exponent <<= 23u;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	05db      	lsls	r3, r3, #23
 8002776:	60fb      	str	r3, [r7, #12]
 8002778:	68fb      	ldr	r3, [r7, #12]
        cast_reinterpret( y, exponent, float );
 800277a:	613b      	str	r3, [r7, #16]
        x *= ( x*0.339766027f ) + 0.660233972f;
 800277c:	4913      	ldr	r1, [pc, #76]	; (80027cc <qFFMath_Exp2+0xcc>)
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f7fe fae0 	bl	8000d44 <__aeabi_fmul>
 8002784:	4603      	mov	r3, r0
 8002786:	4912      	ldr	r1, [pc, #72]	; (80027d0 <qFFMath_Exp2+0xd0>)
 8002788:	4618      	mov	r0, r3
 800278a:	f7fe f9d3 	bl	8000b34 <__addsf3>
 800278e:	4603      	mov	r3, r0
 8002790:	4619      	mov	r1, r3
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f7fe fad6 	bl	8000d44 <__aeabi_fmul>
 8002798:	4603      	mov	r3, r0
 800279a:	607b      	str	r3, [r7, #4]
        retVal = y*( x + 1.0f );
 800279c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f7fe f9c7 	bl	8000b34 <__addsf3>
 80027a6:	4603      	mov	r3, r0
 80027a8:	461a      	mov	r2, r3
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	4619      	mov	r1, r3
 80027ae:	4610      	mov	r0, r2
 80027b0:	f7fe fac8 	bl	8000d44 <__aeabi_fmul>
 80027b4:	4603      	mov	r3, r0
 80027b6:	617b      	str	r3, [r7, #20]
    }

    return retVal;
 80027b8:	697b      	ldr	r3, [r7, #20]
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3718      	adds	r7, #24
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	c2fc0000 	.word	0xc2fc0000
 80027c8:	42fe0000 	.word	0x42fe0000
 80027cc:	3eadf5d0 	.word	0x3eadf5d0
 80027d0:	3f290518 	.word	0x3f290518

080027d4 <qFFMath_Log2>:
/*============================================================================*/
float qFFMath_Log2( float x )
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b086      	sub	sp, #24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
    float retVal;

    if ( x < 0.0f ) {
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f04f 0100 	mov.w	r1, #0
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7fe fc4c 	bl	8001080 <__aeabi_fcmplt>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d004      	beq.n	80027f8 <qFFMath_Log2+0x24>
        retVal = QFFM_NAN;
 80027ee:	2001      	movs	r0, #1
 80027f0:	f7ff fe6c 	bl	80024cc <_qFFMath_GetAbnormal>
 80027f4:	6178      	str	r0, [r7, #20]
 80027f6:	e049      	b.n	800288c <qFFMath_Log2+0xb8>
    }
    else if ( QFFM_FP_ZERO == qFFMath_FPClassify( x ) ) {
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7ff fe86 	bl	800250c <qFFMath_FPClassify>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d107      	bne.n	8002816 <qFFMath_Log2+0x42>
        retVal = -QFFM_INFINITY;
 8002806:	2000      	movs	r0, #0
 8002808:	f7ff fe60 	bl	80024cc <_qFFMath_GetAbnormal>
 800280c:	4603      	mov	r3, r0
 800280e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002812:	617b      	str	r3, [r7, #20]
 8002814:	e03a      	b.n	800288c <qFFMath_Log2+0xb8>
    }
    else {
        uint32_t y = 0u, y2;
 8002816:	2300      	movs	r3, #0
 8002818:	60fb      	str	r3, [r7, #12]
 800281a:	687b      	ldr	r3, [r7, #4]

        cast_reinterpret( y, x, uint32_t );
 800281c:	60fb      	str	r3, [r7, #12]
        y2 = y;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	613b      	str	r3, [r7, #16]
        y >>= 23u;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	0ddb      	lsrs	r3, r3, #23
 8002826:	60fb      	str	r3, [r7, #12]
        /*cstat -CERT-FLP36-C*/
        retVal = (float)y;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	4618      	mov	r0, r3
 800282c:	f7fe fa32 	bl	8000c94 <__aeabi_ui2f>
 8002830:	4603      	mov	r3, r0
 8002832:	617b      	str	r3, [r7, #20]
        /*cstat +CERT-FLP36-C*/
        y = ( y2 & 0x007FFFFFu ) | 0x3F800000u;
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800283a:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800283e:	60fb      	str	r3, [r7, #12]
 8002840:	68fb      	ldr	r3, [r7, #12]
        cast_reinterpret( x, y, float );
 8002842:	607b      	str	r3, [r7, #4]
        retVal += -128.0f + ( x*( ( -0.333333333f*x ) + 2.0f ) ) - 0.666666666f;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	4914      	ldr	r1, [pc, #80]	; (8002898 <qFFMath_Log2+0xc4>)
 8002848:	4618      	mov	r0, r3
 800284a:	f7fe fa7b 	bl	8000d44 <__aeabi_fmul>
 800284e:	4603      	mov	r3, r0
 8002850:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002854:	4618      	mov	r0, r3
 8002856:	f7fe f96d 	bl	8000b34 <__addsf3>
 800285a:	4603      	mov	r3, r0
 800285c:	461a      	mov	r2, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4619      	mov	r1, r3
 8002862:	4610      	mov	r0, r2
 8002864:	f7fe fa6e 	bl	8000d44 <__aeabi_fmul>
 8002868:	4603      	mov	r3, r0
 800286a:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
 800286e:	4618      	mov	r0, r3
 8002870:	f7fe f95e 	bl	8000b30 <__aeabi_fsub>
 8002874:	4603      	mov	r3, r0
 8002876:	4909      	ldr	r1, [pc, #36]	; (800289c <qFFMath_Log2+0xc8>)
 8002878:	4618      	mov	r0, r3
 800287a:	f7fe f959 	bl	8000b30 <__aeabi_fsub>
 800287e:	4603      	mov	r3, r0
 8002880:	4619      	mov	r1, r3
 8002882:	6978      	ldr	r0, [r7, #20]
 8002884:	f7fe f956 	bl	8000b34 <__addsf3>
 8002888:	4603      	mov	r3, r0
 800288a:	617b      	str	r3, [r7, #20]
    }

    return retVal;
 800288c:	697b      	ldr	r3, [r7, #20]
}
 800288e:	4618      	mov	r0, r3
 8002890:	3718      	adds	r7, #24
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	beaaaaab 	.word	0xbeaaaaab
 800289c:	3f2aaaab 	.word	0x3f2aaaab

080028a0 <qFFMath_Exp>:
/*============================================================================*/
float qFFMath_Exp( float x )
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
    return qFFMath_Exp2( 1.442695041f*x );
 80028a8:	4906      	ldr	r1, [pc, #24]	; (80028c4 <qFFMath_Exp+0x24>)
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f7fe fa4a 	bl	8000d44 <__aeabi_fmul>
 80028b0:	4603      	mov	r3, r0
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7ff ff24 	bl	8002700 <qFFMath_Exp2>
 80028b8:	4603      	mov	r3, r0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	3fb8aa3b 	.word	0x3fb8aa3b

080028c8 <qFFMath_Log>:
{
    return qFFMath_Exp2( 3.32192809f*x );
}
/*============================================================================*/
float qFFMath_Log( float x )
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
    return 0.693147181f*qFFMath_Log2(x);
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f7ff ff7f 	bl	80027d4 <qFFMath_Log2>
 80028d6:	4603      	mov	r3, r0
 80028d8:	4904      	ldr	r1, [pc, #16]	; (80028ec <qFFMath_Log+0x24>)
 80028da:	4618      	mov	r0, r3
 80028dc:	f7fe fa32 	bl	8000d44 <__aeabi_fmul>
 80028e0:	4603      	mov	r3, r0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3708      	adds	r7, #8
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	3f317218 	.word	0x3f317218

080028f0 <qFFMath_Pow>:
    return 0.301029996f*qFFMath_Log2(x);
}
/*============================================================================*/
float qFFMath_Pow( float b,
                   float e )
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
    return qFFMath_Exp2( e*qFFMath_Log2( b ) );
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f7ff ff6a 	bl	80027d4 <qFFMath_Log2>
 8002900:	4603      	mov	r3, r0
 8002902:	6839      	ldr	r1, [r7, #0]
 8002904:	4618      	mov	r0, r3
 8002906:	f7fe fa1d 	bl	8000d44 <__aeabi_fmul>
 800290a:	4603      	mov	r3, r0
 800290c:	4618      	mov	r0, r3
 800290e:	f7ff fef7 	bl	8002700 <qFFMath_Exp2>
 8002912:	4603      	mov	r3, r0
}
 8002914:	4618      	mov	r0, r3
 8002916:	3708      	adds	r7, #8
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <qFIS_SetParameter>:

/*============================================================================*/
int qFIS_SetParameter( qFIS_t * const f,
                       const qFIS_Parameter_t p,
                       const qFIS_ParamValue_t x )
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	460b      	mov	r3, r1
 8002926:	70fb      	strb	r3, [r7, #3]
 8002928:	4613      	mov	r3, r2
 800292a:	70bb      	strb	r3, [r7, #2]
    int retVal = 0;
 800292c:	2300      	movs	r3, #0
 800292e:	60fb      	str	r3, [r7, #12]
    typedef float (*methods_fcn)( const float a, const float b );
    static const methods_fcn method[ 5 ] = { &qFIS_Min, &qFIS_Prod, &qFIS_Max,
                                             &qFIS_ProbOR, &qFIS_Sum
                                           };

    if ( NULL != f ) {
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d05a      	beq.n	80029ec <qFIS_SetParameter+0xd0>
        switch ( p ) {
 8002936:	78fb      	ldrb	r3, [r7, #3]
 8002938:	2b04      	cmp	r3, #4
 800293a:	d84c      	bhi.n	80029d6 <qFIS_SetParameter+0xba>
 800293c:	a201      	add	r2, pc, #4	; (adr r2, 8002944 <qFIS_SetParameter+0x28>)
 800293e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002942:	bf00      	nop
 8002944:	08002959 	.word	0x08002959
 8002948:	08002971 	.word	0x08002971
 800294c:	0800298f 	.word	0x0800298f
 8002950:	080029a7 	.word	0x080029a7
 8002954:	080029c5 	.word	0x080029c5
            case qFIS_Implication:
                if ( x <= qFIS_PROD ) {
 8002958:	78bb      	ldrb	r3, [r7, #2]
 800295a:	2b01      	cmp	r3, #1
 800295c:	d83d      	bhi.n	80029da <qFIS_SetParameter+0xbe>
                    f->implicate = method[ x ];
 800295e:	78bb      	ldrb	r3, [r7, #2]
 8002960:	4a25      	ldr	r2, [pc, #148]	; (80029f8 <qFIS_SetParameter+0xdc>)
 8002962:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	619a      	str	r2, [r3, #24]
                    retVal = 1;
 800296a:	2301      	movs	r3, #1
 800296c:	60fb      	str	r3, [r7, #12]
                }
                break;
 800296e:	e034      	b.n	80029da <qFIS_SetParameter+0xbe>
            case qFIS_Aggregation:
                if ( ( x >= qFIS_MAX ) && ( x <= qFIS_SUM ) ) {
 8002970:	78bb      	ldrb	r3, [r7, #2]
 8002972:	2b01      	cmp	r3, #1
 8002974:	d933      	bls.n	80029de <qFIS_SetParameter+0xc2>
 8002976:	78bb      	ldrb	r3, [r7, #2]
 8002978:	2b04      	cmp	r3, #4
 800297a:	d830      	bhi.n	80029de <qFIS_SetParameter+0xc2>
                    f->aggregate = method[ x ];
 800297c:	78bb      	ldrb	r3, [r7, #2]
 800297e:	4a1e      	ldr	r2, [pc, #120]	; (80029f8 <qFIS_SetParameter+0xdc>)
 8002980:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	61da      	str	r2, [r3, #28]
                    retVal = 1;
 8002988:	2301      	movs	r3, #1
 800298a:	60fb      	str	r3, [r7, #12]
                }
                break;
 800298c:	e027      	b.n	80029de <qFIS_SetParameter+0xc2>
            case qFIS_AND:
                if ( x <= qFIS_PROD ) {
 800298e:	78bb      	ldrb	r3, [r7, #2]
 8002990:	2b01      	cmp	r3, #1
 8002992:	d826      	bhi.n	80029e2 <qFIS_SetParameter+0xc6>
                    f->andOp = method[ x ];
 8002994:	78bb      	ldrb	r3, [r7, #2]
 8002996:	4a18      	ldr	r2, [pc, #96]	; (80029f8 <qFIS_SetParameter+0xdc>)
 8002998:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	611a      	str	r2, [r3, #16]
                    retVal = 1;
 80029a0:	2301      	movs	r3, #1
 80029a2:	60fb      	str	r3, [r7, #12]
                }
                break;
 80029a4:	e01d      	b.n	80029e2 <qFIS_SetParameter+0xc6>
            case qFIS_OR:
                if ( ( x >= qFIS_MAX ) && ( x <= qFIS_PROBOR ) ) {
 80029a6:	78bb      	ldrb	r3, [r7, #2]
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d91c      	bls.n	80029e6 <qFIS_SetParameter+0xca>
 80029ac:	78bb      	ldrb	r3, [r7, #2]
 80029ae:	2b03      	cmp	r3, #3
 80029b0:	d819      	bhi.n	80029e6 <qFIS_SetParameter+0xca>
                    f->orOp = method[ x ];
 80029b2:	78bb      	ldrb	r3, [r7, #2]
 80029b4:	4a10      	ldr	r2, [pc, #64]	; (80029f8 <qFIS_SetParameter+0xdc>)
 80029b6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	615a      	str	r2, [r3, #20]
                    retVal = 1;
 80029be:	2301      	movs	r3, #1
 80029c0:	60fb      	str	r3, [r7, #12]
                }
                break;
 80029c2:	e010      	b.n	80029e6 <qFIS_SetParameter+0xca>
            case qFIS_EvalPoints:
                if ( (int)x >= 20 ) {
 80029c4:	78bb      	ldrb	r3, [r7, #2]
 80029c6:	2b13      	cmp	r3, #19
 80029c8:	d90f      	bls.n	80029ea <qFIS_SetParameter+0xce>
                    f->nPoints = (size_t)x;
 80029ca:	78ba      	ldrb	r2, [r7, #2]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	64da      	str	r2, [r3, #76]	; 0x4c
                    retVal = 1;
 80029d0:	2301      	movs	r3, #1
 80029d2:	60fb      	str	r3, [r7, #12]
                }
                break;
 80029d4:	e009      	b.n	80029ea <qFIS_SetParameter+0xce>
            default:
                break;
 80029d6:	bf00      	nop
 80029d8:	e008      	b.n	80029ec <qFIS_SetParameter+0xd0>
                break;
 80029da:	bf00      	nop
 80029dc:	e006      	b.n	80029ec <qFIS_SetParameter+0xd0>
                break;
 80029de:	bf00      	nop
 80029e0:	e004      	b.n	80029ec <qFIS_SetParameter+0xd0>
                break;
 80029e2:	bf00      	nop
 80029e4:	e002      	b.n	80029ec <qFIS_SetParameter+0xd0>
                break;
 80029e6:	bf00      	nop
 80029e8:	e000      	b.n	80029ec <qFIS_SetParameter+0xd0>
                break;
 80029ea:	bf00      	nop
        }
    }

    return retVal;
 80029ec:	68fb      	ldr	r3, [r7, #12]
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3714      	adds	r7, #20
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bc80      	pop	{r7}
 80029f6:	4770      	bx	lr
 80029f8:	080099b0 	.word	0x080099b0

080029fc <qFIS_Setup>:
                qFIS_MF_t *const mf_outputs,
                const size_t nmo,
                const qFIS_Rules_t * const r,
                float *wi,
                const size_t n )
{
 80029fc:	b5b0      	push	{r4, r5, r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	607a      	str	r2, [r7, #4]
 8002a06:	603b      	str	r3, [r7, #0]
 8002a08:	460b      	mov	r3, r1
 8002a0a:	72fb      	strb	r3, [r7, #11]
    int retVal = 0;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	617b      	str	r3, [r7, #20]

    if ( ( NULL != f ) && ( t <= Tsukamoto ) && ( NULL != r ) && ( NULL != wi ) ) {
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	f000 80bb 	beq.w	8002b8e <qFIS_Setup+0x192>
 8002a18:	7afb      	ldrb	r3, [r7, #11]
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	f200 80b7 	bhi.w	8002b8e <qFIS_Setup+0x192>
 8002a20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	f000 80b3 	beq.w	8002b8e <qFIS_Setup+0x192>
 8002a28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	f000 80af 	beq.w	8002b8e <qFIS_Setup+0x192>
        size_t i;

        f->nInputs = ni/sizeof(qFIS_Input_t);
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	4a59      	ldr	r2, [pc, #356]	; (8002b98 <qFIS_Setup+0x19c>)
 8002a34:	fba2 2303 	umull	r2, r3, r2, r3
 8002a38:	08da      	lsrs	r2, r3, #3
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	63da      	str	r2, [r3, #60]	; 0x3c
        f->nOutputs = no/sizeof(qFIS_Output_t);
 8002a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a40:	4a56      	ldr	r2, [pc, #344]	; (8002b9c <qFIS_Setup+0x1a0>)
 8002a42:	fba2 2303 	umull	r2, r3, r2, r3
 8002a46:	091a      	lsrs	r2, r3, #4
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	641a      	str	r2, [r3, #64]	; 0x40
        f->nMFInputs = nmi/sizeof(qFIS_MF_t);
 8002a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a4e:	4a54      	ldr	r2, [pc, #336]	; (8002ba0 <qFIS_Setup+0x1a4>)
 8002a50:	fba2 2303 	umull	r2, r3, r2, r3
 8002a54:	091a      	lsrs	r2, r3, #4
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	645a      	str	r2, [r3, #68]	; 0x44
        f->nMFOutputs = nmo/sizeof(qFIS_MF_t);
 8002a5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a5c:	4a50      	ldr	r2, [pc, #320]	; (8002ba0 <qFIS_Setup+0x1a4>)
 8002a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a62:	091a      	lsrs	r2, r3, #4
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	649a      	str	r2, [r3, #72]	; 0x48
        f->input = inputs;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	601a      	str	r2, [r3, #0]
        f->output = outputs;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a72:	605a      	str	r2, [r3, #4]
        f->inMF = mf_inputs;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a78:	609a      	str	r2, [r3, #8]
        f->outMF = mf_outputs;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a7e:	60da      	str	r2, [r3, #12]
        f->wi = wi;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a84:	631a      	str	r2, [r3, #48]	; 0x30
        f->rules = r;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002a8a:	635a      	str	r2, [r3, #52]	; 0x34
        f->nRules = n;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a90:	651a      	str	r2, [r3, #80]	; 0x50
        f->type = t;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	7afa      	ldrb	r2, [r7, #11]
 8002a96:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
        retVal += qFIS_SetParameter( f, qFIS_EvalPoints, (qFIS_ParamValue_t)100 );
 8002a9a:	2264      	movs	r2, #100	; 0x64
 8002a9c:	2104      	movs	r1, #4
 8002a9e:	68f8      	ldr	r0, [r7, #12]
 8002aa0:	f7ff ff3c 	bl	800291c <qFIS_SetParameter>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	617b      	str	r3, [r7, #20]
        retVal += qFIS_SetParameter( f, qFIS_AND, qFIS_MIN );
 8002aac:	2200      	movs	r2, #0
 8002aae:	2102      	movs	r1, #2
 8002ab0:	68f8      	ldr	r0, [r7, #12]
 8002ab2:	f7ff ff33 	bl	800291c <qFIS_SetParameter>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	4413      	add	r3, r2
 8002abc:	617b      	str	r3, [r7, #20]
        retVal += qFIS_SetParameter( f, qFIS_OR, qFIS_MAX );
 8002abe:	2202      	movs	r2, #2
 8002ac0:	2103      	movs	r1, #3
 8002ac2:	68f8      	ldr	r0, [r7, #12]
 8002ac4:	f7ff ff2a 	bl	800291c <qFIS_SetParameter>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	4413      	add	r3, r2
 8002ace:	617b      	str	r3, [r7, #20]
        retVal += qFIS_SetParameter( f, qFIS_Implication, qFIS_MIN );
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	2100      	movs	r1, #0
 8002ad4:	68f8      	ldr	r0, [r7, #12]
 8002ad6:	f7ff ff21 	bl	800291c <qFIS_SetParameter>
 8002ada:	4602      	mov	r2, r0
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	4413      	add	r3, r2
 8002ae0:	617b      	str	r3, [r7, #20]
        retVal += qFIS_SetParameter( f, qFIS_Aggregation, qFIS_MAX );
 8002ae2:	2202      	movs	r2, #2
 8002ae4:	2101      	movs	r1, #1
 8002ae6:	68f8      	ldr	r0, [r7, #12]
 8002ae8:	f7ff ff18 	bl	800291c <qFIS_SetParameter>
 8002aec:	4602      	mov	r2, r0
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	4413      	add	r3, r2
 8002af2:	617b      	str	r3, [r7, #20]
        retVal = ( 5 == retVal ) ? 1 : 0;
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	2b05      	cmp	r3, #5
 8002af8:	bf0c      	ite	eq
 8002afa:	2301      	moveq	r3, #1
 8002afc:	2300      	movne	r3, #0
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	617b      	str	r3, [r7, #20]
        f->deFuzz = ( Mamdani == t ) ? &qFIS_DeFuzz_Centroid
                                     : &qFIS_DeFuzz_WtAverage;
 8002b02:	7afb      	ldrb	r3, [r7, #11]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d101      	bne.n	8002b0c <qFIS_Setup+0x110>
 8002b08:	4a26      	ldr	r2, [pc, #152]	; (8002ba4 <qFIS_Setup+0x1a8>)
 8002b0a:	e000      	b.n	8002b0e <qFIS_Setup+0x112>
 8002b0c:	4a26      	ldr	r2, [pc, #152]	; (8002ba8 <qFIS_Setup+0x1ac>)
        f->deFuzz = ( Mamdani == t ) ? &qFIS_DeFuzz_Centroid
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	629a      	str	r2, [r3, #40]	; 0x28
        f->ruleWeight = NULL;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2200      	movs	r2, #0
 8002b16:	62da      	str	r2, [r3, #44]	; 0x2c
        for ( i = 0 ; i < f->nOutputs ; ++i ) {
 8002b18:	2300      	movs	r3, #0
 8002b1a:	613b      	str	r3, [r7, #16]
 8002b1c:	e032      	b.n	8002b84 <qFIS_Setup+0x188>
            /*cstat -CERT-FLP36-C*/
            f->output[ i ].res = ( f->output[ i ].b.max - f->output[ i ].b.min )/(float)f->nPoints;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	685a      	ldr	r2, [r3, #4]
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	2134      	movs	r1, #52	; 0x34
 8002b26:	fb01 f303 	mul.w	r3, r1, r3
 8002b2a:	4413      	add	r3, r2
 8002b2c:	6858      	ldr	r0, [r3, #4]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	685a      	ldr	r2, [r3, #4]
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	2134      	movs	r1, #52	; 0x34
 8002b36:	fb01 f303 	mul.w	r3, r1, r3
 8002b3a:	4413      	add	r3, r2
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4619      	mov	r1, r3
 8002b40:	f7fd fff6 	bl	8000b30 <__aeabi_fsub>
 8002b44:	4603      	mov	r3, r0
 8002b46:	461d      	mov	r5, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7fe f8a1 	bl	8000c94 <__aeabi_ui2f>
 8002b52:	4601      	mov	r1, r0
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	685a      	ldr	r2, [r3, #4]
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	2034      	movs	r0, #52	; 0x34
 8002b5c:	fb00 f303 	mul.w	r3, r0, r3
 8002b60:	18d4      	adds	r4, r2, r3
 8002b62:	4628      	mov	r0, r5
 8002b64:	f7fe f9a2 	bl	8000eac <__aeabi_fdiv>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	60e3      	str	r3, [r4, #12]
            /*cstat +CERT-FLP36-C*/
            f->output[ i ].owner = f;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	685a      	ldr	r2, [r3, #4]
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	2134      	movs	r1, #52	; 0x34
 8002b74:	fb01 f303 	mul.w	r3, r1, r3
 8002b78:	4413      	add	r3, r2
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	629a      	str	r2, [r3, #40]	; 0x28
        for ( i = 0 ; i < f->nOutputs ; ++i ) {
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	3301      	adds	r3, #1
 8002b82:	613b      	str	r3, [r7, #16]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b88:	693a      	ldr	r2, [r7, #16]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d3c7      	bcc.n	8002b1e <qFIS_Setup+0x122>
        }
    }

    return retVal;
 8002b8e:	697b      	ldr	r3, [r7, #20]
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3718      	adds	r7, #24
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bdb0      	pop	{r4, r5, r7, pc}
 8002b98:	aaaaaaab 	.word	0xaaaaaaab
 8002b9c:	4ec4ec4f 	.word	0x4ec4ec4f
 8002ba0:	cccccccd 	.word	0xcccccccd
 8002ba4:	0800341d 	.word	0x0800341d
 8002ba8:	080034b5 	.word	0x080034b5

08002bac <qFIS_InputSetup>:
/*============================================================================*/
int qFIS_InputSetup( qFIS_Input_t * const v,
                     const qFIS_Tag_t t,
                     const float min,
                     const float max )
{
 8002bac:	b480      	push	{r7}
 8002bae:	b087      	sub	sp, #28
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
 8002bb8:	603b      	str	r3, [r7, #0]
    int retVal = 0;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	617b      	str	r3, [r7, #20]

    if ( ( NULL != v ) && ( t >= 0 ) ) {
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d018      	beq.n	8002bf6 <qFIS_InputSetup+0x4a>
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	db15      	blt.n	8002bf6 <qFIS_InputSetup+0x4a>
        v[ t ].b.min = min;
 8002bca:	68ba      	ldr	r2, [r7, #8]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	005b      	lsls	r3, r3, #1
 8002bd0:	4413      	add	r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	4413      	add	r3, r2
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	601a      	str	r2, [r3, #0]
        v[ t ].b.max = max;
 8002bde:	68ba      	ldr	r2, [r7, #8]
 8002be0:	4613      	mov	r3, r2
 8002be2:	005b      	lsls	r3, r3, #1
 8002be4:	4413      	add	r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	461a      	mov	r2, r3
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	4413      	add	r3, r2
 8002bee:	683a      	ldr	r2, [r7, #0]
 8002bf0:	605a      	str	r2, [r3, #4]
        retVal = 1;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	617b      	str	r3, [r7, #20]
    }

    return retVal;
 8002bf6:	697b      	ldr	r3, [r7, #20]
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	371c      	adds	r7, #28
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bc80      	pop	{r7}
 8002c00:	4770      	bx	lr

08002c02 <qFIS_OutputSetup>:
/*============================================================================*/
int qFIS_OutputSetup( qFIS_Output_t * const v,
                      const qFIS_Tag_t t,
                      const float min,
                      const float max )
{
 8002c02:	b480      	push	{r7}
 8002c04:	b087      	sub	sp, #28
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	60f8      	str	r0, [r7, #12]
 8002c0a:	60b9      	str	r1, [r7, #8]
 8002c0c:	607a      	str	r2, [r7, #4]
 8002c0e:	603b      	str	r3, [r7, #0]
    int retVal = 0;
 8002c10:	2300      	movs	r3, #0
 8002c12:	617b      	str	r3, [r7, #20]

    if ( ( NULL != v ) && ( t >= 0 ) ) {
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d05a      	beq.n	8002cd0 <qFIS_OutputSetup+0xce>
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	db57      	blt.n	8002cd0 <qFIS_OutputSetup+0xce>
        v[ t ].data[ 0 ] = 0.0f;
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	2234      	movs	r2, #52	; 0x34
 8002c24:	fb02 f303 	mul.w	r3, r2, r3
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	4413      	add	r3, r2
 8002c2c:	f04f 0200 	mov.w	r2, #0
 8002c30:	619a      	str	r2, [r3, #24]
        v[ t ].data[ 1 ] = 0.0f;
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	2234      	movs	r2, #52	; 0x34
 8002c36:	fb02 f303 	mul.w	r3, r2, r3
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	f04f 0200 	mov.w	r2, #0
 8002c42:	61da      	str	r2, [r3, #28]
        v[ t ].data[ 2 ] = 0.0f;
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	2234      	movs	r2, #52	; 0x34
 8002c48:	fb02 f303 	mul.w	r3, r2, r3
 8002c4c:	68fa      	ldr	r2, [r7, #12]
 8002c4e:	4413      	add	r3, r2
 8002c50:	f04f 0200 	mov.w	r2, #0
 8002c54:	621a      	str	r2, [r3, #32]
        v[ t ].data[ 3 ] = 0.0f;
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	2234      	movs	r2, #52	; 0x34
 8002c5a:	fb02 f303 	mul.w	r3, r2, r3
 8002c5e:	68fa      	ldr	r2, [r7, #12]
 8002c60:	4413      	add	r3, r2
 8002c62:	f04f 0200 	mov.w	r2, #0
 8002c66:	625a      	str	r2, [r3, #36]	; 0x24
        v[ t ].x = 0.0f;
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	2234      	movs	r2, #52	; 0x34
 8002c6c:	fb02 f303 	mul.w	r3, r2, r3
 8002c70:	68fa      	ldr	r2, [r7, #12]
 8002c72:	4413      	add	r3, r2
 8002c74:	f04f 0200 	mov.w	r2, #0
 8002c78:	611a      	str	r2, [r3, #16]
        v[ t ].y = 0.0f;
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	2234      	movs	r2, #52	; 0x34
 8002c7e:	fb02 f303 	mul.w	r3, r2, r3
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	4413      	add	r3, r2
 8002c86:	f04f 0200 	mov.w	r2, #0
 8002c8a:	615a      	str	r2, [r3, #20]
        v[ t ].b.min = min;
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	2234      	movs	r2, #52	; 0x34
 8002c90:	fb02 f303 	mul.w	r3, r2, r3
 8002c94:	68fa      	ldr	r2, [r7, #12]
 8002c96:	4413      	add	r3, r2
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	601a      	str	r2, [r3, #0]
        v[ t ].b.max = max;
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	2234      	movs	r2, #52	; 0x34
 8002ca0:	fb02 f303 	mul.w	r3, r2, r3
 8002ca4:	68fa      	ldr	r2, [r7, #12]
 8002ca6:	4413      	add	r3, r2
 8002ca8:	683a      	ldr	r2, [r7, #0]
 8002caa:	605a      	str	r2, [r3, #4]
        v[ t ].xag = NULL;
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	2234      	movs	r2, #52	; 0x34
 8002cb0:	fb02 f303 	mul.w	r3, r2, r3
 8002cb4:	68fa      	ldr	r2, [r7, #12]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	2200      	movs	r2, #0
 8002cba:	62da      	str	r2, [r3, #44]	; 0x2c
        v[ t ].yag = NULL;
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	2234      	movs	r2, #52	; 0x34
 8002cc0:	fb02 f303 	mul.w	r3, r2, r3
 8002cc4:	68fa      	ldr	r2, [r7, #12]
 8002cc6:	4413      	add	r3, r2
 8002cc8:	2200      	movs	r2, #0
 8002cca:	631a      	str	r2, [r3, #48]	; 0x30
        retVal = 1;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	617b      	str	r3, [r7, #20]
    }

    return retVal;
 8002cd0:	697b      	ldr	r3, [r7, #20]
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	371c      	adds	r7, #28
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bc80      	pop	{r7}
 8002cda:	4770      	bx	lr

08002cdc <qFIS_SetInput>:
/*============================================================================*/
int qFIS_SetInput( qFIS_Input_t * const v,
                   const qFIS_Tag_t t,
                   const float value )
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b087      	sub	sp, #28
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	60b9      	str	r1, [r7, #8]
 8002ce6:	607a      	str	r2, [r7, #4]
    int retVal = 0;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	617b      	str	r3, [r7, #20]

    if ( ( NULL != v ) && ( t >= 0 ) ) {
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d00e      	beq.n	8002d10 <qFIS_SetInput+0x34>
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	db0b      	blt.n	8002d10 <qFIS_SetInput+0x34>
        v[ t ].b.value = value;
 8002cf8:	68ba      	ldr	r2, [r7, #8]
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	4413      	add	r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	461a      	mov	r2, r3
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	4413      	add	r3, r2
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	609a      	str	r2, [r3, #8]
        retVal = 1;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	617b      	str	r3, [r7, #20]
    }

    return retVal;
 8002d10:	697b      	ldr	r3, [r7, #20]
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	371c      	adds	r7, #28
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bc80      	pop	{r7}
 8002d1a:	4770      	bx	lr

08002d1c <qFIS_GetOutput>:
/*============================================================================*/
float qFIS_GetOutput( const qFIS_Output_t * const v,
                      const qFIS_Tag_t t )
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b085      	sub	sp, #20
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
    float retVal = 0.0f;
 8002d26:	f04f 0300 	mov.w	r3, #0
 8002d2a:	60fb      	str	r3, [r7, #12]

    if ( ( NULL != v ) && ( t >= 0 ) ) {
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00a      	beq.n	8002d48 <qFIS_GetOutput+0x2c>
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	db07      	blt.n	8002d48 <qFIS_GetOutput+0x2c>
        retVal = v[ t ].b.value;
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	2234      	movs	r2, #52	; 0x34
 8002d3c:	fb02 f303 	mul.w	r3, r2, r3
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	4413      	add	r3, r2
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	60fb      	str	r3, [r7, #12]
    }

    return retVal;
 8002d48:	68fb      	ldr	r3, [r7, #12]
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3714      	adds	r7, #20
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bc80      	pop	{r7}
 8002d52:	4770      	bx	lr

08002d54 <qFIS_SetMF>:
                const qFIS_Tag_t mf,
                const qFIS_MF_Name_t s,
                qFIS_MF_Fcn_t custom_mf,
                const float *cp,
                float h )
{
 8002d54:	b590      	push	{r4, r7, lr}
 8002d56:	b087      	sub	sp, #28
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	607a      	str	r2, [r7, #4]
 8002d60:	70fb      	strb	r3, [r7, #3]
    int retVal = 0;
 8002d62:	2300      	movs	r3, #0
 8002d64:	617b      	str	r3, [r7, #20]
    /* Only for Tsukamoto consequents*/
    &qFIS_TLinSMF, &qFIS_TLinZMF, &qFIS_TConcaveMF,&qFIS_TSigMF, &qFIS_TSMF,
    &qFIS_TZMF
    };

    if ( ( NULL != m ) && ( io >= 0 ) && ( mf >= 0 ) && ( s < _NUM_MFS ) ) {
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d055      	beq.n	8002e18 <qFIS_SetMF+0xc4>
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	db52      	blt.n	8002e18 <qFIS_SetMF+0xc4>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	db4f      	blt.n	8002e18 <qFIS_SetMF+0xc4>
 8002d78:	78fb      	ldrb	r3, [r7, #3]
 8002d7a:	2b1a      	cmp	r3, #26
 8002d7c:	d84c      	bhi.n	8002e18 <qFIS_SetMF+0xc4>
        if ( NULL != custom_mf ) {
 8002d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d00a      	beq.n	8002d9a <qFIS_SetMF+0x46>
            m[ mf ].shape = custom_mf; /*user-defined membership function*/
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	4613      	mov	r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	4413      	add	r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	461a      	mov	r2, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	4413      	add	r3, r2
 8002d94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d96:	601a      	str	r2, [r3, #0]
 8002d98:	e00c      	b.n	8002db4 <qFIS_SetMF+0x60>
        }
        else {
            m[ mf ].shape = fShape[ s ];
 8002d9a:	78f9      	ldrb	r1, [r7, #3]
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	4413      	add	r3, r2
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	461a      	mov	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	4413      	add	r3, r2
 8002dac:	4a1d      	ldr	r2, [pc, #116]	; (8002e24 <qFIS_SetMF+0xd0>)
 8002dae:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8002db2:	601a      	str	r2, [r3, #0]
        }
        m[ mf ].index = (size_t)io;
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	4613      	mov	r3, r2
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	4413      	add	r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	68ba      	ldr	r2, [r7, #8]
 8002dc6:	611a      	str	r2, [r3, #16]
        m[ mf ].points = cp;
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	4613      	mov	r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	4413      	add	r3, r2
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dda:	605a      	str	r2, [r3, #4]
        m[ mf ].fx = 0.0f;
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	4613      	mov	r3, r2
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	4413      	add	r3, r2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	461a      	mov	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	4413      	add	r3, r2
 8002dec:	f04f 0200 	mov.w	r2, #0
 8002df0:	609a      	str	r2, [r3, #8]
        m[ mf ].h = qFIS_Bound( h, 0.0f, 1.0f );
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	4613      	mov	r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	4413      	add	r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	189c      	adds	r4, r3, r2
 8002e02:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002e06:	f04f 0100 	mov.w	r1, #0
 8002e0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e0c:	f001 fcf1 	bl	80047f2 <qFIS_Bound>
 8002e10:	4603      	mov	r3, r0
 8002e12:	60e3      	str	r3, [r4, #12]
        retVal = 1;
 8002e14:	2301      	movs	r3, #1
 8002e16:	617b      	str	r3, [r7, #20]
    }

    return retVal;
 8002e18:	697b      	ldr	r3, [r7, #20]
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	371c      	adds	r7, #28
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd90      	pop	{r4, r7, pc}
 8002e22:	bf00      	nop
 8002e24:	080099c4 	.word	0x080099c4

08002e28 <qFIS_EvalInputMFs>:

    return retVal;
}
/*============================================================================*/
static void qFIS_EvalInputMFs( qFIS_t * const f )
{
 8002e28:	b5b0      	push	{r4, r5, r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
    size_t i;
    qFIS_MF_t *mf;

    for ( i = 0 ; i < f->nMFInputs ; ++i ) {
 8002e30:	2300      	movs	r3, #0
 8002e32:	60fb      	str	r3, [r7, #12]
 8002e34:	e026      	b.n	8002e84 <qFIS_EvalInputMFs+0x5c>
        mf = &f->inMF[ i ];
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6899      	ldr	r1, [r3, #8]
 8002e3a:	68fa      	ldr	r2, [r7, #12]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	4413      	add	r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	440b      	add	r3, r1
 8002e46:	60bb      	str	r3, [r7, #8]
        /*cstat -MISRAC2012-Rule-11.3 -CERT-EXP39-C_d*/
        mf->fx = mf->h*mf->shape( (qFIS_IO_Base_t*)&f->input[ mf->index ],
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	68dd      	ldr	r5, [r3, #12]
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	681c      	ldr	r4, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6819      	ldr	r1, [r3, #0]
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	691a      	ldr	r2, [r3, #16]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	005b      	lsls	r3, r3, #1
 8002e5c:	4413      	add	r3, r2
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	18c8      	adds	r0, r1, r3
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	4619      	mov	r1, r3
 8002e6a:	47a0      	blx	r4
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	4619      	mov	r1, r3
 8002e70:	4628      	mov	r0, r5
 8002e72:	f7fd ff67 	bl	8000d44 <__aeabi_fmul>
 8002e76:	4603      	mov	r3, r0
 8002e78:	461a      	mov	r2, r3
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	609a      	str	r2, [r3, #8]
    for ( i = 0 ; i < f->nMFInputs ; ++i ) {
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	3301      	adds	r3, #1
 8002e82:	60fb      	str	r3, [r7, #12]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e88:	68fa      	ldr	r2, [r7, #12]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d3d3      	bcc.n	8002e36 <qFIS_EvalInputMFs+0xe>
                                  mf->points,
                                  1u );
        /*cstat +MISRAC2012-Rule-11.3 +CERT-EXP39-C_d*/
    }
}
 8002e8e:	bf00      	nop
 8002e90:	bf00      	nop
 8002e92:	3710      	adds	r7, #16
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bdb0      	pop	{r4, r5, r7, pc}

08002e98 <qFIS_TruncateInputs>:
/*============================================================================*/
static void qFIS_TruncateInputs( qFIS_t * const f )
{
 8002e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e9a:	b085      	sub	sp, #20
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
    size_t i;

    for ( i = 0 ; i < f->nInputs ; ++i ) {
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	60fb      	str	r3, [r7, #12]
 8002ea4:	e02b      	b.n	8002efe <qFIS_TruncateInputs+0x66>
        f->input[ i ].b.value = qFIS_Bound( f->input[ i ].b.value,
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6819      	ldr	r1, [r3, #0]
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	4613      	mov	r3, r2
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	4413      	add	r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	440b      	add	r3, r1
 8002eb6:	6898      	ldr	r0, [r3, #8]
                                            f->input[ i ].b.min,
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6819      	ldr	r1, [r3, #0]
 8002ebc:	68fa      	ldr	r2, [r7, #12]
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	4413      	add	r3, r2
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	440b      	add	r3, r1
        f->input[ i ].b.value = qFIS_Bound( f->input[ i ].b.value,
 8002ec8:	681d      	ldr	r5, [r3, #0]
                                            f->input[ i ].b.max );
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6819      	ldr	r1, [r3, #0]
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	005b      	lsls	r3, r3, #1
 8002ed4:	4413      	add	r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	440b      	add	r3, r1
        f->input[ i ].b.value = qFIS_Bound( f->input[ i ].b.value,
 8002eda:	685e      	ldr	r6, [r3, #4]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6819      	ldr	r1, [r3, #0]
 8002ee0:	68fa      	ldr	r2, [r7, #12]
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	005b      	lsls	r3, r3, #1
 8002ee6:	4413      	add	r3, r2
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	18cc      	adds	r4, r1, r3
 8002eec:	4632      	mov	r2, r6
 8002eee:	4629      	mov	r1, r5
 8002ef0:	f001 fc7f 	bl	80047f2 <qFIS_Bound>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	60a3      	str	r3, [r4, #8]
    for ( i = 0 ; i < f->nInputs ; ++i ) {
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	3301      	adds	r3, #1
 8002efc:	60fb      	str	r3, [r7, #12]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d3ce      	bcc.n	8002ea6 <qFIS_TruncateInputs+0xe>
    }
}
 8002f08:	bf00      	nop
 8002f0a:	bf00      	nop
 8002f0c:	3714      	adds	r7, #20
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002f12 <qFIS_Fuzzify>:
/*============================================================================*/
int qFIS_Fuzzify( qFIS_t * const f )
{
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b084      	sub	sp, #16
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
    int retVal = 0;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	60fb      	str	r3, [r7, #12]

    if ( NULL != f ) {
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d007      	beq.n	8002f34 <qFIS_Fuzzify+0x22>
        qFIS_TruncateInputs( f );
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f7ff ffb7 	bl	8002e98 <qFIS_TruncateInputs>
        qFIS_EvalInputMFs( f );
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f7ff ff7c 	bl	8002e28 <qFIS_EvalInputMFs>
        retVal = 1;
 8002f30:	2301      	movs	r3, #1
 8002f32:	60fb      	str	r3, [r7, #12]
    }

    return retVal;
 8002f34:	68fb      	ldr	r3, [r7, #12]
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3710      	adds	r7, #16
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <qFIS_ParseFuzzValue>:
/*============================================================================*/
static float qFIS_ParseFuzzValue( qFIS_MF_t * const mfIO,
                                  qFIS_Rules_t index )
{
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b084      	sub	sp, #16
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
 8002f46:	460b      	mov	r3, r1
 8002f48:	807b      	strh	r3, [r7, #2]
    uint8_t neg = (uint8_t)( index < 0 );
 8002f4a:	887b      	ldrh	r3, [r7, #2]
 8002f4c:	0bdb      	lsrs	r3, r3, #15
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	73fb      	strb	r3, [r7, #15]
    float y;

    if ( 0u != neg ) {
 8002f52:	7bfb      	ldrb	r3, [r7, #15]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d003      	beq.n	8002f60 <qFIS_ParseFuzzValue+0x22>
        index = -index;
 8002f58:	887b      	ldrh	r3, [r7, #2]
 8002f5a:	425b      	negs	r3, r3
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	807b      	strh	r3, [r7, #2]
    }
    /*cstat -CERT-INT32-C_a*/
    y = qFIS_Bound( mfIO[ index - 1 ].fx, 0.0f, 1.0f );
 8002f60:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002f64:	4613      	mov	r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	4413      	add	r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	3b14      	subs	r3, #20
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	4413      	add	r3, r2
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002f78:	f04f 0100 	mov.w	r1, #0
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f001 fc38 	bl	80047f2 <qFIS_Bound>
 8002f82:	60b8      	str	r0, [r7, #8]
    /*cstat +CERT-INT32-C_a*/
    y = ( 0u != neg ) ? ( 1.0f - y ) : y ;
 8002f84:	7bfb      	ldrb	r3, [r7, #15]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d006      	beq.n	8002f98 <qFIS_ParseFuzzValue+0x5a>
 8002f8a:	68b9      	ldr	r1, [r7, #8]
 8002f8c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002f90:	f7fd fdce 	bl	8000b30 <__aeabi_fsub>
 8002f94:	4603      	mov	r3, r0
 8002f96:	e000      	b.n	8002f9a <qFIS_ParseFuzzValue+0x5c>
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	60bb      	str	r3, [r7, #8]

    return y;
 8002f9c:	68bb      	ldr	r3, [r7, #8]
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3710      	adds	r7, #16
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
	...

08002fa8 <qFIS_GetFuzzOperator>:
/*============================================================================*/
static qFIS_FuzzyOperator_t qFIS_GetFuzzOperator( const qFIS_t * const f )
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b085      	sub	sp, #20
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
    qFIS_FuzzyOperator_t oper;

    switch ( f->lastConnector ) {
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	; 0x5c
 8002fb6:	4a0c      	ldr	r2, [pc, #48]	; (8002fe8 <qFIS_GetFuzzOperator+0x40>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d003      	beq.n	8002fc4 <qFIS_GetFuzzOperator+0x1c>
 8002fbc:	4a0b      	ldr	r2, [pc, #44]	; (8002fec <qFIS_GetFuzzOperator+0x44>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d004      	beq.n	8002fcc <qFIS_GetFuzzOperator+0x24>
 8002fc2:	e007      	b.n	8002fd4 <qFIS_GetFuzzOperator+0x2c>
        case _QFIS_AND:
            oper = f->andOp;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	691b      	ldr	r3, [r3, #16]
 8002fc8:	60fb      	str	r3, [r7, #12]
            break;
 8002fca:	e006      	b.n	8002fda <qFIS_GetFuzzOperator+0x32>
        case _QFIS_OR:
            oper = f->orOp;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	695b      	ldr	r3, [r3, #20]
 8002fd0:	60fb      	str	r3, [r7, #12]
            break;
 8002fd2:	e002      	b.n	8002fda <qFIS_GetFuzzOperator+0x32>
        default:
            oper = &qFIS_Sum;
 8002fd4:	4b06      	ldr	r3, [pc, #24]	; (8002ff0 <qFIS_GetFuzzOperator+0x48>)
 8002fd6:	60fb      	str	r3, [r7, #12]
            break;
 8002fd8:	bf00      	nop
    }

    return oper;
 8002fda:	68fb      	ldr	r3, [r7, #12]
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3714      	adds	r7, #20
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bc80      	pop	{r7}
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	ffff8002 	.word	0xffff8002
 8002fec:	ffff8003 	.word	0xffff8003
 8002ff0:	080047c7 	.word	0x080047c7

08002ff4 <qFIS_InferenceAntecedent>:
/*============================================================================*/
static size_t qFIS_InferenceAntecedent( struct _qFIS_s * const f,
                                        size_t i )
{
 8002ff4:	b590      	push	{r4, r7, lr}
 8002ff6:	b087      	sub	sp, #28
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
    int16_t inIndex, MFInIndex, connector;
    qFIS_FuzzyOperator_t op;
    /*cstat -CERT-INT30-C_a*/
    inIndex = f->rules[ i ];
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	4413      	add	r3, r2
 8003008:	881b      	ldrh	r3, [r3, #0]
 800300a:	82fb      	strh	r3, [r7, #22]
    MFInIndex = f->rules[ i + 1u ];
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	3301      	adds	r3, #1
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	4413      	add	r3, r2
 8003018:	881b      	ldrh	r3, [r3, #0]
 800301a:	82bb      	strh	r3, [r7, #20]
    connector = f->rules[ i + 2u ];
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	3302      	adds	r3, #2
 8003024:	005b      	lsls	r3, r3, #1
 8003026:	4413      	add	r3, r2
 8003028:	881b      	ldrh	r3, [r3, #0]
 800302a:	827b      	strh	r3, [r7, #18]
    /*cstat -CERT-INT30-C_a*/
    op = qFIS_GetFuzzOperator( f );
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f7ff ffbb 	bl	8002fa8 <qFIS_GetFuzzOperator>
 8003032:	60f8      	str	r0, [r7, #12]
    f->rStrength = op( f->rStrength, qFIS_ParseFuzzValue( f->inMF, MFInIndex ) );
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6d9c      	ldr	r4, [r3, #88]	; 0x58
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8003040:	4611      	mov	r1, r2
 8003042:	4618      	mov	r0, r3
 8003044:	f7ff ff7b 	bl	8002f3e <qFIS_ParseFuzzValue>
 8003048:	4602      	mov	r2, r0
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	4611      	mov	r1, r2
 800304e:	4620      	mov	r0, r4
 8003050:	4798      	blx	r3
 8003052:	4602      	mov	r2, r0
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	659a      	str	r2, [r3, #88]	; 0x58

    if ( ( inIndex < 0 ) || ( (size_t)inIndex > f->nInputs ) ) {
 8003058:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800305c:	2b00      	cmp	r3, #0
 800305e:	db05      	blt.n	800306c <qFIS_InferenceAntecedent+0x78>
 8003060:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003068:	429a      	cmp	r2, r3
 800306a:	d902      	bls.n	8003072 <qFIS_InferenceAntecedent+0x7e>
        i = QFIS_INFERENCE_ERROR;
 800306c:	2300      	movs	r3, #0
 800306e:	603b      	str	r3, [r7, #0]
 8003070:	e022      	b.n	80030b8 <qFIS_InferenceAntecedent+0xc4>
    }
    else {
        if ( ( _QFIS_AND == connector ) || ( _QFIS_OR == connector ) ) {
 8003072:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003076:	4a13      	ldr	r2, [pc, #76]	; (80030c4 <qFIS_InferenceAntecedent+0xd0>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d004      	beq.n	8003086 <qFIS_InferenceAntecedent+0x92>
 800307c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003080:	4a11      	ldr	r2, [pc, #68]	; (80030c8 <qFIS_InferenceAntecedent+0xd4>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d10a      	bne.n	800309c <qFIS_InferenceAntecedent+0xa8>
            f->lastConnector = connector;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	8a7a      	ldrh	r2, [r7, #18]
 800308a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
            f->inferenceState = &qFIS_InferenceAntecedent;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a0e      	ldr	r2, [pc, #56]	; (80030cc <qFIS_InferenceAntecedent+0xd8>)
 8003092:	621a      	str	r2, [r3, #32]
            i += 2u;
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	3302      	adds	r3, #2
 8003098:	603b      	str	r3, [r7, #0]
 800309a:	e00d      	b.n	80030b8 <qFIS_InferenceAntecedent+0xc4>
        }
        else if ( _QFIS_THEN == connector ) {
 800309c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80030a0:	4a0b      	ldr	r2, [pc, #44]	; (80030d0 <qFIS_InferenceAntecedent+0xdc>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d106      	bne.n	80030b4 <qFIS_InferenceAntecedent+0xc0>
            f->inferenceState = &qFIS_InferenceReachEnd;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a0a      	ldr	r2, [pc, #40]	; (80030d4 <qFIS_InferenceAntecedent+0xe0>)
 80030aa:	621a      	str	r2, [r3, #32]
            i += 2u;
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	3302      	adds	r3, #2
 80030b0:	603b      	str	r3, [r7, #0]
 80030b2:	e001      	b.n	80030b8 <qFIS_InferenceAntecedent+0xc4>
        }
        else {
            i = QFIS_INFERENCE_ERROR;
 80030b4:	2300      	movs	r3, #0
 80030b6:	603b      	str	r3, [r7, #0]
        }
    }

    return i;
 80030b8:	683b      	ldr	r3, [r7, #0]
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	371c      	adds	r7, #28
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd90      	pop	{r4, r7, pc}
 80030c2:	bf00      	nop
 80030c4:	ffff8002 	.word	0xffff8002
 80030c8:	ffff8003 	.word	0xffff8003
 80030cc:	08002ff5 	.word	0x08002ff5
 80030d0:	ffff8004 	.word	0xffff8004
 80030d4:	080030d9 	.word	0x080030d9

080030d8 <qFIS_InferenceReachEnd>:
/*============================================================================*/
static size_t qFIS_InferenceReachEnd( struct _qFIS_s * const f,
                                      size_t i )
{
 80030d8:	b590      	push	{r4, r7, lr}
 80030da:	b085      	sub	sp, #20
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
    int16_t  connector;

    connector = ( f->nOutputs > 1u )? f->rules[ i + 2u ] : -1;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d908      	bls.n	80030fc <qFIS_InferenceReachEnd+0x24>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	3302      	adds	r3, #2
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	4413      	add	r3, r2
 80030f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030fa:	e001      	b.n	8003100 <qFIS_InferenceReachEnd+0x28>
 80030fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003100:	81fb      	strh	r3, [r7, #14]
    i += 2u;
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	3302      	adds	r3, #2
 8003106:	603b      	str	r3, [r7, #0]
    if ( _QFIS_AND != connector ) {
 8003108:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800310c:	4a23      	ldr	r2, [pc, #140]	; (800319c <qFIS_InferenceReachEnd+0xc4>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d03f      	beq.n	8003192 <qFIS_InferenceReachEnd+0xba>
        f->inferenceState = &qFIS_InferenceAntecedent;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a22      	ldr	r2, [pc, #136]	; (80031a0 <qFIS_InferenceReachEnd+0xc8>)
 8003116:	621a      	str	r2, [r3, #32]
        f->lastConnector = -1;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800311e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
        f->wi[ f->ruleCount ] = f->rStrength;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	4413      	add	r3, r2
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003132:	601a      	str	r2, [r3, #0]
        if ( NULL != f->ruleWeight ) {
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003138:	2b00      	cmp	r3, #0
 800313a:	d01e      	beq.n	800317a <qFIS_InferenceReachEnd+0xa2>
            f->wi[ f->ruleCount ] *= qFIS_Bound( f->ruleWeight[ f->ruleCount ], 0.0f, 1.0f );
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	4413      	add	r3, r2
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800314e:	f04f 0100 	mov.w	r1, #0
 8003152:	4618      	mov	r0, r3
 8003154:	f001 fb4d 	bl	80047f2 <qFIS_Bound>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	4413      	add	r3, r2
 8003164:	6819      	ldr	r1, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	18d4      	adds	r4, r2, r3
 8003172:	f7fd fde7 	bl	8000d44 <__aeabi_fmul>
 8003176:	4603      	mov	r3, r0
 8003178:	6023      	str	r3, [r4, #0]
        }
        f->rStrength = 0.0f;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f04f 0200 	mov.w	r2, #0
 8003180:	659a      	str	r2, [r3, #88]	; 0x58
        ++f->ruleCount;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003186:	1c5a      	adds	r2, r3, #1
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	655a      	str	r2, [r3, #84]	; 0x54
        --i;
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	3b01      	subs	r3, #1
 8003190:	603b      	str	r3, [r7, #0]
    }

    return i;
 8003192:	683b      	ldr	r3, [r7, #0]
}
 8003194:	4618      	mov	r0, r3
 8003196:	3714      	adds	r7, #20
 8003198:	46bd      	mov	sp, r7
 800319a:	bd90      	pop	{r4, r7, pc}
 800319c:	ffff8002 	.word	0xffff8002
 80031a0:	08002ff5 	.word	0x08002ff5

080031a4 <qFIS_AggregationFindConsequent>:
/*============================================================================*/
static size_t qFIS_AggregationFindConsequent( struct _qFIS_s * const f,
                                              size_t i )
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
    while ( _QFIS_THEN != f->rules[ i++ ] ) {}
 80031ae:	bf00      	nop
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	1c59      	adds	r1, r3, #1
 80031b8:	6039      	str	r1, [r7, #0]
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	4413      	add	r3, r2
 80031be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031c2:	4a07      	ldr	r2, [pc, #28]	; (80031e0 <qFIS_AggregationFindConsequent+0x3c>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d1f3      	bne.n	80031b0 <qFIS_AggregationFindConsequent+0xc>
    f->aggregationState = &qFIS_InferenceConsequent;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	4a06      	ldr	r2, [pc, #24]	; (80031e4 <qFIS_AggregationFindConsequent+0x40>)
 80031cc:	625a      	str	r2, [r3, #36]	; 0x24

    return --i;
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	3b01      	subs	r3, #1
 80031d2:	603b      	str	r3, [r7, #0]
 80031d4:	683b      	ldr	r3, [r7, #0]
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	370c      	adds	r7, #12
 80031da:	46bd      	mov	sp, r7
 80031dc:	bc80      	pop	{r7}
 80031de:	4770      	bx	lr
 80031e0:	ffff8004 	.word	0xffff8004
 80031e4:	080031e9 	.word	0x080031e9

080031e8 <qFIS_InferenceConsequent>:
/*============================================================================*/
static size_t qFIS_InferenceConsequent( struct _qFIS_s * const f,
                                        size_t i )
{
 80031e8:	b5b0      	push	{r4, r5, r7, lr}
 80031ea:	b088      	sub	sp, #32
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
    int16_t outIndex, MFOutIndex, connector;
    uint8_t neg = 0u;
 80031f2:	2300      	movs	r3, #0
 80031f4:	777b      	strb	r3, [r7, #29]

    outIndex = f->rules[ i ];
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	005b      	lsls	r3, r3, #1
 80031fe:	4413      	add	r3, r2
 8003200:	881b      	ldrh	r3, [r3, #0]
 8003202:	837b      	strh	r3, [r7, #26]
    MFOutIndex = f->rules[ i + 1u ];
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	3301      	adds	r3, #1
 800320c:	005b      	lsls	r3, r3, #1
 800320e:	4413      	add	r3, r2
 8003210:	881b      	ldrh	r3, [r3, #0]
 8003212:	83fb      	strh	r3, [r7, #30]
    connector = ( f->nOutputs > 1u )? f->rules[ i + 2u ] : -1;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003218:	2b01      	cmp	r3, #1
 800321a:	d908      	bls.n	800322e <qFIS_InferenceConsequent+0x46>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	3302      	adds	r3, #2
 8003224:	005b      	lsls	r3, r3, #1
 8003226:	4413      	add	r3, r2
 8003228:	f9b3 3000 	ldrsh.w	r3, [r3]
 800322c:	e001      	b.n	8003232 <qFIS_InferenceConsequent+0x4a>
 800322e:	f04f 33ff 	mov.w	r3, #4294967295
 8003232:	833b      	strh	r3, [r7, #24]
    if ( MFOutIndex < 0 ) {
 8003234:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003238:	2b00      	cmp	r3, #0
 800323a:	da05      	bge.n	8003248 <qFIS_InferenceConsequent+0x60>
        MFOutIndex = -MFOutIndex;
 800323c:	8bfb      	ldrh	r3, [r7, #30]
 800323e:	425b      	negs	r3, r3
 8003240:	b29b      	uxth	r3, r3
 8003242:	83fb      	strh	r3, [r7, #30]
        neg = 1u;
 8003244:	2301      	movs	r3, #1
 8003246:	777b      	strb	r3, [r7, #29]
    }
    MFOutIndex -= 1;
 8003248:	8bfb      	ldrh	r3, [r7, #30]
 800324a:	3b01      	subs	r3, #1
 800324c:	b29b      	uxth	r3, r3
 800324e:	83fb      	strh	r3, [r7, #30]

    if ( f->wi[ f->ruleCount ] > 0.0f ) {
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	4413      	add	r3, r2
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f04f 0100 	mov.w	r1, #0
 8003262:	4618      	mov	r0, r3
 8003264:	f7fd ff2a 	bl	80010bc <__aeabi_fcmpgt>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d07b      	beq.n	8003366 <qFIS_InferenceConsequent+0x17e>
        qFIS_Output_t *o = &f->output[ outIndex ];
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685a      	ldr	r2, [r3, #4]
 8003272:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003276:	2134      	movs	r1, #52	; 0x34
 8003278:	fb01 f303 	mul.w	r3, r1, r3
 800327c:	4413      	add	r3, r2
 800327e:	617b      	str	r3, [r7, #20]
        qFIS_MF_t *m = &f->outMF[ MFOutIndex ];
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	68d9      	ldr	r1, [r3, #12]
 8003284:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8003288:	4613      	mov	r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	4413      	add	r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	440b      	add	r3, r1
 8003292:	613b      	str	r3, [r7, #16]

        if ( Mamdani == f->type ) {
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800329a:	2b00      	cmp	r3, #0
 800329c:	d133      	bne.n	8003306 <qFIS_InferenceConsequent+0x11e>
            float v;
            /*cstat -MISRAC2012-Rule-11.3 -CERT-EXP39-C_d*/
            v = m->h*m->shape( (qFIS_IO_Base_t*)o, m->points, 1u );
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	68dc      	ldr	r4, [r3, #12]
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	693a      	ldr	r2, [r7, #16]
 80032a8:	6851      	ldr	r1, [r2, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	6978      	ldr	r0, [r7, #20]
 80032ae:	4798      	blx	r3
 80032b0:	4603      	mov	r3, r0
 80032b2:	4619      	mov	r1, r3
 80032b4:	4620      	mov	r0, r4
 80032b6:	f7fd fd45 	bl	8000d44 <__aeabi_fmul>
 80032ba:	4603      	mov	r3, r0
 80032bc:	60bb      	str	r3, [r7, #8]
            /*cstat +MISRAC2012-Rule-11.3 +CERT-EXP39-C_d*/
            v = ( 1u == neg )? ( 1.0f - v ) : v;
 80032be:	7f7b      	ldrb	r3, [r7, #29]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d106      	bne.n	80032d2 <qFIS_InferenceConsequent+0xea>
 80032c4:	68b9      	ldr	r1, [r7, #8]
 80032c6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80032ca:	f7fd fc31 	bl	8000b30 <__aeabi_fsub>
 80032ce:	4603      	mov	r3, r0
 80032d0:	e000      	b.n	80032d4 <qFIS_InferenceConsequent+0xec>
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	60bb      	str	r3, [r7, #8]
            o->y = f->aggregate( o->y, f->implicate( f->wi[ f->ruleCount ], v ) );
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	69dc      	ldr	r4, [r3, #28]
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	695d      	ldr	r5, [r3, #20]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	699b      	ldr	r3, [r3, #24]
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80032ea:	0092      	lsls	r2, r2, #2
 80032ec:	440a      	add	r2, r1
 80032ee:	6812      	ldr	r2, [r2, #0]
 80032f0:	68b9      	ldr	r1, [r7, #8]
 80032f2:	4610      	mov	r0, r2
 80032f4:	4798      	blx	r3
 80032f6:	4603      	mov	r3, r0
 80032f8:	4619      	mov	r1, r3
 80032fa:	4628      	mov	r0, r5
 80032fc:	47a0      	blx	r4
 80032fe:	4602      	mov	r2, r0
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	615a      	str	r2, [r3, #20]
 8003304:	e02f      	b.n	8003366 <qFIS_InferenceConsequent+0x17e>
        }
        else { /* Sugeno and Tsukamoto*/
            float zi;
            /*cstat -MISRAC2012-Rule-11.3 -CERT-EXP39-C_d*/
            zi = m->shape( (qFIS_IO_Base_t*)f->input, m->points, f->nInputs );
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	6810      	ldr	r0, [r2, #0]
 800330e:	693a      	ldr	r2, [r7, #16]
 8003310:	6851      	ldr	r1, [r2, #4]
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003316:	4798      	blx	r3
 8003318:	60f8      	str	r0, [r7, #12]
            /*cstat +MISRAC2012-Rule-11.3 +CERT-EXP39-C_d*/
            o->data[ 0 ] += zi*f->wi[ f->ruleCount ];
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	699c      	ldr	r4, [r3, #24]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	4413      	add	r3, r2
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68f9      	ldr	r1, [r7, #12]
 800332e:	4618      	mov	r0, r3
 8003330:	f7fd fd08 	bl	8000d44 <__aeabi_fmul>
 8003334:	4603      	mov	r3, r0
 8003336:	4619      	mov	r1, r3
 8003338:	4620      	mov	r0, r4
 800333a:	f7fd fbfb 	bl	8000b34 <__addsf3>
 800333e:	4603      	mov	r3, r0
 8003340:	461a      	mov	r2, r3
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	619a      	str	r2, [r3, #24]
            o->data[ 1 ] += f->wi[ f->ruleCount ];
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	69d8      	ldr	r0, [r3, #28]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	4413      	add	r3, r2
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4619      	mov	r1, r3
 800335a:	f7fd fbeb 	bl	8000b34 <__addsf3>
 800335e:	4603      	mov	r3, r0
 8003360:	461a      	mov	r2, r3
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	61da      	str	r2, [r3, #28]
        }
    }

    i += 2u;
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	3302      	adds	r3, #2
 800336a:	603b      	str	r3, [r7, #0]
    if ( _QFIS_AND != connector ) {
 800336c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003370:	4a09      	ldr	r2, [pc, #36]	; (8003398 <qFIS_InferenceConsequent+0x1b0>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d00a      	beq.n	800338c <qFIS_InferenceConsequent+0x1a4>
        f->aggregationState = &qFIS_AggregationFindConsequent;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a08      	ldr	r2, [pc, #32]	; (800339c <qFIS_InferenceConsequent+0x1b4>)
 800337a:	625a      	str	r2, [r3, #36]	; 0x24
        ++f->ruleCount;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003380:	1c5a      	adds	r2, r3, #1
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	655a      	str	r2, [r3, #84]	; 0x54
        --i;
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	3b01      	subs	r3, #1
 800338a:	603b      	str	r3, [r7, #0]
    }

    return i;
 800338c:	683b      	ldr	r3, [r7, #0]
}
 800338e:	4618      	mov	r0, r3
 8003390:	3720      	adds	r7, #32
 8003392:	46bd      	mov	sp, r7
 8003394:	bdb0      	pop	{r4, r5, r7, pc}
 8003396:	bf00      	nop
 8003398:	ffff8002 	.word	0xffff8002
 800339c:	080031a5 	.word	0x080031a5

080033a0 <qFIS_Aggregate>:
/*============================================================================*/
static void qFIS_Aggregate( qFIS_t * const f )
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
    if ( NULL != f ) {
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d02d      	beq.n	800340a <qFIS_Aggregate+0x6a>
        if ( QFIS_RULES_BEGIN == f->rules[ 0 ] ) {
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033b6:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80033ba:	d126      	bne.n	800340a <qFIS_Aggregate+0x6a>
            size_t i = 1u;
 80033bc:	2301      	movs	r3, #1
 80033be:	60fb      	str	r3, [r7, #12]

            f->aggregationState = &qFIS_AggregationFindConsequent;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a14      	ldr	r2, [pc, #80]	; (8003414 <qFIS_Aggregate+0x74>)
 80033c4:	625a      	str	r2, [r3, #36]	; 0x24
            f->ruleCount = 0u;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	655a      	str	r2, [r3, #84]	; 0x54
            while ( ( _QFIS_RULES_END != f->rules[ i ] ) && ( f->ruleCount < f->nRules ) ) {
 80033cc:	e00b      	b.n	80033e6 <qFIS_Aggregate+0x46>
                i = f->aggregationState( f, i );
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d2:	68f9      	ldr	r1, [r7, #12]
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	4798      	blx	r3
 80033d8:	60f8      	str	r0, [r7, #12]
                if ( QFIS_INFERENCE_ERROR == i ) {
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d013      	beq.n	8003408 <qFIS_Aggregate+0x68>
                    break;
                }
                ++i;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	3301      	adds	r3, #1
 80033e4:	60fb      	str	r3, [r7, #12]
            while ( ( _QFIS_RULES_END != f->rules[ i ] ) && ( f->ruleCount < f->nRules ) ) {
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	005b      	lsls	r3, r3, #1
 80033ee:	4413      	add	r3, r2
 80033f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033f4:	4a08      	ldr	r2, [pc, #32]	; (8003418 <qFIS_Aggregate+0x78>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d007      	beq.n	800340a <qFIS_Aggregate+0x6a>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003402:	429a      	cmp	r2, r3
 8003404:	d3e3      	bcc.n	80033ce <qFIS_Aggregate+0x2e>
            }
        }
    }
}
 8003406:	e000      	b.n	800340a <qFIS_Aggregate+0x6a>
                    break;
 8003408:	bf00      	nop
}
 800340a:	bf00      	nop
 800340c:	3710      	adds	r7, #16
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	080031a5 	.word	0x080031a5
 8003418:	ffff8001 	.word	0xffff8001

0800341c <qFIS_DeFuzz_Centroid>:
/*============================================================================*/
static float qFIS_DeFuzz_Centroid( qFIS_Output_t * const o,
                                   const qFIS_DeFuzzState_t stage )
{
 800341c:	b590      	push	{r4, r7, lr}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	460b      	mov	r3, r1
 8003426:	70fb      	strb	r3, [r7, #3]
    float d = 0.0f;
 8003428:	f04f 0300 	mov.w	r3, #0
 800342c:	60fb      	str	r3, [r7, #12]

    switch ( stage ) {
 800342e:	78fb      	ldrb	r3, [r7, #3]
 8003430:	2b02      	cmp	r3, #2
 8003432:	d02e      	beq.n	8003492 <qFIS_DeFuzz_Centroid+0x76>
 8003434:	2b02      	cmp	r3, #2
 8003436:	dc37      	bgt.n	80034a8 <qFIS_DeFuzz_Centroid+0x8c>
 8003438:	2b00      	cmp	r3, #0
 800343a:	d021      	beq.n	8003480 <qFIS_DeFuzz_Centroid+0x64>
 800343c:	2b01      	cmp	r3, #1
 800343e:	d133      	bne.n	80034a8 <qFIS_DeFuzz_Centroid+0x8c>
        case DeFuzz_Compute:
            o->data[ 0 ] += o->x*o->y;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	699c      	ldr	r4, [r3, #24]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	691a      	ldr	r2, [r3, #16]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	695b      	ldr	r3, [r3, #20]
 800344c:	4619      	mov	r1, r3
 800344e:	4610      	mov	r0, r2
 8003450:	f7fd fc78 	bl	8000d44 <__aeabi_fmul>
 8003454:	4603      	mov	r3, r0
 8003456:	4619      	mov	r1, r3
 8003458:	4620      	mov	r0, r4
 800345a:	f7fd fb6b 	bl	8000b34 <__addsf3>
 800345e:	4603      	mov	r3, r0
 8003460:	461a      	mov	r2, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	619a      	str	r2, [r3, #24]
            o->data[ 1 ] += o->y;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	69da      	ldr	r2, [r3, #28]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	695b      	ldr	r3, [r3, #20]
 800346e:	4619      	mov	r1, r3
 8003470:	4610      	mov	r0, r2
 8003472:	f7fd fb5f 	bl	8000b34 <__addsf3>
 8003476:	4603      	mov	r3, r0
 8003478:	461a      	mov	r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	61da      	str	r2, [r3, #28]
            break;
 800347e:	e014      	b.n	80034aa <qFIS_DeFuzz_Centroid+0x8e>
        case DeFuzz_Init:
            o->data[ 0 ] = 0.0f; /*store sum(y)*/
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f04f 0200 	mov.w	r2, #0
 8003486:	619a      	str	r2, [r3, #24]
            o->data[ 1 ] = 0.0f; /*store sum(x*y)*/
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f04f 0200 	mov.w	r2, #0
 800348e:	61da      	str	r2, [r3, #28]
            break;
 8003490:	e00b      	b.n	80034aa <qFIS_DeFuzz_Centroid+0x8e>
        case DeFuzz_End:
            d = o->data[ 0 ]/o->data[ 1 ]; /*sum(x*y)/sum(y)*/
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	699a      	ldr	r2, [r3, #24]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	69db      	ldr	r3, [r3, #28]
 800349a:	4619      	mov	r1, r3
 800349c:	4610      	mov	r0, r2
 800349e:	f7fd fd05 	bl	8000eac <__aeabi_fdiv>
 80034a2:	4603      	mov	r3, r0
 80034a4:	60fb      	str	r3, [r7, #12]
            break;
 80034a6:	e000      	b.n	80034aa <qFIS_DeFuzz_Centroid+0x8e>
        default:
            break;
 80034a8:	bf00      	nop
    }

    return d;
 80034aa:	68fb      	ldr	r3, [r7, #12]
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3714      	adds	r7, #20
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd90      	pop	{r4, r7, pc}

080034b4 <qFIS_DeFuzz_WtAverage>:
    return d;
}
/*============================================================================*/
static float qFIS_DeFuzz_WtAverage( qFIS_Output_t * const o,
                                    const qFIS_DeFuzzState_t stage )
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	460b      	mov	r3, r1
 80034be:	70fb      	strb	r3, [r7, #3]
    float d = 0.0f;
 80034c0:	f04f 0300 	mov.w	r3, #0
 80034c4:	60fb      	str	r3, [r7, #12]

    if ( DeFuzz_End == stage ) {
 80034c6:	78fb      	ldrb	r3, [r7, #3]
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d109      	bne.n	80034e0 <qFIS_DeFuzz_WtAverage+0x2c>
        d = o->data[ 0 ]/o->data[ 1 ];
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	699a      	ldr	r2, [r3, #24]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	69db      	ldr	r3, [r3, #28]
 80034d4:	4619      	mov	r1, r3
 80034d6:	4610      	mov	r0, r2
 80034d8:	f7fd fce8 	bl	8000eac <__aeabi_fdiv>
 80034dc:	4603      	mov	r3, r0
 80034de:	60fb      	str	r3, [r7, #12]
    }

    return d;
 80034e0:	68fb      	ldr	r3, [r7, #12]
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3710      	adds	r7, #16
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}

080034ea <qFIS_DeFuzzify>:

    return d;
}
/*============================================================================*/
int qFIS_DeFuzzify( qFIS_t * const f )
{
 80034ea:	b5b0      	push	{r4, r5, r7, lr}
 80034ec:	b086      	sub	sp, #24
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
    int retVal = 0;
 80034f2:	2300      	movs	r3, #0
 80034f4:	60fb      	str	r3, [r7, #12]

    if ( NULL != f ) {
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	f000 8133 	beq.w	8003764 <qFIS_DeFuzzify+0x27a>
        size_t i;

        for ( i = 0; i < f->nOutputs ; ++i ) {
 80034fe:	2300      	movs	r3, #0
 8003500:	617b      	str	r3, [r7, #20]
 8003502:	e00e      	b.n	8003522 <qFIS_DeFuzzify+0x38>
            f->deFuzz( &f->output[ i ] , DeFuzz_Init );
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	6851      	ldr	r1, [r2, #4]
 800350c:	697a      	ldr	r2, [r7, #20]
 800350e:	2034      	movs	r0, #52	; 0x34
 8003510:	fb00 f202 	mul.w	r2, r0, r2
 8003514:	440a      	add	r2, r1
 8003516:	2100      	movs	r1, #0
 8003518:	4610      	mov	r0, r2
 800351a:	4798      	blx	r3
        for ( i = 0; i < f->nOutputs ; ++i ) {
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	3301      	adds	r3, #1
 8003520:	617b      	str	r3, [r7, #20]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003526:	697a      	ldr	r2, [r7, #20]
 8003528:	429a      	cmp	r2, r3
 800352a:	d3eb      	bcc.n	8003504 <qFIS_DeFuzzify+0x1a>
        }

        if ( Mamdani == f->type  ) {
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8003532:	2b00      	cmp	r3, #0
 8003534:	f040 809a 	bne.w	800366c <qFIS_DeFuzzify+0x182>
            size_t k;

            for ( k = 0u ; k < f->nPoints ; ++k ) {
 8003538:	2300      	movs	r3, #0
 800353a:	613b      	str	r3, [r7, #16]
 800353c:	e08f      	b.n	800365e <qFIS_DeFuzzify+0x174>
                for ( i = 0; i < f->nOutputs ; ++i ) { /* initialize*/
 800353e:	2300      	movs	r3, #0
 8003540:	617b      	str	r3, [r7, #20]
 8003542:	e038      	b.n	80035b6 <qFIS_DeFuzzify+0xcc>
                    f->output[ i ].y = 0.0f;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685a      	ldr	r2, [r3, #4]
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	2134      	movs	r1, #52	; 0x34
 800354c:	fb01 f303 	mul.w	r3, r1, r3
 8003550:	4413      	add	r3, r2
 8003552:	f04f 0200 	mov.w	r2, #0
 8003556:	615a      	str	r2, [r3, #20]
                    f->output[ i ].x = qFIS_GetNextX( f->output[ i ].b.min,
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685a      	ldr	r2, [r3, #4]
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	2134      	movs	r1, #52	; 0x34
 8003560:	fb01 f303 	mul.w	r3, r1, r3
 8003564:	4413      	add	r3, r2
 8003566:	6818      	ldr	r0, [r3, #0]
                                                      f->output[ i ].res,
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685a      	ldr	r2, [r3, #4]
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	2134      	movs	r1, #52	; 0x34
 8003570:	fb01 f303 	mul.w	r3, r1, r3
 8003574:	4413      	add	r3, r2
                    f->output[ i ].x = qFIS_GetNextX( f->output[ i ].b.min,
 8003576:	68d9      	ldr	r1, [r3, #12]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685a      	ldr	r2, [r3, #4]
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	2434      	movs	r4, #52	; 0x34
 8003580:	fb04 f303 	mul.w	r3, r4, r3
 8003584:	18d4      	adds	r4, r2, r3
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	f000 f950 	bl	800382c <qFIS_GetNextX>
 800358c:	4603      	mov	r3, r0
 800358e:	6123      	str	r3, [r4, #16]
                                                      k );
                    f->output[ i ].b.value = f->output[ i ].x;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685a      	ldr	r2, [r3, #4]
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	2134      	movs	r1, #52	; 0x34
 8003598:	fb01 f303 	mul.w	r3, r1, r3
 800359c:	441a      	add	r2, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6859      	ldr	r1, [r3, #4]
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	2034      	movs	r0, #52	; 0x34
 80035a6:	fb00 f303 	mul.w	r3, r0, r3
 80035aa:	440b      	add	r3, r1
 80035ac:	6912      	ldr	r2, [r2, #16]
 80035ae:	609a      	str	r2, [r3, #8]
                for ( i = 0; i < f->nOutputs ; ++i ) { /* initialize*/
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	3301      	adds	r3, #1
 80035b4:	617b      	str	r3, [r7, #20]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ba:	697a      	ldr	r2, [r7, #20]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d3c1      	bcc.n	8003544 <qFIS_DeFuzzify+0x5a>
                }
                qFIS_Aggregate( f );
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f7ff feed 	bl	80033a0 <qFIS_Aggregate>
                for ( i = 0; i < f->nOutputs ; ++i ) {
 80035c6:	2300      	movs	r3, #0
 80035c8:	617b      	str	r3, [r7, #20]
 80035ca:	e040      	b.n	800364e <qFIS_DeFuzzify+0x164>
                    f->deFuzz( &f->output[ i ] , DeFuzz_Compute );
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	6851      	ldr	r1, [r2, #4]
 80035d4:	697a      	ldr	r2, [r7, #20]
 80035d6:	2034      	movs	r0, #52	; 0x34
 80035d8:	fb00 f202 	mul.w	r2, r0, r2
 80035dc:	440a      	add	r2, r1
 80035de:	2101      	movs	r1, #1
 80035e0:	4610      	mov	r0, r2
 80035e2:	4798      	blx	r3
                    if ( NULL != f->output[ i ].xag ) { /*store aggregated*/
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685a      	ldr	r2, [r3, #4]
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	2134      	movs	r1, #52	; 0x34
 80035ec:	fb01 f303 	mul.w	r3, r1, r3
 80035f0:	4413      	add	r3, r2
 80035f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d027      	beq.n	8003648 <qFIS_DeFuzzify+0x15e>
                        f->output[ i ].xag[ k ] = f->output[ i ].x;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685a      	ldr	r2, [r3, #4]
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	2134      	movs	r1, #52	; 0x34
 8003600:	fb01 f303 	mul.w	r3, r1, r3
 8003604:	441a      	add	r2, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6859      	ldr	r1, [r3, #4]
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	2034      	movs	r0, #52	; 0x34
 800360e:	fb00 f303 	mul.w	r3, r0, r3
 8003612:	440b      	add	r3, r1
 8003614:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	440b      	add	r3, r1
 800361c:	6912      	ldr	r2, [r2, #16]
 800361e:	601a      	str	r2, [r3, #0]
                        f->output[ i ].yag[ k ] = f->output[ i ].y;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685a      	ldr	r2, [r3, #4]
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	2134      	movs	r1, #52	; 0x34
 8003628:	fb01 f303 	mul.w	r3, r1, r3
 800362c:	441a      	add	r2, r3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6859      	ldr	r1, [r3, #4]
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	2034      	movs	r0, #52	; 0x34
 8003636:	fb00 f303 	mul.w	r3, r0, r3
 800363a:	440b      	add	r3, r1
 800363c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	440b      	add	r3, r1
 8003644:	6952      	ldr	r2, [r2, #20]
 8003646:	601a      	str	r2, [r3, #0]
                for ( i = 0; i < f->nOutputs ; ++i ) {
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	3301      	adds	r3, #1
 800364c:	617b      	str	r3, [r7, #20]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003652:	697a      	ldr	r2, [r7, #20]
 8003654:	429a      	cmp	r2, r3
 8003656:	d3b9      	bcc.n	80035cc <qFIS_DeFuzzify+0xe2>
            for ( k = 0u ; k < f->nPoints ; ++k ) {
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	3301      	adds	r3, #1
 800365c:	613b      	str	r3, [r7, #16]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003662:	693a      	ldr	r2, [r7, #16]
 8003664:	429a      	cmp	r2, r3
 8003666:	f4ff af6a 	bcc.w	800353e <qFIS_DeFuzzify+0x54>
 800366a:	e038      	b.n	80036de <qFIS_DeFuzzify+0x1f4>
                    }
                }
            }
        }
        else { /*Sugeno and Tsukamoto systems*/
            for ( i = 0; i < f->nOutputs ; ++i ) { /* initialize*/
 800366c:	2300      	movs	r3, #0
 800366e:	617b      	str	r3, [r7, #20]
 8003670:	e016      	b.n	80036a0 <qFIS_DeFuzzify+0x1b6>
                f->output[ i ].data[ 0 ] = 0.0f; /*store sum wi*/
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685a      	ldr	r2, [r3, #4]
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	2134      	movs	r1, #52	; 0x34
 800367a:	fb01 f303 	mul.w	r3, r1, r3
 800367e:	4413      	add	r3, r2
 8003680:	f04f 0200 	mov.w	r2, #0
 8003684:	619a      	str	r2, [r3, #24]
                f->output[ i ].data[ 1 ] = 0.0f; /*store sum zi*wi*/
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685a      	ldr	r2, [r3, #4]
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	2134      	movs	r1, #52	; 0x34
 800368e:	fb01 f303 	mul.w	r3, r1, r3
 8003692:	4413      	add	r3, r2
 8003694:	f04f 0200 	mov.w	r2, #0
 8003698:	61da      	str	r2, [r3, #28]
            for ( i = 0; i < f->nOutputs ; ++i ) { /* initialize*/
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	3301      	adds	r3, #1
 800369e:	617b      	str	r3, [r7, #20]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a4:	697a      	ldr	r2, [r7, #20]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d3e3      	bcc.n	8003672 <qFIS_DeFuzzify+0x188>
            }
            qFIS_Aggregate( f );
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f7ff fe78 	bl	80033a0 <qFIS_Aggregate>
            for ( i = 0; i < f->nOutputs ; ++i ) { /* initialize*/
 80036b0:	2300      	movs	r3, #0
 80036b2:	617b      	str	r3, [r7, #20]
 80036b4:	e00e      	b.n	80036d4 <qFIS_DeFuzzify+0x1ea>
                f->deFuzz( &f->output[ i ] , DeFuzz_Compute );
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	6851      	ldr	r1, [r2, #4]
 80036be:	697a      	ldr	r2, [r7, #20]
 80036c0:	2034      	movs	r0, #52	; 0x34
 80036c2:	fb00 f202 	mul.w	r2, r0, r2
 80036c6:	440a      	add	r2, r1
 80036c8:	2101      	movs	r1, #1
 80036ca:	4610      	mov	r0, r2
 80036cc:	4798      	blx	r3
            for ( i = 0; i < f->nOutputs ; ++i ) { /* initialize*/
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	3301      	adds	r3, #1
 80036d2:	617b      	str	r3, [r7, #20]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d8:	697a      	ldr	r2, [r7, #20]
 80036da:	429a      	cmp	r2, r3
 80036dc:	d3eb      	bcc.n	80036b6 <qFIS_DeFuzzify+0x1cc>
            }
        }

        for ( i = 0; i < f->nOutputs ; ++i ) {
 80036de:	2300      	movs	r3, #0
 80036e0:	617b      	str	r3, [r7, #20]
 80036e2:	e03a      	b.n	800375a <qFIS_DeFuzzify+0x270>
            f->output[ i ].b.value = f->deFuzz( &f->output[ i ] , DeFuzz_End );
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	6851      	ldr	r1, [r2, #4]
 80036ec:	697a      	ldr	r2, [r7, #20]
 80036ee:	2034      	movs	r0, #52	; 0x34
 80036f0:	fb00 f202 	mul.w	r2, r0, r2
 80036f4:	1888      	adds	r0, r1, r2
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	6851      	ldr	r1, [r2, #4]
 80036fa:	697a      	ldr	r2, [r7, #20]
 80036fc:	2434      	movs	r4, #52	; 0x34
 80036fe:	fb04 f202 	mul.w	r2, r4, r2
 8003702:	188c      	adds	r4, r1, r2
 8003704:	2102      	movs	r1, #2
 8003706:	4798      	blx	r3
 8003708:	4603      	mov	r3, r0
 800370a:	60a3      	str	r3, [r4, #8]
            f->output[ i ].b.value = qFIS_Bound( f->output[ i ].b.value,
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685a      	ldr	r2, [r3, #4]
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	2134      	movs	r1, #52	; 0x34
 8003714:	fb01 f303 	mul.w	r3, r1, r3
 8003718:	4413      	add	r3, r2
 800371a:	6898      	ldr	r0, [r3, #8]
                                                 f->output[ i ].b.min,
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685a      	ldr	r2, [r3, #4]
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	2134      	movs	r1, #52	; 0x34
 8003724:	fb01 f303 	mul.w	r3, r1, r3
 8003728:	4413      	add	r3, r2
            f->output[ i ].b.value = qFIS_Bound( f->output[ i ].b.value,
 800372a:	6819      	ldr	r1, [r3, #0]
                                                 f->output[ i ].b.max );
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685a      	ldr	r2, [r3, #4]
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	2434      	movs	r4, #52	; 0x34
 8003734:	fb04 f303 	mul.w	r3, r4, r3
 8003738:	4413      	add	r3, r2
            f->output[ i ].b.value = qFIS_Bound( f->output[ i ].b.value,
 800373a:	685d      	ldr	r5, [r3, #4]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685a      	ldr	r2, [r3, #4]
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	2434      	movs	r4, #52	; 0x34
 8003744:	fb04 f303 	mul.w	r3, r4, r3
 8003748:	18d4      	adds	r4, r2, r3
 800374a:	462a      	mov	r2, r5
 800374c:	f001 f851 	bl	80047f2 <qFIS_Bound>
 8003750:	4603      	mov	r3, r0
 8003752:	60a3      	str	r3, [r4, #8]
        for ( i = 0; i < f->nOutputs ; ++i ) {
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	3301      	adds	r3, #1
 8003758:	617b      	str	r3, [r7, #20]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375e:	697a      	ldr	r2, [r7, #20]
 8003760:	429a      	cmp	r2, r3
 8003762:	d3bf      	bcc.n	80036e4 <qFIS_DeFuzzify+0x1fa>
        }
    }

    return retVal;
 8003764:	68fb      	ldr	r3, [r7, #12]
}
 8003766:	4618      	mov	r0, r3
 8003768:	3718      	adds	r7, #24
 800376a:	46bd      	mov	sp, r7
 800376c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003770 <qFIS_Inference>:

    return retVal;
}
/*============================================================================*/
int qFIS_Inference( qFIS_t * const f )
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
    int retVal = 0;
 8003778:	2300      	movs	r3, #0
 800377a:	60fb      	str	r3, [r7, #12]

    if ( NULL != f  ) {
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d04a      	beq.n	8003818 <qFIS_Inference+0xa8>
        size_t i = 0u;
 8003782:	2300      	movs	r3, #0
 8003784:	60bb      	str	r3, [r7, #8]

        if ( QFIS_RULES_BEGIN == f->rules[ 0 ] ) {
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800378a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800378e:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8003792:	d12f      	bne.n	80037f4 <qFIS_Inference+0x84>
            f->inferenceState = &qFIS_InferenceAntecedent;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	4a23      	ldr	r2, [pc, #140]	; (8003824 <qFIS_Inference+0xb4>)
 8003798:	621a      	str	r2, [r3, #32]
            f->rStrength = 0.0f;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f04f 0200 	mov.w	r2, #0
 80037a0:	659a      	str	r2, [r3, #88]	; 0x58
            f->lastConnector = -1;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
            f->ruleCount = 0u;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	655a      	str	r2, [r3, #84]	; 0x54
            i = 1u;
 80037b2:	2301      	movs	r3, #1
 80037b4:	60bb      	str	r3, [r7, #8]
            while ( ( _QFIS_RULES_END != f->rules[ i ] ) && ( f->ruleCount < f->nRules ) ) {
 80037b6:	e00b      	b.n	80037d0 <qFIS_Inference+0x60>
                i = f->inferenceState( f, i );
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a1b      	ldr	r3, [r3, #32]
 80037bc:	68b9      	ldr	r1, [r7, #8]
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	4798      	blx	r3
 80037c2:	60b8      	str	r0, [r7, #8]
                if ( QFIS_INFERENCE_ERROR == i ) {
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d013      	beq.n	80037f2 <qFIS_Inference+0x82>
                    break;
                }
                ++i;
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	3301      	adds	r3, #1
 80037ce:	60bb      	str	r3, [r7, #8]
            while ( ( _QFIS_RULES_END != f->rules[ i ] ) && ( f->ruleCount < f->nRules ) ) {
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	005b      	lsls	r3, r3, #1
 80037d8:	4413      	add	r3, r2
 80037da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037de:	4a12      	ldr	r2, [pc, #72]	; (8003828 <qFIS_Inference+0xb8>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d007      	beq.n	80037f4 <qFIS_Inference+0x84>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d3e3      	bcc.n	80037b8 <qFIS_Inference+0x48>
 80037f0:	e000      	b.n	80037f4 <qFIS_Inference+0x84>
                    break;
 80037f2:	bf00      	nop
            }
        }
        if ( ( _QFIS_RULES_END == f->rules[ i ] ) && ( f->ruleCount == f->nRules) ) {
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	005b      	lsls	r3, r3, #1
 80037fc:	4413      	add	r3, r2
 80037fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003802:	4a09      	ldr	r2, [pc, #36]	; (8003828 <qFIS_Inference+0xb8>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d107      	bne.n	8003818 <qFIS_Inference+0xa8>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003810:	429a      	cmp	r2, r3
 8003812:	d101      	bne.n	8003818 <qFIS_Inference+0xa8>
            retVal = 1;
 8003814:	2301      	movs	r3, #1
 8003816:	60fb      	str	r3, [r7, #12]
        }
    }

    return retVal;
 8003818:	68fb      	ldr	r3, [r7, #12]
}
 800381a:	4618      	mov	r0, r3
 800381c:	3710      	adds	r7, #16
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	08002ff5 	.word	0x08002ff5
 8003828:	ffff8001 	.word	0xffff8001

0800382c <qFIS_GetNextX>:
/*============================================================================*/
static float qFIS_GetNextX( const float init,
                            const float res,
                            const size_t i )
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	60b9      	str	r1, [r7, #8]
 8003836:	607a      	str	r2, [r7, #4]
    /*cstat -CERT-FLP36-C*/
    return init + ( ( (float)i + 0.5f )*res );
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f7fd fa2b 	bl	8000c94 <__aeabi_ui2f>
 800383e:	4603      	mov	r3, r0
 8003840:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003844:	4618      	mov	r0, r3
 8003846:	f7fd f975 	bl	8000b34 <__addsf3>
 800384a:	4603      	mov	r3, r0
 800384c:	68b9      	ldr	r1, [r7, #8]
 800384e:	4618      	mov	r0, r3
 8003850:	f7fd fa78 	bl	8000d44 <__aeabi_fmul>
 8003854:	4603      	mov	r3, r0
 8003856:	68f9      	ldr	r1, [r7, #12]
 8003858:	4618      	mov	r0, r3
 800385a:	f7fd f96b 	bl	8000b34 <__addsf3>
 800385e:	4603      	mov	r3, r0
    /*cstat +CERT-FLP36-C*/
}
 8003860:	4618      	mov	r0, r3
 8003862:	3710      	adds	r7, #16
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <qFIS_TriMF>:
/*============================================================================*/
static float qFIS_TriMF( const qFIS_IO_Base_t * const in,
                         const float *p,
                         const size_t n )
{
 8003868:	b5b0      	push	{r4, r5, r7, lr}
 800386a:	b08a      	sub	sp, #40	; 0x28
 800386c:	af00      	add	r7, sp, #0
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	607a      	str	r2, [r7, #4]
    float a, b, c, tmp;
    float x = in[ 0 ].value;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	627b      	str	r3, [r7, #36]	; 0x24
    (void)n;

    a = p[ 0 ];
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	623b      	str	r3, [r7, #32]
    b = p[ 1 ];
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	3304      	adds	r3, #4
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	61fb      	str	r3, [r7, #28]
    c = p[ 2 ];
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	3308      	adds	r3, #8
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	61bb      	str	r3, [r7, #24]
    tmp = qFIS_Min( ( x - a )/( b - a ) , ( c - x )/( c - b ) );
 8003890:	6a39      	ldr	r1, [r7, #32]
 8003892:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003894:	f7fd f94c 	bl	8000b30 <__aeabi_fsub>
 8003898:	4603      	mov	r3, r0
 800389a:	461c      	mov	r4, r3
 800389c:	6a39      	ldr	r1, [r7, #32]
 800389e:	69f8      	ldr	r0, [r7, #28]
 80038a0:	f7fd f946 	bl	8000b30 <__aeabi_fsub>
 80038a4:	4603      	mov	r3, r0
 80038a6:	4619      	mov	r1, r3
 80038a8:	4620      	mov	r0, r4
 80038aa:	f7fd faff 	bl	8000eac <__aeabi_fdiv>
 80038ae:	4603      	mov	r3, r0
 80038b0:	461c      	mov	r4, r3
 80038b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038b4:	69b8      	ldr	r0, [r7, #24]
 80038b6:	f7fd f93b 	bl	8000b30 <__aeabi_fsub>
 80038ba:	4603      	mov	r3, r0
 80038bc:	461d      	mov	r5, r3
 80038be:	69f9      	ldr	r1, [r7, #28]
 80038c0:	69b8      	ldr	r0, [r7, #24]
 80038c2:	f7fd f935 	bl	8000b30 <__aeabi_fsub>
 80038c6:	4603      	mov	r3, r0
 80038c8:	4619      	mov	r1, r3
 80038ca:	4628      	mov	r0, r5
 80038cc:	f7fd faee 	bl	8000eac <__aeabi_fdiv>
 80038d0:	4603      	mov	r3, r0
 80038d2:	4619      	mov	r1, r3
 80038d4:	4620      	mov	r0, r4
 80038d6:	f000 ff09 	bl	80046ec <qFIS_Min>
 80038da:	6178      	str	r0, [r7, #20]

    return qFIS_Max( tmp , 0.0f );
 80038dc:	f04f 0100 	mov.w	r1, #0
 80038e0:	6978      	ldr	r0, [r7, #20]
 80038e2:	f000 ff1e 	bl	8004722 <qFIS_Max>
 80038e6:	4603      	mov	r3, r0
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3728      	adds	r7, #40	; 0x28
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bdb0      	pop	{r4, r5, r7, pc}

080038f0 <qFIS_TrapMF>:
/*============================================================================*/
static float qFIS_TrapMF( const qFIS_IO_Base_t * const in,
                          const float *p,
                          const size_t n )
{
 80038f0:	b590      	push	{r4, r7, lr}
 80038f2:	b08b      	sub	sp, #44	; 0x2c
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	607a      	str	r2, [r7, #4]
    float a, b, c, d, tmp;
    float x = in[ 0 ].value;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	627b      	str	r3, [r7, #36]	; 0x24
    (void)n;

    a = p[ 0 ];
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	623b      	str	r3, [r7, #32]
    b = p[ 1 ];
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	3304      	adds	r3, #4
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	61fb      	str	r3, [r7, #28]
    c = p[ 2 ];
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	3308      	adds	r3, #8
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	61bb      	str	r3, [r7, #24]
    d = p[ 3 ];
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	330c      	adds	r3, #12
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	617b      	str	r3, [r7, #20]
    tmp = qFIS_Min( ( x - a )/( b - a ) , 1.0f );
 8003920:	6a39      	ldr	r1, [r7, #32]
 8003922:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003924:	f7fd f904 	bl	8000b30 <__aeabi_fsub>
 8003928:	4603      	mov	r3, r0
 800392a:	461c      	mov	r4, r3
 800392c:	6a39      	ldr	r1, [r7, #32]
 800392e:	69f8      	ldr	r0, [r7, #28]
 8003930:	f7fd f8fe 	bl	8000b30 <__aeabi_fsub>
 8003934:	4603      	mov	r3, r0
 8003936:	4619      	mov	r1, r3
 8003938:	4620      	mov	r0, r4
 800393a:	f7fd fab7 	bl	8000eac <__aeabi_fdiv>
 800393e:	4603      	mov	r3, r0
 8003940:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003944:	4618      	mov	r0, r3
 8003946:	f000 fed1 	bl	80046ec <qFIS_Min>
 800394a:	6138      	str	r0, [r7, #16]
    tmp = qFIS_Min( tmp, ( d - x )/( d - c ) ) ;
 800394c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800394e:	6978      	ldr	r0, [r7, #20]
 8003950:	f7fd f8ee 	bl	8000b30 <__aeabi_fsub>
 8003954:	4603      	mov	r3, r0
 8003956:	461c      	mov	r4, r3
 8003958:	69b9      	ldr	r1, [r7, #24]
 800395a:	6978      	ldr	r0, [r7, #20]
 800395c:	f7fd f8e8 	bl	8000b30 <__aeabi_fsub>
 8003960:	4603      	mov	r3, r0
 8003962:	4619      	mov	r1, r3
 8003964:	4620      	mov	r0, r4
 8003966:	f7fd faa1 	bl	8000eac <__aeabi_fdiv>
 800396a:	4603      	mov	r3, r0
 800396c:	4619      	mov	r1, r3
 800396e:	6938      	ldr	r0, [r7, #16]
 8003970:	f000 febc 	bl	80046ec <qFIS_Min>
 8003974:	6138      	str	r0, [r7, #16]

    return qFIS_Max( tmp , 0.0f );
 8003976:	f04f 0100 	mov.w	r1, #0
 800397a:	6938      	ldr	r0, [r7, #16]
 800397c:	f000 fed1 	bl	8004722 <qFIS_Max>
 8003980:	4603      	mov	r3, r0
}
 8003982:	4618      	mov	r0, r3
 8003984:	372c      	adds	r7, #44	; 0x2c
 8003986:	46bd      	mov	sp, r7
 8003988:	bd90      	pop	{r4, r7, pc}

0800398a <qFIS_GBellMF>:
/*============================================================================*/
static float qFIS_GBellMF( const qFIS_IO_Base_t * const in,
                           const float *p,
                           const size_t n )
{
 800398a:	b590      	push	{r4, r7, lr}
 800398c:	b089      	sub	sp, #36	; 0x24
 800398e:	af00      	add	r7, sp, #0
 8003990:	60f8      	str	r0, [r7, #12]
 8003992:	60b9      	str	r1, [r7, #8]
 8003994:	607a      	str	r2, [r7, #4]
    float a, b, c;
    float x = in[ 0 ].value;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	61fb      	str	r3, [r7, #28]
    (void)n;

    a = p[ 0 ];
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	61bb      	str	r3, [r7, #24]
    b = p[ 1 ];
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	3304      	adds	r3, #4
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	617b      	str	r3, [r7, #20]
    c = p[ 2 ];
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	3308      	adds	r3, #8
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	613b      	str	r3, [r7, #16]

    return ( 1.0f/( 1.0f + QLIB_POW( QLIB_ABS( ( x - c )/a ) , 2.0f*b ) ) );
 80039b2:	6939      	ldr	r1, [r7, #16]
 80039b4:	69f8      	ldr	r0, [r7, #28]
 80039b6:	f7fd f8bb 	bl	8000b30 <__aeabi_fsub>
 80039ba:	4603      	mov	r3, r0
 80039bc:	69b9      	ldr	r1, [r7, #24]
 80039be:	4618      	mov	r0, r3
 80039c0:	f7fd fa74 	bl	8000eac <__aeabi_fdiv>
 80039c4:	4603      	mov	r3, r0
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7fe fde0 	bl	800258c <qFFMath_Abs>
 80039cc:	4604      	mov	r4, r0
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	4619      	mov	r1, r3
 80039d2:	4618      	mov	r0, r3
 80039d4:	f7fd f8ae 	bl	8000b34 <__addsf3>
 80039d8:	4603      	mov	r3, r0
 80039da:	4619      	mov	r1, r3
 80039dc:	4620      	mov	r0, r4
 80039de:	f7fe ff87 	bl	80028f0 <qFFMath_Pow>
 80039e2:	4603      	mov	r3, r0
 80039e4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80039e8:	4618      	mov	r0, r3
 80039ea:	f7fd f8a3 	bl	8000b34 <__addsf3>
 80039ee:	4603      	mov	r3, r0
 80039f0:	4619      	mov	r1, r3
 80039f2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80039f6:	f7fd fa59 	bl	8000eac <__aeabi_fdiv>
 80039fa:	4603      	mov	r3, r0
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3724      	adds	r7, #36	; 0x24
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd90      	pop	{r4, r7, pc}

08003a04 <qFIS_GaussMF>:
/*============================================================================*/
static float qFIS_GaussMF( const qFIS_IO_Base_t * const in,
                           const float *p,
                           const size_t n )
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b088      	sub	sp, #32
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	607a      	str	r2, [r7, #4]
    float a, c, tmp;
    float x = in[ 0 ].value;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	61fb      	str	r3, [r7, #28]
    (void)n;

    a = p[ 0 ];
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	61bb      	str	r3, [r7, #24]
    c = p[ 1 ];
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	3304      	adds	r3, #4
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	617b      	str	r3, [r7, #20]
    tmp = ( x - c )/a;
 8003a24:	6979      	ldr	r1, [r7, #20]
 8003a26:	69f8      	ldr	r0, [r7, #28]
 8003a28:	f7fd f882 	bl	8000b30 <__aeabi_fsub>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	69b9      	ldr	r1, [r7, #24]
 8003a30:	4618      	mov	r0, r3
 8003a32:	f7fd fa3b 	bl	8000eac <__aeabi_fdiv>
 8003a36:	4603      	mov	r3, r0
 8003a38:	613b      	str	r3, [r7, #16]

    return QLIB_EXP( -0.5f*tmp*tmp );
 8003a3a:	f04f 413f 	mov.w	r1, #3204448256	; 0xbf000000
 8003a3e:	6938      	ldr	r0, [r7, #16]
 8003a40:	f7fd f980 	bl	8000d44 <__aeabi_fmul>
 8003a44:	4603      	mov	r3, r0
 8003a46:	6939      	ldr	r1, [r7, #16]
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f7fd f97b 	bl	8000d44 <__aeabi_fmul>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	4618      	mov	r0, r3
 8003a52:	f7fe ff25 	bl	80028a0 <qFFMath_Exp>
 8003a56:	4603      	mov	r3, r0
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3720      	adds	r7, #32
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <qFIS_Gauss2MF>:
/*============================================================================*/
static float qFIS_Gauss2MF( const qFIS_IO_Base_t * const in,
                            const float *p,
                            const size_t n )
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b08a      	sub	sp, #40	; 0x28
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	607a      	str	r2, [r7, #4]
    float c1, c2, f1, f2;
    float x = in[ 0 ].value;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	627b      	str	r3, [r7, #36]	; 0x24

    c1 = p[ 1 ];
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	3304      	adds	r3, #4
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	623b      	str	r3, [r7, #32]
    c2 = p[ 3 ];
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	330c      	adds	r3, #12
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	61fb      	str	r3, [r7, #28]
    f1 = ( x <= c1 ) ? qFIS_GaussMF( in , p, n ) : 1.0f;
 8003a82:	6a39      	ldr	r1, [r7, #32]
 8003a84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a86:	f7fd fb05 	bl	8001094 <__aeabi_fcmple>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d006      	beq.n	8003a9e <qFIS_Gauss2MF+0x3e>
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	68b9      	ldr	r1, [r7, #8]
 8003a94:	68f8      	ldr	r0, [r7, #12]
 8003a96:	f7ff ffb5 	bl	8003a04 <qFIS_GaussMF>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	e001      	b.n	8003aa2 <qFIS_Gauss2MF+0x42>
 8003a9e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003aa2:	61bb      	str	r3, [r7, #24]
    f2 = ( x <= c2 ) ? qFIS_GaussMF( in , &p[ 2 ], n ) : 1.0f;
 8003aa4:	69f9      	ldr	r1, [r7, #28]
 8003aa6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003aa8:	f7fd faf4 	bl	8001094 <__aeabi_fcmple>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d008      	beq.n	8003ac4 <qFIS_Gauss2MF+0x64>
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	3308      	adds	r3, #8
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	4619      	mov	r1, r3
 8003aba:	68f8      	ldr	r0, [r7, #12]
 8003abc:	f7ff ffa2 	bl	8003a04 <qFIS_GaussMF>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	e001      	b.n	8003ac8 <qFIS_Gauss2MF+0x68>
 8003ac4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003ac8:	617b      	str	r3, [r7, #20]

    return f1*f2;
 8003aca:	6979      	ldr	r1, [r7, #20]
 8003acc:	69b8      	ldr	r0, [r7, #24]
 8003ace:	f7fd f939 	bl	8000d44 <__aeabi_fmul>
 8003ad2:	4603      	mov	r3, r0
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3728      	adds	r7, #40	; 0x28
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <qFIS_SigMF>:
/*============================================================================*/
static float qFIS_SigMF( const qFIS_IO_Base_t * const in,
                         const float *p,
                         const size_t n )
{
 8003adc:	b590      	push	{r4, r7, lr}
 8003ade:	b089      	sub	sp, #36	; 0x24
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	607a      	str	r2, [r7, #4]
    float a, b;
    float x = in[ 0 ].value;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	61fb      	str	r3, [r7, #28]
    (void)n;

    a = p[ 0 ];
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	61bb      	str	r3, [r7, #24]
    b = p[ 1 ];
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	3304      	adds	r3, #4
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	617b      	str	r3, [r7, #20]

    return 1.0f/( 1.0f + QLIB_EXP( -a*( x - b ) ) );
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8003b02:	6979      	ldr	r1, [r7, #20]
 8003b04:	69f8      	ldr	r0, [r7, #28]
 8003b06:	f7fd f813 	bl	8000b30 <__aeabi_fsub>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	4620      	mov	r0, r4
 8003b10:	f7fd f918 	bl	8000d44 <__aeabi_fmul>
 8003b14:	4603      	mov	r3, r0
 8003b16:	4618      	mov	r0, r3
 8003b18:	f7fe fec2 	bl	80028a0 <qFFMath_Exp>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7fd f806 	bl	8000b34 <__addsf3>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003b30:	f7fd f9bc 	bl	8000eac <__aeabi_fdiv>
 8003b34:	4603      	mov	r3, r0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3724      	adds	r7, #36	; 0x24
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd90      	pop	{r4, r7, pc}

08003b3e <qFIS_TSigMF>:
/*============================================================================*/
static float qFIS_TSigMF( const qFIS_IO_Base_t * const in,
                          const float *p,
                          const size_t n )
{
 8003b3e:	b580      	push	{r7, lr}
 8003b40:	b08a      	sub	sp, #40	; 0x28
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	60f8      	str	r0, [r7, #12]
 8003b46:	60b9      	str	r1, [r7, #8]
 8003b48:	607a      	str	r2, [r7, #4]
    float a, b, y;
    float x = in[ 0 ].value;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	623b      	str	r3, [r7, #32]
    float min = in[ 0 ].min;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	61fb      	str	r3, [r7, #28]
    float max = in[ 0 ].max;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	61bb      	str	r3, [r7, #24]
    (void)n;

    a = p[ 0 ]; /*slope*/
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	617b      	str	r3, [r7, #20]
    b = p[ 1 ]; /*inflection*/
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	3304      	adds	r3, #4
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	613b      	str	r3, [r7, #16]
    if ( qFMathEx_Equal( x, 1.0f ) ) {
 8003b6a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003b6e:	6a38      	ldr	r0, [r7, #32]
 8003b70:	f000 fea9 	bl	80048c6 <qFMathEx_Equal>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00d      	beq.n	8003b96 <qFIS_TSigMF+0x58>
        if ( a >= 0.0f ) {
 8003b7a:	f04f 0100 	mov.w	r1, #0
 8003b7e:	6978      	ldr	r0, [r7, #20]
 8003b80:	f7fd fa92 	bl	80010a8 <__aeabi_fcmpge>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d002      	beq.n	8003b90 <qFIS_TSigMF+0x52>
            y = max;
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b8e:	e033      	b.n	8003bf8 <qFIS_TSigMF+0xba>
        }
        else {
            y = min;
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	627b      	str	r3, [r7, #36]	; 0x24
 8003b94:	e030      	b.n	8003bf8 <qFIS_TSigMF+0xba>
        }
    }
    else if ( qFMathEx_Equal( x, 0.0f ) ) {
 8003b96:	f04f 0100 	mov.w	r1, #0
 8003b9a:	6a38      	ldr	r0, [r7, #32]
 8003b9c:	f000 fe93 	bl	80048c6 <qFMathEx_Equal>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d00d      	beq.n	8003bc2 <qFIS_TSigMF+0x84>
        if ( a >= 0.0f ) {
 8003ba6:	f04f 0100 	mov.w	r1, #0
 8003baa:	6978      	ldr	r0, [r7, #20]
 8003bac:	f7fd fa7c 	bl	80010a8 <__aeabi_fcmpge>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d002      	beq.n	8003bbc <qFIS_TSigMF+0x7e>
            y = min;
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	627b      	str	r3, [r7, #36]	; 0x24
 8003bba:	e01d      	b.n	8003bf8 <qFIS_TSigMF+0xba>
        }
        else {
            y = max;
 8003bbc:	69bb      	ldr	r3, [r7, #24]
 8003bbe:	627b      	str	r3, [r7, #36]	; 0x24
 8003bc0:	e01a      	b.n	8003bf8 <qFIS_TSigMF+0xba>
        }
    }
    else {
        /*cstat -MISRAC2012-Dir-4.11_a*/
        y = b - ( QLIB_LOG( ( 1.0f/x ) - 1.0f )/a );
 8003bc2:	6a39      	ldr	r1, [r7, #32]
 8003bc4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003bc8:	f7fd f970 	bl	8000eac <__aeabi_fdiv>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f7fc ffac 	bl	8000b30 <__aeabi_fsub>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7fe fe74 	bl	80028c8 <qFFMath_Log>
 8003be0:	4603      	mov	r3, r0
 8003be2:	6979      	ldr	r1, [r7, #20]
 8003be4:	4618      	mov	r0, r3
 8003be6:	f7fd f961 	bl	8000eac <__aeabi_fdiv>
 8003bea:	4603      	mov	r3, r0
 8003bec:	4619      	mov	r1, r3
 8003bee:	6938      	ldr	r0, [r7, #16]
 8003bf0:	f7fc ff9e 	bl	8000b30 <__aeabi_fsub>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	627b      	str	r3, [r7, #36]	; 0x24
        /*cstat +MISRAC2012-Dir-4.11_a*/
    }

    return y;
 8003bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3728      	adds	r7, #40	; 0x28
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <qFIS_DSigMF>:
/*============================================================================*/
static float qFIS_DSigMF( const qFIS_IO_Base_t * const in,
                          const float *p,
                          const size_t n )
{
 8003c02:	b590      	push	{r4, r7, lr}
 8003c04:	b085      	sub	sp, #20
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	60f8      	str	r0, [r7, #12]
 8003c0a:	60b9      	str	r1, [r7, #8]
 8003c0c:	607a      	str	r2, [r7, #4]
    return QLIB_ABS( qFIS_SigMF( in , p, n ) - qFIS_SigMF( in , &p[ 2 ], n ) );
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	68b9      	ldr	r1, [r7, #8]
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	f7ff ff62 	bl	8003adc <qFIS_SigMF>
 8003c18:	4604      	mov	r4, r0
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	3308      	adds	r3, #8
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	4619      	mov	r1, r3
 8003c22:	68f8      	ldr	r0, [r7, #12]
 8003c24:	f7ff ff5a 	bl	8003adc <qFIS_SigMF>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	4620      	mov	r0, r4
 8003c2e:	f7fc ff7f 	bl	8000b30 <__aeabi_fsub>
 8003c32:	4603      	mov	r3, r0
 8003c34:	4618      	mov	r0, r3
 8003c36:	f7fe fca9 	bl	800258c <qFFMath_Abs>
 8003c3a:	4603      	mov	r3, r0
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3714      	adds	r7, #20
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd90      	pop	{r4, r7, pc}

08003c44 <qFIS_PSigMF>:
/*============================================================================*/
static float qFIS_PSigMF( const qFIS_IO_Base_t * const in,
                          const float *p,
                          const size_t n )
{
 8003c44:	b590      	push	{r4, r7, lr}
 8003c46:	b085      	sub	sp, #20
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	607a      	str	r2, [r7, #4]
    return QLIB_ABS( qFIS_SigMF( in , p, n )*qFIS_SigMF( in , &p[ 2 ], n ) );
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	68b9      	ldr	r1, [r7, #8]
 8003c54:	68f8      	ldr	r0, [r7, #12]
 8003c56:	f7ff ff41 	bl	8003adc <qFIS_SigMF>
 8003c5a:	4604      	mov	r4, r0
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	3308      	adds	r3, #8
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	4619      	mov	r1, r3
 8003c64:	68f8      	ldr	r0, [r7, #12]
 8003c66:	f7ff ff39 	bl	8003adc <qFIS_SigMF>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	4620      	mov	r0, r4
 8003c70:	f7fd f868 	bl	8000d44 <__aeabi_fmul>
 8003c74:	4603      	mov	r3, r0
 8003c76:	4618      	mov	r0, r3
 8003c78:	f7fe fc88 	bl	800258c <qFFMath_Abs>
 8003c7c:	4603      	mov	r3, r0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3714      	adds	r7, #20
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd90      	pop	{r4, r7, pc}

08003c86 <qFIS_SMF>:
/*============================================================================*/
static float qFIS_SMF( const qFIS_IO_Base_t * const in,
                       const float *p,
                       const size_t n )
{
 8003c86:	b590      	push	{r4, r7, lr}
 8003c88:	b08b      	sub	sp, #44	; 0x2c
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	60f8      	str	r0, [r7, #12]
 8003c8e:	60b9      	str	r1, [r7, #8]
 8003c90:	607a      	str	r2, [r7, #4]
    float a, b, tmp, y;
    float x = in[ 0 ].value;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	623b      	str	r3, [r7, #32]
    (void)n;

    a = p[ 0 ];
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	61fb      	str	r3, [r7, #28]
    b = p[ 1 ];
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	3304      	adds	r3, #4
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	61bb      	str	r3, [r7, #24]
    if ( x <= a ) {
 8003ca6:	69f9      	ldr	r1, [r7, #28]
 8003ca8:	6a38      	ldr	r0, [r7, #32]
 8003caa:	f7fd f9f3 	bl	8001094 <__aeabi_fcmple>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d003      	beq.n	8003cbc <qFIS_SMF+0x36>
        y =  0.0f;
 8003cb4:	f04f 0300 	mov.w	r3, #0
 8003cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8003cba:	e081      	b.n	8003dc0 <qFIS_SMF+0x13a>
    }
    else if ( x >= b ) {
 8003cbc:	69b9      	ldr	r1, [r7, #24]
 8003cbe:	6a38      	ldr	r0, [r7, #32]
 8003cc0:	f7fd f9f2 	bl	80010a8 <__aeabi_fcmpge>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d003      	beq.n	8003cd2 <qFIS_SMF+0x4c>
        y = 1.0f;
 8003cca:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003cce:	627b      	str	r3, [r7, #36]	; 0x24
 8003cd0:	e076      	b.n	8003dc0 <qFIS_SMF+0x13a>
    }
    else if ( ( x >= a ) && ( x <= ( ( a + b )*0.5f ) ) ) {
 8003cd2:	69f9      	ldr	r1, [r7, #28]
 8003cd4:	6a38      	ldr	r0, [r7, #32]
 8003cd6:	f7fd f9e7 	bl	80010a8 <__aeabi_fcmpge>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d02f      	beq.n	8003d40 <qFIS_SMF+0xba>
 8003ce0:	69b9      	ldr	r1, [r7, #24]
 8003ce2:	69f8      	ldr	r0, [r7, #28]
 8003ce4:	f7fc ff26 	bl	8000b34 <__addsf3>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f7fd f828 	bl	8000d44 <__aeabi_fmul>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	6a38      	ldr	r0, [r7, #32]
 8003cfa:	f7fd f9cb 	bl	8001094 <__aeabi_fcmple>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d01d      	beq.n	8003d40 <qFIS_SMF+0xba>
        tmp = ( x - a )/( b - a );
 8003d04:	69f9      	ldr	r1, [r7, #28]
 8003d06:	6a38      	ldr	r0, [r7, #32]
 8003d08:	f7fc ff12 	bl	8000b30 <__aeabi_fsub>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	461c      	mov	r4, r3
 8003d10:	69f9      	ldr	r1, [r7, #28]
 8003d12:	69b8      	ldr	r0, [r7, #24]
 8003d14:	f7fc ff0c 	bl	8000b30 <__aeabi_fsub>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	4620      	mov	r0, r4
 8003d1e:	f7fd f8c5 	bl	8000eac <__aeabi_fdiv>
 8003d22:	4603      	mov	r3, r0
 8003d24:	617b      	str	r3, [r7, #20]
        y = 2.0f*tmp*tmp;
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	4619      	mov	r1, r3
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f7fc ff02 	bl	8000b34 <__addsf3>
 8003d30:	4603      	mov	r3, r0
 8003d32:	4619      	mov	r1, r3
 8003d34:	6978      	ldr	r0, [r7, #20]
 8003d36:	f7fd f805 	bl	8000d44 <__aeabi_fmul>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	627b      	str	r3, [r7, #36]	; 0x24
 8003d3e:	e03f      	b.n	8003dc0 <qFIS_SMF+0x13a>
    }
    else if ( ( x <= b ) && ( x >= ( ( a + b )*0.5f ) ) ) {
 8003d40:	69b9      	ldr	r1, [r7, #24]
 8003d42:	6a38      	ldr	r0, [r7, #32]
 8003d44:	f7fd f9a6 	bl	8001094 <__aeabi_fcmple>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d035      	beq.n	8003dba <qFIS_SMF+0x134>
 8003d4e:	69b9      	ldr	r1, [r7, #24]
 8003d50:	69f8      	ldr	r0, [r7, #28]
 8003d52:	f7fc feef 	bl	8000b34 <__addsf3>
 8003d56:	4603      	mov	r3, r0
 8003d58:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f7fc fff1 	bl	8000d44 <__aeabi_fmul>
 8003d62:	4603      	mov	r3, r0
 8003d64:	4619      	mov	r1, r3
 8003d66:	6a38      	ldr	r0, [r7, #32]
 8003d68:	f7fd f99e 	bl	80010a8 <__aeabi_fcmpge>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d023      	beq.n	8003dba <qFIS_SMF+0x134>
        tmp = ( x - b )/( b - a );
 8003d72:	69b9      	ldr	r1, [r7, #24]
 8003d74:	6a38      	ldr	r0, [r7, #32]
 8003d76:	f7fc fedb 	bl	8000b30 <__aeabi_fsub>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	461c      	mov	r4, r3
 8003d7e:	69f9      	ldr	r1, [r7, #28]
 8003d80:	69b8      	ldr	r0, [r7, #24]
 8003d82:	f7fc fed5 	bl	8000b30 <__aeabi_fsub>
 8003d86:	4603      	mov	r3, r0
 8003d88:	4619      	mov	r1, r3
 8003d8a:	4620      	mov	r0, r4
 8003d8c:	f7fd f88e 	bl	8000eac <__aeabi_fdiv>
 8003d90:	4603      	mov	r3, r0
 8003d92:	617b      	str	r3, [r7, #20]
        y = ( 1.0f - ( 2.0f*tmp*tmp ) );
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	4619      	mov	r1, r3
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f7fc fecb 	bl	8000b34 <__addsf3>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	6979      	ldr	r1, [r7, #20]
 8003da2:	4618      	mov	r0, r3
 8003da4:	f7fc ffce 	bl	8000d44 <__aeabi_fmul>
 8003da8:	4603      	mov	r3, r0
 8003daa:	4619      	mov	r1, r3
 8003dac:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003db0:	f7fc febe 	bl	8000b30 <__aeabi_fsub>
 8003db4:	4603      	mov	r3, r0
 8003db6:	627b      	str	r3, [r7, #36]	; 0x24
 8003db8:	e002      	b.n	8003dc0 <qFIS_SMF+0x13a>
    }
    else {
        y = 0.0f;
 8003dba:	f04f 0300 	mov.w	r3, #0
 8003dbe:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return y;
 8003dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	372c      	adds	r7, #44	; 0x2c
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd90      	pop	{r4, r7, pc}

08003dca <qFIS_TSMF>:
/*============================================================================*/
static float qFIS_TSMF( const qFIS_IO_Base_t * const in,
                        const float *p,
                        const size_t n )
{
 8003dca:	b590      	push	{r4, r7, lr}
 8003dcc:	b091      	sub	sp, #68	; 0x44
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	60f8      	str	r0, [r7, #12]
 8003dd2:	60b9      	str	r1, [r7, #8]
 8003dd4:	607a      	str	r2, [r7, #4]
    float diff, a, b, ta, tb, ma, mb;
    float x = in[ 0 ].value;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	63fb      	str	r3, [r7, #60]	; 0x3c
    (void)n;
    qFIS_IO_Base_t tmp;

    a = p[ 0 ]; /*start*/
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	63bb      	str	r3, [r7, #56]	; 0x38
    b = p[ 1 ]; /*end*/
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	3304      	adds	r3, #4
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	637b      	str	r3, [r7, #52]	; 0x34
    diff = b - a;
 8003dea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003dec:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003dee:	f7fc fe9f 	bl	8000b30 <__aeabi_fsub>
 8003df2:	4603      	mov	r3, r0
 8003df4:	633b      	str	r3, [r7, #48]	; 0x30
    diff = 0.5f*diff*diff;
 8003df6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003dfa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003dfc:	f7fc ffa2 	bl	8000d44 <__aeabi_fmul>
 8003e00:	4603      	mov	r3, r0
 8003e02:	4619      	mov	r1, r3
 8003e04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e06:	f7fc ff9d 	bl	8000d44 <__aeabi_fmul>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	633b      	str	r3, [r7, #48]	; 0x30
    /*cstat -MISRAC2012-Dir-4.11_a -MISRAC2012-Dir-4.11_b*/
    ta = a + QLIB_SQRT( x*diff );
 8003e0e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e10:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003e12:	f7fc ff97 	bl	8000d44 <__aeabi_fmul>
 8003e16:	4603      	mov	r3, r0
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7fe fbcc 	bl	80025b6 <qFFMath_Sqrt>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	4619      	mov	r1, r3
 8003e22:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003e24:	f7fc fe86 	bl	8000b34 <__addsf3>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    tmp.value = ta;
 8003e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e2e:	61fb      	str	r3, [r7, #28]
    ma = qFIS_SMF( &tmp, p, n );
 8003e30:	f107 0314 	add.w	r3, r7, #20
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	68b9      	ldr	r1, [r7, #8]
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f7ff ff24 	bl	8003c86 <qFIS_SMF>
 8003e3e:	62b8      	str	r0, [r7, #40]	; 0x28
    tb = b + QLIB_SQRT( -( x - 1.0f )*diff );
 8003e40:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003e44:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003e46:	f7fc fe73 	bl	8000b30 <__aeabi_fsub>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003e50:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7fc ff76 	bl	8000d44 <__aeabi_fmul>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7fe fbab 	bl	80025b6 <qFFMath_Sqrt>
 8003e60:	4603      	mov	r3, r0
 8003e62:	4619      	mov	r1, r3
 8003e64:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003e66:	f7fc fe65 	bl	8000b34 <__addsf3>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	627b      	str	r3, [r7, #36]	; 0x24
    tmp.value = tb;
 8003e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e70:	61fb      	str	r3, [r7, #28]
    mb = qFIS_SMF( &tmp, p, n );
 8003e72:	f107 0314 	add.w	r3, r7, #20
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	68b9      	ldr	r1, [r7, #8]
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7ff ff03 	bl	8003c86 <qFIS_SMF>
 8003e80:	6238      	str	r0, [r7, #32]
    /*cstat +MISRAC2012-Dir-4.11_a +MISRAC2012-Dir-4.11_b*/
    return  ( QLIB_ABS( x - ma ) < QLIB_ABS( x - mb ) ) ? ta : tb;
 8003e82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e84:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003e86:	f7fc fe53 	bl	8000b30 <__aeabi_fsub>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f7fe fb7d 	bl	800258c <qFFMath_Abs>
 8003e92:	4604      	mov	r4, r0
 8003e94:	6a39      	ldr	r1, [r7, #32]
 8003e96:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003e98:	f7fc fe4a 	bl	8000b30 <__aeabi_fsub>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f7fe fb74 	bl	800258c <qFFMath_Abs>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	4620      	mov	r0, r4
 8003eaa:	f7fd f8e9 	bl	8001080 <__aeabi_fcmplt>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d001      	beq.n	8003eb8 <qFIS_TSMF+0xee>
 8003eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb6:	e000      	b.n	8003eba <qFIS_TSMF+0xf0>
 8003eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3744      	adds	r7, #68	; 0x44
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd90      	pop	{r4, r7, pc}

08003ec2 <qFIS_ZMF>:
/*============================================================================*/
static float qFIS_ZMF( const qFIS_IO_Base_t * const in,
                       const float *p,
                       const size_t n )
{
 8003ec2:	b590      	push	{r4, r7, lr}
 8003ec4:	b08b      	sub	sp, #44	; 0x2c
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	60f8      	str	r0, [r7, #12]
 8003eca:	60b9      	str	r1, [r7, #8]
 8003ecc:	607a      	str	r2, [r7, #4]
    float a, b, tmp, y;
    float x = in[ 0 ].value;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	623b      	str	r3, [r7, #32]
    (void)n;

    a = p[ 0 ];
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	61fb      	str	r3, [r7, #28]
    b = p[ 1 ];
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	3304      	adds	r3, #4
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	61bb      	str	r3, [r7, #24]
    if ( x <= a ) {
 8003ee2:	69f9      	ldr	r1, [r7, #28]
 8003ee4:	6a38      	ldr	r0, [r7, #32]
 8003ee6:	f7fd f8d5 	bl	8001094 <__aeabi_fcmple>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d003      	beq.n	8003ef8 <qFIS_ZMF+0x36>
        y = 1.0f;
 8003ef0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003ef4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ef6:	e081      	b.n	8003ffc <qFIS_ZMF+0x13a>
    }
    else if ( x >= b ) {
 8003ef8:	69b9      	ldr	r1, [r7, #24]
 8003efa:	6a38      	ldr	r0, [r7, #32]
 8003efc:	f7fd f8d4 	bl	80010a8 <__aeabi_fcmpge>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d003      	beq.n	8003f0e <qFIS_ZMF+0x4c>
        y = 0.0f;
 8003f06:	f04f 0300 	mov.w	r3, #0
 8003f0a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f0c:	e076      	b.n	8003ffc <qFIS_ZMF+0x13a>
    }
    else if ( ( x >= a ) && ( x <= ( ( a + b )*0.5f ) ) ) {
 8003f0e:	69f9      	ldr	r1, [r7, #28]
 8003f10:	6a38      	ldr	r0, [r7, #32]
 8003f12:	f7fd f8c9 	bl	80010a8 <__aeabi_fcmpge>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d035      	beq.n	8003f88 <qFIS_ZMF+0xc6>
 8003f1c:	69b9      	ldr	r1, [r7, #24]
 8003f1e:	69f8      	ldr	r0, [r7, #28]
 8003f20:	f7fc fe08 	bl	8000b34 <__addsf3>
 8003f24:	4603      	mov	r3, r0
 8003f26:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7fc ff0a 	bl	8000d44 <__aeabi_fmul>
 8003f30:	4603      	mov	r3, r0
 8003f32:	4619      	mov	r1, r3
 8003f34:	6a38      	ldr	r0, [r7, #32]
 8003f36:	f7fd f8ad 	bl	8001094 <__aeabi_fcmple>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d023      	beq.n	8003f88 <qFIS_ZMF+0xc6>
        tmp = ( x - a )/( b - a );
 8003f40:	69f9      	ldr	r1, [r7, #28]
 8003f42:	6a38      	ldr	r0, [r7, #32]
 8003f44:	f7fc fdf4 	bl	8000b30 <__aeabi_fsub>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	461c      	mov	r4, r3
 8003f4c:	69f9      	ldr	r1, [r7, #28]
 8003f4e:	69b8      	ldr	r0, [r7, #24]
 8003f50:	f7fc fdee 	bl	8000b30 <__aeabi_fsub>
 8003f54:	4603      	mov	r3, r0
 8003f56:	4619      	mov	r1, r3
 8003f58:	4620      	mov	r0, r4
 8003f5a:	f7fc ffa7 	bl	8000eac <__aeabi_fdiv>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	617b      	str	r3, [r7, #20]
        y = 1.0f - ( 2.0f*tmp*tmp );
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	4619      	mov	r1, r3
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7fc fde4 	bl	8000b34 <__addsf3>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	6979      	ldr	r1, [r7, #20]
 8003f70:	4618      	mov	r0, r3
 8003f72:	f7fc fee7 	bl	8000d44 <__aeabi_fmul>
 8003f76:	4603      	mov	r3, r0
 8003f78:	4619      	mov	r1, r3
 8003f7a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003f7e:	f7fc fdd7 	bl	8000b30 <__aeabi_fsub>
 8003f82:	4603      	mov	r3, r0
 8003f84:	627b      	str	r3, [r7, #36]	; 0x24
 8003f86:	e039      	b.n	8003ffc <qFIS_ZMF+0x13a>
    }
    else if ( ( x <= b ) && ( x >= ( ( a + b )*0.5f ) ) ) {
 8003f88:	69b9      	ldr	r1, [r7, #24]
 8003f8a:	6a38      	ldr	r0, [r7, #32]
 8003f8c:	f7fd f882 	bl	8001094 <__aeabi_fcmple>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d02f      	beq.n	8003ff6 <qFIS_ZMF+0x134>
 8003f96:	69b9      	ldr	r1, [r7, #24]
 8003f98:	69f8      	ldr	r0, [r7, #28]
 8003f9a:	f7fc fdcb 	bl	8000b34 <__addsf3>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f7fc fecd 	bl	8000d44 <__aeabi_fmul>
 8003faa:	4603      	mov	r3, r0
 8003fac:	4619      	mov	r1, r3
 8003fae:	6a38      	ldr	r0, [r7, #32]
 8003fb0:	f7fd f87a 	bl	80010a8 <__aeabi_fcmpge>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d01d      	beq.n	8003ff6 <qFIS_ZMF+0x134>
        tmp = ( x - b )/( b - a );
 8003fba:	69b9      	ldr	r1, [r7, #24]
 8003fbc:	6a38      	ldr	r0, [r7, #32]
 8003fbe:	f7fc fdb7 	bl	8000b30 <__aeabi_fsub>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	461c      	mov	r4, r3
 8003fc6:	69f9      	ldr	r1, [r7, #28]
 8003fc8:	69b8      	ldr	r0, [r7, #24]
 8003fca:	f7fc fdb1 	bl	8000b30 <__aeabi_fsub>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	4620      	mov	r0, r4
 8003fd4:	f7fc ff6a 	bl	8000eac <__aeabi_fdiv>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	617b      	str	r3, [r7, #20]
        y = 2.0f*tmp*tmp;
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	4619      	mov	r1, r3
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f7fc fda7 	bl	8000b34 <__addsf3>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	4619      	mov	r1, r3
 8003fea:	6978      	ldr	r0, [r7, #20]
 8003fec:	f7fc feaa 	bl	8000d44 <__aeabi_fmul>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ff4:	e002      	b.n	8003ffc <qFIS_ZMF+0x13a>
    }
    else {
        y = 0.0f;
 8003ff6:	f04f 0300 	mov.w	r3, #0
 8003ffa:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return y;
 8003ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	372c      	adds	r7, #44	; 0x2c
 8004002:	46bd      	mov	sp, r7
 8004004:	bd90      	pop	{r4, r7, pc}

08004006 <qFIS_LinSMF>:
/*============================================================================*/
static float qFIS_LinSMF( const qFIS_IO_Base_t * const in,
                          const float *p,
                          const size_t n )
{
 8004006:	b590      	push	{r4, r7, lr}
 8004008:	b089      	sub	sp, #36	; 0x24
 800400a:	af00      	add	r7, sp, #0
 800400c:	60f8      	str	r0, [r7, #12]
 800400e:	60b9      	str	r1, [r7, #8]
 8004010:	607a      	str	r2, [r7, #4]
    float a, b, y;
    float x = in[ 0 ].value;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	61bb      	str	r3, [r7, #24]
    (void)n;

    a = p[ 0 ];
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	617b      	str	r3, [r7, #20]
    b = p[ 1 ];
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	3304      	adds	r3, #4
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	613b      	str	r3, [r7, #16]
    if ( a < b ) {
 8004026:	6939      	ldr	r1, [r7, #16]
 8004028:	6978      	ldr	r0, [r7, #20]
 800402a:	f7fd f829 	bl	8001080 <__aeabi_fcmplt>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d027      	beq.n	8004084 <qFIS_LinSMF+0x7e>
        if ( x < a ) {
 8004034:	6979      	ldr	r1, [r7, #20]
 8004036:	69b8      	ldr	r0, [r7, #24]
 8004038:	f7fd f822 	bl	8001080 <__aeabi_fcmplt>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d003      	beq.n	800404a <qFIS_LinSMF+0x44>
            y = 0.0f;
 8004042:	f04f 0300 	mov.w	r3, #0
 8004046:	61fb      	str	r3, [r7, #28]
 8004048:	e034      	b.n	80040b4 <qFIS_LinSMF+0xae>
        }
        else if ( x > b ) {
 800404a:	6939      	ldr	r1, [r7, #16]
 800404c:	69b8      	ldr	r0, [r7, #24]
 800404e:	f7fd f835 	bl	80010bc <__aeabi_fcmpgt>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d003      	beq.n	8004060 <qFIS_LinSMF+0x5a>
            y = 1.0f;
 8004058:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800405c:	61fb      	str	r3, [r7, #28]
 800405e:	e029      	b.n	80040b4 <qFIS_LinSMF+0xae>
        }
        else {
            y = ( x - a )/( b - a );
 8004060:	6979      	ldr	r1, [r7, #20]
 8004062:	69b8      	ldr	r0, [r7, #24]
 8004064:	f7fc fd64 	bl	8000b30 <__aeabi_fsub>
 8004068:	4603      	mov	r3, r0
 800406a:	461c      	mov	r4, r3
 800406c:	6979      	ldr	r1, [r7, #20]
 800406e:	6938      	ldr	r0, [r7, #16]
 8004070:	f7fc fd5e 	bl	8000b30 <__aeabi_fsub>
 8004074:	4603      	mov	r3, r0
 8004076:	4619      	mov	r1, r3
 8004078:	4620      	mov	r0, r4
 800407a:	f7fc ff17 	bl	8000eac <__aeabi_fdiv>
 800407e:	4603      	mov	r3, r0
 8004080:	61fb      	str	r3, [r7, #28]
 8004082:	e017      	b.n	80040b4 <qFIS_LinSMF+0xae>
        }
    }
    else if ( qFMathEx_Equal( a, b ) ) {
 8004084:	6939      	ldr	r1, [r7, #16]
 8004086:	6978      	ldr	r0, [r7, #20]
 8004088:	f000 fc1d 	bl	80048c6 <qFMathEx_Equal>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00d      	beq.n	80040ae <qFIS_LinSMF+0xa8>
        y = ( x < a ) ? 0.0f : 1.0f;
 8004092:	6979      	ldr	r1, [r7, #20]
 8004094:	69b8      	ldr	r0, [r7, #24]
 8004096:	f7fc fff3 	bl	8001080 <__aeabi_fcmplt>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d002      	beq.n	80040a6 <qFIS_LinSMF+0xa0>
 80040a0:	f04f 0300 	mov.w	r3, #0
 80040a4:	e001      	b.n	80040aa <qFIS_LinSMF+0xa4>
 80040a6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80040aa:	61fb      	str	r3, [r7, #28]
 80040ac:	e002      	b.n	80040b4 <qFIS_LinSMF+0xae>
    }
    else {
        y = 0.0f;
 80040ae:	f04f 0300 	mov.w	r3, #0
 80040b2:	61fb      	str	r3, [r7, #28]
    }

    return y;
 80040b4:	69fb      	ldr	r3, [r7, #28]
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3724      	adds	r7, #36	; 0x24
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd90      	pop	{r4, r7, pc}

080040be <qFIS_LinZMF>:
/*============================================================================*/
static float qFIS_LinZMF( const qFIS_IO_Base_t * const in,
                          const float *p,
                          const size_t n )
{
 80040be:	b590      	push	{r4, r7, lr}
 80040c0:	b089      	sub	sp, #36	; 0x24
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	60f8      	str	r0, [r7, #12]
 80040c6:	60b9      	str	r1, [r7, #8]
 80040c8:	607a      	str	r2, [r7, #4]
    float a, b, y;
    float x = in[ 0 ].value;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	61bb      	str	r3, [r7, #24]
    (void)n;

    a = p[ 0 ];
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	617b      	str	r3, [r7, #20]
    b = p[ 1 ];
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	3304      	adds	r3, #4
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	613b      	str	r3, [r7, #16]
    if ( a < b ) {
 80040de:	6939      	ldr	r1, [r7, #16]
 80040e0:	6978      	ldr	r0, [r7, #20]
 80040e2:	f7fc ffcd 	bl	8001080 <__aeabi_fcmplt>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d027      	beq.n	800413c <qFIS_LinZMF+0x7e>
        if ( x < a ) {
 80040ec:	6979      	ldr	r1, [r7, #20]
 80040ee:	69b8      	ldr	r0, [r7, #24]
 80040f0:	f7fc ffc6 	bl	8001080 <__aeabi_fcmplt>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d003      	beq.n	8004102 <qFIS_LinZMF+0x44>
            y = 1.0f;
 80040fa:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80040fe:	61fb      	str	r3, [r7, #28]
 8004100:	e034      	b.n	800416c <qFIS_LinZMF+0xae>
        }
        else if ( x > b ) {
 8004102:	6939      	ldr	r1, [r7, #16]
 8004104:	69b8      	ldr	r0, [r7, #24]
 8004106:	f7fc ffd9 	bl	80010bc <__aeabi_fcmpgt>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d003      	beq.n	8004118 <qFIS_LinZMF+0x5a>
            y = 0.0f;
 8004110:	f04f 0300 	mov.w	r3, #0
 8004114:	61fb      	str	r3, [r7, #28]
 8004116:	e029      	b.n	800416c <qFIS_LinZMF+0xae>
        }
        else {
            y = ( a - x )/( a - b );
 8004118:	69b9      	ldr	r1, [r7, #24]
 800411a:	6978      	ldr	r0, [r7, #20]
 800411c:	f7fc fd08 	bl	8000b30 <__aeabi_fsub>
 8004120:	4603      	mov	r3, r0
 8004122:	461c      	mov	r4, r3
 8004124:	6939      	ldr	r1, [r7, #16]
 8004126:	6978      	ldr	r0, [r7, #20]
 8004128:	f7fc fd02 	bl	8000b30 <__aeabi_fsub>
 800412c:	4603      	mov	r3, r0
 800412e:	4619      	mov	r1, r3
 8004130:	4620      	mov	r0, r4
 8004132:	f7fc febb 	bl	8000eac <__aeabi_fdiv>
 8004136:	4603      	mov	r3, r0
 8004138:	61fb      	str	r3, [r7, #28]
 800413a:	e017      	b.n	800416c <qFIS_LinZMF+0xae>
        }
    }
    else if ( qFMathEx_Equal( a, b ) ) {
 800413c:	6939      	ldr	r1, [r7, #16]
 800413e:	6978      	ldr	r0, [r7, #20]
 8004140:	f000 fbc1 	bl	80048c6 <qFMathEx_Equal>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d00d      	beq.n	8004166 <qFIS_LinZMF+0xa8>
        y = ( x < a ) ? 1.0f : 0.0f;
 800414a:	6979      	ldr	r1, [r7, #20]
 800414c:	69b8      	ldr	r0, [r7, #24]
 800414e:	f7fc ff97 	bl	8001080 <__aeabi_fcmplt>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d002      	beq.n	800415e <qFIS_LinZMF+0xa0>
 8004158:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800415c:	e001      	b.n	8004162 <qFIS_LinZMF+0xa4>
 800415e:	f04f 0300 	mov.w	r3, #0
 8004162:	61fb      	str	r3, [r7, #28]
 8004164:	e002      	b.n	800416c <qFIS_LinZMF+0xae>
    }
    else {
        y = 0.0f;
 8004166:	f04f 0300 	mov.w	r3, #0
 800416a:	61fb      	str	r3, [r7, #28]
    }

    return y;
 800416c:	69fb      	ldr	r3, [r7, #28]
}
 800416e:	4618      	mov	r0, r3
 8004170:	3724      	adds	r7, #36	; 0x24
 8004172:	46bd      	mov	sp, r7
 8004174:	bd90      	pop	{r4, r7, pc}

08004176 <qFIS_TZMF>:
/*============================================================================*/
static float qFIS_TZMF( const qFIS_IO_Base_t * const in,
                        const float *p,
                        const size_t n )
{
 8004176:	b590      	push	{r4, r7, lr}
 8004178:	b091      	sub	sp, #68	; 0x44
 800417a:	af00      	add	r7, sp, #0
 800417c:	60f8      	str	r0, [r7, #12]
 800417e:	60b9      	str	r1, [r7, #8]
 8004180:	607a      	str	r2, [r7, #4]
    float diff, a, b, ta, tb, ma, mb;
    float x = in[ 0 ].value;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	63fb      	str	r3, [r7, #60]	; 0x3c
    (void)n;
    qFIS_IO_Base_t tmp;

    a = p[ 0 ]; /*start*/
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	63bb      	str	r3, [r7, #56]	; 0x38
    b = p[ 1 ]; /*end*/
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	3304      	adds	r3, #4
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	637b      	str	r3, [r7, #52]	; 0x34
    diff = b - a;
 8004196:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004198:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800419a:	f7fc fcc9 	bl	8000b30 <__aeabi_fsub>
 800419e:	4603      	mov	r3, r0
 80041a0:	633b      	str	r3, [r7, #48]	; 0x30
    diff = 0.5f*diff*diff;
 80041a2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80041a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80041a8:	f7fc fdcc 	bl	8000d44 <__aeabi_fmul>
 80041ac:	4603      	mov	r3, r0
 80041ae:	4619      	mov	r1, r3
 80041b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80041b2:	f7fc fdc7 	bl	8000d44 <__aeabi_fmul>
 80041b6:	4603      	mov	r3, r0
 80041b8:	633b      	str	r3, [r7, #48]	; 0x30
    /*cstat -MISRAC2012-Dir-4.11_a -MISRAC2012-Dir-4.11_b*/
    ta = a + QLIB_SQRT( -( x - 1.0f )*diff );
 80041ba:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80041be:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80041c0:	f7fc fcb6 	bl	8000b30 <__aeabi_fsub>
 80041c4:	4603      	mov	r3, r0
 80041c6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80041ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80041cc:	4618      	mov	r0, r3
 80041ce:	f7fc fdb9 	bl	8000d44 <__aeabi_fmul>
 80041d2:	4603      	mov	r3, r0
 80041d4:	4618      	mov	r0, r3
 80041d6:	f7fe f9ee 	bl	80025b6 <qFFMath_Sqrt>
 80041da:	4603      	mov	r3, r0
 80041dc:	4619      	mov	r1, r3
 80041de:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80041e0:	f7fc fca8 	bl	8000b34 <__addsf3>
 80041e4:	4603      	mov	r3, r0
 80041e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    tmp.value = ta;
 80041e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ea:	61fb      	str	r3, [r7, #28]
    ma = qFIS_SMF( &tmp, p, n );
 80041ec:	f107 0314 	add.w	r3, r7, #20
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	68b9      	ldr	r1, [r7, #8]
 80041f4:	4618      	mov	r0, r3
 80041f6:	f7ff fd46 	bl	8003c86 <qFIS_SMF>
 80041fa:	62b8      	str	r0, [r7, #40]	; 0x28
    tb = b + QLIB_SQRT( x*diff );
 80041fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80041fe:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004200:	f7fc fda0 	bl	8000d44 <__aeabi_fmul>
 8004204:	4603      	mov	r3, r0
 8004206:	4618      	mov	r0, r3
 8004208:	f7fe f9d5 	bl	80025b6 <qFFMath_Sqrt>
 800420c:	4603      	mov	r3, r0
 800420e:	4619      	mov	r1, r3
 8004210:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004212:	f7fc fc8f 	bl	8000b34 <__addsf3>
 8004216:	4603      	mov	r3, r0
 8004218:	627b      	str	r3, [r7, #36]	; 0x24
    tmp.value = tb;
 800421a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421c:	61fb      	str	r3, [r7, #28]
    mb = qFIS_SMF( &tmp, p, n );
 800421e:	f107 0314 	add.w	r3, r7, #20
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	68b9      	ldr	r1, [r7, #8]
 8004226:	4618      	mov	r0, r3
 8004228:	f7ff fd2d 	bl	8003c86 <qFIS_SMF>
 800422c:	6238      	str	r0, [r7, #32]
    /*cstat +MISRAC2012-Dir-4.11_a +MISRAC2012-Dir-4.11_b*/
    return  ( QLIB_ABS( x - ma ) < QLIB_ABS( x - mb ) ) ? ta : tb;
 800422e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004230:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004232:	f7fc fc7d 	bl	8000b30 <__aeabi_fsub>
 8004236:	4603      	mov	r3, r0
 8004238:	4618      	mov	r0, r3
 800423a:	f7fe f9a7 	bl	800258c <qFFMath_Abs>
 800423e:	4604      	mov	r4, r0
 8004240:	6a39      	ldr	r1, [r7, #32]
 8004242:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004244:	f7fc fc74 	bl	8000b30 <__aeabi_fsub>
 8004248:	4603      	mov	r3, r0
 800424a:	4618      	mov	r0, r3
 800424c:	f7fe f99e 	bl	800258c <qFFMath_Abs>
 8004250:	4603      	mov	r3, r0
 8004252:	4619      	mov	r1, r3
 8004254:	4620      	mov	r0, r4
 8004256:	f7fc ff13 	bl	8001080 <__aeabi_fcmplt>
 800425a:	4603      	mov	r3, r0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d001      	beq.n	8004264 <qFIS_TZMF+0xee>
 8004260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004262:	e000      	b.n	8004266 <qFIS_TZMF+0xf0>
 8004264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004266:	4618      	mov	r0, r3
 8004268:	3744      	adds	r7, #68	; 0x44
 800426a:	46bd      	mov	sp, r7
 800426c:	bd90      	pop	{r4, r7, pc}

0800426e <qFIS_PiMF>:
/*============================================================================*/
static float qFIS_PiMF( const qFIS_IO_Base_t * const in,
                        const float *p,
                        const size_t n )
{
 800426e:	b590      	push	{r4, r7, lr}
 8004270:	b085      	sub	sp, #20
 8004272:	af00      	add	r7, sp, #0
 8004274:	60f8      	str	r0, [r7, #12]
 8004276:	60b9      	str	r1, [r7, #8]
 8004278:	607a      	str	r2, [r7, #4]
    return QLIB_ABS( qFIS_SMF( in , p, n )*qFIS_ZMF( in , &p[ 2 ], n ) );
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	68b9      	ldr	r1, [r7, #8]
 800427e:	68f8      	ldr	r0, [r7, #12]
 8004280:	f7ff fd01 	bl	8003c86 <qFIS_SMF>
 8004284:	4604      	mov	r4, r0
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	3308      	adds	r3, #8
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	4619      	mov	r1, r3
 800428e:	68f8      	ldr	r0, [r7, #12]
 8004290:	f7ff fe17 	bl	8003ec2 <qFIS_ZMF>
 8004294:	4603      	mov	r3, r0
 8004296:	4619      	mov	r1, r3
 8004298:	4620      	mov	r0, r4
 800429a:	f7fc fd53 	bl	8000d44 <__aeabi_fmul>
 800429e:	4603      	mov	r3, r0
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7fe f973 	bl	800258c <qFFMath_Abs>
 80042a6:	4603      	mov	r3, r0
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3714      	adds	r7, #20
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd90      	pop	{r4, r7, pc}

080042b0 <qFIS_SingletonMF>:
/*============================================================================*/
static float qFIS_SingletonMF( const qFIS_IO_Base_t * const in,
                               const float *p,
                               const size_t n )
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b086      	sub	sp, #24
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	60b9      	str	r1, [r7, #8]
 80042ba:	607a      	str	r2, [r7, #4]
    float x = in[ 0 ].value;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	617b      	str	r3, [r7, #20]
    (void)n;

    return ( qFMathEx_Equal( x, p[ 0 ] ) ) ? 1.0f : 0.0f;
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4619      	mov	r1, r3
 80042c8:	6978      	ldr	r0, [r7, #20]
 80042ca:	f000 fafc 	bl	80048c6 <qFMathEx_Equal>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d002      	beq.n	80042da <qFIS_SingletonMF+0x2a>
 80042d4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80042d8:	e001      	b.n	80042de <qFIS_SingletonMF+0x2e>
 80042da:	f04f 0300 	mov.w	r3, #0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3718      	adds	r7, #24
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}

080042e6 <qFIS_ConcaveMF>:
/*============================================================================*/
static float qFIS_ConcaveMF( const qFIS_IO_Base_t * const in,
                             const float *p,
                             const size_t n )
{
 80042e6:	b590      	push	{r4, r7, lr}
 80042e8:	b089      	sub	sp, #36	; 0x24
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	60f8      	str	r0, [r7, #12]
 80042ee:	60b9      	str	r1, [r7, #8]
 80042f0:	607a      	str	r2, [r7, #4]
    float x = in[ 0 ].value;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	61bb      	str	r3, [r7, #24]
    float i, e, y;
    (void)n;

    i = p[ 0 ];
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	617b      	str	r3, [r7, #20]
    e = p[ 1 ];
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	3304      	adds	r3, #4
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	613b      	str	r3, [r7, #16]
    if ( ( i <= e ) && ( x < e ) ) {
 8004306:	6939      	ldr	r1, [r7, #16]
 8004308:	6978      	ldr	r0, [r7, #20]
 800430a:	f7fc fec3 	bl	8001094 <__aeabi_fcmple>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d023      	beq.n	800435c <qFIS_ConcaveMF+0x76>
 8004314:	6939      	ldr	r1, [r7, #16]
 8004316:	69b8      	ldr	r0, [r7, #24]
 8004318:	f7fc feb2 	bl	8001080 <__aeabi_fcmplt>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d01c      	beq.n	800435c <qFIS_ConcaveMF+0x76>
        y = ( e - i )/( ( 2.0f*e ) - i -x );
 8004322:	6979      	ldr	r1, [r7, #20]
 8004324:	6938      	ldr	r0, [r7, #16]
 8004326:	f7fc fc03 	bl	8000b30 <__aeabi_fsub>
 800432a:	4603      	mov	r3, r0
 800432c:	461c      	mov	r4, r3
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	4619      	mov	r1, r3
 8004332:	4618      	mov	r0, r3
 8004334:	f7fc fbfe 	bl	8000b34 <__addsf3>
 8004338:	4603      	mov	r3, r0
 800433a:	6979      	ldr	r1, [r7, #20]
 800433c:	4618      	mov	r0, r3
 800433e:	f7fc fbf7 	bl	8000b30 <__aeabi_fsub>
 8004342:	4603      	mov	r3, r0
 8004344:	69b9      	ldr	r1, [r7, #24]
 8004346:	4618      	mov	r0, r3
 8004348:	f7fc fbf2 	bl	8000b30 <__aeabi_fsub>
 800434c:	4603      	mov	r3, r0
 800434e:	4619      	mov	r1, r3
 8004350:	4620      	mov	r0, r4
 8004352:	f7fc fdab 	bl	8000eac <__aeabi_fdiv>
 8004356:	4603      	mov	r3, r0
 8004358:	61fb      	str	r3, [r7, #28]
 800435a:	e02d      	b.n	80043b8 <qFIS_ConcaveMF+0xd2>
    }
    else if ( ( i > e ) && ( x > e ) ) {
 800435c:	6939      	ldr	r1, [r7, #16]
 800435e:	6978      	ldr	r0, [r7, #20]
 8004360:	f7fc feac 	bl	80010bc <__aeabi_fcmpgt>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d023      	beq.n	80043b2 <qFIS_ConcaveMF+0xcc>
 800436a:	6939      	ldr	r1, [r7, #16]
 800436c:	69b8      	ldr	r0, [r7, #24]
 800436e:	f7fc fea5 	bl	80010bc <__aeabi_fcmpgt>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d01c      	beq.n	80043b2 <qFIS_ConcaveMF+0xcc>
        y = ( i - e )/( -( 2.0f*e ) + i +x );
 8004378:	6939      	ldr	r1, [r7, #16]
 800437a:	6978      	ldr	r0, [r7, #20]
 800437c:	f7fc fbd8 	bl	8000b30 <__aeabi_fsub>
 8004380:	4603      	mov	r3, r0
 8004382:	461c      	mov	r4, r3
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	4619      	mov	r1, r3
 8004388:	4618      	mov	r0, r3
 800438a:	f7fc fbd3 	bl	8000b34 <__addsf3>
 800438e:	4603      	mov	r3, r0
 8004390:	4619      	mov	r1, r3
 8004392:	6978      	ldr	r0, [r7, #20]
 8004394:	f7fc fbcc 	bl	8000b30 <__aeabi_fsub>
 8004398:	4603      	mov	r3, r0
 800439a:	69b9      	ldr	r1, [r7, #24]
 800439c:	4618      	mov	r0, r3
 800439e:	f7fc fbc9 	bl	8000b34 <__addsf3>
 80043a2:	4603      	mov	r3, r0
 80043a4:	4619      	mov	r1, r3
 80043a6:	4620      	mov	r0, r4
 80043a8:	f7fc fd80 	bl	8000eac <__aeabi_fdiv>
 80043ac:	4603      	mov	r3, r0
 80043ae:	61fb      	str	r3, [r7, #28]
 80043b0:	e002      	b.n	80043b8 <qFIS_ConcaveMF+0xd2>
    }
    else {
        y = 1.0f;
 80043b2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80043b6:	61fb      	str	r3, [r7, #28]
    }

    return y;
 80043b8:	69fb      	ldr	r3, [r7, #28]
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3724      	adds	r7, #36	; 0x24
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd90      	pop	{r4, r7, pc}

080043c2 <qFIS_TConcaveMF>:
/*============================================================================*/
static float qFIS_TConcaveMF( const qFIS_IO_Base_t * const in,
                              const float *p,
                              const size_t n )
{
 80043c2:	b590      	push	{r4, r7, lr}
 80043c4:	b087      	sub	sp, #28
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	60f8      	str	r0, [r7, #12]
 80043ca:	60b9      	str	r1, [r7, #8]
 80043cc:	607a      	str	r2, [r7, #4]
    float i, e;

    i = p[ 0 ];
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	617b      	str	r3, [r7, #20]
    e = p[ 1 ];
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	3304      	adds	r3, #4
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	613b      	str	r3, [r7, #16]

    return ( ( i - e )/qFIS_ConcaveMF( in, p, n ) ) + ( 2.0f*e ) - i;
 80043dc:	6939      	ldr	r1, [r7, #16]
 80043de:	6978      	ldr	r0, [r7, #20]
 80043e0:	f7fc fba6 	bl	8000b30 <__aeabi_fsub>
 80043e4:	4603      	mov	r3, r0
 80043e6:	461c      	mov	r4, r3
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	68b9      	ldr	r1, [r7, #8]
 80043ec:	68f8      	ldr	r0, [r7, #12]
 80043ee:	f7ff ff7a 	bl	80042e6 <qFIS_ConcaveMF>
 80043f2:	4603      	mov	r3, r0
 80043f4:	4619      	mov	r1, r3
 80043f6:	4620      	mov	r0, r4
 80043f8:	f7fc fd58 	bl	8000eac <__aeabi_fdiv>
 80043fc:	4603      	mov	r3, r0
 80043fe:	461c      	mov	r4, r3
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	4619      	mov	r1, r3
 8004404:	4618      	mov	r0, r3
 8004406:	f7fc fb95 	bl	8000b34 <__addsf3>
 800440a:	4603      	mov	r3, r0
 800440c:	4619      	mov	r1, r3
 800440e:	4620      	mov	r0, r4
 8004410:	f7fc fb90 	bl	8000b34 <__addsf3>
 8004414:	4603      	mov	r3, r0
 8004416:	6979      	ldr	r1, [r7, #20]
 8004418:	4618      	mov	r0, r3
 800441a:	f7fc fb89 	bl	8000b30 <__aeabi_fsub>
 800441e:	4603      	mov	r3, r0
}
 8004420:	4618      	mov	r0, r3
 8004422:	371c      	adds	r7, #28
 8004424:	46bd      	mov	sp, r7
 8004426:	bd90      	pop	{r4, r7, pc}

08004428 <qFIS_SpikeMF>:
/*============================================================================*/
static float qFIS_SpikeMF( const qFIS_IO_Base_t * const in,
                           const float *p,
                           const size_t n )
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b088      	sub	sp, #32
 800442c:	af00      	add	r7, sp, #0
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	607a      	str	r2, [r7, #4]
    float x = in[ 0 ].value;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	61fb      	str	r3, [r7, #28]
    float w, c;
    (void)n;

    w = p[ 0 ];
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	61bb      	str	r3, [r7, #24]
    c = p[ 1 ];
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	3304      	adds	r3, #4
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	617b      	str	r3, [r7, #20]

    return QLIB_EXP( -QLIB_ABS( 10.0f*( x - c )/w ) );
 8004448:	6979      	ldr	r1, [r7, #20]
 800444a:	69f8      	ldr	r0, [r7, #28]
 800444c:	f7fc fb70 	bl	8000b30 <__aeabi_fsub>
 8004450:	4603      	mov	r3, r0
 8004452:	490c      	ldr	r1, [pc, #48]	; (8004484 <qFIS_SpikeMF+0x5c>)
 8004454:	4618      	mov	r0, r3
 8004456:	f7fc fc75 	bl	8000d44 <__aeabi_fmul>
 800445a:	4603      	mov	r3, r0
 800445c:	69b9      	ldr	r1, [r7, #24]
 800445e:	4618      	mov	r0, r3
 8004460:	f7fc fd24 	bl	8000eac <__aeabi_fdiv>
 8004464:	4603      	mov	r3, r0
 8004466:	4618      	mov	r0, r3
 8004468:	f7fe f890 	bl	800258c <qFFMath_Abs>
 800446c:	4603      	mov	r3, r0
 800446e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004472:	4618      	mov	r0, r3
 8004474:	f7fe fa14 	bl	80028a0 <qFFMath_Exp>
 8004478:	4603      	mov	r3, r0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3720      	adds	r7, #32
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	41200000 	.word	0x41200000

08004488 <qFIS_TLinSMF>:
/*============================================================================*/
static float qFIS_TLinSMF( const qFIS_IO_Base_t * const in,
                           const float *p,
                           const size_t n )
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b088      	sub	sp, #32
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	607a      	str	r2, [r7, #4]
    float x = in[ 0 ].value;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	61fb      	str	r3, [r7, #28]
    float a, b;
    (void)n;

    a = p[ 0 ];
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	61bb      	str	r3, [r7, #24]
    b = p[ 1 ];
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	3304      	adds	r3, #4
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	617b      	str	r3, [r7, #20]

    return ( ( b - a )*x ) + a;
 80044a8:	69b9      	ldr	r1, [r7, #24]
 80044aa:	6978      	ldr	r0, [r7, #20]
 80044ac:	f7fc fb40 	bl	8000b30 <__aeabi_fsub>
 80044b0:	4603      	mov	r3, r0
 80044b2:	69f9      	ldr	r1, [r7, #28]
 80044b4:	4618      	mov	r0, r3
 80044b6:	f7fc fc45 	bl	8000d44 <__aeabi_fmul>
 80044ba:	4603      	mov	r3, r0
 80044bc:	69b9      	ldr	r1, [r7, #24]
 80044be:	4618      	mov	r0, r3
 80044c0:	f7fc fb38 	bl	8000b34 <__addsf3>
 80044c4:	4603      	mov	r3, r0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3720      	adds	r7, #32
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}

080044ce <qFIS_TLinZMF>:
/*============================================================================*/
static float qFIS_TLinZMF( const qFIS_IO_Base_t * const in,
                           const float *p,
                           const size_t n )
{
 80044ce:	b580      	push	{r7, lr}
 80044d0:	b088      	sub	sp, #32
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	60f8      	str	r0, [r7, #12]
 80044d6:	60b9      	str	r1, [r7, #8]
 80044d8:	607a      	str	r2, [r7, #4]
    float x = in[ 0 ].value;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	61fb      	str	r3, [r7, #28]
    float a, b;
    (void)n;

    a = p[ 0 ];
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	61bb      	str	r3, [r7, #24]
    b = p[ 1 ];
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	3304      	adds	r3, #4
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	617b      	str	r3, [r7, #20]

    return + a - ( ( a - b )*x );
 80044ee:	6979      	ldr	r1, [r7, #20]
 80044f0:	69b8      	ldr	r0, [r7, #24]
 80044f2:	f7fc fb1d 	bl	8000b30 <__aeabi_fsub>
 80044f6:	4603      	mov	r3, r0
 80044f8:	69f9      	ldr	r1, [r7, #28]
 80044fa:	4618      	mov	r0, r3
 80044fc:	f7fc fc22 	bl	8000d44 <__aeabi_fmul>
 8004500:	4603      	mov	r3, r0
 8004502:	4619      	mov	r1, r3
 8004504:	69b8      	ldr	r0, [r7, #24]
 8004506:	f7fc fb13 	bl	8000b30 <__aeabi_fsub>
 800450a:	4603      	mov	r3, r0
}
 800450c:	4618      	mov	r0, r3
 800450e:	3720      	adds	r7, #32
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <qFIS_RectangleMF>:
/*============================================================================*/
static float qFIS_RectangleMF( const qFIS_IO_Base_t * const in,
                               const float *p,
                               const size_t n )
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b088      	sub	sp, #32
 8004518:	af00      	add	r7, sp, #0
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	60b9      	str	r1, [r7, #8]
 800451e:	607a      	str	r2, [r7, #4]
    float x = in[ 0 ].value;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	61fb      	str	r3, [r7, #28]
    float s, e;
    (void)n;

    s = p[ 0 ];
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	61bb      	str	r3, [r7, #24]
    e = p[ 1 ];
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	3304      	adds	r3, #4
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	617b      	str	r3, [r7, #20]

    return ( ( x >= s ) && ( x <= e ) ) ? 1.0f : 0.0f;
 8004534:	69b9      	ldr	r1, [r7, #24]
 8004536:	69f8      	ldr	r0, [r7, #28]
 8004538:	f7fc fdb6 	bl	80010a8 <__aeabi_fcmpge>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d009      	beq.n	8004556 <qFIS_RectangleMF+0x42>
 8004542:	6979      	ldr	r1, [r7, #20]
 8004544:	69f8      	ldr	r0, [r7, #28]
 8004546:	f7fc fda5 	bl	8001094 <__aeabi_fcmple>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d002      	beq.n	8004556 <qFIS_RectangleMF+0x42>
 8004550:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004554:	e001      	b.n	800455a <qFIS_RectangleMF+0x46>
 8004556:	f04f 0300 	mov.w	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3720      	adds	r7, #32
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
	...

08004564 <qFIS_CosineMF>:
/*============================================================================*/
static float qFIS_CosineMF( const qFIS_IO_Base_t * const in,
                            const float *p,
                            const size_t n )
{
 8004564:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004568:	b08a      	sub	sp, #40	; 0x28
 800456a:	af00      	add	r7, sp, #0
 800456c:	60f8      	str	r0, [r7, #12]
 800456e:	60b9      	str	r1, [r7, #8]
 8004570:	607a      	str	r2, [r7, #4]
    float x = in[ 0 ].value;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	623b      	str	r3, [r7, #32]
    float c, w, y;
    const float pi = 3.14159265358979323846f;
 8004578:	4b36      	ldr	r3, [pc, #216]	; (8004654 <qFIS_CosineMF+0xf0>)
 800457a:	61fb      	str	r3, [r7, #28]
    (void)n;

    c = p[ 0 ];
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	61bb      	str	r3, [r7, #24]
    w = p[ 1 ];
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	3304      	adds	r3, #4
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	617b      	str	r3, [r7, #20]
    if ( ( x < ( c - ( 0.5*w ) ) ) || ( x > ( c + ( 0.5f*w ) ) ) ) {
 800458a:	6a38      	ldr	r0, [r7, #32]
 800458c:	f7fb ff4c 	bl	8000428 <__aeabi_f2d>
 8004590:	4604      	mov	r4, r0
 8004592:	460d      	mov	r5, r1
 8004594:	69b8      	ldr	r0, [r7, #24]
 8004596:	f7fb ff47 	bl	8000428 <__aeabi_f2d>
 800459a:	4680      	mov	r8, r0
 800459c:	4689      	mov	r9, r1
 800459e:	6978      	ldr	r0, [r7, #20]
 80045a0:	f7fb ff42 	bl	8000428 <__aeabi_f2d>
 80045a4:	f04f 0200 	mov.w	r2, #0
 80045a8:	4b2b      	ldr	r3, [pc, #172]	; (8004658 <qFIS_CosineMF+0xf4>)
 80045aa:	f7fb ff95 	bl	80004d8 <__aeabi_dmul>
 80045ae:	4602      	mov	r2, r0
 80045b0:	460b      	mov	r3, r1
 80045b2:	4640      	mov	r0, r8
 80045b4:	4649      	mov	r1, r9
 80045b6:	f7fb fdd7 	bl	8000168 <__aeabi_dsub>
 80045ba:	4602      	mov	r2, r0
 80045bc:	460b      	mov	r3, r1
 80045be:	4620      	mov	r0, r4
 80045c0:	4629      	mov	r1, r5
 80045c2:	f7fc f9fb 	bl	80009bc <__aeabi_dcmplt>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d111      	bne.n	80045f0 <qFIS_CosineMF+0x8c>
 80045cc:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80045d0:	6978      	ldr	r0, [r7, #20]
 80045d2:	f7fc fbb7 	bl	8000d44 <__aeabi_fmul>
 80045d6:	4603      	mov	r3, r0
 80045d8:	69b9      	ldr	r1, [r7, #24]
 80045da:	4618      	mov	r0, r3
 80045dc:	f7fc faaa 	bl	8000b34 <__addsf3>
 80045e0:	4603      	mov	r3, r0
 80045e2:	4619      	mov	r1, r3
 80045e4:	6a38      	ldr	r0, [r7, #32]
 80045e6:	f7fc fd69 	bl	80010bc <__aeabi_fcmpgt>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d003      	beq.n	80045f8 <qFIS_CosineMF+0x94>
        y = 0.0f;
 80045f0:	f04f 0300 	mov.w	r3, #0
 80045f4:	627b      	str	r3, [r7, #36]	; 0x24
 80045f6:	e026      	b.n	8004646 <qFIS_CosineMF+0xe2>
    }
    else {
        y = 0.5f*( 1.0f + QLIB_COS( 2.0f/w*pi*( x - c) ) );
 80045f8:	6979      	ldr	r1, [r7, #20]
 80045fa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80045fe:	f7fc fc55 	bl	8000eac <__aeabi_fdiv>
 8004602:	4603      	mov	r3, r0
 8004604:	69f9      	ldr	r1, [r7, #28]
 8004606:	4618      	mov	r0, r3
 8004608:	f7fc fb9c 	bl	8000d44 <__aeabi_fmul>
 800460c:	4603      	mov	r3, r0
 800460e:	461c      	mov	r4, r3
 8004610:	69b9      	ldr	r1, [r7, #24]
 8004612:	6a38      	ldr	r0, [r7, #32]
 8004614:	f7fc fa8c 	bl	8000b30 <__aeabi_fsub>
 8004618:	4603      	mov	r3, r0
 800461a:	4619      	mov	r1, r3
 800461c:	4620      	mov	r0, r4
 800461e:	f7fc fb91 	bl	8000d44 <__aeabi_fmul>
 8004622:	4603      	mov	r3, r0
 8004624:	4618      	mov	r0, r3
 8004626:	f7fe f857 	bl	80026d8 <qFFMath_Cos>
 800462a:	4603      	mov	r3, r0
 800462c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8004630:	4618      	mov	r0, r3
 8004632:	f7fc fa7f 	bl	8000b34 <__addsf3>
 8004636:	4603      	mov	r3, r0
 8004638:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800463c:	4618      	mov	r0, r3
 800463e:	f7fc fb81 	bl	8000d44 <__aeabi_fmul>
 8004642:	4603      	mov	r3, r0
 8004644:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return y;
 8004646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004648:	4618      	mov	r0, r3
 800464a:	3728      	adds	r7, #40	; 0x28
 800464c:	46bd      	mov	sp, r7
 800464e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004652:	bf00      	nop
 8004654:	40490fdb 	.word	0x40490fdb
 8004658:	3fe00000 	.word	0x3fe00000

0800465c <qFIS_ConstantMF>:
/*============================================================================*/
static float qFIS_ConstantMF( const qFIS_IO_Base_t * const in,
                              const float *p,
                              const size_t n )
{
 800465c:	b480      	push	{r7}
 800465e:	b085      	sub	sp, #20
 8004660:	af00      	add	r7, sp, #0
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	60b9      	str	r1, [r7, #8]
 8004666:	607a      	str	r2, [r7, #4]
    (void)in;
    (void)n;
    return p[ 0 ];
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	681b      	ldr	r3, [r3, #0]
}
 800466c:	4618      	mov	r0, r3
 800466e:	3714      	adds	r7, #20
 8004670:	46bd      	mov	sp, r7
 8004672:	bc80      	pop	{r7}
 8004674:	4770      	bx	lr

08004676 <qFIS_LinearMF>:
/*============================================================================*/
static float qFIS_LinearMF( const qFIS_IO_Base_t * const in,
                            const float *p,
                            const size_t n )
{
 8004676:	b580      	push	{r7, lr}
 8004678:	b086      	sub	sp, #24
 800467a:	af00      	add	r7, sp, #0
 800467c:	60f8      	str	r0, [r7, #12]
 800467e:	60b9      	str	r1, [r7, #8]
 8004680:	607a      	str	r2, [r7, #4]
    float px = 0.0f;
 8004682:	f04f 0300 	mov.w	r3, #0
 8004686:	617b      	str	r3, [r7, #20]
    size_t i;

    for ( i = 0u ; i < n ; ++i ) {
 8004688:	2300      	movs	r3, #0
 800468a:	613b      	str	r3, [r7, #16]
 800468c:	e01a      	b.n	80046c4 <qFIS_LinearMF+0x4e>
        px += in[ i ].value*p[ i ];
 800468e:	693a      	ldr	r2, [r7, #16]
 8004690:	4613      	mov	r3, r2
 8004692:	005b      	lsls	r3, r3, #1
 8004694:	4413      	add	r3, r2
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	461a      	mov	r2, r3
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	4413      	add	r3, r2
 800469e:	6898      	ldr	r0, [r3, #8]
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	68ba      	ldr	r2, [r7, #8]
 80046a6:	4413      	add	r3, r2
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4619      	mov	r1, r3
 80046ac:	f7fc fb4a 	bl	8000d44 <__aeabi_fmul>
 80046b0:	4603      	mov	r3, r0
 80046b2:	4619      	mov	r1, r3
 80046b4:	6978      	ldr	r0, [r7, #20]
 80046b6:	f7fc fa3d 	bl	8000b34 <__addsf3>
 80046ba:	4603      	mov	r3, r0
 80046bc:	617b      	str	r3, [r7, #20]
    for ( i = 0u ; i < n ; ++i ) {
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	3301      	adds	r3, #1
 80046c2:	613b      	str	r3, [r7, #16]
 80046c4:	693a      	ldr	r2, [r7, #16]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d3e0      	bcc.n	800468e <qFIS_LinearMF+0x18>
    }
    px += p[ i ];
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	68ba      	ldr	r2, [r7, #8]
 80046d2:	4413      	add	r3, r2
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4619      	mov	r1, r3
 80046d8:	6978      	ldr	r0, [r7, #20]
 80046da:	f7fc fa2b 	bl	8000b34 <__addsf3>
 80046de:	4603      	mov	r3, r0
 80046e0:	617b      	str	r3, [r7, #20]

    return px;
 80046e2:	697b      	ldr	r3, [r7, #20]
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3718      	adds	r7, #24
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}

080046ec <qFIS_Min>:
/*============================================================================*/
static float qFIS_Min( const float a,
                       const float b )
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b082      	sub	sp, #8
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
    return qFIS_Bound( ( a < b ) ? a : b, 0.0f, 1.0f );
 80046f6:	6839      	ldr	r1, [r7, #0]
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f7fc fcc1 	bl	8001080 <__aeabi_fcmplt>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d001      	beq.n	8004708 <qFIS_Min+0x1c>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	e000      	b.n	800470a <qFIS_Min+0x1e>
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800470e:	f04f 0100 	mov.w	r1, #0
 8004712:	4618      	mov	r0, r3
 8004714:	f000 f86d 	bl	80047f2 <qFIS_Bound>
 8004718:	4603      	mov	r3, r0
}
 800471a:	4618      	mov	r0, r3
 800471c:	3708      	adds	r7, #8
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}

08004722 <qFIS_Max>:
/*============================================================================*/
static float qFIS_Max( const float a,
                       const float b )
{
 8004722:	b580      	push	{r7, lr}
 8004724:	b082      	sub	sp, #8
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
 800472a:	6039      	str	r1, [r7, #0]
    return qFIS_Bound( ( a > b ) ? a : b, 0.0f, 1.0f );
 800472c:	6839      	ldr	r1, [r7, #0]
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f7fc fcc4 	bl	80010bc <__aeabi_fcmpgt>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d001      	beq.n	800473e <qFIS_Max+0x1c>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	e000      	b.n	8004740 <qFIS_Max+0x1e>
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004744:	f04f 0100 	mov.w	r1, #0
 8004748:	4618      	mov	r0, r3
 800474a:	f000 f852 	bl	80047f2 <qFIS_Bound>
 800474e:	4603      	mov	r3, r0
}
 8004750:	4618      	mov	r0, r3
 8004752:	3708      	adds	r7, #8
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}

08004758 <qFIS_Prod>:
/*============================================================================*/
static float qFIS_Prod( const float a,
                        const float b )
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b082      	sub	sp, #8
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	6039      	str	r1, [r7, #0]
    return qFIS_Bound( a*b, 0.0f, 1.0f );
 8004762:	6839      	ldr	r1, [r7, #0]
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f7fc faed 	bl	8000d44 <__aeabi_fmul>
 800476a:	4603      	mov	r3, r0
 800476c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004770:	f04f 0100 	mov.w	r1, #0
 8004774:	4618      	mov	r0, r3
 8004776:	f000 f83c 	bl	80047f2 <qFIS_Bound>
 800477a:	4603      	mov	r3, r0
}
 800477c:	4618      	mov	r0, r3
 800477e:	3708      	adds	r7, #8
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}

08004784 <qFIS_ProbOR>:
/*============================================================================*/
static float qFIS_ProbOR( const float a,
                          const float b )
{
 8004784:	b590      	push	{r4, r7, lr}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	6039      	str	r1, [r7, #0]
    return qFIS_Bound( a + b - ( a*b ), 0.0f, 1.0f );
 800478e:	6839      	ldr	r1, [r7, #0]
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f7fc f9cf 	bl	8000b34 <__addsf3>
 8004796:	4603      	mov	r3, r0
 8004798:	461c      	mov	r4, r3
 800479a:	6839      	ldr	r1, [r7, #0]
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f7fc fad1 	bl	8000d44 <__aeabi_fmul>
 80047a2:	4603      	mov	r3, r0
 80047a4:	4619      	mov	r1, r3
 80047a6:	4620      	mov	r0, r4
 80047a8:	f7fc f9c2 	bl	8000b30 <__aeabi_fsub>
 80047ac:	4603      	mov	r3, r0
 80047ae:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80047b2:	f04f 0100 	mov.w	r1, #0
 80047b6:	4618      	mov	r0, r3
 80047b8:	f000 f81b 	bl	80047f2 <qFIS_Bound>
 80047bc:	4603      	mov	r3, r0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	370c      	adds	r7, #12
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd90      	pop	{r4, r7, pc}

080047c6 <qFIS_Sum>:
/*============================================================================*/
static float qFIS_Sum( const float a,
                       const float b )
{
 80047c6:	b580      	push	{r7, lr}
 80047c8:	b082      	sub	sp, #8
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
 80047ce:	6039      	str	r1, [r7, #0]
    return qFIS_Bound( a + b, 0.0f, 1.0f );
 80047d0:	6839      	ldr	r1, [r7, #0]
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f7fc f9ae 	bl	8000b34 <__addsf3>
 80047d8:	4603      	mov	r3, r0
 80047da:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80047de:	f04f 0100 	mov.w	r1, #0
 80047e2:	4618      	mov	r0, r3
 80047e4:	f000 f805 	bl	80047f2 <qFIS_Bound>
 80047e8:	4603      	mov	r3, r0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3708      	adds	r7, #8
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}

080047f2 <qFIS_Bound>:
/*============================================================================*/
static float qFIS_Bound( float y,
                         const float yMin,
                         const float yMax )
{
 80047f2:	b580      	push	{r7, lr}
 80047f4:	b084      	sub	sp, #16
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	60f8      	str	r0, [r7, #12]
 80047fa:	60b9      	str	r1, [r7, #8]
 80047fc:	607a      	str	r2, [r7, #4]
    (void)qFMathEx_InRangeCoerce( &y, yMin, yMax );
 80047fe:	f107 030c 	add.w	r3, r7, #12
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	68b9      	ldr	r1, [r7, #8]
 8004806:	4618      	mov	r0, r3
 8004808:	f000 f805 	bl	8004816 <qFMathEx_InRangeCoerce>

    return y;
 800480c:	68fb      	ldr	r3, [r7, #12]
}
 800480e:	4618      	mov	r0, r3
 8004810:	3710      	adds	r7, #16
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}

08004816 <qFMathEx_InRangeCoerce>:
}
/*============================================================================*/
bool qFMathEx_InRangeCoerce( float * const x,
                             const float lowerL,
                             const float upperL )
{
 8004816:	b580      	push	{r7, lr}
 8004818:	b086      	sub	sp, #24
 800481a:	af00      	add	r7, sp, #0
 800481c:	60f8      	str	r0, [r7, #12]
 800481e:	60b9      	str	r1, [r7, #8]
 8004820:	607a      	str	r2, [r7, #4]
    bool retVal = false;
 8004822:	2300      	movs	r3, #0
 8004824:	75fb      	strb	r3, [r7, #23]

    if ( 1 == (int)QLIB_ISNAN( x[ 0 ] ) ) {
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4618      	mov	r0, r3
 800482c:	f7fd fe9d 	bl	800256a <qFFMath_IsNaN>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d003      	beq.n	800483e <qFMathEx_InRangeCoerce+0x28>
        x[ 0 ] = lowerL;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	68ba      	ldr	r2, [r7, #8]
 800483a:	601a      	str	r2, [r3, #0]
 800483c:	e01b      	b.n	8004876 <qFMathEx_InRangeCoerce+0x60>
    }
    else {
        if ( x[ 0 ] < lowerL ) {
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4619      	mov	r1, r3
 8004844:	68b8      	ldr	r0, [r7, #8]
 8004846:	f7fc fc39 	bl	80010bc <__aeabi_fcmpgt>
 800484a:	4603      	mov	r3, r0
 800484c:	2b00      	cmp	r3, #0
 800484e:	d003      	beq.n	8004858 <qFMathEx_InRangeCoerce+0x42>
            x[ 0 ] = lowerL;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	68ba      	ldr	r2, [r7, #8]
 8004854:	601a      	str	r2, [r3, #0]
 8004856:	e00e      	b.n	8004876 <qFMathEx_InRangeCoerce+0x60>
        }
        else if ( x[ 0 ] > upperL ) {
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4619      	mov	r1, r3
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f7fc fc0e 	bl	8001080 <__aeabi_fcmplt>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d003      	beq.n	8004872 <qFMathEx_InRangeCoerce+0x5c>
            x[ 0 ] = upperL;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	601a      	str	r2, [r3, #0]
 8004870:	e001      	b.n	8004876 <qFMathEx_InRangeCoerce+0x60>
        }
        else {
            retVal = true;
 8004872:	2301      	movs	r3, #1
 8004874:	75fb      	strb	r3, [r7, #23]
        }
    }

    return retVal;
 8004876:	7dfb      	ldrb	r3, [r7, #23]
}
 8004878:	4618      	mov	r0, r3
 800487a:	3718      	adds	r7, #24
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <qFMathEx_AlmostEqual>:
/*============================================================================*/
bool qFMathEx_AlmostEqual( const float a,
                           const float b,
                           const float tol )
{
 8004880:	b5b0      	push	{r4, r5, r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	607a      	str	r2, [r7, #4]
    return ( QLIB_ABS( a - b ) <= QLIB_ABS( tol ) );
 800488c:	68b9      	ldr	r1, [r7, #8]
 800488e:	68f8      	ldr	r0, [r7, #12]
 8004890:	f7fc f94e 	bl	8000b30 <__aeabi_fsub>
 8004894:	4603      	mov	r3, r0
 8004896:	4618      	mov	r0, r3
 8004898:	f7fd fe78 	bl	800258c <qFFMath_Abs>
 800489c:	4604      	mov	r4, r0
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f7fd fe74 	bl	800258c <qFFMath_Abs>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2201      	movs	r2, #1
 80048a8:	4615      	mov	r5, r2
 80048aa:	4619      	mov	r1, r3
 80048ac:	4620      	mov	r0, r4
 80048ae:	f7fc fbf1 	bl	8001094 <__aeabi_fcmple>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d101      	bne.n	80048bc <qFMathEx_AlmostEqual+0x3c>
 80048b8:	2300      	movs	r3, #0
 80048ba:	461d      	mov	r5, r3
 80048bc:	b2eb      	uxtb	r3, r5
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3710      	adds	r7, #16
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bdb0      	pop	{r4, r5, r7, pc}

080048c6 <qFMathEx_Equal>:
/*============================================================================*/
bool qFMathEx_Equal( const float a,
                     const float b )
{
 80048c6:	b580      	push	{r7, lr}
 80048c8:	b082      	sub	sp, #8
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
 80048ce:	6039      	str	r1, [r7, #0]
    return qFMathEx_AlmostEqual( a, b, FLT_MIN );
 80048d0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80048d4:	6839      	ldr	r1, [r7, #0]
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f7ff ffd2 	bl	8004880 <qFMathEx_AlmostEqual>
 80048dc:	4603      	mov	r3, r0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3708      	adds	r7, #8
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
	...

080048e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b085      	sub	sp, #20
 80048ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80048ee:	4b15      	ldr	r3, [pc, #84]	; (8004944 <HAL_MspInit+0x5c>)
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	4a14      	ldr	r2, [pc, #80]	; (8004944 <HAL_MspInit+0x5c>)
 80048f4:	f043 0301 	orr.w	r3, r3, #1
 80048f8:	6193      	str	r3, [r2, #24]
 80048fa:	4b12      	ldr	r3, [pc, #72]	; (8004944 <HAL_MspInit+0x5c>)
 80048fc:	699b      	ldr	r3, [r3, #24]
 80048fe:	f003 0301 	and.w	r3, r3, #1
 8004902:	60bb      	str	r3, [r7, #8]
 8004904:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004906:	4b0f      	ldr	r3, [pc, #60]	; (8004944 <HAL_MspInit+0x5c>)
 8004908:	69db      	ldr	r3, [r3, #28]
 800490a:	4a0e      	ldr	r2, [pc, #56]	; (8004944 <HAL_MspInit+0x5c>)
 800490c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004910:	61d3      	str	r3, [r2, #28]
 8004912:	4b0c      	ldr	r3, [pc, #48]	; (8004944 <HAL_MspInit+0x5c>)
 8004914:	69db      	ldr	r3, [r3, #28]
 8004916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800491a:	607b      	str	r3, [r7, #4]
 800491c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800491e:	4b0a      	ldr	r3, [pc, #40]	; (8004948 <HAL_MspInit+0x60>)
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	60fb      	str	r3, [r7, #12]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800492a:	60fb      	str	r3, [r7, #12]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004932:	60fb      	str	r3, [r7, #12]
 8004934:	4a04      	ldr	r2, [pc, #16]	; (8004948 <HAL_MspInit+0x60>)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800493a:	bf00      	nop
 800493c:	3714      	adds	r7, #20
 800493e:	46bd      	mov	sp, r7
 8004940:	bc80      	pop	{r7}
 8004942:	4770      	bx	lr
 8004944:	40021000 	.word	0x40021000
 8004948:	40010000 	.word	0x40010000

0800494c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b08a      	sub	sp, #40	; 0x28
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004954:	f107 0314 	add.w	r3, r7, #20
 8004958:	2200      	movs	r2, #0
 800495a:	601a      	str	r2, [r3, #0]
 800495c:	605a      	str	r2, [r3, #4]
 800495e:	609a      	str	r2, [r3, #8]
 8004960:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a1d      	ldr	r2, [pc, #116]	; (80049dc <HAL_I2C_MspInit+0x90>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d132      	bne.n	80049d2 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800496c:	4b1c      	ldr	r3, [pc, #112]	; (80049e0 <HAL_I2C_MspInit+0x94>)
 800496e:	699b      	ldr	r3, [r3, #24]
 8004970:	4a1b      	ldr	r2, [pc, #108]	; (80049e0 <HAL_I2C_MspInit+0x94>)
 8004972:	f043 0308 	orr.w	r3, r3, #8
 8004976:	6193      	str	r3, [r2, #24]
 8004978:	4b19      	ldr	r3, [pc, #100]	; (80049e0 <HAL_I2C_MspInit+0x94>)
 800497a:	699b      	ldr	r3, [r3, #24]
 800497c:	f003 0308 	and.w	r3, r3, #8
 8004980:	613b      	str	r3, [r7, #16]
 8004982:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004984:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004988:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800498a:	2312      	movs	r3, #18
 800498c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800498e:	2303      	movs	r3, #3
 8004990:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004992:	f107 0314 	add.w	r3, r7, #20
 8004996:	4619      	mov	r1, r3
 8004998:	4812      	ldr	r0, [pc, #72]	; (80049e4 <HAL_I2C_MspInit+0x98>)
 800499a:	f000 fbf9 	bl	8005190 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800499e:	4b12      	ldr	r3, [pc, #72]	; (80049e8 <HAL_I2C_MspInit+0x9c>)
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	627b      	str	r3, [r7, #36]	; 0x24
 80049a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80049aa:	627b      	str	r3, [r7, #36]	; 0x24
 80049ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ae:	f043 0302 	orr.w	r3, r3, #2
 80049b2:	627b      	str	r3, [r7, #36]	; 0x24
 80049b4:	4a0c      	ldr	r2, [pc, #48]	; (80049e8 <HAL_I2C_MspInit+0x9c>)
 80049b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b8:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80049ba:	4b09      	ldr	r3, [pc, #36]	; (80049e0 <HAL_I2C_MspInit+0x94>)
 80049bc:	69db      	ldr	r3, [r3, #28]
 80049be:	4a08      	ldr	r2, [pc, #32]	; (80049e0 <HAL_I2C_MspInit+0x94>)
 80049c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80049c4:	61d3      	str	r3, [r2, #28]
 80049c6:	4b06      	ldr	r3, [pc, #24]	; (80049e0 <HAL_I2C_MspInit+0x94>)
 80049c8:	69db      	ldr	r3, [r3, #28]
 80049ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049ce:	60fb      	str	r3, [r7, #12]
 80049d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80049d2:	bf00      	nop
 80049d4:	3728      	adds	r7, #40	; 0x28
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	40005400 	.word	0x40005400
 80049e0:	40021000 	.word	0x40021000
 80049e4:	40010c00 	.word	0x40010c00
 80049e8:	40010000 	.word	0x40010000

080049ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a0d      	ldr	r2, [pc, #52]	; (8004a30 <HAL_TIM_Base_MspInit+0x44>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d113      	bne.n	8004a26 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80049fe:	4b0d      	ldr	r3, [pc, #52]	; (8004a34 <HAL_TIM_Base_MspInit+0x48>)
 8004a00:	699b      	ldr	r3, [r3, #24]
 8004a02:	4a0c      	ldr	r2, [pc, #48]	; (8004a34 <HAL_TIM_Base_MspInit+0x48>)
 8004a04:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004a08:	6193      	str	r3, [r2, #24]
 8004a0a:	4b0a      	ldr	r3, [pc, #40]	; (8004a34 <HAL_TIM_Base_MspInit+0x48>)
 8004a0c:	699b      	ldr	r3, [r3, #24]
 8004a0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a12:	60fb      	str	r3, [r7, #12]
 8004a14:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8004a16:	2200      	movs	r2, #0
 8004a18:	2100      	movs	r1, #0
 8004a1a:	2019      	movs	r0, #25
 8004a1c:	f000 facf 	bl	8004fbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8004a20:	2019      	movs	r0, #25
 8004a22:	f000 fae8 	bl	8004ff6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8004a26:	bf00      	nop
 8004a28:	3710      	adds	r7, #16
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	40012c00 	.word	0x40012c00
 8004a34:	40021000 	.word	0x40021000

08004a38 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b085      	sub	sp, #20
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a12      	ldr	r2, [pc, #72]	; (8004a90 <HAL_TIM_PWM_MspInit+0x58>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d10c      	bne.n	8004a64 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004a4a:	4b12      	ldr	r3, [pc, #72]	; (8004a94 <HAL_TIM_PWM_MspInit+0x5c>)
 8004a4c:	69db      	ldr	r3, [r3, #28]
 8004a4e:	4a11      	ldr	r2, [pc, #68]	; (8004a94 <HAL_TIM_PWM_MspInit+0x5c>)
 8004a50:	f043 0302 	orr.w	r3, r3, #2
 8004a54:	61d3      	str	r3, [r2, #28]
 8004a56:	4b0f      	ldr	r3, [pc, #60]	; (8004a94 <HAL_TIM_PWM_MspInit+0x5c>)
 8004a58:	69db      	ldr	r3, [r3, #28]
 8004a5a:	f003 0302 	and.w	r3, r3, #2
 8004a5e:	60fb      	str	r3, [r7, #12]
 8004a60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004a62:	e010      	b.n	8004a86 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM4)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a0b      	ldr	r2, [pc, #44]	; (8004a98 <HAL_TIM_PWM_MspInit+0x60>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d10b      	bne.n	8004a86 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004a6e:	4b09      	ldr	r3, [pc, #36]	; (8004a94 <HAL_TIM_PWM_MspInit+0x5c>)
 8004a70:	69db      	ldr	r3, [r3, #28]
 8004a72:	4a08      	ldr	r2, [pc, #32]	; (8004a94 <HAL_TIM_PWM_MspInit+0x5c>)
 8004a74:	f043 0304 	orr.w	r3, r3, #4
 8004a78:	61d3      	str	r3, [r2, #28]
 8004a7a:	4b06      	ldr	r3, [pc, #24]	; (8004a94 <HAL_TIM_PWM_MspInit+0x5c>)
 8004a7c:	69db      	ldr	r3, [r3, #28]
 8004a7e:	f003 0304 	and.w	r3, r3, #4
 8004a82:	60bb      	str	r3, [r7, #8]
 8004a84:	68bb      	ldr	r3, [r7, #8]
}
 8004a86:	bf00      	nop
 8004a88:	3714      	adds	r7, #20
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bc80      	pop	{r7}
 8004a8e:	4770      	bx	lr
 8004a90:	40000400 	.word	0x40000400
 8004a94:	40021000 	.word	0x40021000
 8004a98:	40000800 	.word	0x40000800

08004a9c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b08a      	sub	sp, #40	; 0x28
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004aa4:	f107 0314 	add.w	r3, r7, #20
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	601a      	str	r2, [r3, #0]
 8004aac:	605a      	str	r2, [r3, #4]
 8004aae:	609a      	str	r2, [r3, #8]
 8004ab0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a27      	ldr	r2, [pc, #156]	; (8004b54 <HAL_TIM_MspPostInit+0xb8>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d12a      	bne.n	8004b12 <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004abc:	4b26      	ldr	r3, [pc, #152]	; (8004b58 <HAL_TIM_MspPostInit+0xbc>)
 8004abe:	699b      	ldr	r3, [r3, #24]
 8004ac0:	4a25      	ldr	r2, [pc, #148]	; (8004b58 <HAL_TIM_MspPostInit+0xbc>)
 8004ac2:	f043 0308 	orr.w	r3, r3, #8
 8004ac6:	6193      	str	r3, [r2, #24]
 8004ac8:	4b23      	ldr	r3, [pc, #140]	; (8004b58 <HAL_TIM_MspPostInit+0xbc>)
 8004aca:	699b      	ldr	r3, [r3, #24]
 8004acc:	f003 0308 	and.w	r3, r3, #8
 8004ad0:	613b      	str	r3, [r7, #16]
 8004ad2:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004ad4:	2330      	movs	r3, #48	; 0x30
 8004ad6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ad8:	2302      	movs	r3, #2
 8004ada:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004adc:	2302      	movs	r3, #2
 8004ade:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ae0:	f107 0314 	add.w	r3, r7, #20
 8004ae4:	4619      	mov	r1, r3
 8004ae6:	481d      	ldr	r0, [pc, #116]	; (8004b5c <HAL_TIM_MspPostInit+0xc0>)
 8004ae8:	f000 fb52 	bl	8005190 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8004aec:	4b1c      	ldr	r3, [pc, #112]	; (8004b60 <HAL_TIM_MspPostInit+0xc4>)
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	627b      	str	r3, [r7, #36]	; 0x24
 8004af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004af8:	627b      	str	r3, [r7, #36]	; 0x24
 8004afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8004b00:	627b      	str	r3, [r7, #36]	; 0x24
 8004b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b04:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004b08:	627b      	str	r3, [r7, #36]	; 0x24
 8004b0a:	4a15      	ldr	r2, [pc, #84]	; (8004b60 <HAL_TIM_MspPostInit+0xc4>)
 8004b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0e:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8004b10:	e01c      	b.n	8004b4c <HAL_TIM_MspPostInit+0xb0>
  else if(htim->Instance==TIM4)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a13      	ldr	r2, [pc, #76]	; (8004b64 <HAL_TIM_MspPostInit+0xc8>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d117      	bne.n	8004b4c <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b1c:	4b0e      	ldr	r3, [pc, #56]	; (8004b58 <HAL_TIM_MspPostInit+0xbc>)
 8004b1e:	699b      	ldr	r3, [r3, #24]
 8004b20:	4a0d      	ldr	r2, [pc, #52]	; (8004b58 <HAL_TIM_MspPostInit+0xbc>)
 8004b22:	f043 0308 	orr.w	r3, r3, #8
 8004b26:	6193      	str	r3, [r2, #24]
 8004b28:	4b0b      	ldr	r3, [pc, #44]	; (8004b58 <HAL_TIM_MspPostInit+0xbc>)
 8004b2a:	699b      	ldr	r3, [r3, #24]
 8004b2c:	f003 0308 	and.w	r3, r3, #8
 8004b30:	60fb      	str	r3, [r7, #12]
 8004b32:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004b34:	23c0      	movs	r3, #192	; 0xc0
 8004b36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b38:	2302      	movs	r3, #2
 8004b3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b3c:	2302      	movs	r3, #2
 8004b3e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b40:	f107 0314 	add.w	r3, r7, #20
 8004b44:	4619      	mov	r1, r3
 8004b46:	4805      	ldr	r0, [pc, #20]	; (8004b5c <HAL_TIM_MspPostInit+0xc0>)
 8004b48:	f000 fb22 	bl	8005190 <HAL_GPIO_Init>
}
 8004b4c:	bf00      	nop
 8004b4e:	3728      	adds	r7, #40	; 0x28
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	40000400 	.word	0x40000400
 8004b58:	40021000 	.word	0x40021000
 8004b5c:	40010c00 	.word	0x40010c00
 8004b60:	40010000 	.word	0x40010000
 8004b64:	40000800 	.word	0x40000800

08004b68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b088      	sub	sp, #32
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b70:	f107 0310 	add.w	r3, r7, #16
 8004b74:	2200      	movs	r2, #0
 8004b76:	601a      	str	r2, [r3, #0]
 8004b78:	605a      	str	r2, [r3, #4]
 8004b7a:	609a      	str	r2, [r3, #8]
 8004b7c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a20      	ldr	r2, [pc, #128]	; (8004c04 <HAL_UART_MspInit+0x9c>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d139      	bne.n	8004bfc <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004b88:	4b1f      	ldr	r3, [pc, #124]	; (8004c08 <HAL_UART_MspInit+0xa0>)
 8004b8a:	699b      	ldr	r3, [r3, #24]
 8004b8c:	4a1e      	ldr	r2, [pc, #120]	; (8004c08 <HAL_UART_MspInit+0xa0>)
 8004b8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b92:	6193      	str	r3, [r2, #24]
 8004b94:	4b1c      	ldr	r3, [pc, #112]	; (8004c08 <HAL_UART_MspInit+0xa0>)
 8004b96:	699b      	ldr	r3, [r3, #24]
 8004b98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b9c:	60fb      	str	r3, [r7, #12]
 8004b9e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ba0:	4b19      	ldr	r3, [pc, #100]	; (8004c08 <HAL_UART_MspInit+0xa0>)
 8004ba2:	699b      	ldr	r3, [r3, #24]
 8004ba4:	4a18      	ldr	r2, [pc, #96]	; (8004c08 <HAL_UART_MspInit+0xa0>)
 8004ba6:	f043 0304 	orr.w	r3, r3, #4
 8004baa:	6193      	str	r3, [r2, #24]
 8004bac:	4b16      	ldr	r3, [pc, #88]	; (8004c08 <HAL_UART_MspInit+0xa0>)
 8004bae:	699b      	ldr	r3, [r3, #24]
 8004bb0:	f003 0304 	and.w	r3, r3, #4
 8004bb4:	60bb      	str	r3, [r7, #8]
 8004bb6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004bb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004bbc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bbe:	2302      	movs	r3, #2
 8004bc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bc6:	f107 0310 	add.w	r3, r7, #16
 8004bca:	4619      	mov	r1, r3
 8004bcc:	480f      	ldr	r0, [pc, #60]	; (8004c0c <HAL_UART_MspInit+0xa4>)
 8004bce:	f000 fadf 	bl	8005190 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004bd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bd6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004be0:	f107 0310 	add.w	r3, r7, #16
 8004be4:	4619      	mov	r1, r3
 8004be6:	4809      	ldr	r0, [pc, #36]	; (8004c0c <HAL_UART_MspInit+0xa4>)
 8004be8:	f000 fad2 	bl	8005190 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004bec:	2200      	movs	r2, #0
 8004bee:	2100      	movs	r1, #0
 8004bf0:	2025      	movs	r0, #37	; 0x25
 8004bf2:	f000 f9e4 	bl	8004fbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004bf6:	2025      	movs	r0, #37	; 0x25
 8004bf8:	f000 f9fd 	bl	8004ff6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004bfc:	bf00      	nop
 8004bfe:	3720      	adds	r7, #32
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}
 8004c04:	40013800 	.word	0x40013800
 8004c08:	40021000 	.word	0x40021000
 8004c0c:	40010800 	.word	0x40010800

08004c10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004c10:	b480      	push	{r7}
 8004c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004c14:	e7fe      	b.n	8004c14 <NMI_Handler+0x4>

08004c16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004c16:	b480      	push	{r7}
 8004c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004c1a:	e7fe      	b.n	8004c1a <HardFault_Handler+0x4>

08004c1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004c20:	e7fe      	b.n	8004c20 <MemManage_Handler+0x4>

08004c22 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004c22:	b480      	push	{r7}
 8004c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004c26:	e7fe      	b.n	8004c26 <BusFault_Handler+0x4>

08004c28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004c2c:	e7fe      	b.n	8004c2c <UsageFault_Handler+0x4>

08004c2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004c2e:	b480      	push	{r7}
 8004c30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004c32:	bf00      	nop
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bc80      	pop	{r7}
 8004c38:	4770      	bx	lr

08004c3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004c3a:	b480      	push	{r7}
 8004c3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004c3e:	bf00      	nop
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bc80      	pop	{r7}
 8004c44:	4770      	bx	lr

08004c46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004c46:	b480      	push	{r7}
 8004c48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004c4a:	bf00      	nop
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bc80      	pop	{r7}
 8004c50:	4770      	bx	lr

08004c52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004c52:	b580      	push	{r7, lr}
 8004c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004c56:	f000 f8bf 	bl	8004dd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004c5a:	bf00      	nop
 8004c5c:	bd80      	pop	{r7, pc}
	...

08004c60 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004c64:	4802      	ldr	r0, [pc, #8]	; (8004c70 <TIM1_UP_IRQHandler+0x10>)
 8004c66:	f002 fa2d 	bl	80070c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8004c6a:	bf00      	nop
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	200003ec 	.word	0x200003ec

08004c74 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004c78:	4802      	ldr	r0, [pc, #8]	; (8004c84 <USART1_IRQHandler+0x10>)
 8004c7a:	f003 f873 	bl	8007d64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004c7e:	bf00      	nop
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	200004c4 	.word	0x200004c4

08004c88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b086      	sub	sp, #24
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004c90:	4a14      	ldr	r2, [pc, #80]	; (8004ce4 <_sbrk+0x5c>)
 8004c92:	4b15      	ldr	r3, [pc, #84]	; (8004ce8 <_sbrk+0x60>)
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004c9c:	4b13      	ldr	r3, [pc, #76]	; (8004cec <_sbrk+0x64>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d102      	bne.n	8004caa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004ca4:	4b11      	ldr	r3, [pc, #68]	; (8004cec <_sbrk+0x64>)
 8004ca6:	4a12      	ldr	r2, [pc, #72]	; (8004cf0 <_sbrk+0x68>)
 8004ca8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004caa:	4b10      	ldr	r3, [pc, #64]	; (8004cec <_sbrk+0x64>)
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4413      	add	r3, r2
 8004cb2:	693a      	ldr	r2, [r7, #16]
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d207      	bcs.n	8004cc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004cb8:	f003 fd54 	bl	8008764 <__errno>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	220c      	movs	r2, #12
 8004cc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8004cc6:	e009      	b.n	8004cdc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004cc8:	4b08      	ldr	r3, [pc, #32]	; (8004cec <_sbrk+0x64>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004cce:	4b07      	ldr	r3, [pc, #28]	; (8004cec <_sbrk+0x64>)
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4413      	add	r3, r2
 8004cd6:	4a05      	ldr	r2, [pc, #20]	; (8004cec <_sbrk+0x64>)
 8004cd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004cda:	68fb      	ldr	r3, [r7, #12]
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3718      	adds	r7, #24
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}
 8004ce4:	20005000 	.word	0x20005000
 8004ce8:	00000400 	.word	0x00000400
 8004cec:	200005e8 	.word	0x200005e8
 8004cf0:	20000738 	.word	0x20000738

08004cf4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004cf8:	bf00      	nop
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bc80      	pop	{r7}
 8004cfe:	4770      	bx	lr

08004d00 <Reset_Handler>:
  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/    bl  SystemInit
 8004d00:	f7ff fff8 	bl	8004cf4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004d04:	480b      	ldr	r0, [pc, #44]	; (8004d34 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8004d06:	490c      	ldr	r1, [pc, #48]	; (8004d38 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004d08:	4a0c      	ldr	r2, [pc, #48]	; (8004d3c <LoopFillZerobss+0x16>)
  movs r3, #0
 8004d0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004d0c:	e002      	b.n	8004d14 <LoopCopyDataInit>

08004d0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004d0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004d10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004d12:	3304      	adds	r3, #4

08004d14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004d14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004d16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004d18:	d3f9      	bcc.n	8004d0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004d1a:	4a09      	ldr	r2, [pc, #36]	; (8004d40 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8004d1c:	4c09      	ldr	r4, [pc, #36]	; (8004d44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004d1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004d20:	e001      	b.n	8004d26 <LoopFillZerobss>

08004d22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004d22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004d24:	3204      	adds	r2, #4

08004d26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004d26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004d28:	d3fb      	bcc.n	8004d22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004d2a:	f003 fd21 	bl	8008770 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004d2e:	f7fc fbaf 	bl	8001490 <main>
  bx lr
 8004d32:	4770      	bx	lr
  ldr r0, =_sdata
 8004d34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004d38:	20000118 	.word	0x20000118
  ldr r2, =_sidata
 8004d3c:	08009b08 	.word	0x08009b08
  ldr r2, =_sbss
 8004d40:	20000118 	.word	0x20000118
  ldr r4, =_ebss
 8004d44:	20000738 	.word	0x20000738

08004d48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004d48:	e7fe      	b.n	8004d48 <ADC1_2_IRQHandler>
	...

08004d4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004d50:	4b08      	ldr	r3, [pc, #32]	; (8004d74 <HAL_Init+0x28>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a07      	ldr	r2, [pc, #28]	; (8004d74 <HAL_Init+0x28>)
 8004d56:	f043 0310 	orr.w	r3, r3, #16
 8004d5a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004d5c:	2003      	movs	r0, #3
 8004d5e:	f000 f923 	bl	8004fa8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004d62:	200f      	movs	r0, #15
 8004d64:	f000 f808 	bl	8004d78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004d68:	f7ff fdbe 	bl	80048e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	40022000 	.word	0x40022000

08004d78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004d80:	4b12      	ldr	r3, [pc, #72]	; (8004dcc <HAL_InitTick+0x54>)
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	4b12      	ldr	r3, [pc, #72]	; (8004dd0 <HAL_InitTick+0x58>)
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	4619      	mov	r1, r3
 8004d8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004d8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d96:	4618      	mov	r0, r3
 8004d98:	f000 f93b 	bl	8005012 <HAL_SYSTICK_Config>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d001      	beq.n	8004da6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e00e      	b.n	8004dc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2b0f      	cmp	r3, #15
 8004daa:	d80a      	bhi.n	8004dc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004dac:	2200      	movs	r2, #0
 8004dae:	6879      	ldr	r1, [r7, #4]
 8004db0:	f04f 30ff 	mov.w	r0, #4294967295
 8004db4:	f000 f903 	bl	8004fbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004db8:	4a06      	ldr	r2, [pc, #24]	; (8004dd4 <HAL_InitTick+0x5c>)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	e000      	b.n	8004dc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3708      	adds	r7, #8
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	200000ac 	.word	0x200000ac
 8004dd0:	200000b4 	.word	0x200000b4
 8004dd4:	200000b0 	.word	0x200000b0

08004dd8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004ddc:	4b05      	ldr	r3, [pc, #20]	; (8004df4 <HAL_IncTick+0x1c>)
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	461a      	mov	r2, r3
 8004de2:	4b05      	ldr	r3, [pc, #20]	; (8004df8 <HAL_IncTick+0x20>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4413      	add	r3, r2
 8004de8:	4a03      	ldr	r2, [pc, #12]	; (8004df8 <HAL_IncTick+0x20>)
 8004dea:	6013      	str	r3, [r2, #0]
}
 8004dec:	bf00      	nop
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bc80      	pop	{r7}
 8004df2:	4770      	bx	lr
 8004df4:	200000b4 	.word	0x200000b4
 8004df8:	200005ec 	.word	0x200005ec

08004dfc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	af00      	add	r7, sp, #0
  return uwTick;
 8004e00:	4b02      	ldr	r3, [pc, #8]	; (8004e0c <HAL_GetTick+0x10>)
 8004e02:	681b      	ldr	r3, [r3, #0]
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bc80      	pop	{r7}
 8004e0a:	4770      	bx	lr
 8004e0c:	200005ec 	.word	0x200005ec

08004e10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b085      	sub	sp, #20
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f003 0307 	and.w	r3, r3, #7
 8004e1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e20:	4b0c      	ldr	r3, [pc, #48]	; (8004e54 <__NVIC_SetPriorityGrouping+0x44>)
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e26:	68ba      	ldr	r2, [r7, #8]
 8004e28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004e38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004e3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e42:	4a04      	ldr	r2, [pc, #16]	; (8004e54 <__NVIC_SetPriorityGrouping+0x44>)
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	60d3      	str	r3, [r2, #12]
}
 8004e48:	bf00      	nop
 8004e4a:	3714      	adds	r7, #20
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bc80      	pop	{r7}
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop
 8004e54:	e000ed00 	.word	0xe000ed00

08004e58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e5c:	4b04      	ldr	r3, [pc, #16]	; (8004e70 <__NVIC_GetPriorityGrouping+0x18>)
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	0a1b      	lsrs	r3, r3, #8
 8004e62:	f003 0307 	and.w	r3, r3, #7
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bc80      	pop	{r7}
 8004e6c:	4770      	bx	lr
 8004e6e:	bf00      	nop
 8004e70:	e000ed00 	.word	0xe000ed00

08004e74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	db0b      	blt.n	8004e9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e86:	79fb      	ldrb	r3, [r7, #7]
 8004e88:	f003 021f 	and.w	r2, r3, #31
 8004e8c:	4906      	ldr	r1, [pc, #24]	; (8004ea8 <__NVIC_EnableIRQ+0x34>)
 8004e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e92:	095b      	lsrs	r3, r3, #5
 8004e94:	2001      	movs	r0, #1
 8004e96:	fa00 f202 	lsl.w	r2, r0, r2
 8004e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004e9e:	bf00      	nop
 8004ea0:	370c      	adds	r7, #12
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bc80      	pop	{r7}
 8004ea6:	4770      	bx	lr
 8004ea8:	e000e100 	.word	0xe000e100

08004eac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	6039      	str	r1, [r7, #0]
 8004eb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	db0a      	blt.n	8004ed6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	b2da      	uxtb	r2, r3
 8004ec4:	490c      	ldr	r1, [pc, #48]	; (8004ef8 <__NVIC_SetPriority+0x4c>)
 8004ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eca:	0112      	lsls	r2, r2, #4
 8004ecc:	b2d2      	uxtb	r2, r2
 8004ece:	440b      	add	r3, r1
 8004ed0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ed4:	e00a      	b.n	8004eec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	b2da      	uxtb	r2, r3
 8004eda:	4908      	ldr	r1, [pc, #32]	; (8004efc <__NVIC_SetPriority+0x50>)
 8004edc:	79fb      	ldrb	r3, [r7, #7]
 8004ede:	f003 030f 	and.w	r3, r3, #15
 8004ee2:	3b04      	subs	r3, #4
 8004ee4:	0112      	lsls	r2, r2, #4
 8004ee6:	b2d2      	uxtb	r2, r2
 8004ee8:	440b      	add	r3, r1
 8004eea:	761a      	strb	r2, [r3, #24]
}
 8004eec:	bf00      	nop
 8004eee:	370c      	adds	r7, #12
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bc80      	pop	{r7}
 8004ef4:	4770      	bx	lr
 8004ef6:	bf00      	nop
 8004ef8:	e000e100 	.word	0xe000e100
 8004efc:	e000ed00 	.word	0xe000ed00

08004f00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b089      	sub	sp, #36	; 0x24
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f003 0307 	and.w	r3, r3, #7
 8004f12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	f1c3 0307 	rsb	r3, r3, #7
 8004f1a:	2b04      	cmp	r3, #4
 8004f1c:	bf28      	it	cs
 8004f1e:	2304      	movcs	r3, #4
 8004f20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	3304      	adds	r3, #4
 8004f26:	2b06      	cmp	r3, #6
 8004f28:	d902      	bls.n	8004f30 <NVIC_EncodePriority+0x30>
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	3b03      	subs	r3, #3
 8004f2e:	e000      	b.n	8004f32 <NVIC_EncodePriority+0x32>
 8004f30:	2300      	movs	r3, #0
 8004f32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f34:	f04f 32ff 	mov.w	r2, #4294967295
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f3e:	43da      	mvns	r2, r3
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	401a      	ands	r2, r3
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f48:	f04f 31ff 	mov.w	r1, #4294967295
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8004f52:	43d9      	mvns	r1, r3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f58:	4313      	orrs	r3, r2
         );
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3724      	adds	r7, #36	; 0x24
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bc80      	pop	{r7}
 8004f62:	4770      	bx	lr

08004f64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b082      	sub	sp, #8
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f74:	d301      	bcc.n	8004f7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004f76:	2301      	movs	r3, #1
 8004f78:	e00f      	b.n	8004f9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004f7a:	4a0a      	ldr	r2, [pc, #40]	; (8004fa4 <SysTick_Config+0x40>)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	3b01      	subs	r3, #1
 8004f80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004f82:	210f      	movs	r1, #15
 8004f84:	f04f 30ff 	mov.w	r0, #4294967295
 8004f88:	f7ff ff90 	bl	8004eac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004f8c:	4b05      	ldr	r3, [pc, #20]	; (8004fa4 <SysTick_Config+0x40>)
 8004f8e:	2200      	movs	r2, #0
 8004f90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f92:	4b04      	ldr	r3, [pc, #16]	; (8004fa4 <SysTick_Config+0x40>)
 8004f94:	2207      	movs	r2, #7
 8004f96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3708      	adds	r7, #8
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	e000e010 	.word	0xe000e010

08004fa8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b082      	sub	sp, #8
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f7ff ff2d 	bl	8004e10 <__NVIC_SetPriorityGrouping>
}
 8004fb6:	bf00      	nop
 8004fb8:	3708      	adds	r7, #8
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}

08004fbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004fbe:	b580      	push	{r7, lr}
 8004fc0:	b086      	sub	sp, #24
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	60b9      	str	r1, [r7, #8]
 8004fc8:	607a      	str	r2, [r7, #4]
 8004fca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004fd0:	f7ff ff42 	bl	8004e58 <__NVIC_GetPriorityGrouping>
 8004fd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	68b9      	ldr	r1, [r7, #8]
 8004fda:	6978      	ldr	r0, [r7, #20]
 8004fdc:	f7ff ff90 	bl	8004f00 <NVIC_EncodePriority>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fe6:	4611      	mov	r1, r2
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f7ff ff5f 	bl	8004eac <__NVIC_SetPriority>
}
 8004fee:	bf00      	nop
 8004ff0:	3718      	adds	r7, #24
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}

08004ff6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ff6:	b580      	push	{r7, lr}
 8004ff8:	b082      	sub	sp, #8
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005004:	4618      	mov	r0, r3
 8005006:	f7ff ff35 	bl	8004e74 <__NVIC_EnableIRQ>
}
 800500a:	bf00      	nop
 800500c:	3708      	adds	r7, #8
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}

08005012 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005012:	b580      	push	{r7, lr}
 8005014:	b082      	sub	sp, #8
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f7ff ffa2 	bl	8004f64 <SysTick_Config>
 8005020:	4603      	mov	r3, r0
}
 8005022:	4618      	mov	r0, r3
 8005024:	3708      	adds	r7, #8
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}

0800502a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800502a:	b480      	push	{r7}
 800502c:	b085      	sub	sp, #20
 800502e:	af00      	add	r7, sp, #0
 8005030:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005032:	2300      	movs	r3, #0
 8005034:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800503c:	b2db      	uxtb	r3, r3
 800503e:	2b02      	cmp	r3, #2
 8005040:	d008      	beq.n	8005054 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2204      	movs	r2, #4
 8005046:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	e020      	b.n	8005096 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f022 020e 	bic.w	r2, r2, #14
 8005062:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f022 0201 	bic.w	r2, r2, #1
 8005072:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800507c:	2101      	movs	r1, #1
 800507e:	fa01 f202 	lsl.w	r2, r1, r2
 8005082:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8005094:	7bfb      	ldrb	r3, [r7, #15]
}
 8005096:	4618      	mov	r0, r3
 8005098:	3714      	adds	r7, #20
 800509a:	46bd      	mov	sp, r7
 800509c:	bc80      	pop	{r7}
 800509e:	4770      	bx	lr

080050a0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050a8:	2300      	movs	r3, #0
 80050aa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	d005      	beq.n	80050c4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2204      	movs	r2, #4
 80050bc:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	73fb      	strb	r3, [r7, #15]
 80050c2:	e051      	b.n	8005168 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f022 020e 	bic.w	r2, r2, #14
 80050d2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f022 0201 	bic.w	r2, r2, #1
 80050e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a22      	ldr	r2, [pc, #136]	; (8005174 <HAL_DMA_Abort_IT+0xd4>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d029      	beq.n	8005142 <HAL_DMA_Abort_IT+0xa2>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a21      	ldr	r2, [pc, #132]	; (8005178 <HAL_DMA_Abort_IT+0xd8>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d022      	beq.n	800513e <HAL_DMA_Abort_IT+0x9e>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a1f      	ldr	r2, [pc, #124]	; (800517c <HAL_DMA_Abort_IT+0xdc>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d01a      	beq.n	8005138 <HAL_DMA_Abort_IT+0x98>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a1e      	ldr	r2, [pc, #120]	; (8005180 <HAL_DMA_Abort_IT+0xe0>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d012      	beq.n	8005132 <HAL_DMA_Abort_IT+0x92>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a1c      	ldr	r2, [pc, #112]	; (8005184 <HAL_DMA_Abort_IT+0xe4>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d00a      	beq.n	800512c <HAL_DMA_Abort_IT+0x8c>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a1b      	ldr	r2, [pc, #108]	; (8005188 <HAL_DMA_Abort_IT+0xe8>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d102      	bne.n	8005126 <HAL_DMA_Abort_IT+0x86>
 8005120:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005124:	e00e      	b.n	8005144 <HAL_DMA_Abort_IT+0xa4>
 8005126:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800512a:	e00b      	b.n	8005144 <HAL_DMA_Abort_IT+0xa4>
 800512c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005130:	e008      	b.n	8005144 <HAL_DMA_Abort_IT+0xa4>
 8005132:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005136:	e005      	b.n	8005144 <HAL_DMA_Abort_IT+0xa4>
 8005138:	f44f 7380 	mov.w	r3, #256	; 0x100
 800513c:	e002      	b.n	8005144 <HAL_DMA_Abort_IT+0xa4>
 800513e:	2310      	movs	r3, #16
 8005140:	e000      	b.n	8005144 <HAL_DMA_Abort_IT+0xa4>
 8005142:	2301      	movs	r3, #1
 8005144:	4a11      	ldr	r2, [pc, #68]	; (800518c <HAL_DMA_Abort_IT+0xec>)
 8005146:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800515c:	2b00      	cmp	r3, #0
 800515e:	d003      	beq.n	8005168 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	4798      	blx	r3
    } 
  }
  return status;
 8005168:	7bfb      	ldrb	r3, [r7, #15]
}
 800516a:	4618      	mov	r0, r3
 800516c:	3710      	adds	r7, #16
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}
 8005172:	bf00      	nop
 8005174:	40020008 	.word	0x40020008
 8005178:	4002001c 	.word	0x4002001c
 800517c:	40020030 	.word	0x40020030
 8005180:	40020044 	.word	0x40020044
 8005184:	40020058 	.word	0x40020058
 8005188:	4002006c 	.word	0x4002006c
 800518c:	40020000 	.word	0x40020000

08005190 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005190:	b480      	push	{r7}
 8005192:	b08b      	sub	sp, #44	; 0x2c
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800519a:	2300      	movs	r3, #0
 800519c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800519e:	2300      	movs	r3, #0
 80051a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80051a2:	e169      	b.n	8005478 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80051a4:	2201      	movs	r2, #1
 80051a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a8:	fa02 f303 	lsl.w	r3, r2, r3
 80051ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	69fa      	ldr	r2, [r7, #28]
 80051b4:	4013      	ands	r3, r2
 80051b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80051b8:	69ba      	ldr	r2, [r7, #24]
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	429a      	cmp	r2, r3
 80051be:	f040 8158 	bne.w	8005472 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	4a9a      	ldr	r2, [pc, #616]	; (8005430 <HAL_GPIO_Init+0x2a0>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d05e      	beq.n	800528a <HAL_GPIO_Init+0xfa>
 80051cc:	4a98      	ldr	r2, [pc, #608]	; (8005430 <HAL_GPIO_Init+0x2a0>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d875      	bhi.n	80052be <HAL_GPIO_Init+0x12e>
 80051d2:	4a98      	ldr	r2, [pc, #608]	; (8005434 <HAL_GPIO_Init+0x2a4>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d058      	beq.n	800528a <HAL_GPIO_Init+0xfa>
 80051d8:	4a96      	ldr	r2, [pc, #600]	; (8005434 <HAL_GPIO_Init+0x2a4>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d86f      	bhi.n	80052be <HAL_GPIO_Init+0x12e>
 80051de:	4a96      	ldr	r2, [pc, #600]	; (8005438 <HAL_GPIO_Init+0x2a8>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d052      	beq.n	800528a <HAL_GPIO_Init+0xfa>
 80051e4:	4a94      	ldr	r2, [pc, #592]	; (8005438 <HAL_GPIO_Init+0x2a8>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d869      	bhi.n	80052be <HAL_GPIO_Init+0x12e>
 80051ea:	4a94      	ldr	r2, [pc, #592]	; (800543c <HAL_GPIO_Init+0x2ac>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d04c      	beq.n	800528a <HAL_GPIO_Init+0xfa>
 80051f0:	4a92      	ldr	r2, [pc, #584]	; (800543c <HAL_GPIO_Init+0x2ac>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d863      	bhi.n	80052be <HAL_GPIO_Init+0x12e>
 80051f6:	4a92      	ldr	r2, [pc, #584]	; (8005440 <HAL_GPIO_Init+0x2b0>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d046      	beq.n	800528a <HAL_GPIO_Init+0xfa>
 80051fc:	4a90      	ldr	r2, [pc, #576]	; (8005440 <HAL_GPIO_Init+0x2b0>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d85d      	bhi.n	80052be <HAL_GPIO_Init+0x12e>
 8005202:	2b12      	cmp	r3, #18
 8005204:	d82a      	bhi.n	800525c <HAL_GPIO_Init+0xcc>
 8005206:	2b12      	cmp	r3, #18
 8005208:	d859      	bhi.n	80052be <HAL_GPIO_Init+0x12e>
 800520a:	a201      	add	r2, pc, #4	; (adr r2, 8005210 <HAL_GPIO_Init+0x80>)
 800520c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005210:	0800528b 	.word	0x0800528b
 8005214:	08005265 	.word	0x08005265
 8005218:	08005277 	.word	0x08005277
 800521c:	080052b9 	.word	0x080052b9
 8005220:	080052bf 	.word	0x080052bf
 8005224:	080052bf 	.word	0x080052bf
 8005228:	080052bf 	.word	0x080052bf
 800522c:	080052bf 	.word	0x080052bf
 8005230:	080052bf 	.word	0x080052bf
 8005234:	080052bf 	.word	0x080052bf
 8005238:	080052bf 	.word	0x080052bf
 800523c:	080052bf 	.word	0x080052bf
 8005240:	080052bf 	.word	0x080052bf
 8005244:	080052bf 	.word	0x080052bf
 8005248:	080052bf 	.word	0x080052bf
 800524c:	080052bf 	.word	0x080052bf
 8005250:	080052bf 	.word	0x080052bf
 8005254:	0800526d 	.word	0x0800526d
 8005258:	08005281 	.word	0x08005281
 800525c:	4a79      	ldr	r2, [pc, #484]	; (8005444 <HAL_GPIO_Init+0x2b4>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d013      	beq.n	800528a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005262:	e02c      	b.n	80052be <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	623b      	str	r3, [r7, #32]
          break;
 800526a:	e029      	b.n	80052c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	3304      	adds	r3, #4
 8005272:	623b      	str	r3, [r7, #32]
          break;
 8005274:	e024      	b.n	80052c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	3308      	adds	r3, #8
 800527c:	623b      	str	r3, [r7, #32]
          break;
 800527e:	e01f      	b.n	80052c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	330c      	adds	r3, #12
 8005286:	623b      	str	r3, [r7, #32]
          break;
 8005288:	e01a      	b.n	80052c0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d102      	bne.n	8005298 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005292:	2304      	movs	r3, #4
 8005294:	623b      	str	r3, [r7, #32]
          break;
 8005296:	e013      	b.n	80052c0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	2b01      	cmp	r3, #1
 800529e:	d105      	bne.n	80052ac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80052a0:	2308      	movs	r3, #8
 80052a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	69fa      	ldr	r2, [r7, #28]
 80052a8:	611a      	str	r2, [r3, #16]
          break;
 80052aa:	e009      	b.n	80052c0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80052ac:	2308      	movs	r3, #8
 80052ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	69fa      	ldr	r2, [r7, #28]
 80052b4:	615a      	str	r2, [r3, #20]
          break;
 80052b6:	e003      	b.n	80052c0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80052b8:	2300      	movs	r3, #0
 80052ba:	623b      	str	r3, [r7, #32]
          break;
 80052bc:	e000      	b.n	80052c0 <HAL_GPIO_Init+0x130>
          break;
 80052be:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80052c0:	69bb      	ldr	r3, [r7, #24]
 80052c2:	2bff      	cmp	r3, #255	; 0xff
 80052c4:	d801      	bhi.n	80052ca <HAL_GPIO_Init+0x13a>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	e001      	b.n	80052ce <HAL_GPIO_Init+0x13e>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	3304      	adds	r3, #4
 80052ce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80052d0:	69bb      	ldr	r3, [r7, #24]
 80052d2:	2bff      	cmp	r3, #255	; 0xff
 80052d4:	d802      	bhi.n	80052dc <HAL_GPIO_Init+0x14c>
 80052d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	e002      	b.n	80052e2 <HAL_GPIO_Init+0x152>
 80052dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052de:	3b08      	subs	r3, #8
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	210f      	movs	r1, #15
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	fa01 f303 	lsl.w	r3, r1, r3
 80052f0:	43db      	mvns	r3, r3
 80052f2:	401a      	ands	r2, r3
 80052f4:	6a39      	ldr	r1, [r7, #32]
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	fa01 f303 	lsl.w	r3, r1, r3
 80052fc:	431a      	orrs	r2, r3
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800530a:	2b00      	cmp	r3, #0
 800530c:	f000 80b1 	beq.w	8005472 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005310:	4b4d      	ldr	r3, [pc, #308]	; (8005448 <HAL_GPIO_Init+0x2b8>)
 8005312:	699b      	ldr	r3, [r3, #24]
 8005314:	4a4c      	ldr	r2, [pc, #304]	; (8005448 <HAL_GPIO_Init+0x2b8>)
 8005316:	f043 0301 	orr.w	r3, r3, #1
 800531a:	6193      	str	r3, [r2, #24]
 800531c:	4b4a      	ldr	r3, [pc, #296]	; (8005448 <HAL_GPIO_Init+0x2b8>)
 800531e:	699b      	ldr	r3, [r3, #24]
 8005320:	f003 0301 	and.w	r3, r3, #1
 8005324:	60bb      	str	r3, [r7, #8]
 8005326:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005328:	4a48      	ldr	r2, [pc, #288]	; (800544c <HAL_GPIO_Init+0x2bc>)
 800532a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532c:	089b      	lsrs	r3, r3, #2
 800532e:	3302      	adds	r3, #2
 8005330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005334:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005338:	f003 0303 	and.w	r3, r3, #3
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	220f      	movs	r2, #15
 8005340:	fa02 f303 	lsl.w	r3, r2, r3
 8005344:	43db      	mvns	r3, r3
 8005346:	68fa      	ldr	r2, [r7, #12]
 8005348:	4013      	ands	r3, r2
 800534a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	4a40      	ldr	r2, [pc, #256]	; (8005450 <HAL_GPIO_Init+0x2c0>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d013      	beq.n	800537c <HAL_GPIO_Init+0x1ec>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	4a3f      	ldr	r2, [pc, #252]	; (8005454 <HAL_GPIO_Init+0x2c4>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d00d      	beq.n	8005378 <HAL_GPIO_Init+0x1e8>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4a3e      	ldr	r2, [pc, #248]	; (8005458 <HAL_GPIO_Init+0x2c8>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d007      	beq.n	8005374 <HAL_GPIO_Init+0x1e4>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	4a3d      	ldr	r2, [pc, #244]	; (800545c <HAL_GPIO_Init+0x2cc>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d101      	bne.n	8005370 <HAL_GPIO_Init+0x1e0>
 800536c:	2303      	movs	r3, #3
 800536e:	e006      	b.n	800537e <HAL_GPIO_Init+0x1ee>
 8005370:	2304      	movs	r3, #4
 8005372:	e004      	b.n	800537e <HAL_GPIO_Init+0x1ee>
 8005374:	2302      	movs	r3, #2
 8005376:	e002      	b.n	800537e <HAL_GPIO_Init+0x1ee>
 8005378:	2301      	movs	r3, #1
 800537a:	e000      	b.n	800537e <HAL_GPIO_Init+0x1ee>
 800537c:	2300      	movs	r3, #0
 800537e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005380:	f002 0203 	and.w	r2, r2, #3
 8005384:	0092      	lsls	r2, r2, #2
 8005386:	4093      	lsls	r3, r2
 8005388:	68fa      	ldr	r2, [r7, #12]
 800538a:	4313      	orrs	r3, r2
 800538c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800538e:	492f      	ldr	r1, [pc, #188]	; (800544c <HAL_GPIO_Init+0x2bc>)
 8005390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005392:	089b      	lsrs	r3, r3, #2
 8005394:	3302      	adds	r3, #2
 8005396:	68fa      	ldr	r2, [r7, #12]
 8005398:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d006      	beq.n	80053b6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80053a8:	4b2d      	ldr	r3, [pc, #180]	; (8005460 <HAL_GPIO_Init+0x2d0>)
 80053aa:	689a      	ldr	r2, [r3, #8]
 80053ac:	492c      	ldr	r1, [pc, #176]	; (8005460 <HAL_GPIO_Init+0x2d0>)
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	608b      	str	r3, [r1, #8]
 80053b4:	e006      	b.n	80053c4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80053b6:	4b2a      	ldr	r3, [pc, #168]	; (8005460 <HAL_GPIO_Init+0x2d0>)
 80053b8:	689a      	ldr	r2, [r3, #8]
 80053ba:	69bb      	ldr	r3, [r7, #24]
 80053bc:	43db      	mvns	r3, r3
 80053be:	4928      	ldr	r1, [pc, #160]	; (8005460 <HAL_GPIO_Init+0x2d0>)
 80053c0:	4013      	ands	r3, r2
 80053c2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d006      	beq.n	80053de <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80053d0:	4b23      	ldr	r3, [pc, #140]	; (8005460 <HAL_GPIO_Init+0x2d0>)
 80053d2:	68da      	ldr	r2, [r3, #12]
 80053d4:	4922      	ldr	r1, [pc, #136]	; (8005460 <HAL_GPIO_Init+0x2d0>)
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	4313      	orrs	r3, r2
 80053da:	60cb      	str	r3, [r1, #12]
 80053dc:	e006      	b.n	80053ec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80053de:	4b20      	ldr	r3, [pc, #128]	; (8005460 <HAL_GPIO_Init+0x2d0>)
 80053e0:	68da      	ldr	r2, [r3, #12]
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	43db      	mvns	r3, r3
 80053e6:	491e      	ldr	r1, [pc, #120]	; (8005460 <HAL_GPIO_Init+0x2d0>)
 80053e8:	4013      	ands	r3, r2
 80053ea:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d006      	beq.n	8005406 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80053f8:	4b19      	ldr	r3, [pc, #100]	; (8005460 <HAL_GPIO_Init+0x2d0>)
 80053fa:	685a      	ldr	r2, [r3, #4]
 80053fc:	4918      	ldr	r1, [pc, #96]	; (8005460 <HAL_GPIO_Init+0x2d0>)
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	4313      	orrs	r3, r2
 8005402:	604b      	str	r3, [r1, #4]
 8005404:	e006      	b.n	8005414 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005406:	4b16      	ldr	r3, [pc, #88]	; (8005460 <HAL_GPIO_Init+0x2d0>)
 8005408:	685a      	ldr	r2, [r3, #4]
 800540a:	69bb      	ldr	r3, [r7, #24]
 800540c:	43db      	mvns	r3, r3
 800540e:	4914      	ldr	r1, [pc, #80]	; (8005460 <HAL_GPIO_Init+0x2d0>)
 8005410:	4013      	ands	r3, r2
 8005412:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800541c:	2b00      	cmp	r3, #0
 800541e:	d021      	beq.n	8005464 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005420:	4b0f      	ldr	r3, [pc, #60]	; (8005460 <HAL_GPIO_Init+0x2d0>)
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	490e      	ldr	r1, [pc, #56]	; (8005460 <HAL_GPIO_Init+0x2d0>)
 8005426:	69bb      	ldr	r3, [r7, #24]
 8005428:	4313      	orrs	r3, r2
 800542a:	600b      	str	r3, [r1, #0]
 800542c:	e021      	b.n	8005472 <HAL_GPIO_Init+0x2e2>
 800542e:	bf00      	nop
 8005430:	10320000 	.word	0x10320000
 8005434:	10310000 	.word	0x10310000
 8005438:	10220000 	.word	0x10220000
 800543c:	10210000 	.word	0x10210000
 8005440:	10120000 	.word	0x10120000
 8005444:	10110000 	.word	0x10110000
 8005448:	40021000 	.word	0x40021000
 800544c:	40010000 	.word	0x40010000
 8005450:	40010800 	.word	0x40010800
 8005454:	40010c00 	.word	0x40010c00
 8005458:	40011000 	.word	0x40011000
 800545c:	40011400 	.word	0x40011400
 8005460:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005464:	4b0b      	ldr	r3, [pc, #44]	; (8005494 <HAL_GPIO_Init+0x304>)
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	43db      	mvns	r3, r3
 800546c:	4909      	ldr	r1, [pc, #36]	; (8005494 <HAL_GPIO_Init+0x304>)
 800546e:	4013      	ands	r3, r2
 8005470:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8005472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005474:	3301      	adds	r3, #1
 8005476:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547e:	fa22 f303 	lsr.w	r3, r2, r3
 8005482:	2b00      	cmp	r3, #0
 8005484:	f47f ae8e 	bne.w	80051a4 <HAL_GPIO_Init+0x14>
  }
}
 8005488:	bf00      	nop
 800548a:	bf00      	nop
 800548c:	372c      	adds	r7, #44	; 0x2c
 800548e:	46bd      	mov	sp, r7
 8005490:	bc80      	pop	{r7}
 8005492:	4770      	bx	lr
 8005494:	40010400 	.word	0x40010400

08005498 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	460b      	mov	r3, r1
 80054a2:	807b      	strh	r3, [r7, #2]
 80054a4:	4613      	mov	r3, r2
 80054a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80054a8:	787b      	ldrb	r3, [r7, #1]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d003      	beq.n	80054b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80054ae:	887a      	ldrh	r2, [r7, #2]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80054b4:	e003      	b.n	80054be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80054b6:	887b      	ldrh	r3, [r7, #2]
 80054b8:	041a      	lsls	r2, r3, #16
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	611a      	str	r2, [r3, #16]
}
 80054be:	bf00      	nop
 80054c0:	370c      	adds	r7, #12
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bc80      	pop	{r7}
 80054c6:	4770      	bx	lr

080054c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d101      	bne.n	80054da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e12b      	b.n	8005732 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d106      	bne.n	80054f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f7ff fa2c 	bl	800494c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2224      	movs	r2, #36	; 0x24
 80054f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f022 0201 	bic.w	r2, r2, #1
 800550a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800551a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800552a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800552c:	f001 fbf0 	bl	8006d10 <HAL_RCC_GetPCLK1Freq>
 8005530:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	4a81      	ldr	r2, [pc, #516]	; (800573c <HAL_I2C_Init+0x274>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d807      	bhi.n	800554c <HAL_I2C_Init+0x84>
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	4a80      	ldr	r2, [pc, #512]	; (8005740 <HAL_I2C_Init+0x278>)
 8005540:	4293      	cmp	r3, r2
 8005542:	bf94      	ite	ls
 8005544:	2301      	movls	r3, #1
 8005546:	2300      	movhi	r3, #0
 8005548:	b2db      	uxtb	r3, r3
 800554a:	e006      	b.n	800555a <HAL_I2C_Init+0x92>
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	4a7d      	ldr	r2, [pc, #500]	; (8005744 <HAL_I2C_Init+0x27c>)
 8005550:	4293      	cmp	r3, r2
 8005552:	bf94      	ite	ls
 8005554:	2301      	movls	r3, #1
 8005556:	2300      	movhi	r3, #0
 8005558:	b2db      	uxtb	r3, r3
 800555a:	2b00      	cmp	r3, #0
 800555c:	d001      	beq.n	8005562 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e0e7      	b.n	8005732 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	4a78      	ldr	r2, [pc, #480]	; (8005748 <HAL_I2C_Init+0x280>)
 8005566:	fba2 2303 	umull	r2, r3, r2, r3
 800556a:	0c9b      	lsrs	r3, r3, #18
 800556c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	68ba      	ldr	r2, [r7, #8]
 800557e:	430a      	orrs	r2, r1
 8005580:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	6a1b      	ldr	r3, [r3, #32]
 8005588:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	4a6a      	ldr	r2, [pc, #424]	; (800573c <HAL_I2C_Init+0x274>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d802      	bhi.n	800559c <HAL_I2C_Init+0xd4>
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	3301      	adds	r3, #1
 800559a:	e009      	b.n	80055b0 <HAL_I2C_Init+0xe8>
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80055a2:	fb02 f303 	mul.w	r3, r2, r3
 80055a6:	4a69      	ldr	r2, [pc, #420]	; (800574c <HAL_I2C_Init+0x284>)
 80055a8:	fba2 2303 	umull	r2, r3, r2, r3
 80055ac:	099b      	lsrs	r3, r3, #6
 80055ae:	3301      	adds	r3, #1
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	6812      	ldr	r2, [r2, #0]
 80055b4:	430b      	orrs	r3, r1
 80055b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	69db      	ldr	r3, [r3, #28]
 80055be:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80055c2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	495c      	ldr	r1, [pc, #368]	; (800573c <HAL_I2C_Init+0x274>)
 80055cc:	428b      	cmp	r3, r1
 80055ce:	d819      	bhi.n	8005604 <HAL_I2C_Init+0x13c>
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	1e59      	subs	r1, r3, #1
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	005b      	lsls	r3, r3, #1
 80055da:	fbb1 f3f3 	udiv	r3, r1, r3
 80055de:	1c59      	adds	r1, r3, #1
 80055e0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80055e4:	400b      	ands	r3, r1
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00a      	beq.n	8005600 <HAL_I2C_Init+0x138>
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	1e59      	subs	r1, r3, #1
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	005b      	lsls	r3, r3, #1
 80055f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80055f8:	3301      	adds	r3, #1
 80055fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055fe:	e051      	b.n	80056a4 <HAL_I2C_Init+0x1dc>
 8005600:	2304      	movs	r3, #4
 8005602:	e04f      	b.n	80056a4 <HAL_I2C_Init+0x1dc>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d111      	bne.n	8005630 <HAL_I2C_Init+0x168>
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	1e58      	subs	r0, r3, #1
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6859      	ldr	r1, [r3, #4]
 8005614:	460b      	mov	r3, r1
 8005616:	005b      	lsls	r3, r3, #1
 8005618:	440b      	add	r3, r1
 800561a:	fbb0 f3f3 	udiv	r3, r0, r3
 800561e:	3301      	adds	r3, #1
 8005620:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005624:	2b00      	cmp	r3, #0
 8005626:	bf0c      	ite	eq
 8005628:	2301      	moveq	r3, #1
 800562a:	2300      	movne	r3, #0
 800562c:	b2db      	uxtb	r3, r3
 800562e:	e012      	b.n	8005656 <HAL_I2C_Init+0x18e>
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	1e58      	subs	r0, r3, #1
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6859      	ldr	r1, [r3, #4]
 8005638:	460b      	mov	r3, r1
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	440b      	add	r3, r1
 800563e:	0099      	lsls	r1, r3, #2
 8005640:	440b      	add	r3, r1
 8005642:	fbb0 f3f3 	udiv	r3, r0, r3
 8005646:	3301      	adds	r3, #1
 8005648:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800564c:	2b00      	cmp	r3, #0
 800564e:	bf0c      	ite	eq
 8005650:	2301      	moveq	r3, #1
 8005652:	2300      	movne	r3, #0
 8005654:	b2db      	uxtb	r3, r3
 8005656:	2b00      	cmp	r3, #0
 8005658:	d001      	beq.n	800565e <HAL_I2C_Init+0x196>
 800565a:	2301      	movs	r3, #1
 800565c:	e022      	b.n	80056a4 <HAL_I2C_Init+0x1dc>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d10e      	bne.n	8005684 <HAL_I2C_Init+0x1bc>
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	1e58      	subs	r0, r3, #1
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6859      	ldr	r1, [r3, #4]
 800566e:	460b      	mov	r3, r1
 8005670:	005b      	lsls	r3, r3, #1
 8005672:	440b      	add	r3, r1
 8005674:	fbb0 f3f3 	udiv	r3, r0, r3
 8005678:	3301      	adds	r3, #1
 800567a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800567e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005682:	e00f      	b.n	80056a4 <HAL_I2C_Init+0x1dc>
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	1e58      	subs	r0, r3, #1
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6859      	ldr	r1, [r3, #4]
 800568c:	460b      	mov	r3, r1
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	440b      	add	r3, r1
 8005692:	0099      	lsls	r1, r3, #2
 8005694:	440b      	add	r3, r1
 8005696:	fbb0 f3f3 	udiv	r3, r0, r3
 800569a:	3301      	adds	r3, #1
 800569c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80056a4:	6879      	ldr	r1, [r7, #4]
 80056a6:	6809      	ldr	r1, [r1, #0]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	69da      	ldr	r2, [r3, #28]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6a1b      	ldr	r3, [r3, #32]
 80056be:	431a      	orrs	r2, r3
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	430a      	orrs	r2, r1
 80056c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80056d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	6911      	ldr	r1, [r2, #16]
 80056da:	687a      	ldr	r2, [r7, #4]
 80056dc:	68d2      	ldr	r2, [r2, #12]
 80056de:	4311      	orrs	r1, r2
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	6812      	ldr	r2, [r2, #0]
 80056e4:	430b      	orrs	r3, r1
 80056e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	695a      	ldr	r2, [r3, #20]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	699b      	ldr	r3, [r3, #24]
 80056fa:	431a      	orrs	r2, r3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	430a      	orrs	r2, r1
 8005702:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f042 0201 	orr.w	r2, r2, #1
 8005712:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2220      	movs	r2, #32
 800571e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005730:	2300      	movs	r3, #0
}
 8005732:	4618      	mov	r0, r3
 8005734:	3710      	adds	r7, #16
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
 800573a:	bf00      	nop
 800573c:	000186a0 	.word	0x000186a0
 8005740:	001e847f 	.word	0x001e847f
 8005744:	003d08ff 	.word	0x003d08ff
 8005748:	431bde83 	.word	0x431bde83
 800574c:	10624dd3 	.word	0x10624dd3

08005750 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b088      	sub	sp, #32
 8005754:	af02      	add	r7, sp, #8
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	4608      	mov	r0, r1
 800575a:	4611      	mov	r1, r2
 800575c:	461a      	mov	r2, r3
 800575e:	4603      	mov	r3, r0
 8005760:	817b      	strh	r3, [r7, #10]
 8005762:	460b      	mov	r3, r1
 8005764:	813b      	strh	r3, [r7, #8]
 8005766:	4613      	mov	r3, r2
 8005768:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800576a:	f7ff fb47 	bl	8004dfc <HAL_GetTick>
 800576e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005776:	b2db      	uxtb	r3, r3
 8005778:	2b20      	cmp	r3, #32
 800577a:	f040 80d9 	bne.w	8005930 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	9300      	str	r3, [sp, #0]
 8005782:	2319      	movs	r3, #25
 8005784:	2201      	movs	r2, #1
 8005786:	496d      	ldr	r1, [pc, #436]	; (800593c <HAL_I2C_Mem_Write+0x1ec>)
 8005788:	68f8      	ldr	r0, [r7, #12]
 800578a:	f000 fcc1 	bl	8006110 <I2C_WaitOnFlagUntilTimeout>
 800578e:	4603      	mov	r3, r0
 8005790:	2b00      	cmp	r3, #0
 8005792:	d001      	beq.n	8005798 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005794:	2302      	movs	r3, #2
 8005796:	e0cc      	b.n	8005932 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d101      	bne.n	80057a6 <HAL_I2C_Mem_Write+0x56>
 80057a2:	2302      	movs	r3, #2
 80057a4:	e0c5      	b.n	8005932 <HAL_I2C_Mem_Write+0x1e2>
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2201      	movs	r2, #1
 80057aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f003 0301 	and.w	r3, r3, #1
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d007      	beq.n	80057cc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f042 0201 	orr.w	r2, r2, #1
 80057ca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057da:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2221      	movs	r2, #33	; 0x21
 80057e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2240      	movs	r2, #64	; 0x40
 80057e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2200      	movs	r2, #0
 80057f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	6a3a      	ldr	r2, [r7, #32]
 80057f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80057fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005802:	b29a      	uxth	r2, r3
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	4a4d      	ldr	r2, [pc, #308]	; (8005940 <HAL_I2C_Mem_Write+0x1f0>)
 800580c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800580e:	88f8      	ldrh	r0, [r7, #6]
 8005810:	893a      	ldrh	r2, [r7, #8]
 8005812:	8979      	ldrh	r1, [r7, #10]
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	9301      	str	r3, [sp, #4]
 8005818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800581a:	9300      	str	r3, [sp, #0]
 800581c:	4603      	mov	r3, r0
 800581e:	68f8      	ldr	r0, [r7, #12]
 8005820:	f000 faf8 	bl	8005e14 <I2C_RequestMemoryWrite>
 8005824:	4603      	mov	r3, r0
 8005826:	2b00      	cmp	r3, #0
 8005828:	d052      	beq.n	80058d0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e081      	b.n	8005932 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800582e:	697a      	ldr	r2, [r7, #20]
 8005830:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005832:	68f8      	ldr	r0, [r7, #12]
 8005834:	f000 fd86 	bl	8006344 <I2C_WaitOnTXEFlagUntilTimeout>
 8005838:	4603      	mov	r3, r0
 800583a:	2b00      	cmp	r3, #0
 800583c:	d00d      	beq.n	800585a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005842:	2b04      	cmp	r3, #4
 8005844:	d107      	bne.n	8005856 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005854:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	e06b      	b.n	8005932 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585e:	781a      	ldrb	r2, [r3, #0]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586a:	1c5a      	adds	r2, r3, #1
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005874:	3b01      	subs	r3, #1
 8005876:	b29a      	uxth	r2, r3
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005880:	b29b      	uxth	r3, r3
 8005882:	3b01      	subs	r3, #1
 8005884:	b29a      	uxth	r2, r3
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	695b      	ldr	r3, [r3, #20]
 8005890:	f003 0304 	and.w	r3, r3, #4
 8005894:	2b04      	cmp	r3, #4
 8005896:	d11b      	bne.n	80058d0 <HAL_I2C_Mem_Write+0x180>
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800589c:	2b00      	cmp	r3, #0
 800589e:	d017      	beq.n	80058d0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a4:	781a      	ldrb	r2, [r3, #0]
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b0:	1c5a      	adds	r2, r3, #1
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058ba:	3b01      	subs	r3, #1
 80058bc:	b29a      	uxth	r2, r3
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	3b01      	subs	r3, #1
 80058ca:	b29a      	uxth	r2, r3
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d1aa      	bne.n	800582e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058d8:	697a      	ldr	r2, [r7, #20]
 80058da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80058dc:	68f8      	ldr	r0, [r7, #12]
 80058de:	f000 fd79 	bl	80063d4 <I2C_WaitOnBTFFlagUntilTimeout>
 80058e2:	4603      	mov	r3, r0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d00d      	beq.n	8005904 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ec:	2b04      	cmp	r3, #4
 80058ee:	d107      	bne.n	8005900 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058fe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	e016      	b.n	8005932 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005912:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2220      	movs	r2, #32
 8005918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2200      	movs	r2, #0
 8005920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2200      	movs	r2, #0
 8005928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800592c:	2300      	movs	r3, #0
 800592e:	e000      	b.n	8005932 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005930:	2302      	movs	r3, #2
  }
}
 8005932:	4618      	mov	r0, r3
 8005934:	3718      	adds	r7, #24
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop
 800593c:	00100002 	.word	0x00100002
 8005940:	ffff0000 	.word	0xffff0000

08005944 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b08c      	sub	sp, #48	; 0x30
 8005948:	af02      	add	r7, sp, #8
 800594a:	60f8      	str	r0, [r7, #12]
 800594c:	4608      	mov	r0, r1
 800594e:	4611      	mov	r1, r2
 8005950:	461a      	mov	r2, r3
 8005952:	4603      	mov	r3, r0
 8005954:	817b      	strh	r3, [r7, #10]
 8005956:	460b      	mov	r3, r1
 8005958:	813b      	strh	r3, [r7, #8]
 800595a:	4613      	mov	r3, r2
 800595c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800595e:	2300      	movs	r3, #0
 8005960:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005962:	f7ff fa4b 	bl	8004dfc <HAL_GetTick>
 8005966:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800596e:	b2db      	uxtb	r3, r3
 8005970:	2b20      	cmp	r3, #32
 8005972:	f040 8244 	bne.w	8005dfe <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005978:	9300      	str	r3, [sp, #0]
 800597a:	2319      	movs	r3, #25
 800597c:	2201      	movs	r2, #1
 800597e:	4982      	ldr	r1, [pc, #520]	; (8005b88 <HAL_I2C_Mem_Read+0x244>)
 8005980:	68f8      	ldr	r0, [r7, #12]
 8005982:	f000 fbc5 	bl	8006110 <I2C_WaitOnFlagUntilTimeout>
 8005986:	4603      	mov	r3, r0
 8005988:	2b00      	cmp	r3, #0
 800598a:	d001      	beq.n	8005990 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800598c:	2302      	movs	r3, #2
 800598e:	e237      	b.n	8005e00 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005996:	2b01      	cmp	r3, #1
 8005998:	d101      	bne.n	800599e <HAL_I2C_Mem_Read+0x5a>
 800599a:	2302      	movs	r3, #2
 800599c:	e230      	b.n	8005e00 <HAL_I2C_Mem_Read+0x4bc>
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2201      	movs	r2, #1
 80059a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f003 0301 	and.w	r3, r3, #1
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d007      	beq.n	80059c4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f042 0201 	orr.w	r2, r2, #1
 80059c2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059d2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2222      	movs	r2, #34	; 0x22
 80059d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2240      	movs	r2, #64	; 0x40
 80059e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2200      	movs	r2, #0
 80059e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80059f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059fa:	b29a      	uxth	r2, r3
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	4a62      	ldr	r2, [pc, #392]	; (8005b8c <HAL_I2C_Mem_Read+0x248>)
 8005a04:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005a06:	88f8      	ldrh	r0, [r7, #6]
 8005a08:	893a      	ldrh	r2, [r7, #8]
 8005a0a:	8979      	ldrh	r1, [r7, #10]
 8005a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0e:	9301      	str	r3, [sp, #4]
 8005a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a12:	9300      	str	r3, [sp, #0]
 8005a14:	4603      	mov	r3, r0
 8005a16:	68f8      	ldr	r0, [r7, #12]
 8005a18:	f000 fa92 	bl	8005f40 <I2C_RequestMemoryRead>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d001      	beq.n	8005a26 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e1ec      	b.n	8005e00 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d113      	bne.n	8005a56 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a2e:	2300      	movs	r3, #0
 8005a30:	61fb      	str	r3, [r7, #28]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	695b      	ldr	r3, [r3, #20]
 8005a38:	61fb      	str	r3, [r7, #28]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	699b      	ldr	r3, [r3, #24]
 8005a40:	61fb      	str	r3, [r7, #28]
 8005a42:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a52:	601a      	str	r2, [r3, #0]
 8005a54:	e1c0      	b.n	8005dd8 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d11e      	bne.n	8005a9c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a6c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005a6e:	b672      	cpsid	i
}
 8005a70:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a72:	2300      	movs	r3, #0
 8005a74:	61bb      	str	r3, [r7, #24]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	695b      	ldr	r3, [r3, #20]
 8005a7c:	61bb      	str	r3, [r7, #24]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	699b      	ldr	r3, [r3, #24]
 8005a84:	61bb      	str	r3, [r7, #24]
 8005a86:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a96:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005a98:	b662      	cpsie	i
}
 8005a9a:	e035      	b.n	8005b08 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005aa0:	2b02      	cmp	r3, #2
 8005aa2:	d11e      	bne.n	8005ae2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ab2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005ab4:	b672      	cpsid	i
}
 8005ab6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ab8:	2300      	movs	r3, #0
 8005aba:	617b      	str	r3, [r7, #20]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	695b      	ldr	r3, [r3, #20]
 8005ac2:	617b      	str	r3, [r7, #20]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	699b      	ldr	r3, [r3, #24]
 8005aca:	617b      	str	r3, [r7, #20]
 8005acc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005adc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005ade:	b662      	cpsie	i
}
 8005ae0:	e012      	b.n	8005b08 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005af0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005af2:	2300      	movs	r3, #0
 8005af4:	613b      	str	r3, [r7, #16]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	695b      	ldr	r3, [r3, #20]
 8005afc:	613b      	str	r3, [r7, #16]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	699b      	ldr	r3, [r3, #24]
 8005b04:	613b      	str	r3, [r7, #16]
 8005b06:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8005b08:	e166      	b.n	8005dd8 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b0e:	2b03      	cmp	r3, #3
 8005b10:	f200 811f 	bhi.w	8005d52 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d123      	bne.n	8005b64 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b1e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005b20:	68f8      	ldr	r0, [r7, #12]
 8005b22:	f000 fc9f 	bl	8006464 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005b26:	4603      	mov	r3, r0
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d001      	beq.n	8005b30 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e167      	b.n	8005e00 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	691a      	ldr	r2, [r3, #16]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3a:	b2d2      	uxtb	r2, r2
 8005b3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b42:	1c5a      	adds	r2, r3, #1
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b4c:	3b01      	subs	r3, #1
 8005b4e:	b29a      	uxth	r2, r3
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	3b01      	subs	r3, #1
 8005b5c:	b29a      	uxth	r2, r3
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005b62:	e139      	b.n	8005dd8 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b68:	2b02      	cmp	r3, #2
 8005b6a:	d152      	bne.n	8005c12 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6e:	9300      	str	r3, [sp, #0]
 8005b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b72:	2200      	movs	r2, #0
 8005b74:	4906      	ldr	r1, [pc, #24]	; (8005b90 <HAL_I2C_Mem_Read+0x24c>)
 8005b76:	68f8      	ldr	r0, [r7, #12]
 8005b78:	f000 faca 	bl	8006110 <I2C_WaitOnFlagUntilTimeout>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d008      	beq.n	8005b94 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	e13c      	b.n	8005e00 <HAL_I2C_Mem_Read+0x4bc>
 8005b86:	bf00      	nop
 8005b88:	00100002 	.word	0x00100002
 8005b8c:	ffff0000 	.word	0xffff0000
 8005b90:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8005b94:	b672      	cpsid	i
}
 8005b96:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ba6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	691a      	ldr	r2, [r3, #16]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb2:	b2d2      	uxtb	r2, r2
 8005bb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bba:	1c5a      	adds	r2, r3, #1
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bc4:	3b01      	subs	r3, #1
 8005bc6:	b29a      	uxth	r2, r3
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	3b01      	subs	r3, #1
 8005bd4:	b29a      	uxth	r2, r3
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005bda:	b662      	cpsie	i
}
 8005bdc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	691a      	ldr	r2, [r3, #16]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be8:	b2d2      	uxtb	r2, r2
 8005bea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf0:	1c5a      	adds	r2, r3, #1
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bfa:	3b01      	subs	r3, #1
 8005bfc:	b29a      	uxth	r2, r3
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	3b01      	subs	r3, #1
 8005c0a:	b29a      	uxth	r2, r3
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005c10:	e0e2      	b.n	8005dd8 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c14:	9300      	str	r3, [sp, #0]
 8005c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c18:	2200      	movs	r2, #0
 8005c1a:	497b      	ldr	r1, [pc, #492]	; (8005e08 <HAL_I2C_Mem_Read+0x4c4>)
 8005c1c:	68f8      	ldr	r0, [r7, #12]
 8005c1e:	f000 fa77 	bl	8006110 <I2C_WaitOnFlagUntilTimeout>
 8005c22:	4603      	mov	r3, r0
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d001      	beq.n	8005c2c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e0e9      	b.n	8005e00 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c3a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005c3c:	b672      	cpsid	i
}
 8005c3e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	691a      	ldr	r2, [r3, #16]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4a:	b2d2      	uxtb	r2, r2
 8005c4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c52:	1c5a      	adds	r2, r3, #1
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c5c:	3b01      	subs	r3, #1
 8005c5e:	b29a      	uxth	r2, r3
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	3b01      	subs	r3, #1
 8005c6c:	b29a      	uxth	r2, r3
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005c72:	4b66      	ldr	r3, [pc, #408]	; (8005e0c <HAL_I2C_Mem_Read+0x4c8>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	08db      	lsrs	r3, r3, #3
 8005c78:	4a65      	ldr	r2, [pc, #404]	; (8005e10 <HAL_I2C_Mem_Read+0x4cc>)
 8005c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c7e:	0a1a      	lsrs	r2, r3, #8
 8005c80:	4613      	mov	r3, r2
 8005c82:	009b      	lsls	r3, r3, #2
 8005c84:	4413      	add	r3, r2
 8005c86:	00da      	lsls	r2, r3, #3
 8005c88:	1ad3      	subs	r3, r2, r3
 8005c8a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8005c8c:	6a3b      	ldr	r3, [r7, #32]
 8005c8e:	3b01      	subs	r3, #1
 8005c90:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8005c92:	6a3b      	ldr	r3, [r7, #32]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d118      	bne.n	8005cca <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2220      	movs	r2, #32
 8005ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb2:	f043 0220 	orr.w	r2, r3, #32
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8005cba:	b662      	cpsie	i
}
 8005cbc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e09a      	b.n	8005e00 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	695b      	ldr	r3, [r3, #20]
 8005cd0:	f003 0304 	and.w	r3, r3, #4
 8005cd4:	2b04      	cmp	r3, #4
 8005cd6:	d1d9      	bne.n	8005c8c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ce6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	691a      	ldr	r2, [r3, #16]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf2:	b2d2      	uxtb	r2, r2
 8005cf4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfa:	1c5a      	adds	r2, r3, #1
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d04:	3b01      	subs	r3, #1
 8005d06:	b29a      	uxth	r2, r3
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	3b01      	subs	r3, #1
 8005d14:	b29a      	uxth	r2, r3
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005d1a:	b662      	cpsie	i
}
 8005d1c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	691a      	ldr	r2, [r3, #16]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d28:	b2d2      	uxtb	r2, r2
 8005d2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d30:	1c5a      	adds	r2, r3, #1
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d3a:	3b01      	subs	r3, #1
 8005d3c:	b29a      	uxth	r2, r3
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	3b01      	subs	r3, #1
 8005d4a:	b29a      	uxth	r2, r3
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005d50:	e042      	b.n	8005dd8 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d54:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005d56:	68f8      	ldr	r0, [r7, #12]
 8005d58:	f000 fb84 	bl	8006464 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d001      	beq.n	8005d66 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	e04c      	b.n	8005e00 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	691a      	ldr	r2, [r3, #16]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d70:	b2d2      	uxtb	r2, r2
 8005d72:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d78:	1c5a      	adds	r2, r3, #1
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d82:	3b01      	subs	r3, #1
 8005d84:	b29a      	uxth	r2, r3
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	3b01      	subs	r3, #1
 8005d92:	b29a      	uxth	r2, r3
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	695b      	ldr	r3, [r3, #20]
 8005d9e:	f003 0304 	and.w	r3, r3, #4
 8005da2:	2b04      	cmp	r3, #4
 8005da4:	d118      	bne.n	8005dd8 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	691a      	ldr	r2, [r3, #16]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db0:	b2d2      	uxtb	r2, r2
 8005db2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db8:	1c5a      	adds	r2, r3, #1
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dc2:	3b01      	subs	r3, #1
 8005dc4:	b29a      	uxth	r2, r3
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	3b01      	subs	r3, #1
 8005dd2:	b29a      	uxth	r2, r3
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	f47f ae94 	bne.w	8005b0a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2220      	movs	r2, #32
 8005de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2200      	movs	r2, #0
 8005dee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2200      	movs	r2, #0
 8005df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	e000      	b.n	8005e00 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8005dfe:	2302      	movs	r3, #2
  }
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3728      	adds	r7, #40	; 0x28
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}
 8005e08:	00010004 	.word	0x00010004
 8005e0c:	200000ac 	.word	0x200000ac
 8005e10:	14f8b589 	.word	0x14f8b589

08005e14 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b088      	sub	sp, #32
 8005e18:	af02      	add	r7, sp, #8
 8005e1a:	60f8      	str	r0, [r7, #12]
 8005e1c:	4608      	mov	r0, r1
 8005e1e:	4611      	mov	r1, r2
 8005e20:	461a      	mov	r2, r3
 8005e22:	4603      	mov	r3, r0
 8005e24:	817b      	strh	r3, [r7, #10]
 8005e26:	460b      	mov	r3, r1
 8005e28:	813b      	strh	r3, [r7, #8]
 8005e2a:	4613      	mov	r3, r2
 8005e2c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e3c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e40:	9300      	str	r3, [sp, #0]
 8005e42:	6a3b      	ldr	r3, [r7, #32]
 8005e44:	2200      	movs	r2, #0
 8005e46:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005e4a:	68f8      	ldr	r0, [r7, #12]
 8005e4c:	f000 f960 	bl	8006110 <I2C_WaitOnFlagUntilTimeout>
 8005e50:	4603      	mov	r3, r0
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d00d      	beq.n	8005e72 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e64:	d103      	bne.n	8005e6e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e6c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	e05f      	b.n	8005f32 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005e72:	897b      	ldrh	r3, [r7, #10]
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	461a      	mov	r2, r3
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005e80:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e84:	6a3a      	ldr	r2, [r7, #32]
 8005e86:	492d      	ldr	r1, [pc, #180]	; (8005f3c <I2C_RequestMemoryWrite+0x128>)
 8005e88:	68f8      	ldr	r0, [r7, #12]
 8005e8a:	f000 f9bb 	bl	8006204 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d001      	beq.n	8005e98 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	e04c      	b.n	8005f32 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e98:	2300      	movs	r3, #0
 8005e9a:	617b      	str	r3, [r7, #20]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	695b      	ldr	r3, [r3, #20]
 8005ea2:	617b      	str	r3, [r7, #20]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	699b      	ldr	r3, [r3, #24]
 8005eaa:	617b      	str	r3, [r7, #20]
 8005eac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005eae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eb0:	6a39      	ldr	r1, [r7, #32]
 8005eb2:	68f8      	ldr	r0, [r7, #12]
 8005eb4:	f000 fa46 	bl	8006344 <I2C_WaitOnTXEFlagUntilTimeout>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d00d      	beq.n	8005eda <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec2:	2b04      	cmp	r3, #4
 8005ec4:	d107      	bne.n	8005ed6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ed4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e02b      	b.n	8005f32 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005eda:	88fb      	ldrh	r3, [r7, #6]
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d105      	bne.n	8005eec <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ee0:	893b      	ldrh	r3, [r7, #8]
 8005ee2:	b2da      	uxtb	r2, r3
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	611a      	str	r2, [r3, #16]
 8005eea:	e021      	b.n	8005f30 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005eec:	893b      	ldrh	r3, [r7, #8]
 8005eee:	0a1b      	lsrs	r3, r3, #8
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	b2da      	uxtb	r2, r3
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005efa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005efc:	6a39      	ldr	r1, [r7, #32]
 8005efe:	68f8      	ldr	r0, [r7, #12]
 8005f00:	f000 fa20 	bl	8006344 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d00d      	beq.n	8005f26 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f0e:	2b04      	cmp	r3, #4
 8005f10:	d107      	bne.n	8005f22 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f20:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	e005      	b.n	8005f32 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005f26:	893b      	ldrh	r3, [r7, #8]
 8005f28:	b2da      	uxtb	r2, r3
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005f30:	2300      	movs	r3, #0
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3718      	adds	r7, #24
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
 8005f3a:	bf00      	nop
 8005f3c:	00010002 	.word	0x00010002

08005f40 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b088      	sub	sp, #32
 8005f44:	af02      	add	r7, sp, #8
 8005f46:	60f8      	str	r0, [r7, #12]
 8005f48:	4608      	mov	r0, r1
 8005f4a:	4611      	mov	r1, r2
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	4603      	mov	r3, r0
 8005f50:	817b      	strh	r3, [r7, #10]
 8005f52:	460b      	mov	r3, r1
 8005f54:	813b      	strh	r3, [r7, #8]
 8005f56:	4613      	mov	r3, r2
 8005f58:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	681a      	ldr	r2, [r3, #0]
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005f68:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f78:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7c:	9300      	str	r3, [sp, #0]
 8005f7e:	6a3b      	ldr	r3, [r7, #32]
 8005f80:	2200      	movs	r2, #0
 8005f82:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005f86:	68f8      	ldr	r0, [r7, #12]
 8005f88:	f000 f8c2 	bl	8006110 <I2C_WaitOnFlagUntilTimeout>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d00d      	beq.n	8005fae <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fa0:	d103      	bne.n	8005faa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fa8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005faa:	2303      	movs	r3, #3
 8005fac:	e0aa      	b.n	8006104 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005fae:	897b      	ldrh	r3, [r7, #10]
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005fbc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc0:	6a3a      	ldr	r2, [r7, #32]
 8005fc2:	4952      	ldr	r1, [pc, #328]	; (800610c <I2C_RequestMemoryRead+0x1cc>)
 8005fc4:	68f8      	ldr	r0, [r7, #12]
 8005fc6:	f000 f91d 	bl	8006204 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d001      	beq.n	8005fd4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e097      	b.n	8006104 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	617b      	str	r3, [r7, #20]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	695b      	ldr	r3, [r3, #20]
 8005fde:	617b      	str	r3, [r7, #20]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	699b      	ldr	r3, [r3, #24]
 8005fe6:	617b      	str	r3, [r7, #20]
 8005fe8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fec:	6a39      	ldr	r1, [r7, #32]
 8005fee:	68f8      	ldr	r0, [r7, #12]
 8005ff0:	f000 f9a8 	bl	8006344 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d00d      	beq.n	8006016 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ffe:	2b04      	cmp	r3, #4
 8006000:	d107      	bne.n	8006012 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006010:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	e076      	b.n	8006104 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006016:	88fb      	ldrh	r3, [r7, #6]
 8006018:	2b01      	cmp	r3, #1
 800601a:	d105      	bne.n	8006028 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800601c:	893b      	ldrh	r3, [r7, #8]
 800601e:	b2da      	uxtb	r2, r3
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	611a      	str	r2, [r3, #16]
 8006026:	e021      	b.n	800606c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006028:	893b      	ldrh	r3, [r7, #8]
 800602a:	0a1b      	lsrs	r3, r3, #8
 800602c:	b29b      	uxth	r3, r3
 800602e:	b2da      	uxtb	r2, r3
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006036:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006038:	6a39      	ldr	r1, [r7, #32]
 800603a:	68f8      	ldr	r0, [r7, #12]
 800603c:	f000 f982 	bl	8006344 <I2C_WaitOnTXEFlagUntilTimeout>
 8006040:	4603      	mov	r3, r0
 8006042:	2b00      	cmp	r3, #0
 8006044:	d00d      	beq.n	8006062 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800604a:	2b04      	cmp	r3, #4
 800604c:	d107      	bne.n	800605e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800605c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	e050      	b.n	8006104 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006062:	893b      	ldrh	r3, [r7, #8]
 8006064:	b2da      	uxtb	r2, r3
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800606c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800606e:	6a39      	ldr	r1, [r7, #32]
 8006070:	68f8      	ldr	r0, [r7, #12]
 8006072:	f000 f967 	bl	8006344 <I2C_WaitOnTXEFlagUntilTimeout>
 8006076:	4603      	mov	r3, r0
 8006078:	2b00      	cmp	r3, #0
 800607a:	d00d      	beq.n	8006098 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006080:	2b04      	cmp	r3, #4
 8006082:	d107      	bne.n	8006094 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006092:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	e035      	b.n	8006104 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060a6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80060a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060aa:	9300      	str	r3, [sp, #0]
 80060ac:	6a3b      	ldr	r3, [r7, #32]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80060b4:	68f8      	ldr	r0, [r7, #12]
 80060b6:	f000 f82b 	bl	8006110 <I2C_WaitOnFlagUntilTimeout>
 80060ba:	4603      	mov	r3, r0
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d00d      	beq.n	80060dc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060ce:	d103      	bne.n	80060d8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80060d8:	2303      	movs	r3, #3
 80060da:	e013      	b.n	8006104 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80060dc:	897b      	ldrh	r3, [r7, #10]
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	f043 0301 	orr.w	r3, r3, #1
 80060e4:	b2da      	uxtb	r2, r3
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80060ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ee:	6a3a      	ldr	r2, [r7, #32]
 80060f0:	4906      	ldr	r1, [pc, #24]	; (800610c <I2C_RequestMemoryRead+0x1cc>)
 80060f2:	68f8      	ldr	r0, [r7, #12]
 80060f4:	f000 f886 	bl	8006204 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80060f8:	4603      	mov	r3, r0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d001      	beq.n	8006102 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	e000      	b.n	8006104 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006102:	2300      	movs	r3, #0
}
 8006104:	4618      	mov	r0, r3
 8006106:	3718      	adds	r7, #24
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}
 800610c:	00010002 	.word	0x00010002

08006110 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b084      	sub	sp, #16
 8006114:	af00      	add	r7, sp, #0
 8006116:	60f8      	str	r0, [r7, #12]
 8006118:	60b9      	str	r1, [r7, #8]
 800611a:	603b      	str	r3, [r7, #0]
 800611c:	4613      	mov	r3, r2
 800611e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006120:	e048      	b.n	80061b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006128:	d044      	beq.n	80061b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800612a:	f7fe fe67 	bl	8004dfc <HAL_GetTick>
 800612e:	4602      	mov	r2, r0
 8006130:	69bb      	ldr	r3, [r7, #24]
 8006132:	1ad3      	subs	r3, r2, r3
 8006134:	683a      	ldr	r2, [r7, #0]
 8006136:	429a      	cmp	r2, r3
 8006138:	d302      	bcc.n	8006140 <I2C_WaitOnFlagUntilTimeout+0x30>
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d139      	bne.n	80061b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	0c1b      	lsrs	r3, r3, #16
 8006144:	b2db      	uxtb	r3, r3
 8006146:	2b01      	cmp	r3, #1
 8006148:	d10d      	bne.n	8006166 <I2C_WaitOnFlagUntilTimeout+0x56>
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	695b      	ldr	r3, [r3, #20]
 8006150:	43da      	mvns	r2, r3
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	4013      	ands	r3, r2
 8006156:	b29b      	uxth	r3, r3
 8006158:	2b00      	cmp	r3, #0
 800615a:	bf0c      	ite	eq
 800615c:	2301      	moveq	r3, #1
 800615e:	2300      	movne	r3, #0
 8006160:	b2db      	uxtb	r3, r3
 8006162:	461a      	mov	r2, r3
 8006164:	e00c      	b.n	8006180 <I2C_WaitOnFlagUntilTimeout+0x70>
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	699b      	ldr	r3, [r3, #24]
 800616c:	43da      	mvns	r2, r3
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	4013      	ands	r3, r2
 8006172:	b29b      	uxth	r3, r3
 8006174:	2b00      	cmp	r3, #0
 8006176:	bf0c      	ite	eq
 8006178:	2301      	moveq	r3, #1
 800617a:	2300      	movne	r3, #0
 800617c:	b2db      	uxtb	r3, r3
 800617e:	461a      	mov	r2, r3
 8006180:	79fb      	ldrb	r3, [r7, #7]
 8006182:	429a      	cmp	r2, r3
 8006184:	d116      	bne.n	80061b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2200      	movs	r2, #0
 800618a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2220      	movs	r2, #32
 8006190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2200      	movs	r2, #0
 8006198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a0:	f043 0220 	orr.w	r2, r3, #32
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2200      	movs	r2, #0
 80061ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	e023      	b.n	80061fc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	0c1b      	lsrs	r3, r3, #16
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d10d      	bne.n	80061da <I2C_WaitOnFlagUntilTimeout+0xca>
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	695b      	ldr	r3, [r3, #20]
 80061c4:	43da      	mvns	r2, r3
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	4013      	ands	r3, r2
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	bf0c      	ite	eq
 80061d0:	2301      	moveq	r3, #1
 80061d2:	2300      	movne	r3, #0
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	461a      	mov	r2, r3
 80061d8:	e00c      	b.n	80061f4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	699b      	ldr	r3, [r3, #24]
 80061e0:	43da      	mvns	r2, r3
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	4013      	ands	r3, r2
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	bf0c      	ite	eq
 80061ec:	2301      	moveq	r3, #1
 80061ee:	2300      	movne	r3, #0
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	461a      	mov	r2, r3
 80061f4:	79fb      	ldrb	r3, [r7, #7]
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d093      	beq.n	8006122 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80061fa:	2300      	movs	r3, #0
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3710      	adds	r7, #16
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}

08006204 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b084      	sub	sp, #16
 8006208:	af00      	add	r7, sp, #0
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	60b9      	str	r1, [r7, #8]
 800620e:	607a      	str	r2, [r7, #4]
 8006210:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006212:	e071      	b.n	80062f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	695b      	ldr	r3, [r3, #20]
 800621a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800621e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006222:	d123      	bne.n	800626c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006232:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800623c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2200      	movs	r2, #0
 8006242:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2220      	movs	r2, #32
 8006248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2200      	movs	r2, #0
 8006250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006258:	f043 0204 	orr.w	r2, r3, #4
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2200      	movs	r2, #0
 8006264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	e067      	b.n	800633c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006272:	d041      	beq.n	80062f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006274:	f7fe fdc2 	bl	8004dfc <HAL_GetTick>
 8006278:	4602      	mov	r2, r0
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	1ad3      	subs	r3, r2, r3
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	429a      	cmp	r2, r3
 8006282:	d302      	bcc.n	800628a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d136      	bne.n	80062f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	0c1b      	lsrs	r3, r3, #16
 800628e:	b2db      	uxtb	r3, r3
 8006290:	2b01      	cmp	r3, #1
 8006292:	d10c      	bne.n	80062ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	695b      	ldr	r3, [r3, #20]
 800629a:	43da      	mvns	r2, r3
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	4013      	ands	r3, r2
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	bf14      	ite	ne
 80062a6:	2301      	movne	r3, #1
 80062a8:	2300      	moveq	r3, #0
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	e00b      	b.n	80062c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	699b      	ldr	r3, [r3, #24]
 80062b4:	43da      	mvns	r2, r3
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	4013      	ands	r3, r2
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	2b00      	cmp	r3, #0
 80062be:	bf14      	ite	ne
 80062c0:	2301      	movne	r3, #1
 80062c2:	2300      	moveq	r3, #0
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d016      	beq.n	80062f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2200      	movs	r2, #0
 80062ce:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2220      	movs	r2, #32
 80062d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2200      	movs	r2, #0
 80062dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e4:	f043 0220 	orr.w	r2, r3, #32
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2200      	movs	r2, #0
 80062f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	e021      	b.n	800633c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	0c1b      	lsrs	r3, r3, #16
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d10c      	bne.n	800631c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	695b      	ldr	r3, [r3, #20]
 8006308:	43da      	mvns	r2, r3
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	4013      	ands	r3, r2
 800630e:	b29b      	uxth	r3, r3
 8006310:	2b00      	cmp	r3, #0
 8006312:	bf14      	ite	ne
 8006314:	2301      	movne	r3, #1
 8006316:	2300      	moveq	r3, #0
 8006318:	b2db      	uxtb	r3, r3
 800631a:	e00b      	b.n	8006334 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	699b      	ldr	r3, [r3, #24]
 8006322:	43da      	mvns	r2, r3
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	4013      	ands	r3, r2
 8006328:	b29b      	uxth	r3, r3
 800632a:	2b00      	cmp	r3, #0
 800632c:	bf14      	ite	ne
 800632e:	2301      	movne	r3, #1
 8006330:	2300      	moveq	r3, #0
 8006332:	b2db      	uxtb	r3, r3
 8006334:	2b00      	cmp	r3, #0
 8006336:	f47f af6d 	bne.w	8006214 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800633a:	2300      	movs	r3, #0
}
 800633c:	4618      	mov	r0, r3
 800633e:	3710      	adds	r7, #16
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	60f8      	str	r0, [r7, #12]
 800634c:	60b9      	str	r1, [r7, #8]
 800634e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006350:	e034      	b.n	80063bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006352:	68f8      	ldr	r0, [r7, #12]
 8006354:	f000 f8e3 	bl	800651e <I2C_IsAcknowledgeFailed>
 8006358:	4603      	mov	r3, r0
 800635a:	2b00      	cmp	r3, #0
 800635c:	d001      	beq.n	8006362 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	e034      	b.n	80063cc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006368:	d028      	beq.n	80063bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800636a:	f7fe fd47 	bl	8004dfc <HAL_GetTick>
 800636e:	4602      	mov	r2, r0
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	1ad3      	subs	r3, r2, r3
 8006374:	68ba      	ldr	r2, [r7, #8]
 8006376:	429a      	cmp	r2, r3
 8006378:	d302      	bcc.n	8006380 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d11d      	bne.n	80063bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	695b      	ldr	r3, [r3, #20]
 8006386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800638a:	2b80      	cmp	r3, #128	; 0x80
 800638c:	d016      	beq.n	80063bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2200      	movs	r2, #0
 8006392:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2220      	movs	r2, #32
 8006398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2200      	movs	r2, #0
 80063a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a8:	f043 0220 	orr.w	r2, r3, #32
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2200      	movs	r2, #0
 80063b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	e007      	b.n	80063cc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	695b      	ldr	r3, [r3, #20]
 80063c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063c6:	2b80      	cmp	r3, #128	; 0x80
 80063c8:	d1c3      	bne.n	8006352 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80063ca:	2300      	movs	r3, #0
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3710      	adds	r7, #16
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}

080063d4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b084      	sub	sp, #16
 80063d8:	af00      	add	r7, sp, #0
 80063da:	60f8      	str	r0, [r7, #12]
 80063dc:	60b9      	str	r1, [r7, #8]
 80063de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80063e0:	e034      	b.n	800644c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80063e2:	68f8      	ldr	r0, [r7, #12]
 80063e4:	f000 f89b 	bl	800651e <I2C_IsAcknowledgeFailed>
 80063e8:	4603      	mov	r3, r0
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d001      	beq.n	80063f2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	e034      	b.n	800645c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063f8:	d028      	beq.n	800644c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063fa:	f7fe fcff 	bl	8004dfc <HAL_GetTick>
 80063fe:	4602      	mov	r2, r0
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	1ad3      	subs	r3, r2, r3
 8006404:	68ba      	ldr	r2, [r7, #8]
 8006406:	429a      	cmp	r2, r3
 8006408:	d302      	bcc.n	8006410 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d11d      	bne.n	800644c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	695b      	ldr	r3, [r3, #20]
 8006416:	f003 0304 	and.w	r3, r3, #4
 800641a:	2b04      	cmp	r3, #4
 800641c:	d016      	beq.n	800644c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2200      	movs	r2, #0
 8006422:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2220      	movs	r2, #32
 8006428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2200      	movs	r2, #0
 8006430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006438:	f043 0220 	orr.w	r2, r3, #32
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2200      	movs	r2, #0
 8006444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	e007      	b.n	800645c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	695b      	ldr	r3, [r3, #20]
 8006452:	f003 0304 	and.w	r3, r3, #4
 8006456:	2b04      	cmp	r3, #4
 8006458:	d1c3      	bne.n	80063e2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800645a:	2300      	movs	r3, #0
}
 800645c:	4618      	mov	r0, r3
 800645e:	3710      	adds	r7, #16
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}

08006464 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b084      	sub	sp, #16
 8006468:	af00      	add	r7, sp, #0
 800646a:	60f8      	str	r0, [r7, #12]
 800646c:	60b9      	str	r1, [r7, #8]
 800646e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006470:	e049      	b.n	8006506 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	695b      	ldr	r3, [r3, #20]
 8006478:	f003 0310 	and.w	r3, r3, #16
 800647c:	2b10      	cmp	r3, #16
 800647e:	d119      	bne.n	80064b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f06f 0210 	mvn.w	r2, #16
 8006488:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2200      	movs	r2, #0
 800648e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2220      	movs	r2, #32
 8006494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2200      	movs	r2, #0
 800649c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2200      	movs	r2, #0
 80064ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80064b0:	2301      	movs	r3, #1
 80064b2:	e030      	b.n	8006516 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064b4:	f7fe fca2 	bl	8004dfc <HAL_GetTick>
 80064b8:	4602      	mov	r2, r0
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	1ad3      	subs	r3, r2, r3
 80064be:	68ba      	ldr	r2, [r7, #8]
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d302      	bcc.n	80064ca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d11d      	bne.n	8006506 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	695b      	ldr	r3, [r3, #20]
 80064d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064d4:	2b40      	cmp	r3, #64	; 0x40
 80064d6:	d016      	beq.n	8006506 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2200      	movs	r2, #0
 80064dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2220      	movs	r2, #32
 80064e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2200      	movs	r2, #0
 80064ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f2:	f043 0220 	orr.w	r2, r3, #32
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2200      	movs	r2, #0
 80064fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	e007      	b.n	8006516 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	695b      	ldr	r3, [r3, #20]
 800650c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006510:	2b40      	cmp	r3, #64	; 0x40
 8006512:	d1ae      	bne.n	8006472 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006514:	2300      	movs	r3, #0
}
 8006516:	4618      	mov	r0, r3
 8006518:	3710      	adds	r7, #16
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}

0800651e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800651e:	b480      	push	{r7}
 8006520:	b083      	sub	sp, #12
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	695b      	ldr	r3, [r3, #20]
 800652c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006530:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006534:	d11b      	bne.n	800656e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800653e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2220      	movs	r2, #32
 800654a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2200      	movs	r2, #0
 8006552:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800655a:	f043 0204 	orr.w	r2, r3, #4
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2200      	movs	r2, #0
 8006566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	e000      	b.n	8006570 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800656e:	2300      	movs	r3, #0
}
 8006570:	4618      	mov	r0, r3
 8006572:	370c      	adds	r7, #12
 8006574:	46bd      	mov	sp, r7
 8006576:	bc80      	pop	{r7}
 8006578:	4770      	bx	lr
	...

0800657c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b086      	sub	sp, #24
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d101      	bne.n	800658e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	e272      	b.n	8006a74 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f003 0301 	and.w	r3, r3, #1
 8006596:	2b00      	cmp	r3, #0
 8006598:	f000 8087 	beq.w	80066aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800659c:	4b92      	ldr	r3, [pc, #584]	; (80067e8 <HAL_RCC_OscConfig+0x26c>)
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	f003 030c 	and.w	r3, r3, #12
 80065a4:	2b04      	cmp	r3, #4
 80065a6:	d00c      	beq.n	80065c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80065a8:	4b8f      	ldr	r3, [pc, #572]	; (80067e8 <HAL_RCC_OscConfig+0x26c>)
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	f003 030c 	and.w	r3, r3, #12
 80065b0:	2b08      	cmp	r3, #8
 80065b2:	d112      	bne.n	80065da <HAL_RCC_OscConfig+0x5e>
 80065b4:	4b8c      	ldr	r3, [pc, #560]	; (80067e8 <HAL_RCC_OscConfig+0x26c>)
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065c0:	d10b      	bne.n	80065da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065c2:	4b89      	ldr	r3, [pc, #548]	; (80067e8 <HAL_RCC_OscConfig+0x26c>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d06c      	beq.n	80066a8 <HAL_RCC_OscConfig+0x12c>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d168      	bne.n	80066a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	e24c      	b.n	8006a74 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065e2:	d106      	bne.n	80065f2 <HAL_RCC_OscConfig+0x76>
 80065e4:	4b80      	ldr	r3, [pc, #512]	; (80067e8 <HAL_RCC_OscConfig+0x26c>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a7f      	ldr	r2, [pc, #508]	; (80067e8 <HAL_RCC_OscConfig+0x26c>)
 80065ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065ee:	6013      	str	r3, [r2, #0]
 80065f0:	e02e      	b.n	8006650 <HAL_RCC_OscConfig+0xd4>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d10c      	bne.n	8006614 <HAL_RCC_OscConfig+0x98>
 80065fa:	4b7b      	ldr	r3, [pc, #492]	; (80067e8 <HAL_RCC_OscConfig+0x26c>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a7a      	ldr	r2, [pc, #488]	; (80067e8 <HAL_RCC_OscConfig+0x26c>)
 8006600:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006604:	6013      	str	r3, [r2, #0]
 8006606:	4b78      	ldr	r3, [pc, #480]	; (80067e8 <HAL_RCC_OscConfig+0x26c>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a77      	ldr	r2, [pc, #476]	; (80067e8 <HAL_RCC_OscConfig+0x26c>)
 800660c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006610:	6013      	str	r3, [r2, #0]
 8006612:	e01d      	b.n	8006650 <HAL_RCC_OscConfig+0xd4>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800661c:	d10c      	bne.n	8006638 <HAL_RCC_OscConfig+0xbc>
 800661e:	4b72      	ldr	r3, [pc, #456]	; (80067e8 <HAL_RCC_OscConfig+0x26c>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a71      	ldr	r2, [pc, #452]	; (80067e8 <HAL_RCC_OscConfig+0x26c>)
 8006624:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006628:	6013      	str	r3, [r2, #0]
 800662a:	4b6f      	ldr	r3, [pc, #444]	; (80067e8 <HAL_RCC_OscConfig+0x26c>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a6e      	ldr	r2, [pc, #440]	; (80067e8 <HAL_RCC_OscConfig+0x26c>)
 8006630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006634:	6013      	str	r3, [r2, #0]
 8006636:	e00b      	b.n	8006650 <HAL_RCC_OscConfig+0xd4>
 8006638:	4b6b      	ldr	r3, [pc, #428]	; (80067e8 <HAL_RCC_OscConfig+0x26c>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a6a      	ldr	r2, [pc, #424]	; (80067e8 <HAL_RCC_OscConfig+0x26c>)
 800663e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006642:	6013      	str	r3, [r2, #0]
 8006644:	4b68      	ldr	r3, [pc, #416]	; (80067e8 <HAL_RCC_OscConfig+0x26c>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a67      	ldr	r2, [pc, #412]	; (80067e8 <HAL_RCC_OscConfig+0x26c>)
 800664a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800664e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d013      	beq.n	8006680 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006658:	f7fe fbd0 	bl	8004dfc <HAL_GetTick>
 800665c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800665e:	e008      	b.n	8006672 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006660:	f7fe fbcc 	bl	8004dfc <HAL_GetTick>
 8006664:	4602      	mov	r2, r0
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	1ad3      	subs	r3, r2, r3
 800666a:	2b64      	cmp	r3, #100	; 0x64
 800666c:	d901      	bls.n	8006672 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800666e:	2303      	movs	r3, #3
 8006670:	e200      	b.n	8006a74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006672:	4b5d      	ldr	r3, [pc, #372]	; (80067e8 <HAL_RCC_OscConfig+0x26c>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800667a:	2b00      	cmp	r3, #0
 800667c:	d0f0      	beq.n	8006660 <HAL_RCC_OscConfig+0xe4>
 800667e:	e014      	b.n	80066aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006680:	f7fe fbbc 	bl	8004dfc <HAL_GetTick>
 8006684:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006686:	e008      	b.n	800669a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006688:	f7fe fbb8 	bl	8004dfc <HAL_GetTick>
 800668c:	4602      	mov	r2, r0
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	1ad3      	subs	r3, r2, r3
 8006692:	2b64      	cmp	r3, #100	; 0x64
 8006694:	d901      	bls.n	800669a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006696:	2303      	movs	r3, #3
 8006698:	e1ec      	b.n	8006a74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800669a:	4b53      	ldr	r3, [pc, #332]	; (80067e8 <HAL_RCC_OscConfig+0x26c>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d1f0      	bne.n	8006688 <HAL_RCC_OscConfig+0x10c>
 80066a6:	e000      	b.n	80066aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f003 0302 	and.w	r3, r3, #2
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d063      	beq.n	800677e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80066b6:	4b4c      	ldr	r3, [pc, #304]	; (80067e8 <HAL_RCC_OscConfig+0x26c>)
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	f003 030c 	and.w	r3, r3, #12
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d00b      	beq.n	80066da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80066c2:	4b49      	ldr	r3, [pc, #292]	; (80067e8 <HAL_RCC_OscConfig+0x26c>)
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	f003 030c 	and.w	r3, r3, #12
 80066ca:	2b08      	cmp	r3, #8
 80066cc:	d11c      	bne.n	8006708 <HAL_RCC_OscConfig+0x18c>
 80066ce:	4b46      	ldr	r3, [pc, #280]	; (80067e8 <HAL_RCC_OscConfig+0x26c>)
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d116      	bne.n	8006708 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066da:	4b43      	ldr	r3, [pc, #268]	; (80067e8 <HAL_RCC_OscConfig+0x26c>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f003 0302 	and.w	r3, r3, #2
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d005      	beq.n	80066f2 <HAL_RCC_OscConfig+0x176>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	691b      	ldr	r3, [r3, #16]
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d001      	beq.n	80066f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	e1c0      	b.n	8006a74 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066f2:	4b3d      	ldr	r3, [pc, #244]	; (80067e8 <HAL_RCC_OscConfig+0x26c>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	695b      	ldr	r3, [r3, #20]
 80066fe:	00db      	lsls	r3, r3, #3
 8006700:	4939      	ldr	r1, [pc, #228]	; (80067e8 <HAL_RCC_OscConfig+0x26c>)
 8006702:	4313      	orrs	r3, r2
 8006704:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006706:	e03a      	b.n	800677e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	691b      	ldr	r3, [r3, #16]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d020      	beq.n	8006752 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006710:	4b36      	ldr	r3, [pc, #216]	; (80067ec <HAL_RCC_OscConfig+0x270>)
 8006712:	2201      	movs	r2, #1
 8006714:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006716:	f7fe fb71 	bl	8004dfc <HAL_GetTick>
 800671a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800671c:	e008      	b.n	8006730 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800671e:	f7fe fb6d 	bl	8004dfc <HAL_GetTick>
 8006722:	4602      	mov	r2, r0
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	1ad3      	subs	r3, r2, r3
 8006728:	2b02      	cmp	r3, #2
 800672a:	d901      	bls.n	8006730 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800672c:	2303      	movs	r3, #3
 800672e:	e1a1      	b.n	8006a74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006730:	4b2d      	ldr	r3, [pc, #180]	; (80067e8 <HAL_RCC_OscConfig+0x26c>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f003 0302 	and.w	r3, r3, #2
 8006738:	2b00      	cmp	r3, #0
 800673a:	d0f0      	beq.n	800671e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800673c:	4b2a      	ldr	r3, [pc, #168]	; (80067e8 <HAL_RCC_OscConfig+0x26c>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	695b      	ldr	r3, [r3, #20]
 8006748:	00db      	lsls	r3, r3, #3
 800674a:	4927      	ldr	r1, [pc, #156]	; (80067e8 <HAL_RCC_OscConfig+0x26c>)
 800674c:	4313      	orrs	r3, r2
 800674e:	600b      	str	r3, [r1, #0]
 8006750:	e015      	b.n	800677e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006752:	4b26      	ldr	r3, [pc, #152]	; (80067ec <HAL_RCC_OscConfig+0x270>)
 8006754:	2200      	movs	r2, #0
 8006756:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006758:	f7fe fb50 	bl	8004dfc <HAL_GetTick>
 800675c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800675e:	e008      	b.n	8006772 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006760:	f7fe fb4c 	bl	8004dfc <HAL_GetTick>
 8006764:	4602      	mov	r2, r0
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	1ad3      	subs	r3, r2, r3
 800676a:	2b02      	cmp	r3, #2
 800676c:	d901      	bls.n	8006772 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800676e:	2303      	movs	r3, #3
 8006770:	e180      	b.n	8006a74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006772:	4b1d      	ldr	r3, [pc, #116]	; (80067e8 <HAL_RCC_OscConfig+0x26c>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f003 0302 	and.w	r3, r3, #2
 800677a:	2b00      	cmp	r3, #0
 800677c:	d1f0      	bne.n	8006760 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f003 0308 	and.w	r3, r3, #8
 8006786:	2b00      	cmp	r3, #0
 8006788:	d03a      	beq.n	8006800 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	699b      	ldr	r3, [r3, #24]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d019      	beq.n	80067c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006792:	4b17      	ldr	r3, [pc, #92]	; (80067f0 <HAL_RCC_OscConfig+0x274>)
 8006794:	2201      	movs	r2, #1
 8006796:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006798:	f7fe fb30 	bl	8004dfc <HAL_GetTick>
 800679c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800679e:	e008      	b.n	80067b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067a0:	f7fe fb2c 	bl	8004dfc <HAL_GetTick>
 80067a4:	4602      	mov	r2, r0
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	1ad3      	subs	r3, r2, r3
 80067aa:	2b02      	cmp	r3, #2
 80067ac:	d901      	bls.n	80067b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80067ae:	2303      	movs	r3, #3
 80067b0:	e160      	b.n	8006a74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067b2:	4b0d      	ldr	r3, [pc, #52]	; (80067e8 <HAL_RCC_OscConfig+0x26c>)
 80067b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b6:	f003 0302 	and.w	r3, r3, #2
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d0f0      	beq.n	80067a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80067be:	2001      	movs	r0, #1
 80067c0:	f000 face 	bl	8006d60 <RCC_Delay>
 80067c4:	e01c      	b.n	8006800 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80067c6:	4b0a      	ldr	r3, [pc, #40]	; (80067f0 <HAL_RCC_OscConfig+0x274>)
 80067c8:	2200      	movs	r2, #0
 80067ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067cc:	f7fe fb16 	bl	8004dfc <HAL_GetTick>
 80067d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067d2:	e00f      	b.n	80067f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067d4:	f7fe fb12 	bl	8004dfc <HAL_GetTick>
 80067d8:	4602      	mov	r2, r0
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	1ad3      	subs	r3, r2, r3
 80067de:	2b02      	cmp	r3, #2
 80067e0:	d908      	bls.n	80067f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80067e2:	2303      	movs	r3, #3
 80067e4:	e146      	b.n	8006a74 <HAL_RCC_OscConfig+0x4f8>
 80067e6:	bf00      	nop
 80067e8:	40021000 	.word	0x40021000
 80067ec:	42420000 	.word	0x42420000
 80067f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067f4:	4b92      	ldr	r3, [pc, #584]	; (8006a40 <HAL_RCC_OscConfig+0x4c4>)
 80067f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f8:	f003 0302 	and.w	r3, r3, #2
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d1e9      	bne.n	80067d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f003 0304 	and.w	r3, r3, #4
 8006808:	2b00      	cmp	r3, #0
 800680a:	f000 80a6 	beq.w	800695a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800680e:	2300      	movs	r3, #0
 8006810:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006812:	4b8b      	ldr	r3, [pc, #556]	; (8006a40 <HAL_RCC_OscConfig+0x4c4>)
 8006814:	69db      	ldr	r3, [r3, #28]
 8006816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800681a:	2b00      	cmp	r3, #0
 800681c:	d10d      	bne.n	800683a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800681e:	4b88      	ldr	r3, [pc, #544]	; (8006a40 <HAL_RCC_OscConfig+0x4c4>)
 8006820:	69db      	ldr	r3, [r3, #28]
 8006822:	4a87      	ldr	r2, [pc, #540]	; (8006a40 <HAL_RCC_OscConfig+0x4c4>)
 8006824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006828:	61d3      	str	r3, [r2, #28]
 800682a:	4b85      	ldr	r3, [pc, #532]	; (8006a40 <HAL_RCC_OscConfig+0x4c4>)
 800682c:	69db      	ldr	r3, [r3, #28]
 800682e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006832:	60bb      	str	r3, [r7, #8]
 8006834:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006836:	2301      	movs	r3, #1
 8006838:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800683a:	4b82      	ldr	r3, [pc, #520]	; (8006a44 <HAL_RCC_OscConfig+0x4c8>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006842:	2b00      	cmp	r3, #0
 8006844:	d118      	bne.n	8006878 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006846:	4b7f      	ldr	r3, [pc, #508]	; (8006a44 <HAL_RCC_OscConfig+0x4c8>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a7e      	ldr	r2, [pc, #504]	; (8006a44 <HAL_RCC_OscConfig+0x4c8>)
 800684c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006850:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006852:	f7fe fad3 	bl	8004dfc <HAL_GetTick>
 8006856:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006858:	e008      	b.n	800686c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800685a:	f7fe facf 	bl	8004dfc <HAL_GetTick>
 800685e:	4602      	mov	r2, r0
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	1ad3      	subs	r3, r2, r3
 8006864:	2b64      	cmp	r3, #100	; 0x64
 8006866:	d901      	bls.n	800686c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006868:	2303      	movs	r3, #3
 800686a:	e103      	b.n	8006a74 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800686c:	4b75      	ldr	r3, [pc, #468]	; (8006a44 <HAL_RCC_OscConfig+0x4c8>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006874:	2b00      	cmp	r3, #0
 8006876:	d0f0      	beq.n	800685a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	68db      	ldr	r3, [r3, #12]
 800687c:	2b01      	cmp	r3, #1
 800687e:	d106      	bne.n	800688e <HAL_RCC_OscConfig+0x312>
 8006880:	4b6f      	ldr	r3, [pc, #444]	; (8006a40 <HAL_RCC_OscConfig+0x4c4>)
 8006882:	6a1b      	ldr	r3, [r3, #32]
 8006884:	4a6e      	ldr	r2, [pc, #440]	; (8006a40 <HAL_RCC_OscConfig+0x4c4>)
 8006886:	f043 0301 	orr.w	r3, r3, #1
 800688a:	6213      	str	r3, [r2, #32]
 800688c:	e02d      	b.n	80068ea <HAL_RCC_OscConfig+0x36e>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	68db      	ldr	r3, [r3, #12]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d10c      	bne.n	80068b0 <HAL_RCC_OscConfig+0x334>
 8006896:	4b6a      	ldr	r3, [pc, #424]	; (8006a40 <HAL_RCC_OscConfig+0x4c4>)
 8006898:	6a1b      	ldr	r3, [r3, #32]
 800689a:	4a69      	ldr	r2, [pc, #420]	; (8006a40 <HAL_RCC_OscConfig+0x4c4>)
 800689c:	f023 0301 	bic.w	r3, r3, #1
 80068a0:	6213      	str	r3, [r2, #32]
 80068a2:	4b67      	ldr	r3, [pc, #412]	; (8006a40 <HAL_RCC_OscConfig+0x4c4>)
 80068a4:	6a1b      	ldr	r3, [r3, #32]
 80068a6:	4a66      	ldr	r2, [pc, #408]	; (8006a40 <HAL_RCC_OscConfig+0x4c4>)
 80068a8:	f023 0304 	bic.w	r3, r3, #4
 80068ac:	6213      	str	r3, [r2, #32]
 80068ae:	e01c      	b.n	80068ea <HAL_RCC_OscConfig+0x36e>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	68db      	ldr	r3, [r3, #12]
 80068b4:	2b05      	cmp	r3, #5
 80068b6:	d10c      	bne.n	80068d2 <HAL_RCC_OscConfig+0x356>
 80068b8:	4b61      	ldr	r3, [pc, #388]	; (8006a40 <HAL_RCC_OscConfig+0x4c4>)
 80068ba:	6a1b      	ldr	r3, [r3, #32]
 80068bc:	4a60      	ldr	r2, [pc, #384]	; (8006a40 <HAL_RCC_OscConfig+0x4c4>)
 80068be:	f043 0304 	orr.w	r3, r3, #4
 80068c2:	6213      	str	r3, [r2, #32]
 80068c4:	4b5e      	ldr	r3, [pc, #376]	; (8006a40 <HAL_RCC_OscConfig+0x4c4>)
 80068c6:	6a1b      	ldr	r3, [r3, #32]
 80068c8:	4a5d      	ldr	r2, [pc, #372]	; (8006a40 <HAL_RCC_OscConfig+0x4c4>)
 80068ca:	f043 0301 	orr.w	r3, r3, #1
 80068ce:	6213      	str	r3, [r2, #32]
 80068d0:	e00b      	b.n	80068ea <HAL_RCC_OscConfig+0x36e>
 80068d2:	4b5b      	ldr	r3, [pc, #364]	; (8006a40 <HAL_RCC_OscConfig+0x4c4>)
 80068d4:	6a1b      	ldr	r3, [r3, #32]
 80068d6:	4a5a      	ldr	r2, [pc, #360]	; (8006a40 <HAL_RCC_OscConfig+0x4c4>)
 80068d8:	f023 0301 	bic.w	r3, r3, #1
 80068dc:	6213      	str	r3, [r2, #32]
 80068de:	4b58      	ldr	r3, [pc, #352]	; (8006a40 <HAL_RCC_OscConfig+0x4c4>)
 80068e0:	6a1b      	ldr	r3, [r3, #32]
 80068e2:	4a57      	ldr	r2, [pc, #348]	; (8006a40 <HAL_RCC_OscConfig+0x4c4>)
 80068e4:	f023 0304 	bic.w	r3, r3, #4
 80068e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	68db      	ldr	r3, [r3, #12]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d015      	beq.n	800691e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80068f2:	f7fe fa83 	bl	8004dfc <HAL_GetTick>
 80068f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068f8:	e00a      	b.n	8006910 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068fa:	f7fe fa7f 	bl	8004dfc <HAL_GetTick>
 80068fe:	4602      	mov	r2, r0
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	1ad3      	subs	r3, r2, r3
 8006904:	f241 3288 	movw	r2, #5000	; 0x1388
 8006908:	4293      	cmp	r3, r2
 800690a:	d901      	bls.n	8006910 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800690c:	2303      	movs	r3, #3
 800690e:	e0b1      	b.n	8006a74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006910:	4b4b      	ldr	r3, [pc, #300]	; (8006a40 <HAL_RCC_OscConfig+0x4c4>)
 8006912:	6a1b      	ldr	r3, [r3, #32]
 8006914:	f003 0302 	and.w	r3, r3, #2
 8006918:	2b00      	cmp	r3, #0
 800691a:	d0ee      	beq.n	80068fa <HAL_RCC_OscConfig+0x37e>
 800691c:	e014      	b.n	8006948 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800691e:	f7fe fa6d 	bl	8004dfc <HAL_GetTick>
 8006922:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006924:	e00a      	b.n	800693c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006926:	f7fe fa69 	bl	8004dfc <HAL_GetTick>
 800692a:	4602      	mov	r2, r0
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	1ad3      	subs	r3, r2, r3
 8006930:	f241 3288 	movw	r2, #5000	; 0x1388
 8006934:	4293      	cmp	r3, r2
 8006936:	d901      	bls.n	800693c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006938:	2303      	movs	r3, #3
 800693a:	e09b      	b.n	8006a74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800693c:	4b40      	ldr	r3, [pc, #256]	; (8006a40 <HAL_RCC_OscConfig+0x4c4>)
 800693e:	6a1b      	ldr	r3, [r3, #32]
 8006940:	f003 0302 	and.w	r3, r3, #2
 8006944:	2b00      	cmp	r3, #0
 8006946:	d1ee      	bne.n	8006926 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006948:	7dfb      	ldrb	r3, [r7, #23]
 800694a:	2b01      	cmp	r3, #1
 800694c:	d105      	bne.n	800695a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800694e:	4b3c      	ldr	r3, [pc, #240]	; (8006a40 <HAL_RCC_OscConfig+0x4c4>)
 8006950:	69db      	ldr	r3, [r3, #28]
 8006952:	4a3b      	ldr	r2, [pc, #236]	; (8006a40 <HAL_RCC_OscConfig+0x4c4>)
 8006954:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006958:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	69db      	ldr	r3, [r3, #28]
 800695e:	2b00      	cmp	r3, #0
 8006960:	f000 8087 	beq.w	8006a72 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006964:	4b36      	ldr	r3, [pc, #216]	; (8006a40 <HAL_RCC_OscConfig+0x4c4>)
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	f003 030c 	and.w	r3, r3, #12
 800696c:	2b08      	cmp	r3, #8
 800696e:	d061      	beq.n	8006a34 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	69db      	ldr	r3, [r3, #28]
 8006974:	2b02      	cmp	r3, #2
 8006976:	d146      	bne.n	8006a06 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006978:	4b33      	ldr	r3, [pc, #204]	; (8006a48 <HAL_RCC_OscConfig+0x4cc>)
 800697a:	2200      	movs	r2, #0
 800697c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800697e:	f7fe fa3d 	bl	8004dfc <HAL_GetTick>
 8006982:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006984:	e008      	b.n	8006998 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006986:	f7fe fa39 	bl	8004dfc <HAL_GetTick>
 800698a:	4602      	mov	r2, r0
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	1ad3      	subs	r3, r2, r3
 8006990:	2b02      	cmp	r3, #2
 8006992:	d901      	bls.n	8006998 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006994:	2303      	movs	r3, #3
 8006996:	e06d      	b.n	8006a74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006998:	4b29      	ldr	r3, [pc, #164]	; (8006a40 <HAL_RCC_OscConfig+0x4c4>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d1f0      	bne.n	8006986 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6a1b      	ldr	r3, [r3, #32]
 80069a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069ac:	d108      	bne.n	80069c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80069ae:	4b24      	ldr	r3, [pc, #144]	; (8006a40 <HAL_RCC_OscConfig+0x4c4>)
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	4921      	ldr	r1, [pc, #132]	; (8006a40 <HAL_RCC_OscConfig+0x4c4>)
 80069bc:	4313      	orrs	r3, r2
 80069be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80069c0:	4b1f      	ldr	r3, [pc, #124]	; (8006a40 <HAL_RCC_OscConfig+0x4c4>)
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6a19      	ldr	r1, [r3, #32]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d0:	430b      	orrs	r3, r1
 80069d2:	491b      	ldr	r1, [pc, #108]	; (8006a40 <HAL_RCC_OscConfig+0x4c4>)
 80069d4:	4313      	orrs	r3, r2
 80069d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80069d8:	4b1b      	ldr	r3, [pc, #108]	; (8006a48 <HAL_RCC_OscConfig+0x4cc>)
 80069da:	2201      	movs	r2, #1
 80069dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069de:	f7fe fa0d 	bl	8004dfc <HAL_GetTick>
 80069e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80069e4:	e008      	b.n	80069f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069e6:	f7fe fa09 	bl	8004dfc <HAL_GetTick>
 80069ea:	4602      	mov	r2, r0
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	1ad3      	subs	r3, r2, r3
 80069f0:	2b02      	cmp	r3, #2
 80069f2:	d901      	bls.n	80069f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80069f4:	2303      	movs	r3, #3
 80069f6:	e03d      	b.n	8006a74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80069f8:	4b11      	ldr	r3, [pc, #68]	; (8006a40 <HAL_RCC_OscConfig+0x4c4>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d0f0      	beq.n	80069e6 <HAL_RCC_OscConfig+0x46a>
 8006a04:	e035      	b.n	8006a72 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a06:	4b10      	ldr	r3, [pc, #64]	; (8006a48 <HAL_RCC_OscConfig+0x4cc>)
 8006a08:	2200      	movs	r2, #0
 8006a0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a0c:	f7fe f9f6 	bl	8004dfc <HAL_GetTick>
 8006a10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006a12:	e008      	b.n	8006a26 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a14:	f7fe f9f2 	bl	8004dfc <HAL_GetTick>
 8006a18:	4602      	mov	r2, r0
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	1ad3      	subs	r3, r2, r3
 8006a1e:	2b02      	cmp	r3, #2
 8006a20:	d901      	bls.n	8006a26 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006a22:	2303      	movs	r3, #3
 8006a24:	e026      	b.n	8006a74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006a26:	4b06      	ldr	r3, [pc, #24]	; (8006a40 <HAL_RCC_OscConfig+0x4c4>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d1f0      	bne.n	8006a14 <HAL_RCC_OscConfig+0x498>
 8006a32:	e01e      	b.n	8006a72 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	69db      	ldr	r3, [r3, #28]
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	d107      	bne.n	8006a4c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	e019      	b.n	8006a74 <HAL_RCC_OscConfig+0x4f8>
 8006a40:	40021000 	.word	0x40021000
 8006a44:	40007000 	.word	0x40007000
 8006a48:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006a4c:	4b0b      	ldr	r3, [pc, #44]	; (8006a7c <HAL_RCC_OscConfig+0x500>)
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6a1b      	ldr	r3, [r3, #32]
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d106      	bne.n	8006a6e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d001      	beq.n	8006a72 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	e000      	b.n	8006a74 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006a72:	2300      	movs	r3, #0
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3718      	adds	r7, #24
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}
 8006a7c:	40021000 	.word	0x40021000

08006a80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b084      	sub	sp, #16
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d101      	bne.n	8006a94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a90:	2301      	movs	r3, #1
 8006a92:	e0d0      	b.n	8006c36 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006a94:	4b6a      	ldr	r3, [pc, #424]	; (8006c40 <HAL_RCC_ClockConfig+0x1c0>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f003 0307 	and.w	r3, r3, #7
 8006a9c:	683a      	ldr	r2, [r7, #0]
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d910      	bls.n	8006ac4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006aa2:	4b67      	ldr	r3, [pc, #412]	; (8006c40 <HAL_RCC_ClockConfig+0x1c0>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f023 0207 	bic.w	r2, r3, #7
 8006aaa:	4965      	ldr	r1, [pc, #404]	; (8006c40 <HAL_RCC_ClockConfig+0x1c0>)
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ab2:	4b63      	ldr	r3, [pc, #396]	; (8006c40 <HAL_RCC_ClockConfig+0x1c0>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f003 0307 	and.w	r3, r3, #7
 8006aba:	683a      	ldr	r2, [r7, #0]
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d001      	beq.n	8006ac4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e0b8      	b.n	8006c36 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f003 0302 	and.w	r3, r3, #2
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d020      	beq.n	8006b12 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f003 0304 	and.w	r3, r3, #4
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d005      	beq.n	8006ae8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006adc:	4b59      	ldr	r3, [pc, #356]	; (8006c44 <HAL_RCC_ClockConfig+0x1c4>)
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	4a58      	ldr	r2, [pc, #352]	; (8006c44 <HAL_RCC_ClockConfig+0x1c4>)
 8006ae2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006ae6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f003 0308 	and.w	r3, r3, #8
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d005      	beq.n	8006b00 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006af4:	4b53      	ldr	r3, [pc, #332]	; (8006c44 <HAL_RCC_ClockConfig+0x1c4>)
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	4a52      	ldr	r2, [pc, #328]	; (8006c44 <HAL_RCC_ClockConfig+0x1c4>)
 8006afa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006afe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b00:	4b50      	ldr	r3, [pc, #320]	; (8006c44 <HAL_RCC_ClockConfig+0x1c4>)
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	494d      	ldr	r1, [pc, #308]	; (8006c44 <HAL_RCC_ClockConfig+0x1c4>)
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f003 0301 	and.w	r3, r3, #1
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d040      	beq.n	8006ba0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d107      	bne.n	8006b36 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b26:	4b47      	ldr	r3, [pc, #284]	; (8006c44 <HAL_RCC_ClockConfig+0x1c4>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d115      	bne.n	8006b5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	e07f      	b.n	8006c36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	2b02      	cmp	r3, #2
 8006b3c:	d107      	bne.n	8006b4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b3e:	4b41      	ldr	r3, [pc, #260]	; (8006c44 <HAL_RCC_ClockConfig+0x1c4>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d109      	bne.n	8006b5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e073      	b.n	8006c36 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b4e:	4b3d      	ldr	r3, [pc, #244]	; (8006c44 <HAL_RCC_ClockConfig+0x1c4>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f003 0302 	and.w	r3, r3, #2
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d101      	bne.n	8006b5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	e06b      	b.n	8006c36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006b5e:	4b39      	ldr	r3, [pc, #228]	; (8006c44 <HAL_RCC_ClockConfig+0x1c4>)
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	f023 0203 	bic.w	r2, r3, #3
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	4936      	ldr	r1, [pc, #216]	; (8006c44 <HAL_RCC_ClockConfig+0x1c4>)
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006b70:	f7fe f944 	bl	8004dfc <HAL_GetTick>
 8006b74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b76:	e00a      	b.n	8006b8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b78:	f7fe f940 	bl	8004dfc <HAL_GetTick>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	1ad3      	subs	r3, r2, r3
 8006b82:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d901      	bls.n	8006b8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006b8a:	2303      	movs	r3, #3
 8006b8c:	e053      	b.n	8006c36 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b8e:	4b2d      	ldr	r3, [pc, #180]	; (8006c44 <HAL_RCC_ClockConfig+0x1c4>)
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	f003 020c 	and.w	r2, r3, #12
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d1eb      	bne.n	8006b78 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006ba0:	4b27      	ldr	r3, [pc, #156]	; (8006c40 <HAL_RCC_ClockConfig+0x1c0>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f003 0307 	and.w	r3, r3, #7
 8006ba8:	683a      	ldr	r2, [r7, #0]
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d210      	bcs.n	8006bd0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bae:	4b24      	ldr	r3, [pc, #144]	; (8006c40 <HAL_RCC_ClockConfig+0x1c0>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f023 0207 	bic.w	r2, r3, #7
 8006bb6:	4922      	ldr	r1, [pc, #136]	; (8006c40 <HAL_RCC_ClockConfig+0x1c0>)
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bbe:	4b20      	ldr	r3, [pc, #128]	; (8006c40 <HAL_RCC_ClockConfig+0x1c0>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f003 0307 	and.w	r3, r3, #7
 8006bc6:	683a      	ldr	r2, [r7, #0]
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	d001      	beq.n	8006bd0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	e032      	b.n	8006c36 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f003 0304 	and.w	r3, r3, #4
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d008      	beq.n	8006bee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006bdc:	4b19      	ldr	r3, [pc, #100]	; (8006c44 <HAL_RCC_ClockConfig+0x1c4>)
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	68db      	ldr	r3, [r3, #12]
 8006be8:	4916      	ldr	r1, [pc, #88]	; (8006c44 <HAL_RCC_ClockConfig+0x1c4>)
 8006bea:	4313      	orrs	r3, r2
 8006bec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f003 0308 	and.w	r3, r3, #8
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d009      	beq.n	8006c0e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006bfa:	4b12      	ldr	r3, [pc, #72]	; (8006c44 <HAL_RCC_ClockConfig+0x1c4>)
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	691b      	ldr	r3, [r3, #16]
 8006c06:	00db      	lsls	r3, r3, #3
 8006c08:	490e      	ldr	r1, [pc, #56]	; (8006c44 <HAL_RCC_ClockConfig+0x1c4>)
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006c0e:	f000 f821 	bl	8006c54 <HAL_RCC_GetSysClockFreq>
 8006c12:	4602      	mov	r2, r0
 8006c14:	4b0b      	ldr	r3, [pc, #44]	; (8006c44 <HAL_RCC_ClockConfig+0x1c4>)
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	091b      	lsrs	r3, r3, #4
 8006c1a:	f003 030f 	and.w	r3, r3, #15
 8006c1e:	490a      	ldr	r1, [pc, #40]	; (8006c48 <HAL_RCC_ClockConfig+0x1c8>)
 8006c20:	5ccb      	ldrb	r3, [r1, r3]
 8006c22:	fa22 f303 	lsr.w	r3, r2, r3
 8006c26:	4a09      	ldr	r2, [pc, #36]	; (8006c4c <HAL_RCC_ClockConfig+0x1cc>)
 8006c28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006c2a:	4b09      	ldr	r3, [pc, #36]	; (8006c50 <HAL_RCC_ClockConfig+0x1d0>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f7fe f8a2 	bl	8004d78 <HAL_InitTick>

  return HAL_OK;
 8006c34:	2300      	movs	r3, #0
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3710      	adds	r7, #16
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}
 8006c3e:	bf00      	nop
 8006c40:	40022000 	.word	0x40022000
 8006c44:	40021000 	.word	0x40021000
 8006c48:	08009a30 	.word	0x08009a30
 8006c4c:	200000ac 	.word	0x200000ac
 8006c50:	200000b0 	.word	0x200000b0

08006c54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b087      	sub	sp, #28
 8006c58:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	60fb      	str	r3, [r7, #12]
 8006c5e:	2300      	movs	r3, #0
 8006c60:	60bb      	str	r3, [r7, #8]
 8006c62:	2300      	movs	r3, #0
 8006c64:	617b      	str	r3, [r7, #20]
 8006c66:	2300      	movs	r3, #0
 8006c68:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006c6e:	4b1e      	ldr	r3, [pc, #120]	; (8006ce8 <HAL_RCC_GetSysClockFreq+0x94>)
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f003 030c 	and.w	r3, r3, #12
 8006c7a:	2b04      	cmp	r3, #4
 8006c7c:	d002      	beq.n	8006c84 <HAL_RCC_GetSysClockFreq+0x30>
 8006c7e:	2b08      	cmp	r3, #8
 8006c80:	d003      	beq.n	8006c8a <HAL_RCC_GetSysClockFreq+0x36>
 8006c82:	e027      	b.n	8006cd4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006c84:	4b19      	ldr	r3, [pc, #100]	; (8006cec <HAL_RCC_GetSysClockFreq+0x98>)
 8006c86:	613b      	str	r3, [r7, #16]
      break;
 8006c88:	e027      	b.n	8006cda <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	0c9b      	lsrs	r3, r3, #18
 8006c8e:	f003 030f 	and.w	r3, r3, #15
 8006c92:	4a17      	ldr	r2, [pc, #92]	; (8006cf0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006c94:	5cd3      	ldrb	r3, [r2, r3]
 8006c96:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d010      	beq.n	8006cc4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006ca2:	4b11      	ldr	r3, [pc, #68]	; (8006ce8 <HAL_RCC_GetSysClockFreq+0x94>)
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	0c5b      	lsrs	r3, r3, #17
 8006ca8:	f003 0301 	and.w	r3, r3, #1
 8006cac:	4a11      	ldr	r2, [pc, #68]	; (8006cf4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006cae:	5cd3      	ldrb	r3, [r2, r3]
 8006cb0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	4a0d      	ldr	r2, [pc, #52]	; (8006cec <HAL_RCC_GetSysClockFreq+0x98>)
 8006cb6:	fb03 f202 	mul.w	r2, r3, r2
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cc0:	617b      	str	r3, [r7, #20]
 8006cc2:	e004      	b.n	8006cce <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	4a0c      	ldr	r2, [pc, #48]	; (8006cf8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006cc8:	fb02 f303 	mul.w	r3, r2, r3
 8006ccc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	613b      	str	r3, [r7, #16]
      break;
 8006cd2:	e002      	b.n	8006cda <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006cd4:	4b05      	ldr	r3, [pc, #20]	; (8006cec <HAL_RCC_GetSysClockFreq+0x98>)
 8006cd6:	613b      	str	r3, [r7, #16]
      break;
 8006cd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006cda:	693b      	ldr	r3, [r7, #16]
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	371c      	adds	r7, #28
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bc80      	pop	{r7}
 8006ce4:	4770      	bx	lr
 8006ce6:	bf00      	nop
 8006ce8:	40021000 	.word	0x40021000
 8006cec:	007a1200 	.word	0x007a1200
 8006cf0:	08009a48 	.word	0x08009a48
 8006cf4:	08009a58 	.word	0x08009a58
 8006cf8:	003d0900 	.word	0x003d0900

08006cfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d00:	4b02      	ldr	r3, [pc, #8]	; (8006d0c <HAL_RCC_GetHCLKFreq+0x10>)
 8006d02:	681b      	ldr	r3, [r3, #0]
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bc80      	pop	{r7}
 8006d0a:	4770      	bx	lr
 8006d0c:	200000ac 	.word	0x200000ac

08006d10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006d14:	f7ff fff2 	bl	8006cfc <HAL_RCC_GetHCLKFreq>
 8006d18:	4602      	mov	r2, r0
 8006d1a:	4b05      	ldr	r3, [pc, #20]	; (8006d30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	0a1b      	lsrs	r3, r3, #8
 8006d20:	f003 0307 	and.w	r3, r3, #7
 8006d24:	4903      	ldr	r1, [pc, #12]	; (8006d34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d26:	5ccb      	ldrb	r3, [r1, r3]
 8006d28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	bd80      	pop	{r7, pc}
 8006d30:	40021000 	.word	0x40021000
 8006d34:	08009a40 	.word	0x08009a40

08006d38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006d3c:	f7ff ffde 	bl	8006cfc <HAL_RCC_GetHCLKFreq>
 8006d40:	4602      	mov	r2, r0
 8006d42:	4b05      	ldr	r3, [pc, #20]	; (8006d58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	0adb      	lsrs	r3, r3, #11
 8006d48:	f003 0307 	and.w	r3, r3, #7
 8006d4c:	4903      	ldr	r1, [pc, #12]	; (8006d5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006d4e:	5ccb      	ldrb	r3, [r1, r3]
 8006d50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	bd80      	pop	{r7, pc}
 8006d58:	40021000 	.word	0x40021000
 8006d5c:	08009a40 	.word	0x08009a40

08006d60 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b085      	sub	sp, #20
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006d68:	4b0a      	ldr	r3, [pc, #40]	; (8006d94 <RCC_Delay+0x34>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a0a      	ldr	r2, [pc, #40]	; (8006d98 <RCC_Delay+0x38>)
 8006d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d72:	0a5b      	lsrs	r3, r3, #9
 8006d74:	687a      	ldr	r2, [r7, #4]
 8006d76:	fb02 f303 	mul.w	r3, r2, r3
 8006d7a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006d7c:	bf00      	nop
  }
  while (Delay --);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	1e5a      	subs	r2, r3, #1
 8006d82:	60fa      	str	r2, [r7, #12]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d1f9      	bne.n	8006d7c <RCC_Delay+0x1c>
}
 8006d88:	bf00      	nop
 8006d8a:	bf00      	nop
 8006d8c:	3714      	adds	r7, #20
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bc80      	pop	{r7}
 8006d92:	4770      	bx	lr
 8006d94:	200000ac 	.word	0x200000ac
 8006d98:	10624dd3 	.word	0x10624dd3

08006d9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b082      	sub	sp, #8
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d101      	bne.n	8006dae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006daa:	2301      	movs	r3, #1
 8006dac:	e041      	b.n	8006e32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d106      	bne.n	8006dc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f7fd fe12 	bl	80049ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2202      	movs	r2, #2
 8006dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	3304      	adds	r3, #4
 8006dd8:	4619      	mov	r1, r3
 8006dda:	4610      	mov	r0, r2
 8006ddc:	f000 fc28 	bl	8007630 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2201      	movs	r2, #1
 8006de4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2201      	movs	r2, #1
 8006dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2201      	movs	r2, #1
 8006df4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2201      	movs	r2, #1
 8006e04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2201      	movs	r2, #1
 8006e14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2201      	movs	r2, #1
 8006e24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e30:	2300      	movs	r3, #0
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3708      	adds	r7, #8
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}
	...

08006e3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b085      	sub	sp, #20
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e4a:	b2db      	uxtb	r3, r3
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d001      	beq.n	8006e54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006e50:	2301      	movs	r3, #1
 8006e52:	e03a      	b.n	8006eca <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2202      	movs	r2, #2
 8006e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	68da      	ldr	r2, [r3, #12]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f042 0201 	orr.w	r2, r2, #1
 8006e6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a18      	ldr	r2, [pc, #96]	; (8006ed4 <HAL_TIM_Base_Start_IT+0x98>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d00e      	beq.n	8006e94 <HAL_TIM_Base_Start_IT+0x58>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e7e:	d009      	beq.n	8006e94 <HAL_TIM_Base_Start_IT+0x58>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a14      	ldr	r2, [pc, #80]	; (8006ed8 <HAL_TIM_Base_Start_IT+0x9c>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d004      	beq.n	8006e94 <HAL_TIM_Base_Start_IT+0x58>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a13      	ldr	r2, [pc, #76]	; (8006edc <HAL_TIM_Base_Start_IT+0xa0>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d111      	bne.n	8006eb8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	f003 0307 	and.w	r3, r3, #7
 8006e9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2b06      	cmp	r3, #6
 8006ea4:	d010      	beq.n	8006ec8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f042 0201 	orr.w	r2, r2, #1
 8006eb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006eb6:	e007      	b.n	8006ec8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f042 0201 	orr.w	r2, r2, #1
 8006ec6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006ec8:	2300      	movs	r3, #0
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3714      	adds	r7, #20
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bc80      	pop	{r7}
 8006ed2:	4770      	bx	lr
 8006ed4:	40012c00 	.word	0x40012c00
 8006ed8:	40000400 	.word	0x40000400
 8006edc:	40000800 	.word	0x40000800

08006ee0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b082      	sub	sp, #8
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d101      	bne.n	8006ef2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	e041      	b.n	8006f76 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d106      	bne.n	8006f0c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2200      	movs	r2, #0
 8006f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f7fd fd96 	bl	8004a38 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2202      	movs	r2, #2
 8006f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	3304      	adds	r3, #4
 8006f1c:	4619      	mov	r1, r3
 8006f1e:	4610      	mov	r0, r2
 8006f20:	f000 fb86 	bl	8007630 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2201      	movs	r2, #1
 8006f28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2201      	movs	r2, #1
 8006f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2201      	movs	r2, #1
 8006f38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2201      	movs	r2, #1
 8006f48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2201      	movs	r2, #1
 8006f58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2201      	movs	r2, #1
 8006f60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2201      	movs	r2, #1
 8006f68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f74:	2300      	movs	r3, #0
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3708      	adds	r7, #8
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
	...

08006f80 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b084      	sub	sp, #16
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d109      	bne.n	8006fa4 <HAL_TIM_PWM_Start+0x24>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f96:	b2db      	uxtb	r3, r3
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	bf14      	ite	ne
 8006f9c:	2301      	movne	r3, #1
 8006f9e:	2300      	moveq	r3, #0
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	e022      	b.n	8006fea <HAL_TIM_PWM_Start+0x6a>
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	2b04      	cmp	r3, #4
 8006fa8:	d109      	bne.n	8006fbe <HAL_TIM_PWM_Start+0x3e>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006fb0:	b2db      	uxtb	r3, r3
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	bf14      	ite	ne
 8006fb6:	2301      	movne	r3, #1
 8006fb8:	2300      	moveq	r3, #0
 8006fba:	b2db      	uxtb	r3, r3
 8006fbc:	e015      	b.n	8006fea <HAL_TIM_PWM_Start+0x6a>
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	2b08      	cmp	r3, #8
 8006fc2:	d109      	bne.n	8006fd8 <HAL_TIM_PWM_Start+0x58>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	bf14      	ite	ne
 8006fd0:	2301      	movne	r3, #1
 8006fd2:	2300      	moveq	r3, #0
 8006fd4:	b2db      	uxtb	r3, r3
 8006fd6:	e008      	b.n	8006fea <HAL_TIM_PWM_Start+0x6a>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fde:	b2db      	uxtb	r3, r3
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	bf14      	ite	ne
 8006fe4:	2301      	movne	r3, #1
 8006fe6:	2300      	moveq	r3, #0
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d001      	beq.n	8006ff2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	e05e      	b.n	80070b0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d104      	bne.n	8007002 <HAL_TIM_PWM_Start+0x82>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2202      	movs	r2, #2
 8006ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007000:	e013      	b.n	800702a <HAL_TIM_PWM_Start+0xaa>
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	2b04      	cmp	r3, #4
 8007006:	d104      	bne.n	8007012 <HAL_TIM_PWM_Start+0x92>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2202      	movs	r2, #2
 800700c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007010:	e00b      	b.n	800702a <HAL_TIM_PWM_Start+0xaa>
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	2b08      	cmp	r3, #8
 8007016:	d104      	bne.n	8007022 <HAL_TIM_PWM_Start+0xa2>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2202      	movs	r2, #2
 800701c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007020:	e003      	b.n	800702a <HAL_TIM_PWM_Start+0xaa>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2202      	movs	r2, #2
 8007026:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	2201      	movs	r2, #1
 8007030:	6839      	ldr	r1, [r7, #0]
 8007032:	4618      	mov	r0, r3
 8007034:	f000 fd7c 	bl	8007b30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a1e      	ldr	r2, [pc, #120]	; (80070b8 <HAL_TIM_PWM_Start+0x138>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d107      	bne.n	8007052 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007050:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a18      	ldr	r2, [pc, #96]	; (80070b8 <HAL_TIM_PWM_Start+0x138>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d00e      	beq.n	800707a <HAL_TIM_PWM_Start+0xfa>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007064:	d009      	beq.n	800707a <HAL_TIM_PWM_Start+0xfa>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a14      	ldr	r2, [pc, #80]	; (80070bc <HAL_TIM_PWM_Start+0x13c>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d004      	beq.n	800707a <HAL_TIM_PWM_Start+0xfa>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a12      	ldr	r2, [pc, #72]	; (80070c0 <HAL_TIM_PWM_Start+0x140>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d111      	bne.n	800709e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	689b      	ldr	r3, [r3, #8]
 8007080:	f003 0307 	and.w	r3, r3, #7
 8007084:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2b06      	cmp	r3, #6
 800708a:	d010      	beq.n	80070ae <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	681a      	ldr	r2, [r3, #0]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f042 0201 	orr.w	r2, r2, #1
 800709a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800709c:	e007      	b.n	80070ae <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	681a      	ldr	r2, [r3, #0]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f042 0201 	orr.w	r2, r2, #1
 80070ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80070ae:	2300      	movs	r3, #0
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3710      	adds	r7, #16
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}
 80070b8:	40012c00 	.word	0x40012c00
 80070bc:	40000400 	.word	0x40000400
 80070c0:	40000800 	.word	0x40000800

080070c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b082      	sub	sp, #8
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	691b      	ldr	r3, [r3, #16]
 80070d2:	f003 0302 	and.w	r3, r3, #2
 80070d6:	2b02      	cmp	r3, #2
 80070d8:	d122      	bne.n	8007120 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	68db      	ldr	r3, [r3, #12]
 80070e0:	f003 0302 	and.w	r3, r3, #2
 80070e4:	2b02      	cmp	r3, #2
 80070e6:	d11b      	bne.n	8007120 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f06f 0202 	mvn.w	r2, #2
 80070f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2201      	movs	r2, #1
 80070f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	699b      	ldr	r3, [r3, #24]
 80070fe:	f003 0303 	and.w	r3, r3, #3
 8007102:	2b00      	cmp	r3, #0
 8007104:	d003      	beq.n	800710e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f000 fa76 	bl	80075f8 <HAL_TIM_IC_CaptureCallback>
 800710c:	e005      	b.n	800711a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 fa69 	bl	80075e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f000 fa78 	bl	800760a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2200      	movs	r2, #0
 800711e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	691b      	ldr	r3, [r3, #16]
 8007126:	f003 0304 	and.w	r3, r3, #4
 800712a:	2b04      	cmp	r3, #4
 800712c:	d122      	bne.n	8007174 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	68db      	ldr	r3, [r3, #12]
 8007134:	f003 0304 	and.w	r3, r3, #4
 8007138:	2b04      	cmp	r3, #4
 800713a:	d11b      	bne.n	8007174 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f06f 0204 	mvn.w	r2, #4
 8007144:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2202      	movs	r2, #2
 800714a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	699b      	ldr	r3, [r3, #24]
 8007152:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007156:	2b00      	cmp	r3, #0
 8007158:	d003      	beq.n	8007162 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f000 fa4c 	bl	80075f8 <HAL_TIM_IC_CaptureCallback>
 8007160:	e005      	b.n	800716e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f000 fa3f 	bl	80075e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f000 fa4e 	bl	800760a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2200      	movs	r2, #0
 8007172:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	691b      	ldr	r3, [r3, #16]
 800717a:	f003 0308 	and.w	r3, r3, #8
 800717e:	2b08      	cmp	r3, #8
 8007180:	d122      	bne.n	80071c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	68db      	ldr	r3, [r3, #12]
 8007188:	f003 0308 	and.w	r3, r3, #8
 800718c:	2b08      	cmp	r3, #8
 800718e:	d11b      	bne.n	80071c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f06f 0208 	mvn.w	r2, #8
 8007198:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2204      	movs	r2, #4
 800719e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	69db      	ldr	r3, [r3, #28]
 80071a6:	f003 0303 	and.w	r3, r3, #3
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d003      	beq.n	80071b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 fa22 	bl	80075f8 <HAL_TIM_IC_CaptureCallback>
 80071b4:	e005      	b.n	80071c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 fa15 	bl	80075e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f000 fa24 	bl	800760a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2200      	movs	r2, #0
 80071c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	691b      	ldr	r3, [r3, #16]
 80071ce:	f003 0310 	and.w	r3, r3, #16
 80071d2:	2b10      	cmp	r3, #16
 80071d4:	d122      	bne.n	800721c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	68db      	ldr	r3, [r3, #12]
 80071dc:	f003 0310 	and.w	r3, r3, #16
 80071e0:	2b10      	cmp	r3, #16
 80071e2:	d11b      	bne.n	800721c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f06f 0210 	mvn.w	r2, #16
 80071ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2208      	movs	r2, #8
 80071f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	69db      	ldr	r3, [r3, #28]
 80071fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d003      	beq.n	800720a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f000 f9f8 	bl	80075f8 <HAL_TIM_IC_CaptureCallback>
 8007208:	e005      	b.n	8007216 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f000 f9eb 	bl	80075e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f000 f9fa 	bl	800760a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	691b      	ldr	r3, [r3, #16]
 8007222:	f003 0301 	and.w	r3, r3, #1
 8007226:	2b01      	cmp	r3, #1
 8007228:	d10e      	bne.n	8007248 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	68db      	ldr	r3, [r3, #12]
 8007230:	f003 0301 	and.w	r3, r3, #1
 8007234:	2b01      	cmp	r3, #1
 8007236:	d107      	bne.n	8007248 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f06f 0201 	mvn.w	r2, #1
 8007240:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f7fa f90e 	bl	8001464 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	691b      	ldr	r3, [r3, #16]
 800724e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007252:	2b80      	cmp	r3, #128	; 0x80
 8007254:	d10e      	bne.n	8007274 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	68db      	ldr	r3, [r3, #12]
 800725c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007260:	2b80      	cmp	r3, #128	; 0x80
 8007262:	d107      	bne.n	8007274 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800726c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 fce9 	bl	8007c46 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	691b      	ldr	r3, [r3, #16]
 800727a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800727e:	2b40      	cmp	r3, #64	; 0x40
 8007280:	d10e      	bne.n	80072a0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	68db      	ldr	r3, [r3, #12]
 8007288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800728c:	2b40      	cmp	r3, #64	; 0x40
 800728e:	d107      	bne.n	80072a0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007298:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 f9be 	bl	800761c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	691b      	ldr	r3, [r3, #16]
 80072a6:	f003 0320 	and.w	r3, r3, #32
 80072aa:	2b20      	cmp	r3, #32
 80072ac:	d10e      	bne.n	80072cc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	68db      	ldr	r3, [r3, #12]
 80072b4:	f003 0320 	and.w	r3, r3, #32
 80072b8:	2b20      	cmp	r3, #32
 80072ba:	d107      	bne.n	80072cc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f06f 0220 	mvn.w	r2, #32
 80072c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 fcb4 	bl	8007c34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80072cc:	bf00      	nop
 80072ce:	3708      	adds	r7, #8
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}

080072d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b086      	sub	sp, #24
 80072d8:	af00      	add	r7, sp, #0
 80072da:	60f8      	str	r0, [r7, #12]
 80072dc:	60b9      	str	r1, [r7, #8]
 80072de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072e0:	2300      	movs	r3, #0
 80072e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072ea:	2b01      	cmp	r3, #1
 80072ec:	d101      	bne.n	80072f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80072ee:	2302      	movs	r3, #2
 80072f0:	e0ae      	b.n	8007450 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	2201      	movs	r2, #1
 80072f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2b0c      	cmp	r3, #12
 80072fe:	f200 809f 	bhi.w	8007440 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007302:	a201      	add	r2, pc, #4	; (adr r2, 8007308 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007308:	0800733d 	.word	0x0800733d
 800730c:	08007441 	.word	0x08007441
 8007310:	08007441 	.word	0x08007441
 8007314:	08007441 	.word	0x08007441
 8007318:	0800737d 	.word	0x0800737d
 800731c:	08007441 	.word	0x08007441
 8007320:	08007441 	.word	0x08007441
 8007324:	08007441 	.word	0x08007441
 8007328:	080073bf 	.word	0x080073bf
 800732c:	08007441 	.word	0x08007441
 8007330:	08007441 	.word	0x08007441
 8007334:	08007441 	.word	0x08007441
 8007338:	080073ff 	.word	0x080073ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	68b9      	ldr	r1, [r7, #8]
 8007342:	4618      	mov	r0, r3
 8007344:	f000 f9d6 	bl	80076f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	699a      	ldr	r2, [r3, #24]
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f042 0208 	orr.w	r2, r2, #8
 8007356:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	699a      	ldr	r2, [r3, #24]
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f022 0204 	bic.w	r2, r2, #4
 8007366:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	6999      	ldr	r1, [r3, #24]
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	691a      	ldr	r2, [r3, #16]
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	430a      	orrs	r2, r1
 8007378:	619a      	str	r2, [r3, #24]
      break;
 800737a:	e064      	b.n	8007446 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	68b9      	ldr	r1, [r7, #8]
 8007382:	4618      	mov	r0, r3
 8007384:	f000 fa1c 	bl	80077c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	699a      	ldr	r2, [r3, #24]
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007396:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	699a      	ldr	r2, [r3, #24]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	6999      	ldr	r1, [r3, #24]
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	691b      	ldr	r3, [r3, #16]
 80073b2:	021a      	lsls	r2, r3, #8
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	430a      	orrs	r2, r1
 80073ba:	619a      	str	r2, [r3, #24]
      break;
 80073bc:	e043      	b.n	8007446 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	68b9      	ldr	r1, [r7, #8]
 80073c4:	4618      	mov	r0, r3
 80073c6:	f000 fa65 	bl	8007894 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	69da      	ldr	r2, [r3, #28]
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f042 0208 	orr.w	r2, r2, #8
 80073d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	69da      	ldr	r2, [r3, #28]
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f022 0204 	bic.w	r2, r2, #4
 80073e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	69d9      	ldr	r1, [r3, #28]
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	691a      	ldr	r2, [r3, #16]
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	430a      	orrs	r2, r1
 80073fa:	61da      	str	r2, [r3, #28]
      break;
 80073fc:	e023      	b.n	8007446 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	68b9      	ldr	r1, [r7, #8]
 8007404:	4618      	mov	r0, r3
 8007406:	f000 faaf 	bl	8007968 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	69da      	ldr	r2, [r3, #28]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007418:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	69da      	ldr	r2, [r3, #28]
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007428:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	69d9      	ldr	r1, [r3, #28]
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	691b      	ldr	r3, [r3, #16]
 8007434:	021a      	lsls	r2, r3, #8
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	430a      	orrs	r2, r1
 800743c:	61da      	str	r2, [r3, #28]
      break;
 800743e:	e002      	b.n	8007446 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007440:	2301      	movs	r3, #1
 8007442:	75fb      	strb	r3, [r7, #23]
      break;
 8007444:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2200      	movs	r2, #0
 800744a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800744e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007450:	4618      	mov	r0, r3
 8007452:	3718      	adds	r7, #24
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}

08007458 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b084      	sub	sp, #16
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007462:	2300      	movs	r3, #0
 8007464:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800746c:	2b01      	cmp	r3, #1
 800746e:	d101      	bne.n	8007474 <HAL_TIM_ConfigClockSource+0x1c>
 8007470:	2302      	movs	r3, #2
 8007472:	e0b4      	b.n	80075de <HAL_TIM_ConfigClockSource+0x186>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2201      	movs	r2, #1
 8007478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2202      	movs	r2, #2
 8007480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	689b      	ldr	r3, [r3, #8]
 800748a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007492:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800749a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	68ba      	ldr	r2, [r7, #8]
 80074a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074ac:	d03e      	beq.n	800752c <HAL_TIM_ConfigClockSource+0xd4>
 80074ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074b2:	f200 8087 	bhi.w	80075c4 <HAL_TIM_ConfigClockSource+0x16c>
 80074b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074ba:	f000 8086 	beq.w	80075ca <HAL_TIM_ConfigClockSource+0x172>
 80074be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074c2:	d87f      	bhi.n	80075c4 <HAL_TIM_ConfigClockSource+0x16c>
 80074c4:	2b70      	cmp	r3, #112	; 0x70
 80074c6:	d01a      	beq.n	80074fe <HAL_TIM_ConfigClockSource+0xa6>
 80074c8:	2b70      	cmp	r3, #112	; 0x70
 80074ca:	d87b      	bhi.n	80075c4 <HAL_TIM_ConfigClockSource+0x16c>
 80074cc:	2b60      	cmp	r3, #96	; 0x60
 80074ce:	d050      	beq.n	8007572 <HAL_TIM_ConfigClockSource+0x11a>
 80074d0:	2b60      	cmp	r3, #96	; 0x60
 80074d2:	d877      	bhi.n	80075c4 <HAL_TIM_ConfigClockSource+0x16c>
 80074d4:	2b50      	cmp	r3, #80	; 0x50
 80074d6:	d03c      	beq.n	8007552 <HAL_TIM_ConfigClockSource+0xfa>
 80074d8:	2b50      	cmp	r3, #80	; 0x50
 80074da:	d873      	bhi.n	80075c4 <HAL_TIM_ConfigClockSource+0x16c>
 80074dc:	2b40      	cmp	r3, #64	; 0x40
 80074de:	d058      	beq.n	8007592 <HAL_TIM_ConfigClockSource+0x13a>
 80074e0:	2b40      	cmp	r3, #64	; 0x40
 80074e2:	d86f      	bhi.n	80075c4 <HAL_TIM_ConfigClockSource+0x16c>
 80074e4:	2b30      	cmp	r3, #48	; 0x30
 80074e6:	d064      	beq.n	80075b2 <HAL_TIM_ConfigClockSource+0x15a>
 80074e8:	2b30      	cmp	r3, #48	; 0x30
 80074ea:	d86b      	bhi.n	80075c4 <HAL_TIM_ConfigClockSource+0x16c>
 80074ec:	2b20      	cmp	r3, #32
 80074ee:	d060      	beq.n	80075b2 <HAL_TIM_ConfigClockSource+0x15a>
 80074f0:	2b20      	cmp	r3, #32
 80074f2:	d867      	bhi.n	80075c4 <HAL_TIM_ConfigClockSource+0x16c>
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d05c      	beq.n	80075b2 <HAL_TIM_ConfigClockSource+0x15a>
 80074f8:	2b10      	cmp	r3, #16
 80074fa:	d05a      	beq.n	80075b2 <HAL_TIM_ConfigClockSource+0x15a>
 80074fc:	e062      	b.n	80075c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800750e:	f000 faf0 	bl	8007af2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007520:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	68ba      	ldr	r2, [r7, #8]
 8007528:	609a      	str	r2, [r3, #8]
      break;
 800752a:	e04f      	b.n	80075cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800753c:	f000 fad9 	bl	8007af2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	689a      	ldr	r2, [r3, #8]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800754e:	609a      	str	r2, [r3, #8]
      break;
 8007550:	e03c      	b.n	80075cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800755e:	461a      	mov	r2, r3
 8007560:	f000 fa50 	bl	8007a04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	2150      	movs	r1, #80	; 0x50
 800756a:	4618      	mov	r0, r3
 800756c:	f000 faa7 	bl	8007abe <TIM_ITRx_SetConfig>
      break;
 8007570:	e02c      	b.n	80075cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800757e:	461a      	mov	r2, r3
 8007580:	f000 fa6e 	bl	8007a60 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	2160      	movs	r1, #96	; 0x60
 800758a:	4618      	mov	r0, r3
 800758c:	f000 fa97 	bl	8007abe <TIM_ITRx_SetConfig>
      break;
 8007590:	e01c      	b.n	80075cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800759e:	461a      	mov	r2, r3
 80075a0:	f000 fa30 	bl	8007a04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	2140      	movs	r1, #64	; 0x40
 80075aa:	4618      	mov	r0, r3
 80075ac:	f000 fa87 	bl	8007abe <TIM_ITRx_SetConfig>
      break;
 80075b0:	e00c      	b.n	80075cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681a      	ldr	r2, [r3, #0]
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4619      	mov	r1, r3
 80075bc:	4610      	mov	r0, r2
 80075be:	f000 fa7e 	bl	8007abe <TIM_ITRx_SetConfig>
      break;
 80075c2:	e003      	b.n	80075cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80075c4:	2301      	movs	r3, #1
 80075c6:	73fb      	strb	r3, [r7, #15]
      break;
 80075c8:	e000      	b.n	80075cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80075ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2201      	movs	r2, #1
 80075d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2200      	movs	r2, #0
 80075d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80075dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3710      	adds	r7, #16
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}

080075e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80075e6:	b480      	push	{r7}
 80075e8:	b083      	sub	sp, #12
 80075ea:	af00      	add	r7, sp, #0
 80075ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80075ee:	bf00      	nop
 80075f0:	370c      	adds	r7, #12
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bc80      	pop	{r7}
 80075f6:	4770      	bx	lr

080075f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b083      	sub	sp, #12
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007600:	bf00      	nop
 8007602:	370c      	adds	r7, #12
 8007604:	46bd      	mov	sp, r7
 8007606:	bc80      	pop	{r7}
 8007608:	4770      	bx	lr

0800760a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800760a:	b480      	push	{r7}
 800760c:	b083      	sub	sp, #12
 800760e:	af00      	add	r7, sp, #0
 8007610:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007612:	bf00      	nop
 8007614:	370c      	adds	r7, #12
 8007616:	46bd      	mov	sp, r7
 8007618:	bc80      	pop	{r7}
 800761a:	4770      	bx	lr

0800761c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800761c:	b480      	push	{r7}
 800761e:	b083      	sub	sp, #12
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007624:	bf00      	nop
 8007626:	370c      	adds	r7, #12
 8007628:	46bd      	mov	sp, r7
 800762a:	bc80      	pop	{r7}
 800762c:	4770      	bx	lr
	...

08007630 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007630:	b480      	push	{r7}
 8007632:	b085      	sub	sp, #20
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	4a29      	ldr	r2, [pc, #164]	; (80076e8 <TIM_Base_SetConfig+0xb8>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d00b      	beq.n	8007660 <TIM_Base_SetConfig+0x30>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800764e:	d007      	beq.n	8007660 <TIM_Base_SetConfig+0x30>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	4a26      	ldr	r2, [pc, #152]	; (80076ec <TIM_Base_SetConfig+0xbc>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d003      	beq.n	8007660 <TIM_Base_SetConfig+0x30>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	4a25      	ldr	r2, [pc, #148]	; (80076f0 <TIM_Base_SetConfig+0xc0>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d108      	bne.n	8007672 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007666:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	68fa      	ldr	r2, [r7, #12]
 800766e:	4313      	orrs	r3, r2
 8007670:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	4a1c      	ldr	r2, [pc, #112]	; (80076e8 <TIM_Base_SetConfig+0xb8>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d00b      	beq.n	8007692 <TIM_Base_SetConfig+0x62>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007680:	d007      	beq.n	8007692 <TIM_Base_SetConfig+0x62>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	4a19      	ldr	r2, [pc, #100]	; (80076ec <TIM_Base_SetConfig+0xbc>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d003      	beq.n	8007692 <TIM_Base_SetConfig+0x62>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	4a18      	ldr	r2, [pc, #96]	; (80076f0 <TIM_Base_SetConfig+0xc0>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d108      	bne.n	80076a4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007698:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	68db      	ldr	r3, [r3, #12]
 800769e:	68fa      	ldr	r2, [r7, #12]
 80076a0:	4313      	orrs	r3, r2
 80076a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	695b      	ldr	r3, [r3, #20]
 80076ae:	4313      	orrs	r3, r2
 80076b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	68fa      	ldr	r2, [r7, #12]
 80076b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	689a      	ldr	r2, [r3, #8]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	681a      	ldr	r2, [r3, #0]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	4a07      	ldr	r2, [pc, #28]	; (80076e8 <TIM_Base_SetConfig+0xb8>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d103      	bne.n	80076d8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	691a      	ldr	r2, [r3, #16]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2201      	movs	r2, #1
 80076dc:	615a      	str	r2, [r3, #20]
}
 80076de:	bf00      	nop
 80076e0:	3714      	adds	r7, #20
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bc80      	pop	{r7}
 80076e6:	4770      	bx	lr
 80076e8:	40012c00 	.word	0x40012c00
 80076ec:	40000400 	.word	0x40000400
 80076f0:	40000800 	.word	0x40000800

080076f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b087      	sub	sp, #28
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
 80076fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6a1b      	ldr	r3, [r3, #32]
 8007702:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6a1b      	ldr	r3, [r3, #32]
 8007708:	f023 0201 	bic.w	r2, r3, #1
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	699b      	ldr	r3, [r3, #24]
 800771a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007722:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	f023 0303 	bic.w	r3, r3, #3
 800772a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	68fa      	ldr	r2, [r7, #12]
 8007732:	4313      	orrs	r3, r2
 8007734:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	f023 0302 	bic.w	r3, r3, #2
 800773c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	689b      	ldr	r3, [r3, #8]
 8007742:	697a      	ldr	r2, [r7, #20]
 8007744:	4313      	orrs	r3, r2
 8007746:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	4a1c      	ldr	r2, [pc, #112]	; (80077bc <TIM_OC1_SetConfig+0xc8>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d10c      	bne.n	800776a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	f023 0308 	bic.w	r3, r3, #8
 8007756:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	68db      	ldr	r3, [r3, #12]
 800775c:	697a      	ldr	r2, [r7, #20]
 800775e:	4313      	orrs	r3, r2
 8007760:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	f023 0304 	bic.w	r3, r3, #4
 8007768:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	4a13      	ldr	r2, [pc, #76]	; (80077bc <TIM_OC1_SetConfig+0xc8>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d111      	bne.n	8007796 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007778:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007780:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	695b      	ldr	r3, [r3, #20]
 8007786:	693a      	ldr	r2, [r7, #16]
 8007788:	4313      	orrs	r3, r2
 800778a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	699b      	ldr	r3, [r3, #24]
 8007790:	693a      	ldr	r2, [r7, #16]
 8007792:	4313      	orrs	r3, r2
 8007794:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	693a      	ldr	r2, [r7, #16]
 800779a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	68fa      	ldr	r2, [r7, #12]
 80077a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	685a      	ldr	r2, [r3, #4]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	697a      	ldr	r2, [r7, #20]
 80077ae:	621a      	str	r2, [r3, #32]
}
 80077b0:	bf00      	nop
 80077b2:	371c      	adds	r7, #28
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bc80      	pop	{r7}
 80077b8:	4770      	bx	lr
 80077ba:	bf00      	nop
 80077bc:	40012c00 	.word	0x40012c00

080077c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b087      	sub	sp, #28
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
 80077c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6a1b      	ldr	r3, [r3, #32]
 80077ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6a1b      	ldr	r3, [r3, #32]
 80077d4:	f023 0210 	bic.w	r2, r3, #16
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	699b      	ldr	r3, [r3, #24]
 80077e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	021b      	lsls	r3, r3, #8
 80077fe:	68fa      	ldr	r2, [r7, #12]
 8007800:	4313      	orrs	r3, r2
 8007802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	f023 0320 	bic.w	r3, r3, #32
 800780a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	689b      	ldr	r3, [r3, #8]
 8007810:	011b      	lsls	r3, r3, #4
 8007812:	697a      	ldr	r2, [r7, #20]
 8007814:	4313      	orrs	r3, r2
 8007816:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	4a1d      	ldr	r2, [pc, #116]	; (8007890 <TIM_OC2_SetConfig+0xd0>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d10d      	bne.n	800783c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007826:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	68db      	ldr	r3, [r3, #12]
 800782c:	011b      	lsls	r3, r3, #4
 800782e:	697a      	ldr	r2, [r7, #20]
 8007830:	4313      	orrs	r3, r2
 8007832:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800783a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	4a14      	ldr	r2, [pc, #80]	; (8007890 <TIM_OC2_SetConfig+0xd0>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d113      	bne.n	800786c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800784a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007852:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	695b      	ldr	r3, [r3, #20]
 8007858:	009b      	lsls	r3, r3, #2
 800785a:	693a      	ldr	r2, [r7, #16]
 800785c:	4313      	orrs	r3, r2
 800785e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	699b      	ldr	r3, [r3, #24]
 8007864:	009b      	lsls	r3, r3, #2
 8007866:	693a      	ldr	r2, [r7, #16]
 8007868:	4313      	orrs	r3, r2
 800786a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	693a      	ldr	r2, [r7, #16]
 8007870:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	68fa      	ldr	r2, [r7, #12]
 8007876:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	685a      	ldr	r2, [r3, #4]
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	697a      	ldr	r2, [r7, #20]
 8007884:	621a      	str	r2, [r3, #32]
}
 8007886:	bf00      	nop
 8007888:	371c      	adds	r7, #28
 800788a:	46bd      	mov	sp, r7
 800788c:	bc80      	pop	{r7}
 800788e:	4770      	bx	lr
 8007890:	40012c00 	.word	0x40012c00

08007894 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007894:	b480      	push	{r7}
 8007896:	b087      	sub	sp, #28
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
 800789c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6a1b      	ldr	r3, [r3, #32]
 80078a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6a1b      	ldr	r3, [r3, #32]
 80078a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	69db      	ldr	r3, [r3, #28]
 80078ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	f023 0303 	bic.w	r3, r3, #3
 80078ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	68fa      	ldr	r2, [r7, #12]
 80078d2:	4313      	orrs	r3, r2
 80078d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80078dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	689b      	ldr	r3, [r3, #8]
 80078e2:	021b      	lsls	r3, r3, #8
 80078e4:	697a      	ldr	r2, [r7, #20]
 80078e6:	4313      	orrs	r3, r2
 80078e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	4a1d      	ldr	r2, [pc, #116]	; (8007964 <TIM_OC3_SetConfig+0xd0>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d10d      	bne.n	800790e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80078f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	68db      	ldr	r3, [r3, #12]
 80078fe:	021b      	lsls	r3, r3, #8
 8007900:	697a      	ldr	r2, [r7, #20]
 8007902:	4313      	orrs	r3, r2
 8007904:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800790c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	4a14      	ldr	r2, [pc, #80]	; (8007964 <TIM_OC3_SetConfig+0xd0>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d113      	bne.n	800793e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800791c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007924:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	695b      	ldr	r3, [r3, #20]
 800792a:	011b      	lsls	r3, r3, #4
 800792c:	693a      	ldr	r2, [r7, #16]
 800792e:	4313      	orrs	r3, r2
 8007930:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	699b      	ldr	r3, [r3, #24]
 8007936:	011b      	lsls	r3, r3, #4
 8007938:	693a      	ldr	r2, [r7, #16]
 800793a:	4313      	orrs	r3, r2
 800793c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	693a      	ldr	r2, [r7, #16]
 8007942:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	68fa      	ldr	r2, [r7, #12]
 8007948:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	685a      	ldr	r2, [r3, #4]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	697a      	ldr	r2, [r7, #20]
 8007956:	621a      	str	r2, [r3, #32]
}
 8007958:	bf00      	nop
 800795a:	371c      	adds	r7, #28
 800795c:	46bd      	mov	sp, r7
 800795e:	bc80      	pop	{r7}
 8007960:	4770      	bx	lr
 8007962:	bf00      	nop
 8007964:	40012c00 	.word	0x40012c00

08007968 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007968:	b480      	push	{r7}
 800796a:	b087      	sub	sp, #28
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6a1b      	ldr	r3, [r3, #32]
 8007976:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6a1b      	ldr	r3, [r3, #32]
 800797c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	69db      	ldr	r3, [r3, #28]
 800798e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007996:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800799e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	021b      	lsls	r3, r3, #8
 80079a6:	68fa      	ldr	r2, [r7, #12]
 80079a8:	4313      	orrs	r3, r2
 80079aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80079ac:	693b      	ldr	r3, [r7, #16]
 80079ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80079b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	689b      	ldr	r3, [r3, #8]
 80079b8:	031b      	lsls	r3, r3, #12
 80079ba:	693a      	ldr	r2, [r7, #16]
 80079bc:	4313      	orrs	r3, r2
 80079be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	4a0f      	ldr	r2, [pc, #60]	; (8007a00 <TIM_OC4_SetConfig+0x98>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d109      	bne.n	80079dc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80079ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	695b      	ldr	r3, [r3, #20]
 80079d4:	019b      	lsls	r3, r3, #6
 80079d6:	697a      	ldr	r2, [r7, #20]
 80079d8:	4313      	orrs	r3, r2
 80079da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	697a      	ldr	r2, [r7, #20]
 80079e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	68fa      	ldr	r2, [r7, #12]
 80079e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	685a      	ldr	r2, [r3, #4]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	693a      	ldr	r2, [r7, #16]
 80079f4:	621a      	str	r2, [r3, #32]
}
 80079f6:	bf00      	nop
 80079f8:	371c      	adds	r7, #28
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bc80      	pop	{r7}
 80079fe:	4770      	bx	lr
 8007a00:	40012c00 	.word	0x40012c00

08007a04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b087      	sub	sp, #28
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	60f8      	str	r0, [r7, #12]
 8007a0c:	60b9      	str	r1, [r7, #8]
 8007a0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	6a1b      	ldr	r3, [r3, #32]
 8007a14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	6a1b      	ldr	r3, [r3, #32]
 8007a1a:	f023 0201 	bic.w	r2, r3, #1
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	699b      	ldr	r3, [r3, #24]
 8007a26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	011b      	lsls	r3, r3, #4
 8007a34:	693a      	ldr	r2, [r7, #16]
 8007a36:	4313      	orrs	r3, r2
 8007a38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	f023 030a 	bic.w	r3, r3, #10
 8007a40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007a42:	697a      	ldr	r2, [r7, #20]
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	4313      	orrs	r3, r2
 8007a48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	693a      	ldr	r2, [r7, #16]
 8007a4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	697a      	ldr	r2, [r7, #20]
 8007a54:	621a      	str	r2, [r3, #32]
}
 8007a56:	bf00      	nop
 8007a58:	371c      	adds	r7, #28
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bc80      	pop	{r7}
 8007a5e:	4770      	bx	lr

08007a60 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b087      	sub	sp, #28
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	60f8      	str	r0, [r7, #12]
 8007a68:	60b9      	str	r1, [r7, #8]
 8007a6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	6a1b      	ldr	r3, [r3, #32]
 8007a70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	6a1b      	ldr	r3, [r3, #32]
 8007a76:	f023 0210 	bic.w	r2, r3, #16
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	699b      	ldr	r3, [r3, #24]
 8007a82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007a8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	031b      	lsls	r3, r3, #12
 8007a90:	693a      	ldr	r2, [r7, #16]
 8007a92:	4313      	orrs	r3, r2
 8007a94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007a9c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	011b      	lsls	r3, r3, #4
 8007aa2:	697a      	ldr	r2, [r7, #20]
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	693a      	ldr	r2, [r7, #16]
 8007aac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	697a      	ldr	r2, [r7, #20]
 8007ab2:	621a      	str	r2, [r3, #32]
}
 8007ab4:	bf00      	nop
 8007ab6:	371c      	adds	r7, #28
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bc80      	pop	{r7}
 8007abc:	4770      	bx	lr

08007abe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007abe:	b480      	push	{r7}
 8007ac0:	b085      	sub	sp, #20
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	6078      	str	r0, [r7, #4]
 8007ac6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	689b      	ldr	r3, [r3, #8]
 8007acc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ad4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007ad6:	683a      	ldr	r2, [r7, #0]
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	4313      	orrs	r3, r2
 8007adc:	f043 0307 	orr.w	r3, r3, #7
 8007ae0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	68fa      	ldr	r2, [r7, #12]
 8007ae6:	609a      	str	r2, [r3, #8]
}
 8007ae8:	bf00      	nop
 8007aea:	3714      	adds	r7, #20
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bc80      	pop	{r7}
 8007af0:	4770      	bx	lr

08007af2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007af2:	b480      	push	{r7}
 8007af4:	b087      	sub	sp, #28
 8007af6:	af00      	add	r7, sp, #0
 8007af8:	60f8      	str	r0, [r7, #12]
 8007afa:	60b9      	str	r1, [r7, #8]
 8007afc:	607a      	str	r2, [r7, #4]
 8007afe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	689b      	ldr	r3, [r3, #8]
 8007b04:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007b0c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	021a      	lsls	r2, r3, #8
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	431a      	orrs	r2, r3
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	697a      	ldr	r2, [r7, #20]
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	697a      	ldr	r2, [r7, #20]
 8007b24:	609a      	str	r2, [r3, #8]
}
 8007b26:	bf00      	nop
 8007b28:	371c      	adds	r7, #28
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bc80      	pop	{r7}
 8007b2e:	4770      	bx	lr

08007b30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b087      	sub	sp, #28
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	60f8      	str	r0, [r7, #12]
 8007b38:	60b9      	str	r1, [r7, #8]
 8007b3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	f003 031f 	and.w	r3, r3, #31
 8007b42:	2201      	movs	r2, #1
 8007b44:	fa02 f303 	lsl.w	r3, r2, r3
 8007b48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	6a1a      	ldr	r2, [r3, #32]
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	43db      	mvns	r3, r3
 8007b52:	401a      	ands	r2, r3
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	6a1a      	ldr	r2, [r3, #32]
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	f003 031f 	and.w	r3, r3, #31
 8007b62:	6879      	ldr	r1, [r7, #4]
 8007b64:	fa01 f303 	lsl.w	r3, r1, r3
 8007b68:	431a      	orrs	r2, r3
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	621a      	str	r2, [r3, #32]
}
 8007b6e:	bf00      	nop
 8007b70:	371c      	adds	r7, #28
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bc80      	pop	{r7}
 8007b76:	4770      	bx	lr

08007b78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b085      	sub	sp, #20
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
 8007b80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b88:	2b01      	cmp	r3, #1
 8007b8a:	d101      	bne.n	8007b90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007b8c:	2302      	movs	r3, #2
 8007b8e:	e046      	b.n	8007c1e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2201      	movs	r2, #1
 8007b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2202      	movs	r2, #2
 8007b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	689b      	ldr	r3, [r3, #8]
 8007bae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	68fa      	ldr	r2, [r7, #12]
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	68fa      	ldr	r2, [r7, #12]
 8007bc8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a16      	ldr	r2, [pc, #88]	; (8007c28 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d00e      	beq.n	8007bf2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bdc:	d009      	beq.n	8007bf2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a12      	ldr	r2, [pc, #72]	; (8007c2c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d004      	beq.n	8007bf2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a10      	ldr	r2, [pc, #64]	; (8007c30 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d10c      	bne.n	8007c0c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bf8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	68ba      	ldr	r2, [r7, #8]
 8007c00:	4313      	orrs	r3, r2
 8007c02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	68ba      	ldr	r2, [r7, #8]
 8007c0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2201      	movs	r2, #1
 8007c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2200      	movs	r2, #0
 8007c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c1c:	2300      	movs	r3, #0
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3714      	adds	r7, #20
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bc80      	pop	{r7}
 8007c26:	4770      	bx	lr
 8007c28:	40012c00 	.word	0x40012c00
 8007c2c:	40000400 	.word	0x40000400
 8007c30:	40000800 	.word	0x40000800

08007c34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b083      	sub	sp, #12
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007c3c:	bf00      	nop
 8007c3e:	370c      	adds	r7, #12
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bc80      	pop	{r7}
 8007c44:	4770      	bx	lr

08007c46 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007c46:	b480      	push	{r7}
 8007c48:	b083      	sub	sp, #12
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007c4e:	bf00      	nop
 8007c50:	370c      	adds	r7, #12
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bc80      	pop	{r7}
 8007c56:	4770      	bx	lr

08007c58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b082      	sub	sp, #8
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d101      	bne.n	8007c6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c66:	2301      	movs	r3, #1
 8007c68:	e042      	b.n	8007cf0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c70:	b2db      	uxtb	r3, r3
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d106      	bne.n	8007c84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f7fc ff72 	bl	8004b68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2224      	movs	r2, #36	; 0x24
 8007c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	68da      	ldr	r2, [r3, #12]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007c9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f000 fcab 	bl	80085f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	691a      	ldr	r2, [r3, #16]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007cb0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	695a      	ldr	r2, [r3, #20]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007cc0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	68da      	ldr	r2, [r3, #12]
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007cd0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2220      	movs	r2, #32
 8007cdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2220      	movs	r2, #32
 8007ce4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2200      	movs	r2, #0
 8007cec:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007cee:	2300      	movs	r3, #0
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	3708      	adds	r7, #8
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}

08007cf8 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b085      	sub	sp, #20
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	60f8      	str	r0, [r7, #12]
 8007d00:	60b9      	str	r1, [r7, #8]
 8007d02:	4613      	mov	r3, r2
 8007d04:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d0c:	b2db      	uxtb	r3, r3
 8007d0e:	2b20      	cmp	r3, #32
 8007d10:	d121      	bne.n	8007d56 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d002      	beq.n	8007d1e <HAL_UART_Transmit_IT+0x26>
 8007d18:	88fb      	ldrh	r3, [r7, #6]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d101      	bne.n	8007d22 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	e01a      	b.n	8007d58 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	68ba      	ldr	r2, [r7, #8]
 8007d26:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	88fa      	ldrh	r2, [r7, #6]
 8007d2c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	88fa      	ldrh	r2, [r7, #6]
 8007d32:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	2200      	movs	r2, #0
 8007d38:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2221      	movs	r2, #33	; 0x21
 8007d3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	68da      	ldr	r2, [r3, #12]
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007d50:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8007d52:	2300      	movs	r3, #0
 8007d54:	e000      	b.n	8007d58 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8007d56:	2302      	movs	r3, #2
  }
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	3714      	adds	r7, #20
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bc80      	pop	{r7}
 8007d60:	4770      	bx	lr
	...

08007d64 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b0ba      	sub	sp, #232	; 0xe8
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	68db      	ldr	r3, [r3, #12]
 8007d7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	695b      	ldr	r3, [r3, #20]
 8007d86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007d90:	2300      	movs	r3, #0
 8007d92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d9a:	f003 030f 	and.w	r3, r3, #15
 8007d9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007da2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d10f      	bne.n	8007dca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007daa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dae:	f003 0320 	and.w	r3, r3, #32
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d009      	beq.n	8007dca <HAL_UART_IRQHandler+0x66>
 8007db6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007dba:	f003 0320 	and.w	r3, r3, #32
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d003      	beq.n	8007dca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f000 fb5a 	bl	800847c <UART_Receive_IT>
      return;
 8007dc8:	e25b      	b.n	8008282 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007dca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	f000 80de 	beq.w	8007f90 <HAL_UART_IRQHandler+0x22c>
 8007dd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007dd8:	f003 0301 	and.w	r3, r3, #1
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d106      	bne.n	8007dee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007de0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007de4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	f000 80d1 	beq.w	8007f90 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007dee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007df2:	f003 0301 	and.w	r3, r3, #1
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d00b      	beq.n	8007e12 <HAL_UART_IRQHandler+0xae>
 8007dfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d005      	beq.n	8007e12 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e0a:	f043 0201 	orr.w	r2, r3, #1
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007e12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e16:	f003 0304 	and.w	r3, r3, #4
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d00b      	beq.n	8007e36 <HAL_UART_IRQHandler+0xd2>
 8007e1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e22:	f003 0301 	and.w	r3, r3, #1
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d005      	beq.n	8007e36 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e2e:	f043 0202 	orr.w	r2, r3, #2
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007e36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e3a:	f003 0302 	and.w	r3, r3, #2
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d00b      	beq.n	8007e5a <HAL_UART_IRQHandler+0xf6>
 8007e42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e46:	f003 0301 	and.w	r3, r3, #1
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d005      	beq.n	8007e5a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e52:	f043 0204 	orr.w	r2, r3, #4
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007e5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e5e:	f003 0308 	and.w	r3, r3, #8
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d011      	beq.n	8007e8a <HAL_UART_IRQHandler+0x126>
 8007e66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e6a:	f003 0320 	and.w	r3, r3, #32
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d105      	bne.n	8007e7e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007e72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e76:	f003 0301 	and.w	r3, r3, #1
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d005      	beq.n	8007e8a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e82:	f043 0208 	orr.w	r2, r3, #8
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	f000 81f2 	beq.w	8008278 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007e94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e98:	f003 0320 	and.w	r3, r3, #32
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d008      	beq.n	8007eb2 <HAL_UART_IRQHandler+0x14e>
 8007ea0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ea4:	f003 0320 	and.w	r3, r3, #32
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d002      	beq.n	8007eb2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f000 fae5 	bl	800847c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	695b      	ldr	r3, [r3, #20]
 8007eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	bf14      	ite	ne
 8007ec0:	2301      	movne	r3, #1
 8007ec2:	2300      	moveq	r3, #0
 8007ec4:	b2db      	uxtb	r3, r3
 8007ec6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ece:	f003 0308 	and.w	r3, r3, #8
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d103      	bne.n	8007ede <HAL_UART_IRQHandler+0x17a>
 8007ed6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d04f      	beq.n	8007f7e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f000 f9ef 	bl	80082c2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	695b      	ldr	r3, [r3, #20]
 8007eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d041      	beq.n	8007f76 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	3314      	adds	r3, #20
 8007ef8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007efc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007f00:	e853 3f00 	ldrex	r3, [r3]
 8007f04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007f08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	3314      	adds	r3, #20
 8007f1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007f1e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007f22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007f2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007f2e:	e841 2300 	strex	r3, r2, [r1]
 8007f32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007f36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d1d9      	bne.n	8007ef2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d013      	beq.n	8007f6e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f4a:	4a7e      	ldr	r2, [pc, #504]	; (8008144 <HAL_UART_IRQHandler+0x3e0>)
 8007f4c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f52:	4618      	mov	r0, r3
 8007f54:	f7fd f8a4 	bl	80050a0 <HAL_DMA_Abort_IT>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d016      	beq.n	8007f8c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f64:	687a      	ldr	r2, [r7, #4]
 8007f66:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007f68:	4610      	mov	r0, r2
 8007f6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f6c:	e00e      	b.n	8007f8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f000 f993 	bl	800829a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f74:	e00a      	b.n	8007f8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f000 f98f 	bl	800829a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f7c:	e006      	b.n	8007f8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f000 f98b 	bl	800829a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2200      	movs	r2, #0
 8007f88:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8007f8a:	e175      	b.n	8008278 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f8c:	bf00      	nop
    return;
 8007f8e:	e173      	b.n	8008278 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	f040 814f 	bne.w	8008238 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007f9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f9e:	f003 0310 	and.w	r3, r3, #16
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	f000 8148 	beq.w	8008238 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007fa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fac:	f003 0310 	and.w	r3, r3, #16
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	f000 8141 	beq.w	8008238 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	60bb      	str	r3, [r7, #8]
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	60bb      	str	r3, [r7, #8]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	60bb      	str	r3, [r7, #8]
 8007fca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	695b      	ldr	r3, [r3, #20]
 8007fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	f000 80b6 	beq.w	8008148 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007fe8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	f000 8145 	beq.w	800827c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007ff6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007ffa:	429a      	cmp	r2, r3
 8007ffc:	f080 813e 	bcs.w	800827c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008006:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800800c:	699b      	ldr	r3, [r3, #24]
 800800e:	2b20      	cmp	r3, #32
 8008010:	f000 8088 	beq.w	8008124 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	330c      	adds	r3, #12
 800801a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800801e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008022:	e853 3f00 	ldrex	r3, [r3]
 8008026:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800802a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800802e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008032:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	330c      	adds	r3, #12
 800803c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008040:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008044:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008048:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800804c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008050:	e841 2300 	strex	r3, r2, [r1]
 8008054:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008058:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800805c:	2b00      	cmp	r3, #0
 800805e:	d1d9      	bne.n	8008014 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	3314      	adds	r3, #20
 8008066:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008068:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800806a:	e853 3f00 	ldrex	r3, [r3]
 800806e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008070:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008072:	f023 0301 	bic.w	r3, r3, #1
 8008076:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	3314      	adds	r3, #20
 8008080:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008084:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008088:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800808a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800808c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008090:	e841 2300 	strex	r3, r2, [r1]
 8008094:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008096:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008098:	2b00      	cmp	r3, #0
 800809a:	d1e1      	bne.n	8008060 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	3314      	adds	r3, #20
 80080a2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80080a6:	e853 3f00 	ldrex	r3, [r3]
 80080aa:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80080ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80080ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	3314      	adds	r3, #20
 80080bc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80080c0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80080c2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080c4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80080c6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80080c8:	e841 2300 	strex	r3, r2, [r1]
 80080cc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80080ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d1e3      	bne.n	800809c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2220      	movs	r2, #32
 80080d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2200      	movs	r2, #0
 80080e0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	330c      	adds	r3, #12
 80080e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080ec:	e853 3f00 	ldrex	r3, [r3]
 80080f0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80080f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080f4:	f023 0310 	bic.w	r3, r3, #16
 80080f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	330c      	adds	r3, #12
 8008102:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008106:	65ba      	str	r2, [r7, #88]	; 0x58
 8008108:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800810a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800810c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800810e:	e841 2300 	strex	r3, r2, [r1]
 8008112:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008114:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008116:	2b00      	cmp	r3, #0
 8008118:	d1e3      	bne.n	80080e2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800811e:	4618      	mov	r0, r3
 8008120:	f7fc ff83 	bl	800502a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2202      	movs	r2, #2
 8008128:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008132:	b29b      	uxth	r3, r3
 8008134:	1ad3      	subs	r3, r2, r3
 8008136:	b29b      	uxth	r3, r3
 8008138:	4619      	mov	r1, r3
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f000 f8b6 	bl	80082ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008140:	e09c      	b.n	800827c <HAL_UART_IRQHandler+0x518>
 8008142:	bf00      	nop
 8008144:	08008387 	.word	0x08008387
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008150:	b29b      	uxth	r3, r3
 8008152:	1ad3      	subs	r3, r2, r3
 8008154:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800815c:	b29b      	uxth	r3, r3
 800815e:	2b00      	cmp	r3, #0
 8008160:	f000 808e 	beq.w	8008280 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008164:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008168:	2b00      	cmp	r3, #0
 800816a:	f000 8089 	beq.w	8008280 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	330c      	adds	r3, #12
 8008174:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008178:	e853 3f00 	ldrex	r3, [r3]
 800817c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800817e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008180:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008184:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	330c      	adds	r3, #12
 800818e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008192:	647a      	str	r2, [r7, #68]	; 0x44
 8008194:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008196:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008198:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800819a:	e841 2300 	strex	r3, r2, [r1]
 800819e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80081a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d1e3      	bne.n	800816e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	3314      	adds	r3, #20
 80081ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b0:	e853 3f00 	ldrex	r3, [r3]
 80081b4:	623b      	str	r3, [r7, #32]
   return(result);
 80081b6:	6a3b      	ldr	r3, [r7, #32]
 80081b8:	f023 0301 	bic.w	r3, r3, #1
 80081bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	3314      	adds	r3, #20
 80081c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80081ca:	633a      	str	r2, [r7, #48]	; 0x30
 80081cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80081d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081d2:	e841 2300 	strex	r3, r2, [r1]
 80081d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80081d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d1e3      	bne.n	80081a6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2220      	movs	r2, #32
 80081e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2200      	movs	r2, #0
 80081ea:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	330c      	adds	r3, #12
 80081f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	e853 3f00 	ldrex	r3, [r3]
 80081fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	f023 0310 	bic.w	r3, r3, #16
 8008202:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	330c      	adds	r3, #12
 800820c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008210:	61fa      	str	r2, [r7, #28]
 8008212:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008214:	69b9      	ldr	r1, [r7, #24]
 8008216:	69fa      	ldr	r2, [r7, #28]
 8008218:	e841 2300 	strex	r3, r2, [r1]
 800821c:	617b      	str	r3, [r7, #20]
   return(result);
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d1e3      	bne.n	80081ec <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2202      	movs	r2, #2
 8008228:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800822a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800822e:	4619      	mov	r1, r3
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f000 f83b 	bl	80082ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008236:	e023      	b.n	8008280 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008238:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800823c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008240:	2b00      	cmp	r3, #0
 8008242:	d009      	beq.n	8008258 <HAL_UART_IRQHandler+0x4f4>
 8008244:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008248:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800824c:	2b00      	cmp	r3, #0
 800824e:	d003      	beq.n	8008258 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f000 f8ac 	bl	80083ae <UART_Transmit_IT>
    return;
 8008256:	e014      	b.n	8008282 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008258:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800825c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008260:	2b00      	cmp	r3, #0
 8008262:	d00e      	beq.n	8008282 <HAL_UART_IRQHandler+0x51e>
 8008264:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800826c:	2b00      	cmp	r3, #0
 800826e:	d008      	beq.n	8008282 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f000 f8eb 	bl	800844c <UART_EndTransmit_IT>
    return;
 8008276:	e004      	b.n	8008282 <HAL_UART_IRQHandler+0x51e>
    return;
 8008278:	bf00      	nop
 800827a:	e002      	b.n	8008282 <HAL_UART_IRQHandler+0x51e>
      return;
 800827c:	bf00      	nop
 800827e:	e000      	b.n	8008282 <HAL_UART_IRQHandler+0x51e>
      return;
 8008280:	bf00      	nop
  }
}
 8008282:	37e8      	adds	r7, #232	; 0xe8
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}

08008288 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008288:	b480      	push	{r7}
 800828a:	b083      	sub	sp, #12
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008290:	bf00      	nop
 8008292:	370c      	adds	r7, #12
 8008294:	46bd      	mov	sp, r7
 8008296:	bc80      	pop	{r7}
 8008298:	4770      	bx	lr

0800829a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800829a:	b480      	push	{r7}
 800829c:	b083      	sub	sp, #12
 800829e:	af00      	add	r7, sp, #0
 80082a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80082a2:	bf00      	nop
 80082a4:	370c      	adds	r7, #12
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bc80      	pop	{r7}
 80082aa:	4770      	bx	lr

080082ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80082ac:	b480      	push	{r7}
 80082ae:	b083      	sub	sp, #12
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
 80082b4:	460b      	mov	r3, r1
 80082b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80082b8:	bf00      	nop
 80082ba:	370c      	adds	r7, #12
 80082bc:	46bd      	mov	sp, r7
 80082be:	bc80      	pop	{r7}
 80082c0:	4770      	bx	lr

080082c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80082c2:	b480      	push	{r7}
 80082c4:	b095      	sub	sp, #84	; 0x54
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	330c      	adds	r3, #12
 80082d0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082d4:	e853 3f00 	ldrex	r3, [r3]
 80082d8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80082da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80082e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	330c      	adds	r3, #12
 80082e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80082ea:	643a      	str	r2, [r7, #64]	; 0x40
 80082ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80082f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80082f2:	e841 2300 	strex	r3, r2, [r1]
 80082f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80082f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d1e5      	bne.n	80082ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	3314      	adds	r3, #20
 8008304:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008306:	6a3b      	ldr	r3, [r7, #32]
 8008308:	e853 3f00 	ldrex	r3, [r3]
 800830c:	61fb      	str	r3, [r7, #28]
   return(result);
 800830e:	69fb      	ldr	r3, [r7, #28]
 8008310:	f023 0301 	bic.w	r3, r3, #1
 8008314:	64bb      	str	r3, [r7, #72]	; 0x48
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	3314      	adds	r3, #20
 800831c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800831e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008320:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008322:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008324:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008326:	e841 2300 	strex	r3, r2, [r1]
 800832a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800832c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832e:	2b00      	cmp	r3, #0
 8008330:	d1e5      	bne.n	80082fe <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008336:	2b01      	cmp	r3, #1
 8008338:	d119      	bne.n	800836e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	330c      	adds	r3, #12
 8008340:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	e853 3f00 	ldrex	r3, [r3]
 8008348:	60bb      	str	r3, [r7, #8]
   return(result);
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	f023 0310 	bic.w	r3, r3, #16
 8008350:	647b      	str	r3, [r7, #68]	; 0x44
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	330c      	adds	r3, #12
 8008358:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800835a:	61ba      	str	r2, [r7, #24]
 800835c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800835e:	6979      	ldr	r1, [r7, #20]
 8008360:	69ba      	ldr	r2, [r7, #24]
 8008362:	e841 2300 	strex	r3, r2, [r1]
 8008366:	613b      	str	r3, [r7, #16]
   return(result);
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d1e5      	bne.n	800833a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2220      	movs	r2, #32
 8008372:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2200      	movs	r2, #0
 800837a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800837c:	bf00      	nop
 800837e:	3754      	adds	r7, #84	; 0x54
 8008380:	46bd      	mov	sp, r7
 8008382:	bc80      	pop	{r7}
 8008384:	4770      	bx	lr

08008386 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008386:	b580      	push	{r7, lr}
 8008388:	b084      	sub	sp, #16
 800838a:	af00      	add	r7, sp, #0
 800838c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008392:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2200      	movs	r2, #0
 8008398:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2200      	movs	r2, #0
 800839e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80083a0:	68f8      	ldr	r0, [r7, #12]
 80083a2:	f7ff ff7a 	bl	800829a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80083a6:	bf00      	nop
 80083a8:	3710      	adds	r7, #16
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}

080083ae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80083ae:	b480      	push	{r7}
 80083b0:	b085      	sub	sp, #20
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80083bc:	b2db      	uxtb	r3, r3
 80083be:	2b21      	cmp	r3, #33	; 0x21
 80083c0:	d13e      	bne.n	8008440 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	689b      	ldr	r3, [r3, #8]
 80083c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083ca:	d114      	bne.n	80083f6 <UART_Transmit_IT+0x48>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	691b      	ldr	r3, [r3, #16]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d110      	bne.n	80083f6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6a1b      	ldr	r3, [r3, #32]
 80083d8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	881b      	ldrh	r3, [r3, #0]
 80083de:	461a      	mov	r2, r3
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80083e8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6a1b      	ldr	r3, [r3, #32]
 80083ee:	1c9a      	adds	r2, r3, #2
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	621a      	str	r2, [r3, #32]
 80083f4:	e008      	b.n	8008408 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6a1b      	ldr	r3, [r3, #32]
 80083fa:	1c59      	adds	r1, r3, #1
 80083fc:	687a      	ldr	r2, [r7, #4]
 80083fe:	6211      	str	r1, [r2, #32]
 8008400:	781a      	ldrb	r2, [r3, #0]
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800840c:	b29b      	uxth	r3, r3
 800840e:	3b01      	subs	r3, #1
 8008410:	b29b      	uxth	r3, r3
 8008412:	687a      	ldr	r2, [r7, #4]
 8008414:	4619      	mov	r1, r3
 8008416:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008418:	2b00      	cmp	r3, #0
 800841a:	d10f      	bne.n	800843c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	68da      	ldr	r2, [r3, #12]
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800842a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	68da      	ldr	r2, [r3, #12]
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800843a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800843c:	2300      	movs	r3, #0
 800843e:	e000      	b.n	8008442 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008440:	2302      	movs	r3, #2
  }
}
 8008442:	4618      	mov	r0, r3
 8008444:	3714      	adds	r7, #20
 8008446:	46bd      	mov	sp, r7
 8008448:	bc80      	pop	{r7}
 800844a:	4770      	bx	lr

0800844c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b082      	sub	sp, #8
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	68da      	ldr	r2, [r3, #12]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008462:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2220      	movs	r2, #32
 8008468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f7ff ff0b 	bl	8008288 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008472:	2300      	movs	r3, #0
}
 8008474:	4618      	mov	r0, r3
 8008476:	3708      	adds	r7, #8
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}

0800847c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b08c      	sub	sp, #48	; 0x30
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800848a:	b2db      	uxtb	r3, r3
 800848c:	2b22      	cmp	r3, #34	; 0x22
 800848e:	f040 80ae 	bne.w	80085ee <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	689b      	ldr	r3, [r3, #8]
 8008496:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800849a:	d117      	bne.n	80084cc <UART_Receive_IT+0x50>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	691b      	ldr	r3, [r3, #16]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d113      	bne.n	80084cc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80084a4:	2300      	movs	r3, #0
 80084a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ac:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	685b      	ldr	r3, [r3, #4]
 80084b4:	b29b      	uxth	r3, r3
 80084b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084ba:	b29a      	uxth	r2, r3
 80084bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084be:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084c4:	1c9a      	adds	r2, r3, #2
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	629a      	str	r2, [r3, #40]	; 0x28
 80084ca:	e026      	b.n	800851a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80084d2:	2300      	movs	r3, #0
 80084d4:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	689b      	ldr	r3, [r3, #8]
 80084da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084de:	d007      	beq.n	80084f0 <UART_Receive_IT+0x74>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	689b      	ldr	r3, [r3, #8]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d10a      	bne.n	80084fe <UART_Receive_IT+0x82>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	691b      	ldr	r3, [r3, #16]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d106      	bne.n	80084fe <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	685b      	ldr	r3, [r3, #4]
 80084f6:	b2da      	uxtb	r2, r3
 80084f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084fa:	701a      	strb	r2, [r3, #0]
 80084fc:	e008      	b.n	8008510 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	685b      	ldr	r3, [r3, #4]
 8008504:	b2db      	uxtb	r3, r3
 8008506:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800850a:	b2da      	uxtb	r2, r3
 800850c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800850e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008514:	1c5a      	adds	r2, r3, #1
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800851e:	b29b      	uxth	r3, r3
 8008520:	3b01      	subs	r3, #1
 8008522:	b29b      	uxth	r3, r3
 8008524:	687a      	ldr	r2, [r7, #4]
 8008526:	4619      	mov	r1, r3
 8008528:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800852a:	2b00      	cmp	r3, #0
 800852c:	d15d      	bne.n	80085ea <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	68da      	ldr	r2, [r3, #12]
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f022 0220 	bic.w	r2, r2, #32
 800853c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	68da      	ldr	r2, [r3, #12]
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800854c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	695a      	ldr	r2, [r3, #20]
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f022 0201 	bic.w	r2, r2, #1
 800855c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2220      	movs	r2, #32
 8008562:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2200      	movs	r2, #0
 800856a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008570:	2b01      	cmp	r3, #1
 8008572:	d135      	bne.n	80085e0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2200      	movs	r2, #0
 8008578:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	330c      	adds	r3, #12
 8008580:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	e853 3f00 	ldrex	r3, [r3]
 8008588:	613b      	str	r3, [r7, #16]
   return(result);
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	f023 0310 	bic.w	r3, r3, #16
 8008590:	627b      	str	r3, [r7, #36]	; 0x24
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	330c      	adds	r3, #12
 8008598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800859a:	623a      	str	r2, [r7, #32]
 800859c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800859e:	69f9      	ldr	r1, [r7, #28]
 80085a0:	6a3a      	ldr	r2, [r7, #32]
 80085a2:	e841 2300 	strex	r3, r2, [r1]
 80085a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80085a8:	69bb      	ldr	r3, [r7, #24]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d1e5      	bne.n	800857a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f003 0310 	and.w	r3, r3, #16
 80085b8:	2b10      	cmp	r3, #16
 80085ba:	d10a      	bne.n	80085d2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80085bc:	2300      	movs	r3, #0
 80085be:	60fb      	str	r3, [r7, #12]
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	60fb      	str	r3, [r7, #12]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	685b      	ldr	r3, [r3, #4]
 80085ce:	60fb      	str	r3, [r7, #12]
 80085d0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80085d6:	4619      	mov	r1, r3
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f7ff fe67 	bl	80082ac <HAL_UARTEx_RxEventCallback>
 80085de:	e002      	b.n	80085e6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f7f9 fa3f 	bl	8001a64 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80085e6:	2300      	movs	r3, #0
 80085e8:	e002      	b.n	80085f0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80085ea:	2300      	movs	r3, #0
 80085ec:	e000      	b.n	80085f0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80085ee:	2302      	movs	r3, #2
  }
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	3730      	adds	r7, #48	; 0x30
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}

080085f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b084      	sub	sp, #16
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	691b      	ldr	r3, [r3, #16]
 8008606:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	68da      	ldr	r2, [r3, #12]
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	430a      	orrs	r2, r1
 8008614:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	689a      	ldr	r2, [r3, #8]
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	691b      	ldr	r3, [r3, #16]
 800861e:	431a      	orrs	r2, r3
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	695b      	ldr	r3, [r3, #20]
 8008624:	4313      	orrs	r3, r2
 8008626:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	68db      	ldr	r3, [r3, #12]
 800862e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8008632:	f023 030c 	bic.w	r3, r3, #12
 8008636:	687a      	ldr	r2, [r7, #4]
 8008638:	6812      	ldr	r2, [r2, #0]
 800863a:	68b9      	ldr	r1, [r7, #8]
 800863c:	430b      	orrs	r3, r1
 800863e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	695b      	ldr	r3, [r3, #20]
 8008646:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	699a      	ldr	r2, [r3, #24]
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	430a      	orrs	r2, r1
 8008654:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a2c      	ldr	r2, [pc, #176]	; (800870c <UART_SetConfig+0x114>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d103      	bne.n	8008668 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008660:	f7fe fb6a 	bl	8006d38 <HAL_RCC_GetPCLK2Freq>
 8008664:	60f8      	str	r0, [r7, #12]
 8008666:	e002      	b.n	800866e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008668:	f7fe fb52 	bl	8006d10 <HAL_RCC_GetPCLK1Freq>
 800866c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800866e:	68fa      	ldr	r2, [r7, #12]
 8008670:	4613      	mov	r3, r2
 8008672:	009b      	lsls	r3, r3, #2
 8008674:	4413      	add	r3, r2
 8008676:	009a      	lsls	r2, r3, #2
 8008678:	441a      	add	r2, r3
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	685b      	ldr	r3, [r3, #4]
 800867e:	009b      	lsls	r3, r3, #2
 8008680:	fbb2 f3f3 	udiv	r3, r2, r3
 8008684:	4a22      	ldr	r2, [pc, #136]	; (8008710 <UART_SetConfig+0x118>)
 8008686:	fba2 2303 	umull	r2, r3, r2, r3
 800868a:	095b      	lsrs	r3, r3, #5
 800868c:	0119      	lsls	r1, r3, #4
 800868e:	68fa      	ldr	r2, [r7, #12]
 8008690:	4613      	mov	r3, r2
 8008692:	009b      	lsls	r3, r3, #2
 8008694:	4413      	add	r3, r2
 8008696:	009a      	lsls	r2, r3, #2
 8008698:	441a      	add	r2, r3
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	009b      	lsls	r3, r3, #2
 80086a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80086a4:	4b1a      	ldr	r3, [pc, #104]	; (8008710 <UART_SetConfig+0x118>)
 80086a6:	fba3 0302 	umull	r0, r3, r3, r2
 80086aa:	095b      	lsrs	r3, r3, #5
 80086ac:	2064      	movs	r0, #100	; 0x64
 80086ae:	fb00 f303 	mul.w	r3, r0, r3
 80086b2:	1ad3      	subs	r3, r2, r3
 80086b4:	011b      	lsls	r3, r3, #4
 80086b6:	3332      	adds	r3, #50	; 0x32
 80086b8:	4a15      	ldr	r2, [pc, #84]	; (8008710 <UART_SetConfig+0x118>)
 80086ba:	fba2 2303 	umull	r2, r3, r2, r3
 80086be:	095b      	lsrs	r3, r3, #5
 80086c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80086c4:	4419      	add	r1, r3
 80086c6:	68fa      	ldr	r2, [r7, #12]
 80086c8:	4613      	mov	r3, r2
 80086ca:	009b      	lsls	r3, r3, #2
 80086cc:	4413      	add	r3, r2
 80086ce:	009a      	lsls	r2, r3, #2
 80086d0:	441a      	add	r2, r3
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	685b      	ldr	r3, [r3, #4]
 80086d6:	009b      	lsls	r3, r3, #2
 80086d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80086dc:	4b0c      	ldr	r3, [pc, #48]	; (8008710 <UART_SetConfig+0x118>)
 80086de:	fba3 0302 	umull	r0, r3, r3, r2
 80086e2:	095b      	lsrs	r3, r3, #5
 80086e4:	2064      	movs	r0, #100	; 0x64
 80086e6:	fb00 f303 	mul.w	r3, r0, r3
 80086ea:	1ad3      	subs	r3, r2, r3
 80086ec:	011b      	lsls	r3, r3, #4
 80086ee:	3332      	adds	r3, #50	; 0x32
 80086f0:	4a07      	ldr	r2, [pc, #28]	; (8008710 <UART_SetConfig+0x118>)
 80086f2:	fba2 2303 	umull	r2, r3, r2, r3
 80086f6:	095b      	lsrs	r3, r3, #5
 80086f8:	f003 020f 	and.w	r2, r3, #15
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	440a      	add	r2, r1
 8008702:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008704:	bf00      	nop
 8008706:	3710      	adds	r7, #16
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}
 800870c:	40013800 	.word	0x40013800
 8008710:	51eb851f 	.word	0x51eb851f

08008714 <siprintf>:
 8008714:	b40e      	push	{r1, r2, r3}
 8008716:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800871a:	b500      	push	{lr}
 800871c:	b09c      	sub	sp, #112	; 0x70
 800871e:	ab1d      	add	r3, sp, #116	; 0x74
 8008720:	9002      	str	r0, [sp, #8]
 8008722:	9006      	str	r0, [sp, #24]
 8008724:	9107      	str	r1, [sp, #28]
 8008726:	9104      	str	r1, [sp, #16]
 8008728:	4808      	ldr	r0, [pc, #32]	; (800874c <siprintf+0x38>)
 800872a:	4909      	ldr	r1, [pc, #36]	; (8008750 <siprintf+0x3c>)
 800872c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008730:	9105      	str	r1, [sp, #20]
 8008732:	6800      	ldr	r0, [r0, #0]
 8008734:	a902      	add	r1, sp, #8
 8008736:	9301      	str	r3, [sp, #4]
 8008738:	f000 f98e 	bl	8008a58 <_svfiprintf_r>
 800873c:	2200      	movs	r2, #0
 800873e:	9b02      	ldr	r3, [sp, #8]
 8008740:	701a      	strb	r2, [r3, #0]
 8008742:	b01c      	add	sp, #112	; 0x70
 8008744:	f85d eb04 	ldr.w	lr, [sp], #4
 8008748:	b003      	add	sp, #12
 800874a:	4770      	bx	lr
 800874c:	20000104 	.word	0x20000104
 8008750:	ffff0208 	.word	0xffff0208

08008754 <memset>:
 8008754:	4603      	mov	r3, r0
 8008756:	4402      	add	r2, r0
 8008758:	4293      	cmp	r3, r2
 800875a:	d100      	bne.n	800875e <memset+0xa>
 800875c:	4770      	bx	lr
 800875e:	f803 1b01 	strb.w	r1, [r3], #1
 8008762:	e7f9      	b.n	8008758 <memset+0x4>

08008764 <__errno>:
 8008764:	4b01      	ldr	r3, [pc, #4]	; (800876c <__errno+0x8>)
 8008766:	6818      	ldr	r0, [r3, #0]
 8008768:	4770      	bx	lr
 800876a:	bf00      	nop
 800876c:	20000104 	.word	0x20000104

08008770 <__libc_init_array>:
 8008770:	b570      	push	{r4, r5, r6, lr}
 8008772:	2600      	movs	r6, #0
 8008774:	4d0c      	ldr	r5, [pc, #48]	; (80087a8 <__libc_init_array+0x38>)
 8008776:	4c0d      	ldr	r4, [pc, #52]	; (80087ac <__libc_init_array+0x3c>)
 8008778:	1b64      	subs	r4, r4, r5
 800877a:	10a4      	asrs	r4, r4, #2
 800877c:	42a6      	cmp	r6, r4
 800877e:	d109      	bne.n	8008794 <__libc_init_array+0x24>
 8008780:	f000 ffd8 	bl	8009734 <_init>
 8008784:	2600      	movs	r6, #0
 8008786:	4d0a      	ldr	r5, [pc, #40]	; (80087b0 <__libc_init_array+0x40>)
 8008788:	4c0a      	ldr	r4, [pc, #40]	; (80087b4 <__libc_init_array+0x44>)
 800878a:	1b64      	subs	r4, r4, r5
 800878c:	10a4      	asrs	r4, r4, #2
 800878e:	42a6      	cmp	r6, r4
 8008790:	d105      	bne.n	800879e <__libc_init_array+0x2e>
 8008792:	bd70      	pop	{r4, r5, r6, pc}
 8008794:	f855 3b04 	ldr.w	r3, [r5], #4
 8008798:	4798      	blx	r3
 800879a:	3601      	adds	r6, #1
 800879c:	e7ee      	b.n	800877c <__libc_init_array+0xc>
 800879e:	f855 3b04 	ldr.w	r3, [r5], #4
 80087a2:	4798      	blx	r3
 80087a4:	3601      	adds	r6, #1
 80087a6:	e7f2      	b.n	800878e <__libc_init_array+0x1e>
 80087a8:	08009b00 	.word	0x08009b00
 80087ac:	08009b00 	.word	0x08009b00
 80087b0:	08009b00 	.word	0x08009b00
 80087b4:	08009b04 	.word	0x08009b04

080087b8 <__retarget_lock_acquire_recursive>:
 80087b8:	4770      	bx	lr

080087ba <__retarget_lock_release_recursive>:
 80087ba:	4770      	bx	lr

080087bc <_free_r>:
 80087bc:	b538      	push	{r3, r4, r5, lr}
 80087be:	4605      	mov	r5, r0
 80087c0:	2900      	cmp	r1, #0
 80087c2:	d040      	beq.n	8008846 <_free_r+0x8a>
 80087c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087c8:	1f0c      	subs	r4, r1, #4
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	bfb8      	it	lt
 80087ce:	18e4      	addlt	r4, r4, r3
 80087d0:	f000 f8dc 	bl	800898c <__malloc_lock>
 80087d4:	4a1c      	ldr	r2, [pc, #112]	; (8008848 <_free_r+0x8c>)
 80087d6:	6813      	ldr	r3, [r2, #0]
 80087d8:	b933      	cbnz	r3, 80087e8 <_free_r+0x2c>
 80087da:	6063      	str	r3, [r4, #4]
 80087dc:	6014      	str	r4, [r2, #0]
 80087de:	4628      	mov	r0, r5
 80087e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80087e4:	f000 b8d8 	b.w	8008998 <__malloc_unlock>
 80087e8:	42a3      	cmp	r3, r4
 80087ea:	d908      	bls.n	80087fe <_free_r+0x42>
 80087ec:	6820      	ldr	r0, [r4, #0]
 80087ee:	1821      	adds	r1, r4, r0
 80087f0:	428b      	cmp	r3, r1
 80087f2:	bf01      	itttt	eq
 80087f4:	6819      	ldreq	r1, [r3, #0]
 80087f6:	685b      	ldreq	r3, [r3, #4]
 80087f8:	1809      	addeq	r1, r1, r0
 80087fa:	6021      	streq	r1, [r4, #0]
 80087fc:	e7ed      	b.n	80087da <_free_r+0x1e>
 80087fe:	461a      	mov	r2, r3
 8008800:	685b      	ldr	r3, [r3, #4]
 8008802:	b10b      	cbz	r3, 8008808 <_free_r+0x4c>
 8008804:	42a3      	cmp	r3, r4
 8008806:	d9fa      	bls.n	80087fe <_free_r+0x42>
 8008808:	6811      	ldr	r1, [r2, #0]
 800880a:	1850      	adds	r0, r2, r1
 800880c:	42a0      	cmp	r0, r4
 800880e:	d10b      	bne.n	8008828 <_free_r+0x6c>
 8008810:	6820      	ldr	r0, [r4, #0]
 8008812:	4401      	add	r1, r0
 8008814:	1850      	adds	r0, r2, r1
 8008816:	4283      	cmp	r3, r0
 8008818:	6011      	str	r1, [r2, #0]
 800881a:	d1e0      	bne.n	80087de <_free_r+0x22>
 800881c:	6818      	ldr	r0, [r3, #0]
 800881e:	685b      	ldr	r3, [r3, #4]
 8008820:	4408      	add	r0, r1
 8008822:	6010      	str	r0, [r2, #0]
 8008824:	6053      	str	r3, [r2, #4]
 8008826:	e7da      	b.n	80087de <_free_r+0x22>
 8008828:	d902      	bls.n	8008830 <_free_r+0x74>
 800882a:	230c      	movs	r3, #12
 800882c:	602b      	str	r3, [r5, #0]
 800882e:	e7d6      	b.n	80087de <_free_r+0x22>
 8008830:	6820      	ldr	r0, [r4, #0]
 8008832:	1821      	adds	r1, r4, r0
 8008834:	428b      	cmp	r3, r1
 8008836:	bf01      	itttt	eq
 8008838:	6819      	ldreq	r1, [r3, #0]
 800883a:	685b      	ldreq	r3, [r3, #4]
 800883c:	1809      	addeq	r1, r1, r0
 800883e:	6021      	streq	r1, [r4, #0]
 8008840:	6063      	str	r3, [r4, #4]
 8008842:	6054      	str	r4, [r2, #4]
 8008844:	e7cb      	b.n	80087de <_free_r+0x22>
 8008846:	bd38      	pop	{r3, r4, r5, pc}
 8008848:	20000730 	.word	0x20000730

0800884c <sbrk_aligned>:
 800884c:	b570      	push	{r4, r5, r6, lr}
 800884e:	4e0e      	ldr	r6, [pc, #56]	; (8008888 <sbrk_aligned+0x3c>)
 8008850:	460c      	mov	r4, r1
 8008852:	6831      	ldr	r1, [r6, #0]
 8008854:	4605      	mov	r5, r0
 8008856:	b911      	cbnz	r1, 800885e <sbrk_aligned+0x12>
 8008858:	f000 fbaa 	bl	8008fb0 <_sbrk_r>
 800885c:	6030      	str	r0, [r6, #0]
 800885e:	4621      	mov	r1, r4
 8008860:	4628      	mov	r0, r5
 8008862:	f000 fba5 	bl	8008fb0 <_sbrk_r>
 8008866:	1c43      	adds	r3, r0, #1
 8008868:	d00a      	beq.n	8008880 <sbrk_aligned+0x34>
 800886a:	1cc4      	adds	r4, r0, #3
 800886c:	f024 0403 	bic.w	r4, r4, #3
 8008870:	42a0      	cmp	r0, r4
 8008872:	d007      	beq.n	8008884 <sbrk_aligned+0x38>
 8008874:	1a21      	subs	r1, r4, r0
 8008876:	4628      	mov	r0, r5
 8008878:	f000 fb9a 	bl	8008fb0 <_sbrk_r>
 800887c:	3001      	adds	r0, #1
 800887e:	d101      	bne.n	8008884 <sbrk_aligned+0x38>
 8008880:	f04f 34ff 	mov.w	r4, #4294967295
 8008884:	4620      	mov	r0, r4
 8008886:	bd70      	pop	{r4, r5, r6, pc}
 8008888:	20000734 	.word	0x20000734

0800888c <_malloc_r>:
 800888c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008890:	1ccd      	adds	r5, r1, #3
 8008892:	f025 0503 	bic.w	r5, r5, #3
 8008896:	3508      	adds	r5, #8
 8008898:	2d0c      	cmp	r5, #12
 800889a:	bf38      	it	cc
 800889c:	250c      	movcc	r5, #12
 800889e:	2d00      	cmp	r5, #0
 80088a0:	4607      	mov	r7, r0
 80088a2:	db01      	blt.n	80088a8 <_malloc_r+0x1c>
 80088a4:	42a9      	cmp	r1, r5
 80088a6:	d905      	bls.n	80088b4 <_malloc_r+0x28>
 80088a8:	230c      	movs	r3, #12
 80088aa:	2600      	movs	r6, #0
 80088ac:	603b      	str	r3, [r7, #0]
 80088ae:	4630      	mov	r0, r6
 80088b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088b4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008988 <_malloc_r+0xfc>
 80088b8:	f000 f868 	bl	800898c <__malloc_lock>
 80088bc:	f8d8 3000 	ldr.w	r3, [r8]
 80088c0:	461c      	mov	r4, r3
 80088c2:	bb5c      	cbnz	r4, 800891c <_malloc_r+0x90>
 80088c4:	4629      	mov	r1, r5
 80088c6:	4638      	mov	r0, r7
 80088c8:	f7ff ffc0 	bl	800884c <sbrk_aligned>
 80088cc:	1c43      	adds	r3, r0, #1
 80088ce:	4604      	mov	r4, r0
 80088d0:	d155      	bne.n	800897e <_malloc_r+0xf2>
 80088d2:	f8d8 4000 	ldr.w	r4, [r8]
 80088d6:	4626      	mov	r6, r4
 80088d8:	2e00      	cmp	r6, #0
 80088da:	d145      	bne.n	8008968 <_malloc_r+0xdc>
 80088dc:	2c00      	cmp	r4, #0
 80088de:	d048      	beq.n	8008972 <_malloc_r+0xe6>
 80088e0:	6823      	ldr	r3, [r4, #0]
 80088e2:	4631      	mov	r1, r6
 80088e4:	4638      	mov	r0, r7
 80088e6:	eb04 0903 	add.w	r9, r4, r3
 80088ea:	f000 fb61 	bl	8008fb0 <_sbrk_r>
 80088ee:	4581      	cmp	r9, r0
 80088f0:	d13f      	bne.n	8008972 <_malloc_r+0xe6>
 80088f2:	6821      	ldr	r1, [r4, #0]
 80088f4:	4638      	mov	r0, r7
 80088f6:	1a6d      	subs	r5, r5, r1
 80088f8:	4629      	mov	r1, r5
 80088fa:	f7ff ffa7 	bl	800884c <sbrk_aligned>
 80088fe:	3001      	adds	r0, #1
 8008900:	d037      	beq.n	8008972 <_malloc_r+0xe6>
 8008902:	6823      	ldr	r3, [r4, #0]
 8008904:	442b      	add	r3, r5
 8008906:	6023      	str	r3, [r4, #0]
 8008908:	f8d8 3000 	ldr.w	r3, [r8]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d038      	beq.n	8008982 <_malloc_r+0xf6>
 8008910:	685a      	ldr	r2, [r3, #4]
 8008912:	42a2      	cmp	r2, r4
 8008914:	d12b      	bne.n	800896e <_malloc_r+0xe2>
 8008916:	2200      	movs	r2, #0
 8008918:	605a      	str	r2, [r3, #4]
 800891a:	e00f      	b.n	800893c <_malloc_r+0xb0>
 800891c:	6822      	ldr	r2, [r4, #0]
 800891e:	1b52      	subs	r2, r2, r5
 8008920:	d41f      	bmi.n	8008962 <_malloc_r+0xd6>
 8008922:	2a0b      	cmp	r2, #11
 8008924:	d917      	bls.n	8008956 <_malloc_r+0xca>
 8008926:	1961      	adds	r1, r4, r5
 8008928:	42a3      	cmp	r3, r4
 800892a:	6025      	str	r5, [r4, #0]
 800892c:	bf18      	it	ne
 800892e:	6059      	strne	r1, [r3, #4]
 8008930:	6863      	ldr	r3, [r4, #4]
 8008932:	bf08      	it	eq
 8008934:	f8c8 1000 	streq.w	r1, [r8]
 8008938:	5162      	str	r2, [r4, r5]
 800893a:	604b      	str	r3, [r1, #4]
 800893c:	4638      	mov	r0, r7
 800893e:	f104 060b 	add.w	r6, r4, #11
 8008942:	f000 f829 	bl	8008998 <__malloc_unlock>
 8008946:	f026 0607 	bic.w	r6, r6, #7
 800894a:	1d23      	adds	r3, r4, #4
 800894c:	1af2      	subs	r2, r6, r3
 800894e:	d0ae      	beq.n	80088ae <_malloc_r+0x22>
 8008950:	1b9b      	subs	r3, r3, r6
 8008952:	50a3      	str	r3, [r4, r2]
 8008954:	e7ab      	b.n	80088ae <_malloc_r+0x22>
 8008956:	42a3      	cmp	r3, r4
 8008958:	6862      	ldr	r2, [r4, #4]
 800895a:	d1dd      	bne.n	8008918 <_malloc_r+0x8c>
 800895c:	f8c8 2000 	str.w	r2, [r8]
 8008960:	e7ec      	b.n	800893c <_malloc_r+0xb0>
 8008962:	4623      	mov	r3, r4
 8008964:	6864      	ldr	r4, [r4, #4]
 8008966:	e7ac      	b.n	80088c2 <_malloc_r+0x36>
 8008968:	4634      	mov	r4, r6
 800896a:	6876      	ldr	r6, [r6, #4]
 800896c:	e7b4      	b.n	80088d8 <_malloc_r+0x4c>
 800896e:	4613      	mov	r3, r2
 8008970:	e7cc      	b.n	800890c <_malloc_r+0x80>
 8008972:	230c      	movs	r3, #12
 8008974:	4638      	mov	r0, r7
 8008976:	603b      	str	r3, [r7, #0]
 8008978:	f000 f80e 	bl	8008998 <__malloc_unlock>
 800897c:	e797      	b.n	80088ae <_malloc_r+0x22>
 800897e:	6025      	str	r5, [r4, #0]
 8008980:	e7dc      	b.n	800893c <_malloc_r+0xb0>
 8008982:	605b      	str	r3, [r3, #4]
 8008984:	deff      	udf	#255	; 0xff
 8008986:	bf00      	nop
 8008988:	20000730 	.word	0x20000730

0800898c <__malloc_lock>:
 800898c:	4801      	ldr	r0, [pc, #4]	; (8008994 <__malloc_lock+0x8>)
 800898e:	f7ff bf13 	b.w	80087b8 <__retarget_lock_acquire_recursive>
 8008992:	bf00      	nop
 8008994:	2000072c 	.word	0x2000072c

08008998 <__malloc_unlock>:
 8008998:	4801      	ldr	r0, [pc, #4]	; (80089a0 <__malloc_unlock+0x8>)
 800899a:	f7ff bf0e 	b.w	80087ba <__retarget_lock_release_recursive>
 800899e:	bf00      	nop
 80089a0:	2000072c 	.word	0x2000072c

080089a4 <__ssputs_r>:
 80089a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089a8:	461f      	mov	r7, r3
 80089aa:	688e      	ldr	r6, [r1, #8]
 80089ac:	4682      	mov	sl, r0
 80089ae:	42be      	cmp	r6, r7
 80089b0:	460c      	mov	r4, r1
 80089b2:	4690      	mov	r8, r2
 80089b4:	680b      	ldr	r3, [r1, #0]
 80089b6:	d82c      	bhi.n	8008a12 <__ssputs_r+0x6e>
 80089b8:	898a      	ldrh	r2, [r1, #12]
 80089ba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80089be:	d026      	beq.n	8008a0e <__ssputs_r+0x6a>
 80089c0:	6965      	ldr	r5, [r4, #20]
 80089c2:	6909      	ldr	r1, [r1, #16]
 80089c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80089c8:	eba3 0901 	sub.w	r9, r3, r1
 80089cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80089d0:	1c7b      	adds	r3, r7, #1
 80089d2:	444b      	add	r3, r9
 80089d4:	106d      	asrs	r5, r5, #1
 80089d6:	429d      	cmp	r5, r3
 80089d8:	bf38      	it	cc
 80089da:	461d      	movcc	r5, r3
 80089dc:	0553      	lsls	r3, r2, #21
 80089de:	d527      	bpl.n	8008a30 <__ssputs_r+0x8c>
 80089e0:	4629      	mov	r1, r5
 80089e2:	f7ff ff53 	bl	800888c <_malloc_r>
 80089e6:	4606      	mov	r6, r0
 80089e8:	b360      	cbz	r0, 8008a44 <__ssputs_r+0xa0>
 80089ea:	464a      	mov	r2, r9
 80089ec:	6921      	ldr	r1, [r4, #16]
 80089ee:	f000 fafd 	bl	8008fec <memcpy>
 80089f2:	89a3      	ldrh	r3, [r4, #12]
 80089f4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80089f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089fc:	81a3      	strh	r3, [r4, #12]
 80089fe:	6126      	str	r6, [r4, #16]
 8008a00:	444e      	add	r6, r9
 8008a02:	6026      	str	r6, [r4, #0]
 8008a04:	463e      	mov	r6, r7
 8008a06:	6165      	str	r5, [r4, #20]
 8008a08:	eba5 0509 	sub.w	r5, r5, r9
 8008a0c:	60a5      	str	r5, [r4, #8]
 8008a0e:	42be      	cmp	r6, r7
 8008a10:	d900      	bls.n	8008a14 <__ssputs_r+0x70>
 8008a12:	463e      	mov	r6, r7
 8008a14:	4632      	mov	r2, r6
 8008a16:	4641      	mov	r1, r8
 8008a18:	6820      	ldr	r0, [r4, #0]
 8008a1a:	f000 faaf 	bl	8008f7c <memmove>
 8008a1e:	2000      	movs	r0, #0
 8008a20:	68a3      	ldr	r3, [r4, #8]
 8008a22:	1b9b      	subs	r3, r3, r6
 8008a24:	60a3      	str	r3, [r4, #8]
 8008a26:	6823      	ldr	r3, [r4, #0]
 8008a28:	4433      	add	r3, r6
 8008a2a:	6023      	str	r3, [r4, #0]
 8008a2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a30:	462a      	mov	r2, r5
 8008a32:	f000 fae9 	bl	8009008 <_realloc_r>
 8008a36:	4606      	mov	r6, r0
 8008a38:	2800      	cmp	r0, #0
 8008a3a:	d1e0      	bne.n	80089fe <__ssputs_r+0x5a>
 8008a3c:	4650      	mov	r0, sl
 8008a3e:	6921      	ldr	r1, [r4, #16]
 8008a40:	f7ff febc 	bl	80087bc <_free_r>
 8008a44:	230c      	movs	r3, #12
 8008a46:	f8ca 3000 	str.w	r3, [sl]
 8008a4a:	89a3      	ldrh	r3, [r4, #12]
 8008a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a54:	81a3      	strh	r3, [r4, #12]
 8008a56:	e7e9      	b.n	8008a2c <__ssputs_r+0x88>

08008a58 <_svfiprintf_r>:
 8008a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a5c:	4698      	mov	r8, r3
 8008a5e:	898b      	ldrh	r3, [r1, #12]
 8008a60:	4607      	mov	r7, r0
 8008a62:	061b      	lsls	r3, r3, #24
 8008a64:	460d      	mov	r5, r1
 8008a66:	4614      	mov	r4, r2
 8008a68:	b09d      	sub	sp, #116	; 0x74
 8008a6a:	d50e      	bpl.n	8008a8a <_svfiprintf_r+0x32>
 8008a6c:	690b      	ldr	r3, [r1, #16]
 8008a6e:	b963      	cbnz	r3, 8008a8a <_svfiprintf_r+0x32>
 8008a70:	2140      	movs	r1, #64	; 0x40
 8008a72:	f7ff ff0b 	bl	800888c <_malloc_r>
 8008a76:	6028      	str	r0, [r5, #0]
 8008a78:	6128      	str	r0, [r5, #16]
 8008a7a:	b920      	cbnz	r0, 8008a86 <_svfiprintf_r+0x2e>
 8008a7c:	230c      	movs	r3, #12
 8008a7e:	603b      	str	r3, [r7, #0]
 8008a80:	f04f 30ff 	mov.w	r0, #4294967295
 8008a84:	e0d0      	b.n	8008c28 <_svfiprintf_r+0x1d0>
 8008a86:	2340      	movs	r3, #64	; 0x40
 8008a88:	616b      	str	r3, [r5, #20]
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	9309      	str	r3, [sp, #36]	; 0x24
 8008a8e:	2320      	movs	r3, #32
 8008a90:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008a94:	2330      	movs	r3, #48	; 0x30
 8008a96:	f04f 0901 	mov.w	r9, #1
 8008a9a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a9e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8008c40 <_svfiprintf_r+0x1e8>
 8008aa2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008aa6:	4623      	mov	r3, r4
 8008aa8:	469a      	mov	sl, r3
 8008aaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008aae:	b10a      	cbz	r2, 8008ab4 <_svfiprintf_r+0x5c>
 8008ab0:	2a25      	cmp	r2, #37	; 0x25
 8008ab2:	d1f9      	bne.n	8008aa8 <_svfiprintf_r+0x50>
 8008ab4:	ebba 0b04 	subs.w	fp, sl, r4
 8008ab8:	d00b      	beq.n	8008ad2 <_svfiprintf_r+0x7a>
 8008aba:	465b      	mov	r3, fp
 8008abc:	4622      	mov	r2, r4
 8008abe:	4629      	mov	r1, r5
 8008ac0:	4638      	mov	r0, r7
 8008ac2:	f7ff ff6f 	bl	80089a4 <__ssputs_r>
 8008ac6:	3001      	adds	r0, #1
 8008ac8:	f000 80a9 	beq.w	8008c1e <_svfiprintf_r+0x1c6>
 8008acc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ace:	445a      	add	r2, fp
 8008ad0:	9209      	str	r2, [sp, #36]	; 0x24
 8008ad2:	f89a 3000 	ldrb.w	r3, [sl]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	f000 80a1 	beq.w	8008c1e <_svfiprintf_r+0x1c6>
 8008adc:	2300      	movs	r3, #0
 8008ade:	f04f 32ff 	mov.w	r2, #4294967295
 8008ae2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ae6:	f10a 0a01 	add.w	sl, sl, #1
 8008aea:	9304      	str	r3, [sp, #16]
 8008aec:	9307      	str	r3, [sp, #28]
 8008aee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008af2:	931a      	str	r3, [sp, #104]	; 0x68
 8008af4:	4654      	mov	r4, sl
 8008af6:	2205      	movs	r2, #5
 8008af8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008afc:	4850      	ldr	r0, [pc, #320]	; (8008c40 <_svfiprintf_r+0x1e8>)
 8008afe:	f000 fa67 	bl	8008fd0 <memchr>
 8008b02:	9a04      	ldr	r2, [sp, #16]
 8008b04:	b9d8      	cbnz	r0, 8008b3e <_svfiprintf_r+0xe6>
 8008b06:	06d0      	lsls	r0, r2, #27
 8008b08:	bf44      	itt	mi
 8008b0a:	2320      	movmi	r3, #32
 8008b0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b10:	0711      	lsls	r1, r2, #28
 8008b12:	bf44      	itt	mi
 8008b14:	232b      	movmi	r3, #43	; 0x2b
 8008b16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b1a:	f89a 3000 	ldrb.w	r3, [sl]
 8008b1e:	2b2a      	cmp	r3, #42	; 0x2a
 8008b20:	d015      	beq.n	8008b4e <_svfiprintf_r+0xf6>
 8008b22:	4654      	mov	r4, sl
 8008b24:	2000      	movs	r0, #0
 8008b26:	f04f 0c0a 	mov.w	ip, #10
 8008b2a:	9a07      	ldr	r2, [sp, #28]
 8008b2c:	4621      	mov	r1, r4
 8008b2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b32:	3b30      	subs	r3, #48	; 0x30
 8008b34:	2b09      	cmp	r3, #9
 8008b36:	d94d      	bls.n	8008bd4 <_svfiprintf_r+0x17c>
 8008b38:	b1b0      	cbz	r0, 8008b68 <_svfiprintf_r+0x110>
 8008b3a:	9207      	str	r2, [sp, #28]
 8008b3c:	e014      	b.n	8008b68 <_svfiprintf_r+0x110>
 8008b3e:	eba0 0308 	sub.w	r3, r0, r8
 8008b42:	fa09 f303 	lsl.w	r3, r9, r3
 8008b46:	4313      	orrs	r3, r2
 8008b48:	46a2      	mov	sl, r4
 8008b4a:	9304      	str	r3, [sp, #16]
 8008b4c:	e7d2      	b.n	8008af4 <_svfiprintf_r+0x9c>
 8008b4e:	9b03      	ldr	r3, [sp, #12]
 8008b50:	1d19      	adds	r1, r3, #4
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	9103      	str	r1, [sp, #12]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	bfbb      	ittet	lt
 8008b5a:	425b      	neglt	r3, r3
 8008b5c:	f042 0202 	orrlt.w	r2, r2, #2
 8008b60:	9307      	strge	r3, [sp, #28]
 8008b62:	9307      	strlt	r3, [sp, #28]
 8008b64:	bfb8      	it	lt
 8008b66:	9204      	strlt	r2, [sp, #16]
 8008b68:	7823      	ldrb	r3, [r4, #0]
 8008b6a:	2b2e      	cmp	r3, #46	; 0x2e
 8008b6c:	d10c      	bne.n	8008b88 <_svfiprintf_r+0x130>
 8008b6e:	7863      	ldrb	r3, [r4, #1]
 8008b70:	2b2a      	cmp	r3, #42	; 0x2a
 8008b72:	d134      	bne.n	8008bde <_svfiprintf_r+0x186>
 8008b74:	9b03      	ldr	r3, [sp, #12]
 8008b76:	3402      	adds	r4, #2
 8008b78:	1d1a      	adds	r2, r3, #4
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	9203      	str	r2, [sp, #12]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	bfb8      	it	lt
 8008b82:	f04f 33ff 	movlt.w	r3, #4294967295
 8008b86:	9305      	str	r3, [sp, #20]
 8008b88:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8008c44 <_svfiprintf_r+0x1ec>
 8008b8c:	2203      	movs	r2, #3
 8008b8e:	4650      	mov	r0, sl
 8008b90:	7821      	ldrb	r1, [r4, #0]
 8008b92:	f000 fa1d 	bl	8008fd0 <memchr>
 8008b96:	b138      	cbz	r0, 8008ba8 <_svfiprintf_r+0x150>
 8008b98:	2240      	movs	r2, #64	; 0x40
 8008b9a:	9b04      	ldr	r3, [sp, #16]
 8008b9c:	eba0 000a 	sub.w	r0, r0, sl
 8008ba0:	4082      	lsls	r2, r0
 8008ba2:	4313      	orrs	r3, r2
 8008ba4:	3401      	adds	r4, #1
 8008ba6:	9304      	str	r3, [sp, #16]
 8008ba8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bac:	2206      	movs	r2, #6
 8008bae:	4826      	ldr	r0, [pc, #152]	; (8008c48 <_svfiprintf_r+0x1f0>)
 8008bb0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008bb4:	f000 fa0c 	bl	8008fd0 <memchr>
 8008bb8:	2800      	cmp	r0, #0
 8008bba:	d038      	beq.n	8008c2e <_svfiprintf_r+0x1d6>
 8008bbc:	4b23      	ldr	r3, [pc, #140]	; (8008c4c <_svfiprintf_r+0x1f4>)
 8008bbe:	bb1b      	cbnz	r3, 8008c08 <_svfiprintf_r+0x1b0>
 8008bc0:	9b03      	ldr	r3, [sp, #12]
 8008bc2:	3307      	adds	r3, #7
 8008bc4:	f023 0307 	bic.w	r3, r3, #7
 8008bc8:	3308      	adds	r3, #8
 8008bca:	9303      	str	r3, [sp, #12]
 8008bcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bce:	4433      	add	r3, r6
 8008bd0:	9309      	str	r3, [sp, #36]	; 0x24
 8008bd2:	e768      	b.n	8008aa6 <_svfiprintf_r+0x4e>
 8008bd4:	460c      	mov	r4, r1
 8008bd6:	2001      	movs	r0, #1
 8008bd8:	fb0c 3202 	mla	r2, ip, r2, r3
 8008bdc:	e7a6      	b.n	8008b2c <_svfiprintf_r+0xd4>
 8008bde:	2300      	movs	r3, #0
 8008be0:	f04f 0c0a 	mov.w	ip, #10
 8008be4:	4619      	mov	r1, r3
 8008be6:	3401      	adds	r4, #1
 8008be8:	9305      	str	r3, [sp, #20]
 8008bea:	4620      	mov	r0, r4
 8008bec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008bf0:	3a30      	subs	r2, #48	; 0x30
 8008bf2:	2a09      	cmp	r2, #9
 8008bf4:	d903      	bls.n	8008bfe <_svfiprintf_r+0x1a6>
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d0c6      	beq.n	8008b88 <_svfiprintf_r+0x130>
 8008bfa:	9105      	str	r1, [sp, #20]
 8008bfc:	e7c4      	b.n	8008b88 <_svfiprintf_r+0x130>
 8008bfe:	4604      	mov	r4, r0
 8008c00:	2301      	movs	r3, #1
 8008c02:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c06:	e7f0      	b.n	8008bea <_svfiprintf_r+0x192>
 8008c08:	ab03      	add	r3, sp, #12
 8008c0a:	9300      	str	r3, [sp, #0]
 8008c0c:	462a      	mov	r2, r5
 8008c0e:	4638      	mov	r0, r7
 8008c10:	4b0f      	ldr	r3, [pc, #60]	; (8008c50 <_svfiprintf_r+0x1f8>)
 8008c12:	a904      	add	r1, sp, #16
 8008c14:	f3af 8000 	nop.w
 8008c18:	1c42      	adds	r2, r0, #1
 8008c1a:	4606      	mov	r6, r0
 8008c1c:	d1d6      	bne.n	8008bcc <_svfiprintf_r+0x174>
 8008c1e:	89ab      	ldrh	r3, [r5, #12]
 8008c20:	065b      	lsls	r3, r3, #25
 8008c22:	f53f af2d 	bmi.w	8008a80 <_svfiprintf_r+0x28>
 8008c26:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c28:	b01d      	add	sp, #116	; 0x74
 8008c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c2e:	ab03      	add	r3, sp, #12
 8008c30:	9300      	str	r3, [sp, #0]
 8008c32:	462a      	mov	r2, r5
 8008c34:	4638      	mov	r0, r7
 8008c36:	4b06      	ldr	r3, [pc, #24]	; (8008c50 <_svfiprintf_r+0x1f8>)
 8008c38:	a904      	add	r1, sp, #16
 8008c3a:	f000 f87d 	bl	8008d38 <_printf_i>
 8008c3e:	e7eb      	b.n	8008c18 <_svfiprintf_r+0x1c0>
 8008c40:	08009a5a 	.word	0x08009a5a
 8008c44:	08009a60 	.word	0x08009a60
 8008c48:	08009a64 	.word	0x08009a64
 8008c4c:	00000000 	.word	0x00000000
 8008c50:	080089a5 	.word	0x080089a5

08008c54 <_printf_common>:
 8008c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c58:	4616      	mov	r6, r2
 8008c5a:	4699      	mov	r9, r3
 8008c5c:	688a      	ldr	r2, [r1, #8]
 8008c5e:	690b      	ldr	r3, [r1, #16]
 8008c60:	4607      	mov	r7, r0
 8008c62:	4293      	cmp	r3, r2
 8008c64:	bfb8      	it	lt
 8008c66:	4613      	movlt	r3, r2
 8008c68:	6033      	str	r3, [r6, #0]
 8008c6a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008c6e:	460c      	mov	r4, r1
 8008c70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008c74:	b10a      	cbz	r2, 8008c7a <_printf_common+0x26>
 8008c76:	3301      	adds	r3, #1
 8008c78:	6033      	str	r3, [r6, #0]
 8008c7a:	6823      	ldr	r3, [r4, #0]
 8008c7c:	0699      	lsls	r1, r3, #26
 8008c7e:	bf42      	ittt	mi
 8008c80:	6833      	ldrmi	r3, [r6, #0]
 8008c82:	3302      	addmi	r3, #2
 8008c84:	6033      	strmi	r3, [r6, #0]
 8008c86:	6825      	ldr	r5, [r4, #0]
 8008c88:	f015 0506 	ands.w	r5, r5, #6
 8008c8c:	d106      	bne.n	8008c9c <_printf_common+0x48>
 8008c8e:	f104 0a19 	add.w	sl, r4, #25
 8008c92:	68e3      	ldr	r3, [r4, #12]
 8008c94:	6832      	ldr	r2, [r6, #0]
 8008c96:	1a9b      	subs	r3, r3, r2
 8008c98:	42ab      	cmp	r3, r5
 8008c9a:	dc2b      	bgt.n	8008cf4 <_printf_common+0xa0>
 8008c9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008ca0:	1e13      	subs	r3, r2, #0
 8008ca2:	6822      	ldr	r2, [r4, #0]
 8008ca4:	bf18      	it	ne
 8008ca6:	2301      	movne	r3, #1
 8008ca8:	0692      	lsls	r2, r2, #26
 8008caa:	d430      	bmi.n	8008d0e <_printf_common+0xba>
 8008cac:	4649      	mov	r1, r9
 8008cae:	4638      	mov	r0, r7
 8008cb0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008cb4:	47c0      	blx	r8
 8008cb6:	3001      	adds	r0, #1
 8008cb8:	d023      	beq.n	8008d02 <_printf_common+0xae>
 8008cba:	6823      	ldr	r3, [r4, #0]
 8008cbc:	6922      	ldr	r2, [r4, #16]
 8008cbe:	f003 0306 	and.w	r3, r3, #6
 8008cc2:	2b04      	cmp	r3, #4
 8008cc4:	bf14      	ite	ne
 8008cc6:	2500      	movne	r5, #0
 8008cc8:	6833      	ldreq	r3, [r6, #0]
 8008cca:	f04f 0600 	mov.w	r6, #0
 8008cce:	bf08      	it	eq
 8008cd0:	68e5      	ldreq	r5, [r4, #12]
 8008cd2:	f104 041a 	add.w	r4, r4, #26
 8008cd6:	bf08      	it	eq
 8008cd8:	1aed      	subeq	r5, r5, r3
 8008cda:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008cde:	bf08      	it	eq
 8008ce0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	bfc4      	itt	gt
 8008ce8:	1a9b      	subgt	r3, r3, r2
 8008cea:	18ed      	addgt	r5, r5, r3
 8008cec:	42b5      	cmp	r5, r6
 8008cee:	d11a      	bne.n	8008d26 <_printf_common+0xd2>
 8008cf0:	2000      	movs	r0, #0
 8008cf2:	e008      	b.n	8008d06 <_printf_common+0xb2>
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	4652      	mov	r2, sl
 8008cf8:	4649      	mov	r1, r9
 8008cfa:	4638      	mov	r0, r7
 8008cfc:	47c0      	blx	r8
 8008cfe:	3001      	adds	r0, #1
 8008d00:	d103      	bne.n	8008d0a <_printf_common+0xb6>
 8008d02:	f04f 30ff 	mov.w	r0, #4294967295
 8008d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d0a:	3501      	adds	r5, #1
 8008d0c:	e7c1      	b.n	8008c92 <_printf_common+0x3e>
 8008d0e:	2030      	movs	r0, #48	; 0x30
 8008d10:	18e1      	adds	r1, r4, r3
 8008d12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008d16:	1c5a      	adds	r2, r3, #1
 8008d18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008d1c:	4422      	add	r2, r4
 8008d1e:	3302      	adds	r3, #2
 8008d20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008d24:	e7c2      	b.n	8008cac <_printf_common+0x58>
 8008d26:	2301      	movs	r3, #1
 8008d28:	4622      	mov	r2, r4
 8008d2a:	4649      	mov	r1, r9
 8008d2c:	4638      	mov	r0, r7
 8008d2e:	47c0      	blx	r8
 8008d30:	3001      	adds	r0, #1
 8008d32:	d0e6      	beq.n	8008d02 <_printf_common+0xae>
 8008d34:	3601      	adds	r6, #1
 8008d36:	e7d9      	b.n	8008cec <_printf_common+0x98>

08008d38 <_printf_i>:
 8008d38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d3c:	7e0f      	ldrb	r7, [r1, #24]
 8008d3e:	4691      	mov	r9, r2
 8008d40:	2f78      	cmp	r7, #120	; 0x78
 8008d42:	4680      	mov	r8, r0
 8008d44:	460c      	mov	r4, r1
 8008d46:	469a      	mov	sl, r3
 8008d48:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008d4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008d4e:	d807      	bhi.n	8008d60 <_printf_i+0x28>
 8008d50:	2f62      	cmp	r7, #98	; 0x62
 8008d52:	d80a      	bhi.n	8008d6a <_printf_i+0x32>
 8008d54:	2f00      	cmp	r7, #0
 8008d56:	f000 80d5 	beq.w	8008f04 <_printf_i+0x1cc>
 8008d5a:	2f58      	cmp	r7, #88	; 0x58
 8008d5c:	f000 80c1 	beq.w	8008ee2 <_printf_i+0x1aa>
 8008d60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008d68:	e03a      	b.n	8008de0 <_printf_i+0xa8>
 8008d6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008d6e:	2b15      	cmp	r3, #21
 8008d70:	d8f6      	bhi.n	8008d60 <_printf_i+0x28>
 8008d72:	a101      	add	r1, pc, #4	; (adr r1, 8008d78 <_printf_i+0x40>)
 8008d74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008d78:	08008dd1 	.word	0x08008dd1
 8008d7c:	08008de5 	.word	0x08008de5
 8008d80:	08008d61 	.word	0x08008d61
 8008d84:	08008d61 	.word	0x08008d61
 8008d88:	08008d61 	.word	0x08008d61
 8008d8c:	08008d61 	.word	0x08008d61
 8008d90:	08008de5 	.word	0x08008de5
 8008d94:	08008d61 	.word	0x08008d61
 8008d98:	08008d61 	.word	0x08008d61
 8008d9c:	08008d61 	.word	0x08008d61
 8008da0:	08008d61 	.word	0x08008d61
 8008da4:	08008eeb 	.word	0x08008eeb
 8008da8:	08008e11 	.word	0x08008e11
 8008dac:	08008ea5 	.word	0x08008ea5
 8008db0:	08008d61 	.word	0x08008d61
 8008db4:	08008d61 	.word	0x08008d61
 8008db8:	08008f0d 	.word	0x08008f0d
 8008dbc:	08008d61 	.word	0x08008d61
 8008dc0:	08008e11 	.word	0x08008e11
 8008dc4:	08008d61 	.word	0x08008d61
 8008dc8:	08008d61 	.word	0x08008d61
 8008dcc:	08008ead 	.word	0x08008ead
 8008dd0:	682b      	ldr	r3, [r5, #0]
 8008dd2:	1d1a      	adds	r2, r3, #4
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	602a      	str	r2, [r5, #0]
 8008dd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ddc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008de0:	2301      	movs	r3, #1
 8008de2:	e0a0      	b.n	8008f26 <_printf_i+0x1ee>
 8008de4:	6820      	ldr	r0, [r4, #0]
 8008de6:	682b      	ldr	r3, [r5, #0]
 8008de8:	0607      	lsls	r7, r0, #24
 8008dea:	f103 0104 	add.w	r1, r3, #4
 8008dee:	6029      	str	r1, [r5, #0]
 8008df0:	d501      	bpl.n	8008df6 <_printf_i+0xbe>
 8008df2:	681e      	ldr	r6, [r3, #0]
 8008df4:	e003      	b.n	8008dfe <_printf_i+0xc6>
 8008df6:	0646      	lsls	r6, r0, #25
 8008df8:	d5fb      	bpl.n	8008df2 <_printf_i+0xba>
 8008dfa:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008dfe:	2e00      	cmp	r6, #0
 8008e00:	da03      	bge.n	8008e0a <_printf_i+0xd2>
 8008e02:	232d      	movs	r3, #45	; 0x2d
 8008e04:	4276      	negs	r6, r6
 8008e06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e0a:	230a      	movs	r3, #10
 8008e0c:	4859      	ldr	r0, [pc, #356]	; (8008f74 <_printf_i+0x23c>)
 8008e0e:	e012      	b.n	8008e36 <_printf_i+0xfe>
 8008e10:	682b      	ldr	r3, [r5, #0]
 8008e12:	6820      	ldr	r0, [r4, #0]
 8008e14:	1d19      	adds	r1, r3, #4
 8008e16:	6029      	str	r1, [r5, #0]
 8008e18:	0605      	lsls	r5, r0, #24
 8008e1a:	d501      	bpl.n	8008e20 <_printf_i+0xe8>
 8008e1c:	681e      	ldr	r6, [r3, #0]
 8008e1e:	e002      	b.n	8008e26 <_printf_i+0xee>
 8008e20:	0641      	lsls	r1, r0, #25
 8008e22:	d5fb      	bpl.n	8008e1c <_printf_i+0xe4>
 8008e24:	881e      	ldrh	r6, [r3, #0]
 8008e26:	2f6f      	cmp	r7, #111	; 0x6f
 8008e28:	bf0c      	ite	eq
 8008e2a:	2308      	moveq	r3, #8
 8008e2c:	230a      	movne	r3, #10
 8008e2e:	4851      	ldr	r0, [pc, #324]	; (8008f74 <_printf_i+0x23c>)
 8008e30:	2100      	movs	r1, #0
 8008e32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008e36:	6865      	ldr	r5, [r4, #4]
 8008e38:	2d00      	cmp	r5, #0
 8008e3a:	bfa8      	it	ge
 8008e3c:	6821      	ldrge	r1, [r4, #0]
 8008e3e:	60a5      	str	r5, [r4, #8]
 8008e40:	bfa4      	itt	ge
 8008e42:	f021 0104 	bicge.w	r1, r1, #4
 8008e46:	6021      	strge	r1, [r4, #0]
 8008e48:	b90e      	cbnz	r6, 8008e4e <_printf_i+0x116>
 8008e4a:	2d00      	cmp	r5, #0
 8008e4c:	d04b      	beq.n	8008ee6 <_printf_i+0x1ae>
 8008e4e:	4615      	mov	r5, r2
 8008e50:	fbb6 f1f3 	udiv	r1, r6, r3
 8008e54:	fb03 6711 	mls	r7, r3, r1, r6
 8008e58:	5dc7      	ldrb	r7, [r0, r7]
 8008e5a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008e5e:	4637      	mov	r7, r6
 8008e60:	42bb      	cmp	r3, r7
 8008e62:	460e      	mov	r6, r1
 8008e64:	d9f4      	bls.n	8008e50 <_printf_i+0x118>
 8008e66:	2b08      	cmp	r3, #8
 8008e68:	d10b      	bne.n	8008e82 <_printf_i+0x14a>
 8008e6a:	6823      	ldr	r3, [r4, #0]
 8008e6c:	07de      	lsls	r6, r3, #31
 8008e6e:	d508      	bpl.n	8008e82 <_printf_i+0x14a>
 8008e70:	6923      	ldr	r3, [r4, #16]
 8008e72:	6861      	ldr	r1, [r4, #4]
 8008e74:	4299      	cmp	r1, r3
 8008e76:	bfde      	ittt	le
 8008e78:	2330      	movle	r3, #48	; 0x30
 8008e7a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008e7e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008e82:	1b52      	subs	r2, r2, r5
 8008e84:	6122      	str	r2, [r4, #16]
 8008e86:	464b      	mov	r3, r9
 8008e88:	4621      	mov	r1, r4
 8008e8a:	4640      	mov	r0, r8
 8008e8c:	f8cd a000 	str.w	sl, [sp]
 8008e90:	aa03      	add	r2, sp, #12
 8008e92:	f7ff fedf 	bl	8008c54 <_printf_common>
 8008e96:	3001      	adds	r0, #1
 8008e98:	d14a      	bne.n	8008f30 <_printf_i+0x1f8>
 8008e9a:	f04f 30ff 	mov.w	r0, #4294967295
 8008e9e:	b004      	add	sp, #16
 8008ea0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ea4:	6823      	ldr	r3, [r4, #0]
 8008ea6:	f043 0320 	orr.w	r3, r3, #32
 8008eaa:	6023      	str	r3, [r4, #0]
 8008eac:	2778      	movs	r7, #120	; 0x78
 8008eae:	4832      	ldr	r0, [pc, #200]	; (8008f78 <_printf_i+0x240>)
 8008eb0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008eb4:	6823      	ldr	r3, [r4, #0]
 8008eb6:	6829      	ldr	r1, [r5, #0]
 8008eb8:	061f      	lsls	r7, r3, #24
 8008eba:	f851 6b04 	ldr.w	r6, [r1], #4
 8008ebe:	d402      	bmi.n	8008ec6 <_printf_i+0x18e>
 8008ec0:	065f      	lsls	r7, r3, #25
 8008ec2:	bf48      	it	mi
 8008ec4:	b2b6      	uxthmi	r6, r6
 8008ec6:	07df      	lsls	r7, r3, #31
 8008ec8:	bf48      	it	mi
 8008eca:	f043 0320 	orrmi.w	r3, r3, #32
 8008ece:	6029      	str	r1, [r5, #0]
 8008ed0:	bf48      	it	mi
 8008ed2:	6023      	strmi	r3, [r4, #0]
 8008ed4:	b91e      	cbnz	r6, 8008ede <_printf_i+0x1a6>
 8008ed6:	6823      	ldr	r3, [r4, #0]
 8008ed8:	f023 0320 	bic.w	r3, r3, #32
 8008edc:	6023      	str	r3, [r4, #0]
 8008ede:	2310      	movs	r3, #16
 8008ee0:	e7a6      	b.n	8008e30 <_printf_i+0xf8>
 8008ee2:	4824      	ldr	r0, [pc, #144]	; (8008f74 <_printf_i+0x23c>)
 8008ee4:	e7e4      	b.n	8008eb0 <_printf_i+0x178>
 8008ee6:	4615      	mov	r5, r2
 8008ee8:	e7bd      	b.n	8008e66 <_printf_i+0x12e>
 8008eea:	682b      	ldr	r3, [r5, #0]
 8008eec:	6826      	ldr	r6, [r4, #0]
 8008eee:	1d18      	adds	r0, r3, #4
 8008ef0:	6961      	ldr	r1, [r4, #20]
 8008ef2:	6028      	str	r0, [r5, #0]
 8008ef4:	0635      	lsls	r5, r6, #24
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	d501      	bpl.n	8008efe <_printf_i+0x1c6>
 8008efa:	6019      	str	r1, [r3, #0]
 8008efc:	e002      	b.n	8008f04 <_printf_i+0x1cc>
 8008efe:	0670      	lsls	r0, r6, #25
 8008f00:	d5fb      	bpl.n	8008efa <_printf_i+0x1c2>
 8008f02:	8019      	strh	r1, [r3, #0]
 8008f04:	2300      	movs	r3, #0
 8008f06:	4615      	mov	r5, r2
 8008f08:	6123      	str	r3, [r4, #16]
 8008f0a:	e7bc      	b.n	8008e86 <_printf_i+0x14e>
 8008f0c:	682b      	ldr	r3, [r5, #0]
 8008f0e:	2100      	movs	r1, #0
 8008f10:	1d1a      	adds	r2, r3, #4
 8008f12:	602a      	str	r2, [r5, #0]
 8008f14:	681d      	ldr	r5, [r3, #0]
 8008f16:	6862      	ldr	r2, [r4, #4]
 8008f18:	4628      	mov	r0, r5
 8008f1a:	f000 f859 	bl	8008fd0 <memchr>
 8008f1e:	b108      	cbz	r0, 8008f24 <_printf_i+0x1ec>
 8008f20:	1b40      	subs	r0, r0, r5
 8008f22:	6060      	str	r0, [r4, #4]
 8008f24:	6863      	ldr	r3, [r4, #4]
 8008f26:	6123      	str	r3, [r4, #16]
 8008f28:	2300      	movs	r3, #0
 8008f2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f2e:	e7aa      	b.n	8008e86 <_printf_i+0x14e>
 8008f30:	462a      	mov	r2, r5
 8008f32:	4649      	mov	r1, r9
 8008f34:	4640      	mov	r0, r8
 8008f36:	6923      	ldr	r3, [r4, #16]
 8008f38:	47d0      	blx	sl
 8008f3a:	3001      	adds	r0, #1
 8008f3c:	d0ad      	beq.n	8008e9a <_printf_i+0x162>
 8008f3e:	6823      	ldr	r3, [r4, #0]
 8008f40:	079b      	lsls	r3, r3, #30
 8008f42:	d413      	bmi.n	8008f6c <_printf_i+0x234>
 8008f44:	68e0      	ldr	r0, [r4, #12]
 8008f46:	9b03      	ldr	r3, [sp, #12]
 8008f48:	4298      	cmp	r0, r3
 8008f4a:	bfb8      	it	lt
 8008f4c:	4618      	movlt	r0, r3
 8008f4e:	e7a6      	b.n	8008e9e <_printf_i+0x166>
 8008f50:	2301      	movs	r3, #1
 8008f52:	4632      	mov	r2, r6
 8008f54:	4649      	mov	r1, r9
 8008f56:	4640      	mov	r0, r8
 8008f58:	47d0      	blx	sl
 8008f5a:	3001      	adds	r0, #1
 8008f5c:	d09d      	beq.n	8008e9a <_printf_i+0x162>
 8008f5e:	3501      	adds	r5, #1
 8008f60:	68e3      	ldr	r3, [r4, #12]
 8008f62:	9903      	ldr	r1, [sp, #12]
 8008f64:	1a5b      	subs	r3, r3, r1
 8008f66:	42ab      	cmp	r3, r5
 8008f68:	dcf2      	bgt.n	8008f50 <_printf_i+0x218>
 8008f6a:	e7eb      	b.n	8008f44 <_printf_i+0x20c>
 8008f6c:	2500      	movs	r5, #0
 8008f6e:	f104 0619 	add.w	r6, r4, #25
 8008f72:	e7f5      	b.n	8008f60 <_printf_i+0x228>
 8008f74:	08009a6b 	.word	0x08009a6b
 8008f78:	08009a7c 	.word	0x08009a7c

08008f7c <memmove>:
 8008f7c:	4288      	cmp	r0, r1
 8008f7e:	b510      	push	{r4, lr}
 8008f80:	eb01 0402 	add.w	r4, r1, r2
 8008f84:	d902      	bls.n	8008f8c <memmove+0x10>
 8008f86:	4284      	cmp	r4, r0
 8008f88:	4623      	mov	r3, r4
 8008f8a:	d807      	bhi.n	8008f9c <memmove+0x20>
 8008f8c:	1e43      	subs	r3, r0, #1
 8008f8e:	42a1      	cmp	r1, r4
 8008f90:	d008      	beq.n	8008fa4 <memmove+0x28>
 8008f92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f96:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008f9a:	e7f8      	b.n	8008f8e <memmove+0x12>
 8008f9c:	4601      	mov	r1, r0
 8008f9e:	4402      	add	r2, r0
 8008fa0:	428a      	cmp	r2, r1
 8008fa2:	d100      	bne.n	8008fa6 <memmove+0x2a>
 8008fa4:	bd10      	pop	{r4, pc}
 8008fa6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008faa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008fae:	e7f7      	b.n	8008fa0 <memmove+0x24>

08008fb0 <_sbrk_r>:
 8008fb0:	b538      	push	{r3, r4, r5, lr}
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	4d05      	ldr	r5, [pc, #20]	; (8008fcc <_sbrk_r+0x1c>)
 8008fb6:	4604      	mov	r4, r0
 8008fb8:	4608      	mov	r0, r1
 8008fba:	602b      	str	r3, [r5, #0]
 8008fbc:	f7fb fe64 	bl	8004c88 <_sbrk>
 8008fc0:	1c43      	adds	r3, r0, #1
 8008fc2:	d102      	bne.n	8008fca <_sbrk_r+0x1a>
 8008fc4:	682b      	ldr	r3, [r5, #0]
 8008fc6:	b103      	cbz	r3, 8008fca <_sbrk_r+0x1a>
 8008fc8:	6023      	str	r3, [r4, #0]
 8008fca:	bd38      	pop	{r3, r4, r5, pc}
 8008fcc:	20000728 	.word	0x20000728

08008fd0 <memchr>:
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	b510      	push	{r4, lr}
 8008fd4:	b2c9      	uxtb	r1, r1
 8008fd6:	4402      	add	r2, r0
 8008fd8:	4293      	cmp	r3, r2
 8008fda:	4618      	mov	r0, r3
 8008fdc:	d101      	bne.n	8008fe2 <memchr+0x12>
 8008fde:	2000      	movs	r0, #0
 8008fe0:	e003      	b.n	8008fea <memchr+0x1a>
 8008fe2:	7804      	ldrb	r4, [r0, #0]
 8008fe4:	3301      	adds	r3, #1
 8008fe6:	428c      	cmp	r4, r1
 8008fe8:	d1f6      	bne.n	8008fd8 <memchr+0x8>
 8008fea:	bd10      	pop	{r4, pc}

08008fec <memcpy>:
 8008fec:	440a      	add	r2, r1
 8008fee:	4291      	cmp	r1, r2
 8008ff0:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ff4:	d100      	bne.n	8008ff8 <memcpy+0xc>
 8008ff6:	4770      	bx	lr
 8008ff8:	b510      	push	{r4, lr}
 8008ffa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ffe:	4291      	cmp	r1, r2
 8009000:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009004:	d1f9      	bne.n	8008ffa <memcpy+0xe>
 8009006:	bd10      	pop	{r4, pc}

08009008 <_realloc_r>:
 8009008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800900c:	4680      	mov	r8, r0
 800900e:	4614      	mov	r4, r2
 8009010:	460e      	mov	r6, r1
 8009012:	b921      	cbnz	r1, 800901e <_realloc_r+0x16>
 8009014:	4611      	mov	r1, r2
 8009016:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800901a:	f7ff bc37 	b.w	800888c <_malloc_r>
 800901e:	b92a      	cbnz	r2, 800902c <_realloc_r+0x24>
 8009020:	f7ff fbcc 	bl	80087bc <_free_r>
 8009024:	4625      	mov	r5, r4
 8009026:	4628      	mov	r0, r5
 8009028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800902c:	f000 f81b 	bl	8009066 <_malloc_usable_size_r>
 8009030:	4284      	cmp	r4, r0
 8009032:	4607      	mov	r7, r0
 8009034:	d802      	bhi.n	800903c <_realloc_r+0x34>
 8009036:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800903a:	d812      	bhi.n	8009062 <_realloc_r+0x5a>
 800903c:	4621      	mov	r1, r4
 800903e:	4640      	mov	r0, r8
 8009040:	f7ff fc24 	bl	800888c <_malloc_r>
 8009044:	4605      	mov	r5, r0
 8009046:	2800      	cmp	r0, #0
 8009048:	d0ed      	beq.n	8009026 <_realloc_r+0x1e>
 800904a:	42bc      	cmp	r4, r7
 800904c:	4622      	mov	r2, r4
 800904e:	4631      	mov	r1, r6
 8009050:	bf28      	it	cs
 8009052:	463a      	movcs	r2, r7
 8009054:	f7ff ffca 	bl	8008fec <memcpy>
 8009058:	4631      	mov	r1, r6
 800905a:	4640      	mov	r0, r8
 800905c:	f7ff fbae 	bl	80087bc <_free_r>
 8009060:	e7e1      	b.n	8009026 <_realloc_r+0x1e>
 8009062:	4635      	mov	r5, r6
 8009064:	e7df      	b.n	8009026 <_realloc_r+0x1e>

08009066 <_malloc_usable_size_r>:
 8009066:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800906a:	1f18      	subs	r0, r3, #4
 800906c:	2b00      	cmp	r3, #0
 800906e:	bfbc      	itt	lt
 8009070:	580b      	ldrlt	r3, [r1, r0]
 8009072:	18c0      	addlt	r0, r0, r3
 8009074:	4770      	bx	lr

08009076 <atan2>:
 8009076:	f000 ba8f 	b.w	8009598 <__ieee754_atan2>

0800907a <sqrt>:
 800907a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800907c:	4606      	mov	r6, r0
 800907e:	460f      	mov	r7, r1
 8009080:	f000 f9b0 	bl	80093e4 <__ieee754_sqrt>
 8009084:	4632      	mov	r2, r6
 8009086:	4604      	mov	r4, r0
 8009088:	460d      	mov	r5, r1
 800908a:	463b      	mov	r3, r7
 800908c:	4630      	mov	r0, r6
 800908e:	4639      	mov	r1, r7
 8009090:	f7f7 fcbc 	bl	8000a0c <__aeabi_dcmpun>
 8009094:	b990      	cbnz	r0, 80090bc <sqrt+0x42>
 8009096:	2200      	movs	r2, #0
 8009098:	2300      	movs	r3, #0
 800909a:	4630      	mov	r0, r6
 800909c:	4639      	mov	r1, r7
 800909e:	f7f7 fc8d 	bl	80009bc <__aeabi_dcmplt>
 80090a2:	b158      	cbz	r0, 80090bc <sqrt+0x42>
 80090a4:	f7ff fb5e 	bl	8008764 <__errno>
 80090a8:	2321      	movs	r3, #33	; 0x21
 80090aa:	2200      	movs	r2, #0
 80090ac:	6003      	str	r3, [r0, #0]
 80090ae:	2300      	movs	r3, #0
 80090b0:	4610      	mov	r0, r2
 80090b2:	4619      	mov	r1, r3
 80090b4:	f7f7 fb3a 	bl	800072c <__aeabi_ddiv>
 80090b8:	4604      	mov	r4, r0
 80090ba:	460d      	mov	r5, r1
 80090bc:	4620      	mov	r0, r4
 80090be:	4629      	mov	r1, r5
 80090c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090c2:	0000      	movs	r0, r0
 80090c4:	0000      	movs	r0, r0
	...

080090c8 <atan>:
 80090c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090cc:	4bb6      	ldr	r3, [pc, #728]	; (80093a8 <atan+0x2e0>)
 80090ce:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80090d2:	429e      	cmp	r6, r3
 80090d4:	4604      	mov	r4, r0
 80090d6:	460d      	mov	r5, r1
 80090d8:	468b      	mov	fp, r1
 80090da:	dd17      	ble.n	800910c <atan+0x44>
 80090dc:	4bb3      	ldr	r3, [pc, #716]	; (80093ac <atan+0x2e4>)
 80090de:	429e      	cmp	r6, r3
 80090e0:	dc01      	bgt.n	80090e6 <atan+0x1e>
 80090e2:	d109      	bne.n	80090f8 <atan+0x30>
 80090e4:	b140      	cbz	r0, 80090f8 <atan+0x30>
 80090e6:	4622      	mov	r2, r4
 80090e8:	462b      	mov	r3, r5
 80090ea:	4620      	mov	r0, r4
 80090ec:	4629      	mov	r1, r5
 80090ee:	f7f7 f83d 	bl	800016c <__adddf3>
 80090f2:	4604      	mov	r4, r0
 80090f4:	460d      	mov	r5, r1
 80090f6:	e005      	b.n	8009104 <atan+0x3c>
 80090f8:	f1bb 0f00 	cmp.w	fp, #0
 80090fc:	4cac      	ldr	r4, [pc, #688]	; (80093b0 <atan+0x2e8>)
 80090fe:	f300 8121 	bgt.w	8009344 <atan+0x27c>
 8009102:	4dac      	ldr	r5, [pc, #688]	; (80093b4 <atan+0x2ec>)
 8009104:	4620      	mov	r0, r4
 8009106:	4629      	mov	r1, r5
 8009108:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800910c:	4baa      	ldr	r3, [pc, #680]	; (80093b8 <atan+0x2f0>)
 800910e:	429e      	cmp	r6, r3
 8009110:	dc11      	bgt.n	8009136 <atan+0x6e>
 8009112:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8009116:	429e      	cmp	r6, r3
 8009118:	dc0a      	bgt.n	8009130 <atan+0x68>
 800911a:	a38b      	add	r3, pc, #556	; (adr r3, 8009348 <atan+0x280>)
 800911c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009120:	f7f7 f824 	bl	800016c <__adddf3>
 8009124:	2200      	movs	r2, #0
 8009126:	4ba5      	ldr	r3, [pc, #660]	; (80093bc <atan+0x2f4>)
 8009128:	f7f7 fc66 	bl	80009f8 <__aeabi_dcmpgt>
 800912c:	2800      	cmp	r0, #0
 800912e:	d1e9      	bne.n	8009104 <atan+0x3c>
 8009130:	f04f 3aff 	mov.w	sl, #4294967295
 8009134:	e027      	b.n	8009186 <atan+0xbe>
 8009136:	f000 f951 	bl	80093dc <fabs>
 800913a:	4ba1      	ldr	r3, [pc, #644]	; (80093c0 <atan+0x2f8>)
 800913c:	4604      	mov	r4, r0
 800913e:	429e      	cmp	r6, r3
 8009140:	460d      	mov	r5, r1
 8009142:	f300 80b8 	bgt.w	80092b6 <atan+0x1ee>
 8009146:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800914a:	429e      	cmp	r6, r3
 800914c:	f300 809c 	bgt.w	8009288 <atan+0x1c0>
 8009150:	4602      	mov	r2, r0
 8009152:	460b      	mov	r3, r1
 8009154:	f7f7 f80a 	bl	800016c <__adddf3>
 8009158:	2200      	movs	r2, #0
 800915a:	4b98      	ldr	r3, [pc, #608]	; (80093bc <atan+0x2f4>)
 800915c:	f7f7 f804 	bl	8000168 <__aeabi_dsub>
 8009160:	2200      	movs	r2, #0
 8009162:	4606      	mov	r6, r0
 8009164:	460f      	mov	r7, r1
 8009166:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800916a:	4620      	mov	r0, r4
 800916c:	4629      	mov	r1, r5
 800916e:	f7f6 fffd 	bl	800016c <__adddf3>
 8009172:	4602      	mov	r2, r0
 8009174:	460b      	mov	r3, r1
 8009176:	4630      	mov	r0, r6
 8009178:	4639      	mov	r1, r7
 800917a:	f7f7 fad7 	bl	800072c <__aeabi_ddiv>
 800917e:	f04f 0a00 	mov.w	sl, #0
 8009182:	4604      	mov	r4, r0
 8009184:	460d      	mov	r5, r1
 8009186:	4622      	mov	r2, r4
 8009188:	462b      	mov	r3, r5
 800918a:	4620      	mov	r0, r4
 800918c:	4629      	mov	r1, r5
 800918e:	f7f7 f9a3 	bl	80004d8 <__aeabi_dmul>
 8009192:	4602      	mov	r2, r0
 8009194:	460b      	mov	r3, r1
 8009196:	4680      	mov	r8, r0
 8009198:	4689      	mov	r9, r1
 800919a:	f7f7 f99d 	bl	80004d8 <__aeabi_dmul>
 800919e:	a36c      	add	r3, pc, #432	; (adr r3, 8009350 <atan+0x288>)
 80091a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091a4:	4606      	mov	r6, r0
 80091a6:	460f      	mov	r7, r1
 80091a8:	f7f7 f996 	bl	80004d8 <__aeabi_dmul>
 80091ac:	a36a      	add	r3, pc, #424	; (adr r3, 8009358 <atan+0x290>)
 80091ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091b2:	f7f6 ffdb 	bl	800016c <__adddf3>
 80091b6:	4632      	mov	r2, r6
 80091b8:	463b      	mov	r3, r7
 80091ba:	f7f7 f98d 	bl	80004d8 <__aeabi_dmul>
 80091be:	a368      	add	r3, pc, #416	; (adr r3, 8009360 <atan+0x298>)
 80091c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c4:	f7f6 ffd2 	bl	800016c <__adddf3>
 80091c8:	4632      	mov	r2, r6
 80091ca:	463b      	mov	r3, r7
 80091cc:	f7f7 f984 	bl	80004d8 <__aeabi_dmul>
 80091d0:	a365      	add	r3, pc, #404	; (adr r3, 8009368 <atan+0x2a0>)
 80091d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091d6:	f7f6 ffc9 	bl	800016c <__adddf3>
 80091da:	4632      	mov	r2, r6
 80091dc:	463b      	mov	r3, r7
 80091de:	f7f7 f97b 	bl	80004d8 <__aeabi_dmul>
 80091e2:	a363      	add	r3, pc, #396	; (adr r3, 8009370 <atan+0x2a8>)
 80091e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091e8:	f7f6 ffc0 	bl	800016c <__adddf3>
 80091ec:	4632      	mov	r2, r6
 80091ee:	463b      	mov	r3, r7
 80091f0:	f7f7 f972 	bl	80004d8 <__aeabi_dmul>
 80091f4:	a360      	add	r3, pc, #384	; (adr r3, 8009378 <atan+0x2b0>)
 80091f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091fa:	f7f6 ffb7 	bl	800016c <__adddf3>
 80091fe:	4642      	mov	r2, r8
 8009200:	464b      	mov	r3, r9
 8009202:	f7f7 f969 	bl	80004d8 <__aeabi_dmul>
 8009206:	a35e      	add	r3, pc, #376	; (adr r3, 8009380 <atan+0x2b8>)
 8009208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800920c:	4680      	mov	r8, r0
 800920e:	4689      	mov	r9, r1
 8009210:	4630      	mov	r0, r6
 8009212:	4639      	mov	r1, r7
 8009214:	f7f7 f960 	bl	80004d8 <__aeabi_dmul>
 8009218:	a35b      	add	r3, pc, #364	; (adr r3, 8009388 <atan+0x2c0>)
 800921a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800921e:	f7f6 ffa3 	bl	8000168 <__aeabi_dsub>
 8009222:	4632      	mov	r2, r6
 8009224:	463b      	mov	r3, r7
 8009226:	f7f7 f957 	bl	80004d8 <__aeabi_dmul>
 800922a:	a359      	add	r3, pc, #356	; (adr r3, 8009390 <atan+0x2c8>)
 800922c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009230:	f7f6 ff9a 	bl	8000168 <__aeabi_dsub>
 8009234:	4632      	mov	r2, r6
 8009236:	463b      	mov	r3, r7
 8009238:	f7f7 f94e 	bl	80004d8 <__aeabi_dmul>
 800923c:	a356      	add	r3, pc, #344	; (adr r3, 8009398 <atan+0x2d0>)
 800923e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009242:	f7f6 ff91 	bl	8000168 <__aeabi_dsub>
 8009246:	4632      	mov	r2, r6
 8009248:	463b      	mov	r3, r7
 800924a:	f7f7 f945 	bl	80004d8 <__aeabi_dmul>
 800924e:	a354      	add	r3, pc, #336	; (adr r3, 80093a0 <atan+0x2d8>)
 8009250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009254:	f7f6 ff88 	bl	8000168 <__aeabi_dsub>
 8009258:	4632      	mov	r2, r6
 800925a:	463b      	mov	r3, r7
 800925c:	f7f7 f93c 	bl	80004d8 <__aeabi_dmul>
 8009260:	4602      	mov	r2, r0
 8009262:	460b      	mov	r3, r1
 8009264:	4640      	mov	r0, r8
 8009266:	4649      	mov	r1, r9
 8009268:	f7f6 ff80 	bl	800016c <__adddf3>
 800926c:	4622      	mov	r2, r4
 800926e:	462b      	mov	r3, r5
 8009270:	f7f7 f932 	bl	80004d8 <__aeabi_dmul>
 8009274:	f1ba 3fff 	cmp.w	sl, #4294967295
 8009278:	4602      	mov	r2, r0
 800927a:	460b      	mov	r3, r1
 800927c:	d144      	bne.n	8009308 <atan+0x240>
 800927e:	4620      	mov	r0, r4
 8009280:	4629      	mov	r1, r5
 8009282:	f7f6 ff71 	bl	8000168 <__aeabi_dsub>
 8009286:	e734      	b.n	80090f2 <atan+0x2a>
 8009288:	2200      	movs	r2, #0
 800928a:	4b4c      	ldr	r3, [pc, #304]	; (80093bc <atan+0x2f4>)
 800928c:	f7f6 ff6c 	bl	8000168 <__aeabi_dsub>
 8009290:	2200      	movs	r2, #0
 8009292:	4606      	mov	r6, r0
 8009294:	460f      	mov	r7, r1
 8009296:	4620      	mov	r0, r4
 8009298:	4629      	mov	r1, r5
 800929a:	4b48      	ldr	r3, [pc, #288]	; (80093bc <atan+0x2f4>)
 800929c:	f7f6 ff66 	bl	800016c <__adddf3>
 80092a0:	4602      	mov	r2, r0
 80092a2:	460b      	mov	r3, r1
 80092a4:	4630      	mov	r0, r6
 80092a6:	4639      	mov	r1, r7
 80092a8:	f7f7 fa40 	bl	800072c <__aeabi_ddiv>
 80092ac:	f04f 0a01 	mov.w	sl, #1
 80092b0:	4604      	mov	r4, r0
 80092b2:	460d      	mov	r5, r1
 80092b4:	e767      	b.n	8009186 <atan+0xbe>
 80092b6:	4b43      	ldr	r3, [pc, #268]	; (80093c4 <atan+0x2fc>)
 80092b8:	429e      	cmp	r6, r3
 80092ba:	da1a      	bge.n	80092f2 <atan+0x22a>
 80092bc:	2200      	movs	r2, #0
 80092be:	4b42      	ldr	r3, [pc, #264]	; (80093c8 <atan+0x300>)
 80092c0:	f7f6 ff52 	bl	8000168 <__aeabi_dsub>
 80092c4:	2200      	movs	r2, #0
 80092c6:	4606      	mov	r6, r0
 80092c8:	460f      	mov	r7, r1
 80092ca:	4620      	mov	r0, r4
 80092cc:	4629      	mov	r1, r5
 80092ce:	4b3e      	ldr	r3, [pc, #248]	; (80093c8 <atan+0x300>)
 80092d0:	f7f7 f902 	bl	80004d8 <__aeabi_dmul>
 80092d4:	2200      	movs	r2, #0
 80092d6:	4b39      	ldr	r3, [pc, #228]	; (80093bc <atan+0x2f4>)
 80092d8:	f7f6 ff48 	bl	800016c <__adddf3>
 80092dc:	4602      	mov	r2, r0
 80092de:	460b      	mov	r3, r1
 80092e0:	4630      	mov	r0, r6
 80092e2:	4639      	mov	r1, r7
 80092e4:	f7f7 fa22 	bl	800072c <__aeabi_ddiv>
 80092e8:	f04f 0a02 	mov.w	sl, #2
 80092ec:	4604      	mov	r4, r0
 80092ee:	460d      	mov	r5, r1
 80092f0:	e749      	b.n	8009186 <atan+0xbe>
 80092f2:	4602      	mov	r2, r0
 80092f4:	460b      	mov	r3, r1
 80092f6:	2000      	movs	r0, #0
 80092f8:	4934      	ldr	r1, [pc, #208]	; (80093cc <atan+0x304>)
 80092fa:	f7f7 fa17 	bl	800072c <__aeabi_ddiv>
 80092fe:	f04f 0a03 	mov.w	sl, #3
 8009302:	4604      	mov	r4, r0
 8009304:	460d      	mov	r5, r1
 8009306:	e73e      	b.n	8009186 <atan+0xbe>
 8009308:	4b31      	ldr	r3, [pc, #196]	; (80093d0 <atan+0x308>)
 800930a:	4e32      	ldr	r6, [pc, #200]	; (80093d4 <atan+0x30c>)
 800930c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009314:	f7f6 ff28 	bl	8000168 <__aeabi_dsub>
 8009318:	4622      	mov	r2, r4
 800931a:	462b      	mov	r3, r5
 800931c:	f7f6 ff24 	bl	8000168 <__aeabi_dsub>
 8009320:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8009324:	4602      	mov	r2, r0
 8009326:	460b      	mov	r3, r1
 8009328:	e9d6 0100 	ldrd	r0, r1, [r6]
 800932c:	f7f6 ff1c 	bl	8000168 <__aeabi_dsub>
 8009330:	f1bb 0f00 	cmp.w	fp, #0
 8009334:	4604      	mov	r4, r0
 8009336:	460d      	mov	r5, r1
 8009338:	f6bf aee4 	bge.w	8009104 <atan+0x3c>
 800933c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009340:	461d      	mov	r5, r3
 8009342:	e6df      	b.n	8009104 <atan+0x3c>
 8009344:	4d24      	ldr	r5, [pc, #144]	; (80093d8 <atan+0x310>)
 8009346:	e6dd      	b.n	8009104 <atan+0x3c>
 8009348:	8800759c 	.word	0x8800759c
 800934c:	7e37e43c 	.word	0x7e37e43c
 8009350:	e322da11 	.word	0xe322da11
 8009354:	3f90ad3a 	.word	0x3f90ad3a
 8009358:	24760deb 	.word	0x24760deb
 800935c:	3fa97b4b 	.word	0x3fa97b4b
 8009360:	a0d03d51 	.word	0xa0d03d51
 8009364:	3fb10d66 	.word	0x3fb10d66
 8009368:	c54c206e 	.word	0xc54c206e
 800936c:	3fb745cd 	.word	0x3fb745cd
 8009370:	920083ff 	.word	0x920083ff
 8009374:	3fc24924 	.word	0x3fc24924
 8009378:	5555550d 	.word	0x5555550d
 800937c:	3fd55555 	.word	0x3fd55555
 8009380:	2c6a6c2f 	.word	0x2c6a6c2f
 8009384:	bfa2b444 	.word	0xbfa2b444
 8009388:	52defd9a 	.word	0x52defd9a
 800938c:	3fadde2d 	.word	0x3fadde2d
 8009390:	af749a6d 	.word	0xaf749a6d
 8009394:	3fb3b0f2 	.word	0x3fb3b0f2
 8009398:	fe231671 	.word	0xfe231671
 800939c:	3fbc71c6 	.word	0x3fbc71c6
 80093a0:	9998ebc4 	.word	0x9998ebc4
 80093a4:	3fc99999 	.word	0x3fc99999
 80093a8:	440fffff 	.word	0x440fffff
 80093ac:	7ff00000 	.word	0x7ff00000
 80093b0:	54442d18 	.word	0x54442d18
 80093b4:	bff921fb 	.word	0xbff921fb
 80093b8:	3fdbffff 	.word	0x3fdbffff
 80093bc:	3ff00000 	.word	0x3ff00000
 80093c0:	3ff2ffff 	.word	0x3ff2ffff
 80093c4:	40038000 	.word	0x40038000
 80093c8:	3ff80000 	.word	0x3ff80000
 80093cc:	bff00000 	.word	0xbff00000
 80093d0:	08009ab0 	.word	0x08009ab0
 80093d4:	08009a90 	.word	0x08009a90
 80093d8:	3ff921fb 	.word	0x3ff921fb

080093dc <fabs>:
 80093dc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80093e0:	4619      	mov	r1, r3
 80093e2:	4770      	bx	lr

080093e4 <__ieee754_sqrt>:
 80093e4:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8009588 <__ieee754_sqrt+0x1a4>
 80093e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093ec:	ea3c 0c01 	bics.w	ip, ip, r1
 80093f0:	460b      	mov	r3, r1
 80093f2:	4606      	mov	r6, r0
 80093f4:	460d      	mov	r5, r1
 80093f6:	460a      	mov	r2, r1
 80093f8:	4604      	mov	r4, r0
 80093fa:	d10e      	bne.n	800941a <__ieee754_sqrt+0x36>
 80093fc:	4602      	mov	r2, r0
 80093fe:	f7f7 f86b 	bl	80004d8 <__aeabi_dmul>
 8009402:	4602      	mov	r2, r0
 8009404:	460b      	mov	r3, r1
 8009406:	4630      	mov	r0, r6
 8009408:	4629      	mov	r1, r5
 800940a:	f7f6 feaf 	bl	800016c <__adddf3>
 800940e:	4606      	mov	r6, r0
 8009410:	460d      	mov	r5, r1
 8009412:	4630      	mov	r0, r6
 8009414:	4629      	mov	r1, r5
 8009416:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800941a:	2900      	cmp	r1, #0
 800941c:	dc0d      	bgt.n	800943a <__ieee754_sqrt+0x56>
 800941e:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8009422:	ea5c 0c00 	orrs.w	ip, ip, r0
 8009426:	d0f4      	beq.n	8009412 <__ieee754_sqrt+0x2e>
 8009428:	b139      	cbz	r1, 800943a <__ieee754_sqrt+0x56>
 800942a:	4602      	mov	r2, r0
 800942c:	f7f6 fe9c 	bl	8000168 <__aeabi_dsub>
 8009430:	4602      	mov	r2, r0
 8009432:	460b      	mov	r3, r1
 8009434:	f7f7 f97a 	bl	800072c <__aeabi_ddiv>
 8009438:	e7e9      	b.n	800940e <__ieee754_sqrt+0x2a>
 800943a:	1512      	asrs	r2, r2, #20
 800943c:	f000 8089 	beq.w	8009552 <__ieee754_sqrt+0x16e>
 8009440:	2500      	movs	r5, #0
 8009442:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009446:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800944a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800944e:	07d2      	lsls	r2, r2, #31
 8009450:	bf5c      	itt	pl
 8009452:	005b      	lslpl	r3, r3, #1
 8009454:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8009458:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800945c:	bf58      	it	pl
 800945e:	0064      	lslpl	r4, r4, #1
 8009460:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8009464:	0062      	lsls	r2, r4, #1
 8009466:	2016      	movs	r0, #22
 8009468:	4629      	mov	r1, r5
 800946a:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 800946e:	1076      	asrs	r6, r6, #1
 8009470:	190f      	adds	r7, r1, r4
 8009472:	429f      	cmp	r7, r3
 8009474:	bfde      	ittt	le
 8009476:	1bdb      	suble	r3, r3, r7
 8009478:	1939      	addle	r1, r7, r4
 800947a:	192d      	addle	r5, r5, r4
 800947c:	005b      	lsls	r3, r3, #1
 800947e:	3801      	subs	r0, #1
 8009480:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009484:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8009488:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800948c:	d1f0      	bne.n	8009470 <__ieee754_sqrt+0x8c>
 800948e:	4604      	mov	r4, r0
 8009490:	2720      	movs	r7, #32
 8009492:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8009496:	428b      	cmp	r3, r1
 8009498:	eb0c 0e00 	add.w	lr, ip, r0
 800949c:	dc02      	bgt.n	80094a4 <__ieee754_sqrt+0xc0>
 800949e:	d113      	bne.n	80094c8 <__ieee754_sqrt+0xe4>
 80094a0:	4596      	cmp	lr, r2
 80094a2:	d811      	bhi.n	80094c8 <__ieee754_sqrt+0xe4>
 80094a4:	f1be 0f00 	cmp.w	lr, #0
 80094a8:	eb0e 000c 	add.w	r0, lr, ip
 80094ac:	da56      	bge.n	800955c <__ieee754_sqrt+0x178>
 80094ae:	2800      	cmp	r0, #0
 80094b0:	db54      	blt.n	800955c <__ieee754_sqrt+0x178>
 80094b2:	f101 0801 	add.w	r8, r1, #1
 80094b6:	1a5b      	subs	r3, r3, r1
 80094b8:	4641      	mov	r1, r8
 80094ba:	4596      	cmp	lr, r2
 80094bc:	bf88      	it	hi
 80094be:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80094c2:	eba2 020e 	sub.w	r2, r2, lr
 80094c6:	4464      	add	r4, ip
 80094c8:	005b      	lsls	r3, r3, #1
 80094ca:	3f01      	subs	r7, #1
 80094cc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80094d0:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80094d4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80094d8:	d1dd      	bne.n	8009496 <__ieee754_sqrt+0xb2>
 80094da:	4313      	orrs	r3, r2
 80094dc:	d01b      	beq.n	8009516 <__ieee754_sqrt+0x132>
 80094de:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800958c <__ieee754_sqrt+0x1a8>
 80094e2:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8009590 <__ieee754_sqrt+0x1ac>
 80094e6:	e9da 0100 	ldrd	r0, r1, [sl]
 80094ea:	e9db 2300 	ldrd	r2, r3, [fp]
 80094ee:	f7f6 fe3b 	bl	8000168 <__aeabi_dsub>
 80094f2:	e9da 8900 	ldrd	r8, r9, [sl]
 80094f6:	4602      	mov	r2, r0
 80094f8:	460b      	mov	r3, r1
 80094fa:	4640      	mov	r0, r8
 80094fc:	4649      	mov	r1, r9
 80094fe:	f7f7 fa67 	bl	80009d0 <__aeabi_dcmple>
 8009502:	b140      	cbz	r0, 8009516 <__ieee754_sqrt+0x132>
 8009504:	e9da 0100 	ldrd	r0, r1, [sl]
 8009508:	e9db 2300 	ldrd	r2, r3, [fp]
 800950c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8009510:	d126      	bne.n	8009560 <__ieee754_sqrt+0x17c>
 8009512:	463c      	mov	r4, r7
 8009514:	3501      	adds	r5, #1
 8009516:	106b      	asrs	r3, r5, #1
 8009518:	0864      	lsrs	r4, r4, #1
 800951a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800951e:	07ea      	lsls	r2, r5, #31
 8009520:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009524:	bf48      	it	mi
 8009526:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 800952a:	4620      	mov	r0, r4
 800952c:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8009530:	e76d      	b.n	800940e <__ieee754_sqrt+0x2a>
 8009532:	0ae3      	lsrs	r3, r4, #11
 8009534:	3915      	subs	r1, #21
 8009536:	0564      	lsls	r4, r4, #21
 8009538:	2b00      	cmp	r3, #0
 800953a:	d0fa      	beq.n	8009532 <__ieee754_sqrt+0x14e>
 800953c:	02d8      	lsls	r0, r3, #11
 800953e:	d50a      	bpl.n	8009556 <__ieee754_sqrt+0x172>
 8009540:	f1c2 0020 	rsb	r0, r2, #32
 8009544:	fa24 f000 	lsr.w	r0, r4, r0
 8009548:	1e55      	subs	r5, r2, #1
 800954a:	4094      	lsls	r4, r2
 800954c:	4303      	orrs	r3, r0
 800954e:	1b4a      	subs	r2, r1, r5
 8009550:	e776      	b.n	8009440 <__ieee754_sqrt+0x5c>
 8009552:	4611      	mov	r1, r2
 8009554:	e7f0      	b.n	8009538 <__ieee754_sqrt+0x154>
 8009556:	005b      	lsls	r3, r3, #1
 8009558:	3201      	adds	r2, #1
 800955a:	e7ef      	b.n	800953c <__ieee754_sqrt+0x158>
 800955c:	4688      	mov	r8, r1
 800955e:	e7aa      	b.n	80094b6 <__ieee754_sqrt+0xd2>
 8009560:	f7f6 fe04 	bl	800016c <__adddf3>
 8009564:	e9da 8900 	ldrd	r8, r9, [sl]
 8009568:	4602      	mov	r2, r0
 800956a:	460b      	mov	r3, r1
 800956c:	4640      	mov	r0, r8
 800956e:	4649      	mov	r1, r9
 8009570:	f7f7 fa24 	bl	80009bc <__aeabi_dcmplt>
 8009574:	b120      	cbz	r0, 8009580 <__ieee754_sqrt+0x19c>
 8009576:	1ca1      	adds	r1, r4, #2
 8009578:	bf08      	it	eq
 800957a:	3501      	addeq	r5, #1
 800957c:	3402      	adds	r4, #2
 800957e:	e7ca      	b.n	8009516 <__ieee754_sqrt+0x132>
 8009580:	3401      	adds	r4, #1
 8009582:	f024 0401 	bic.w	r4, r4, #1
 8009586:	e7c6      	b.n	8009516 <__ieee754_sqrt+0x132>
 8009588:	7ff00000 	.word	0x7ff00000
 800958c:	20000108 	.word	0x20000108
 8009590:	20000110 	.word	0x20000110
 8009594:	00000000 	.word	0x00000000

08009598 <__ieee754_atan2>:
 8009598:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800959c:	4617      	mov	r7, r2
 800959e:	4692      	mov	sl, r2
 80095a0:	4699      	mov	r9, r3
 80095a2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80095a6:	427b      	negs	r3, r7
 80095a8:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8009728 <__ieee754_atan2+0x190>
 80095ac:	433b      	orrs	r3, r7
 80095ae:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80095b2:	4543      	cmp	r3, r8
 80095b4:	4604      	mov	r4, r0
 80095b6:	460d      	mov	r5, r1
 80095b8:	d809      	bhi.n	80095ce <__ieee754_atan2+0x36>
 80095ba:	4246      	negs	r6, r0
 80095bc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80095c0:	4306      	orrs	r6, r0
 80095c2:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 80095c6:	4546      	cmp	r6, r8
 80095c8:	468e      	mov	lr, r1
 80095ca:	4683      	mov	fp, r0
 80095cc:	d908      	bls.n	80095e0 <__ieee754_atan2+0x48>
 80095ce:	4652      	mov	r2, sl
 80095d0:	464b      	mov	r3, r9
 80095d2:	4620      	mov	r0, r4
 80095d4:	4629      	mov	r1, r5
 80095d6:	f7f6 fdc9 	bl	800016c <__adddf3>
 80095da:	4604      	mov	r4, r0
 80095dc:	460d      	mov	r5, r1
 80095de:	e019      	b.n	8009614 <__ieee754_atan2+0x7c>
 80095e0:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 80095e4:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 80095e8:	433e      	orrs	r6, r7
 80095ea:	d103      	bne.n	80095f4 <__ieee754_atan2+0x5c>
 80095ec:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095f0:	f7ff bd6a 	b.w	80090c8 <atan>
 80095f4:	ea4f 76a9 	mov.w	r6, r9, asr #30
 80095f8:	f006 0602 	and.w	r6, r6, #2
 80095fc:	ea53 0b0b 	orrs.w	fp, r3, fp
 8009600:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8009604:	d10a      	bne.n	800961c <__ieee754_atan2+0x84>
 8009606:	2e02      	cmp	r6, #2
 8009608:	d067      	beq.n	80096da <__ieee754_atan2+0x142>
 800960a:	2e03      	cmp	r6, #3
 800960c:	d102      	bne.n	8009614 <__ieee754_atan2+0x7c>
 800960e:	a53a      	add	r5, pc, #232	; (adr r5, 80096f8 <__ieee754_atan2+0x160>)
 8009610:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009614:	4620      	mov	r0, r4
 8009616:	4629      	mov	r1, r5
 8009618:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800961c:	4317      	orrs	r7, r2
 800961e:	d106      	bne.n	800962e <__ieee754_atan2+0x96>
 8009620:	f1be 0f00 	cmp.w	lr, #0
 8009624:	da64      	bge.n	80096f0 <__ieee754_atan2+0x158>
 8009626:	a536      	add	r5, pc, #216	; (adr r5, 8009700 <__ieee754_atan2+0x168>)
 8009628:	e9d5 4500 	ldrd	r4, r5, [r5]
 800962c:	e7f2      	b.n	8009614 <__ieee754_atan2+0x7c>
 800962e:	4542      	cmp	r2, r8
 8009630:	d10f      	bne.n	8009652 <__ieee754_atan2+0xba>
 8009632:	4293      	cmp	r3, r2
 8009634:	f106 36ff 	add.w	r6, r6, #4294967295
 8009638:	d107      	bne.n	800964a <__ieee754_atan2+0xb2>
 800963a:	2e02      	cmp	r6, #2
 800963c:	d851      	bhi.n	80096e2 <__ieee754_atan2+0x14a>
 800963e:	4b3b      	ldr	r3, [pc, #236]	; (800972c <__ieee754_atan2+0x194>)
 8009640:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009644:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009648:	e7e4      	b.n	8009614 <__ieee754_atan2+0x7c>
 800964a:	2e02      	cmp	r6, #2
 800964c:	d84d      	bhi.n	80096ea <__ieee754_atan2+0x152>
 800964e:	4b38      	ldr	r3, [pc, #224]	; (8009730 <__ieee754_atan2+0x198>)
 8009650:	e7f6      	b.n	8009640 <__ieee754_atan2+0xa8>
 8009652:	4543      	cmp	r3, r8
 8009654:	d0e4      	beq.n	8009620 <__ieee754_atan2+0x88>
 8009656:	1a9b      	subs	r3, r3, r2
 8009658:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800965c:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009660:	da21      	bge.n	80096a6 <__ieee754_atan2+0x10e>
 8009662:	f1b9 0f00 	cmp.w	r9, #0
 8009666:	da01      	bge.n	800966c <__ieee754_atan2+0xd4>
 8009668:	323c      	adds	r2, #60	; 0x3c
 800966a:	db20      	blt.n	80096ae <__ieee754_atan2+0x116>
 800966c:	4652      	mov	r2, sl
 800966e:	464b      	mov	r3, r9
 8009670:	4620      	mov	r0, r4
 8009672:	4629      	mov	r1, r5
 8009674:	f7f7 f85a 	bl	800072c <__aeabi_ddiv>
 8009678:	f7ff feb0 	bl	80093dc <fabs>
 800967c:	f7ff fd24 	bl	80090c8 <atan>
 8009680:	4604      	mov	r4, r0
 8009682:	460d      	mov	r5, r1
 8009684:	2e01      	cmp	r6, #1
 8009686:	d015      	beq.n	80096b4 <__ieee754_atan2+0x11c>
 8009688:	2e02      	cmp	r6, #2
 800968a:	d017      	beq.n	80096bc <__ieee754_atan2+0x124>
 800968c:	2e00      	cmp	r6, #0
 800968e:	d0c1      	beq.n	8009614 <__ieee754_atan2+0x7c>
 8009690:	a31d      	add	r3, pc, #116	; (adr r3, 8009708 <__ieee754_atan2+0x170>)
 8009692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009696:	4620      	mov	r0, r4
 8009698:	4629      	mov	r1, r5
 800969a:	f7f6 fd65 	bl	8000168 <__aeabi_dsub>
 800969e:	a31c      	add	r3, pc, #112	; (adr r3, 8009710 <__ieee754_atan2+0x178>)
 80096a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096a4:	e016      	b.n	80096d4 <__ieee754_atan2+0x13c>
 80096a6:	a51c      	add	r5, pc, #112	; (adr r5, 8009718 <__ieee754_atan2+0x180>)
 80096a8:	e9d5 4500 	ldrd	r4, r5, [r5]
 80096ac:	e7ea      	b.n	8009684 <__ieee754_atan2+0xec>
 80096ae:	2400      	movs	r4, #0
 80096b0:	2500      	movs	r5, #0
 80096b2:	e7e7      	b.n	8009684 <__ieee754_atan2+0xec>
 80096b4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80096b8:	461d      	mov	r5, r3
 80096ba:	e7ab      	b.n	8009614 <__ieee754_atan2+0x7c>
 80096bc:	a312      	add	r3, pc, #72	; (adr r3, 8009708 <__ieee754_atan2+0x170>)
 80096be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c2:	4620      	mov	r0, r4
 80096c4:	4629      	mov	r1, r5
 80096c6:	f7f6 fd4f 	bl	8000168 <__aeabi_dsub>
 80096ca:	4602      	mov	r2, r0
 80096cc:	460b      	mov	r3, r1
 80096ce:	a110      	add	r1, pc, #64	; (adr r1, 8009710 <__ieee754_atan2+0x178>)
 80096d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096d4:	f7f6 fd48 	bl	8000168 <__aeabi_dsub>
 80096d8:	e77f      	b.n	80095da <__ieee754_atan2+0x42>
 80096da:	a50d      	add	r5, pc, #52	; (adr r5, 8009710 <__ieee754_atan2+0x178>)
 80096dc:	e9d5 4500 	ldrd	r4, r5, [r5]
 80096e0:	e798      	b.n	8009614 <__ieee754_atan2+0x7c>
 80096e2:	a50f      	add	r5, pc, #60	; (adr r5, 8009720 <__ieee754_atan2+0x188>)
 80096e4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80096e8:	e794      	b.n	8009614 <__ieee754_atan2+0x7c>
 80096ea:	2400      	movs	r4, #0
 80096ec:	2500      	movs	r5, #0
 80096ee:	e791      	b.n	8009614 <__ieee754_atan2+0x7c>
 80096f0:	a509      	add	r5, pc, #36	; (adr r5, 8009718 <__ieee754_atan2+0x180>)
 80096f2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80096f6:	e78d      	b.n	8009614 <__ieee754_atan2+0x7c>
 80096f8:	54442d18 	.word	0x54442d18
 80096fc:	c00921fb 	.word	0xc00921fb
 8009700:	54442d18 	.word	0x54442d18
 8009704:	bff921fb 	.word	0xbff921fb
 8009708:	33145c07 	.word	0x33145c07
 800970c:	3ca1a626 	.word	0x3ca1a626
 8009710:	54442d18 	.word	0x54442d18
 8009714:	400921fb 	.word	0x400921fb
 8009718:	54442d18 	.word	0x54442d18
 800971c:	3ff921fb 	.word	0x3ff921fb
 8009720:	54442d18 	.word	0x54442d18
 8009724:	3fe921fb 	.word	0x3fe921fb
 8009728:	7ff00000 	.word	0x7ff00000
 800972c:	08009ad0 	.word	0x08009ad0
 8009730:	08009ae8 	.word	0x08009ae8

08009734 <_init>:
 8009734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009736:	bf00      	nop
 8009738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800973a:	bc08      	pop	{r3}
 800973c:	469e      	mov	lr, r3
 800973e:	4770      	bx	lr

08009740 <_fini>:
 8009740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009742:	bf00      	nop
 8009744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009746:	bc08      	pop	{r3}
 8009748:	469e      	mov	lr, r3
 800974a:	4770      	bx	lr
